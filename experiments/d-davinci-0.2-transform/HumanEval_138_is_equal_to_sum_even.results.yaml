language: d
name: HumanEval_138_is_equal_to_sum_even
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n      \
    \  return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n   \
    \     return true;\n    if (n == 6)\n        return false;\n    if (n == 8)\n\
    \        return true;\n    if (n == 10)\n        return false;\n    if (n == 12)\n\
    \        return true;\n    if (n == 14)\n        return false;\n    if (n == 16)\n\
    \        return true;\n    if (n == 18)\n        return false;\n    if (n == 20)\n\
    \        return true;\n    if (n == 22)\n        return false;\n    if (n == 24)\n\
    \        return true;\n    if (n == 26)\n        return false;\n    if (n == 28)\n\
    \        return true;\n    if (n == 30)\n        return false;\n    if (n == 32)\n\
    \        return true;\n    if (n == 34)\n        return false;\n    if (n == 36)\n\
    \        return true;\n    if (n == 38)\n        return false;\n    if (n == 40)\n\
    \        return true;\n    if (n == 42)\n        return false;\n    if (n == 44)\n\
    \        return true;\n    if (n == 46)\n        return false;\n    if (n == 48)\n\
    \        return true;\n    if (n == 50)\n        return false;\n    if (n == 52)\n\
    \        return true;\n    if (n == 54)\n        return false;\n    if (n == 56)\n\
    \        return true;\n    if (n == 58)\n        return false;\n    if (n == 60)\n\
    \        return true;\n    if (n == 62)\n        return false;\n    if (n == 64)\n\
    \        return true;\n    if (n == 66)\n        return false;\n    if (n == 68)\n\
    \        return true;\n    if (n == 70)\n        return false;\n    if (n == 72)\n\
    \        return true;\n    if (n == 74)\n        return false;\n\nunittest\n{\n\
    \    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L)\
    \ == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) ==\
    \ true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy2hbeqmr.d(95): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy2hbeqmr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n      \
    \  return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n   \
    \     return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n\
    \    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L)\
    \ == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) ==\
    \ true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4luf05e3.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x427de5]\n??:? void tmp4luf05e3.__unittest_L26_C1() [0x427a7a]\n??:?
    void tmp4luf05e3.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281bb]\n??:? _d_run_main [0x428126]\n??:? main [0x427b7b]\n??:?
    __libc_start_main [0x88bf8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 == 1) return false;\n    if (n == 0) return true;\n  \
    \  if (n == 2) return false;\n    if (n == 4) return true;\n    if (n == 6) return\
    \ false;\n    if (n == 8) return true;\n    if (n == 10) return false;\n    if\
    \ (n == 12) return true;\n    if (n == 14) return false;\n    if (n == 16) return\
    \ true;\n    if (n == 18) return false;\n    if (n == 20) return true;\n    if\
    \ (n == 22) return false;\n    if (n == 24) return true;\n    if (n == 26) return\
    \ false;\n    if (n == 28) return true;\n    if (n == 30) return false;\n    if\
    \ (n == 32) return true;\n    if (n == 34) return false;\n    if (n == 36) return\
    \ true;\n    if (n == 38) return false;\n    if (n == 40) return true;\n    if\
    \ (n == 42) return false;\n    if (n == 44) return true;\n    if (n == 46) return\
    \ false;\n    if (n == 48) return true;\n    if (n == 50) return false;\n    if\
    \ (n == 52) return true;\n    if (n == 54) return false;\n    if (n == 56) return\
    \ true;\n    if (n == 58) return false;\n    if (n == 60) return true;\n    if\
    \ (n == 62) return false;\n    if (n == 64) return true;\n    if (n == 66) return\
    \ false;\n    if (n == 68) return true;\n    if (n == 70) return false;\n    if\
    \ (n == 72) return true;\n    if (n == 74) return false;\n    if (n == 76) return\
    \ true;\n    if (n == 78) return false;\n    if (n == 80) return true;\n    if\
    \ (n == 82) return false;\n    if (n == 84) return true;\n    if (n == 86) return\
    \ false;\n    if (n == 88) return true;\n   \nunittest\n{\n    alias candidate\
    \ = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n\
    \    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm163n6u1.d(63): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm163n6u1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 == 1) return false;\n    if (n == 0) return true;\n  \
    \  if (n == 2) return false;\n    if (n == 4) return true;\n    return is_equal_to_sum_even(n\
    \ - 2);\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L)\
    \ == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) ==\
    \ true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n\
    \    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n \
    \   assert(candidate(16L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp10oymi5t.d(26): unittest failure\n----------------\n??:?
    _d_unittestp [0x427de5]\n??:? void tmp10oymi5t.__unittest_L22_C1() [0x427a7a]\n??:?
    void tmp10oymi5t.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281bb]\n??:? _d_run_main [0x428126]\n??:? main [0x427b7b]\n??:?
    __libc_start_main [0x3d659554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n      \
    \  return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n   \
    \     return true;\n    return is_equal_to_sum_even(n - 2);\n}\nunittest\n{\n\
    \    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L)\
    \ == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) ==\
    \ true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4luf05e3.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x427de5]\n??:? void tmp4luf05e3.__unittest_L26_C1() [0x427a7a]\n??:?
    void tmp4luf05e3.__modtest() [0x427b68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281bb]\n??:? _d_run_main [0x428126]\n??:? main [0x427b7b]\n??:?
    __libc_start_main [0x88bf8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n < 8)\n       \
    \ return false;\n    if (n == 8)\n        return true;\n    return is_equal_to_sum_even(n\
    \ - 8);\n}\n/*\nEvaluate whether the given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(5L)\n\
    \    false\n    >>> is_equal_to_sum_odd(7L)\n    false\n    >>> is_equal_to_sum_odd(9L)\n\
    \    true\n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n  \
    \  assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L)\
    \ == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) ==\
    \ false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n\
    \    assert(candidate(16L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpfzx9t1ch.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dcd]\n??:? void tmpfzx9t1ch.__unittest_L34_C1() [0x427ac1]\n??:?
    void tmpfzx9t1ch.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42821c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281a3]\n??:? _d_run_main [0x42810e]\n??:? main [0x427b63]\n??:?
    __libc_start_main [0x3900a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if(n <= 0)\n        return false;\n    if(n % 2 != 0)\n        return\
    \ false;\n    long n_sqrt = cast(long) sqrt(n);\n    if(n_sqrt % 2 != 0)\n   \
    \     n_sqrt--;\n    for(long i = n_sqrt; i >= 2; i -= 2)\n    {\n        long\
    \ j = n - i;\n        if(j % 2 != 0)\n            continue;\n        if(j <= 0)\n\
    \            continue;\n        long j_sqrt = cast(long) sqrt(j);\n        if(j_sqrt\
    \ % 2 != 0)\n            j_sqrt--;\n        for(long k = j_sqrt; k >= 2; k -=\
    \ 2)\n        {\n            long l = j - k;\n            if(l % 2 != 0)\n   \
    \             continue;\n            if(l <= 0)\n                continue;\n \
    \           long l_sqrt = cast(long) sqrt(l);\n            if(l_sqrt % 2 != 0)\n\
    \                l_sqrt--;\n            for(long m = l_sqrt; m >= 2; m -= 2)\n\
    \            {\n                long o = l - m;\n                if(o % 2 != 0)\n\
    \                    continue;\n                if(o <= 0)\n                 \
    \   continue;\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\
    \n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L)\
    \ == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) ==\
    \ false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwsw43cn0.d(20): Error: `std.math.sqrt` called with argument
    types `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\n/tmp/tmpwsw43cn0.d(30): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\n/tmp/tmpwsw43cn0.d(40): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`\nand:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsw43cn0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        long a\
    \ = 0;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n      \
    \  for (long i = 0; i <= n / 2; i += 2)\n        {\n            a = i;\n     \
    \       for (long j = 0; j <= n / 2; j += 2)\n            {\n                b\
    \ = j;\n                for (long k = 0; k <= n / 2; k += 2)\n               \
    \ {\n                    c = k;\n                    for (long l = 0; l <= n /\
    \ 2; l += 2)\n                    {\n                        d = l;\n        \
    \                if (a + b + c + d == n)\n                        {\n        \
    \                    result = true;\n                            break;\n    \
    \                    }\n                    }\n                    if (result)\n\
    \                    {\n                        break;\n                    }\n\
    \                }\n                if (result)\n                {\n         \
    \           break;\n                }\n            }\n            if (result)\n\
    \            {\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n   \
    \ assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L)\
    \ == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) ==\
    \ false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n\
    \    assert(candidate(16L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf6rg6cv8.d(63): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ebd]\n??:? void tmpf6rg6cv8.__unittest_L59_C1() [0x427b4e]\n??:?
    void tmpf6rg6cv8.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428293]\n??:? _d_run_main [0x4281fe]\n??:? main [0x427c4f]\n??:?
    __libc_start_main [0x51a7b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n      \
    \  return true;\n    if (n < 0)\n        return false;\n    return is_equal_to_sum_even(n\
    \ - 2);\n}\n/*\nEvaluate whether the given number n can be written as the sum\
    \ of exactly 4 positive odd numbers\n    Example\n    >>> is_equal_to_sum_odd(4L)\n\
    \    false\n    >>> is_equal_to_sum_odd(6L)\n    false\n    >>> is_equal_to_sum_odd(8L)\n\
    \    false\n    >>> is_equal_to_sum_odd(9L)\n    true\n*/\nunittest\n{\n    alias\
    \ candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n \
    \   assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L)\
    \ == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) ==\
    \ true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpa_nka9gd.d(40): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ddd]\n??:? void tmpa_nka9gd.__unittest_L36_C1() [0x427a6e]\n??:?
    void tmpa_nka9gd.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42822c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281b3]\n??:? _d_run_main [0x42811e]\n??:? main [0x427b6f]\n??:?
    __libc_start_main [0xbe7e9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    long a = n / 2;\n  \
    \  long b = 0;\n    long c = 0;\n    long d = 0;\n    for (long i = 0; i <= a;\
    \ i++)\n    {\n        for (long j = 0; j <= a; j++)\n        {\n            for\
    \ (long k = 0; k <= a; k++)\n            {\n                for (long l = 0; l\
    \ <= a; l++)\n                {\n                    if (i + j + k + l == a)\n\
    \                    {\n                        if (i % 2 == 0 && j % 2 == 0 &&\
    \ k % 2 == 0 && l % 2 == 0)\n                        {\n                     \
    \       a = i;\n                            b = j;\n                         \
    \   c = k;\n                            d = l;\n                            return\
    \ true;\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n \
    \   assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L)\
    \ == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) ==\
    \ true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_gg_6qgv.d(51): unittest failure\n----------------\n??:?
    _d_unittestp [0x427edd]\n??:? void tmp_gg_6qgv.__unittest_L47_C1() [0x427b72]\n??:?
    void tmp_gg_6qgv.__modtest() [0x427c60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fbb5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa6d]\n??:? runModuleUnitTests [0x42b9d9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282b3]\n??:? _d_run_main [0x42821e]\n??:? main [0x427c73]\n??:?
    __libc_start_main [0x93585554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        // n is\
    \ even\n        long n_half = n / 2;\n        if (n_half % 2 == 0)\n        {\n\
    \            // n_half is even\n            long n_half_half = n_half / 2;\n \
    \           if (n_half_half % 2 == 0)\n            {\n                // n_half_half\
    \ is even\n                result = true;\n            }\n        }\n    }\n \
    \   return result;\n}\n/*\nEvaluate whether the given number n can be written\
    \ as the sum of exactly 4 positive even numbers\n    Example\n    >>> is_equal_to_sum_even(4L)\n\
    \    false\n    >>> is_equal_to_sum_even(6L)\n    false\n    >>> is_equal_to_sum_even(8L)\n\
    \    true\n    \n*/\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\
    \n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L)\
    \ == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) ==\
    \ false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxhttapni.d(52): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e05]\n??:? void tmpxhttapni.__unittest_L45_C1() [0x427af9]\n??:?
    void tmpxhttapni.__modtest() [0x427b88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb2b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9be]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb51]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430000]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fadd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a995]\n??:? runModuleUnitTests [0x42b901]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428254]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281db]\n??:? _d_run_main [0x428146]\n??:? main [0x427b9b]\n??:?
    __libc_start_main [0xbc6be554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n      \
    \  return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n   \
    \     return true;\n    if (n == 6)\n        return false;\n    if (n == 8)\n\
    \        return true;\n    if (n == 10)\n        return false;\n    if (n == 12)\n\
    \        return true;\n    if (n == 14)\n        return false;\n    if (n == 16)\n\
    \        return true;\n    if (n == 18)\n        return false;\n    if (n == 20)\n\
    \        return true;\n    if (n == 22)\n        return false;\n    if (n == 24)\n\
    \        return true;\n    if (n == 26)\n        return false;\n    if (n == 28)\n\
    \        return true;\n    if (n == 30)\n        return false;\n    if (n == 32)\n\
    \        return true;\n    if (n == 34)\n        return false;\n    if (n == 36)\n\
    \        return true;\n    if (n == 38)\n        return false;\n    if (n == 40)\n\
    \        return true;\n    if (n == 42)\n        return false;\n    if (n == 44)\n\
    \        return true;\n    if (n == 46)\n        return false;\n    if (n == 48)\n\
    \        return true;\n    if (n == 50)\n        return false;\n    if (n == 52)\n\
    \        return true;\n    if (n == 54)\n        return false;\n    if (n == 56)\n\
    \        return true;\n    if (n == 58)\n        return false;\n    if (n == 60)\n\
    \        return true;\n    if (n == 62)\n        return false;\n    if (n == 64)\n\
    \        return true;\n    if (n == 66)\n        return false;\n    if (n == 68)\n\
    \        return true;\n    if (n == 70)\n        return false;\n    if (n == 72)\n\
    \        return true;\n    if (n == 74)\n        return false;\n\nunittest\n{\n\
    \    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L)\
    \ == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) ==\
    \ true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy2hbeqmr.d(95): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy2hbeqmr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    bool result = false;\n    if (n % 2 == 0)\n    {\n        long sum\
    \ = 0;\n        long i = 0;\n        while (sum < n)\n        {\n            sum\
    \ += 2 * i;\n            i++;\n        }\n        if (sum == n)\n        {\n \
    \           result = true;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n\
    \    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n \
    \   assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n  \
    \  assert(candidate(16L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpb75i3tms.d(38): unittest failure\n----------------\n??:?
    _d_unittestp [0x427df5]\n??:? void tmpb75i3tms.__unittest_L33_C1() [0x427aa9]\n??:?
    void tmpb75i3tms.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281cb]\n??:? _d_run_main [0x428136]\n??:? main [0x427b8b]\n??:?
    __libc_start_main [0xc4915554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n      \
    \  return true;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d\
    \ = 0;\n    long sum = 0;\n    for (a = 2; a <= n; a += 2)\n    {\n        for\
    \ (b = 2; b <= n; b += 2)\n        {\n            for (c = 2; c <= n; c += 2)\n\
    \            {\n                for (d = 2; d <= n; d += 2)\n                {\n\
    \                    sum = a + b + c + d;\n                    if (sum == n)\n\
    \                        return true;\n                }\n            }\n    \
    \    }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\
    \n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L)\
    \ == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) ==\
    \ false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n      \
    \  return true;\n    if (n == 2)\n        return false;\n    if (n == 4)\n   \
    \     return true;\n    if (n == 6)\n        return false;\n    if (n == 8)\n\
    \        return true;\n    if (n == 10)\n        return false;\n    if (n == 12)\n\
    \        return true;\n    if (n == 14)\n        return false;\n    if (n == 16)\n\
    \        return true;\n    if (n == 18)\n        return false;\n    if (n == 20)\n\
    \        return true;\n    if (n == 22)\n        return false;\n    if (n == 24)\n\
    \        return true;\n    if (n == 26)\n        return false;\n    if (n == 28)\n\
    \        return true;\n    if (n == 30)\n        return false;\n    if (n == 32)\n\
    \        return true;\n    if (n == 34)\n        return false;\n    if (n == 36)\n\
    \        return true;\n    if (n == 38)\n        return false;\n    if (n == 40)\n\
    \        return true;\n    if (n == 42)\n        return false;\n    if (n == 44)\n\
    \        return true;\n    if (n == 46)\n        return false;\n    if (n == 48)\n\
    \        return true;\n    if (n == 50)\n        return false;\n    if (n == 52)\n\
    \        return true;\n    if (n == 54)\n        return false;\n    if (n == 56)\n\
    \        return true;\n    if (n == 58)\n        return false;\n    if (n == 60)\n\
    \        return true;\n    if (n == 62)\n        return false;\n    if (n == 64)\n\
    \        return true;\n    if (n == 66)\n        return false;\n    if (n == 68)\n\
    \        return true;\n    if (n == 70)\n        return false;\n    if (n == 72)\n\
    \        return true;\n    if (n == 74)\n        return false;\n\nunittest\n{\n\
    \    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L)\
    \ == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) ==\
    \ true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy2hbeqmr.d(95): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy2hbeqmr.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n      \
    \  return true;\n    if (n < 0)\n        return false;\n    long a = n / 2;\n\
    \    long b = n / 2;\n    long c = n / 2;\n    long d = n / 2;\n    while (a >\
    \ 0)\n    {\n        while (b > 0)\n        {\n            while (c > 0)\n   \
    \         {\n                while (d > 0)\n                {\n              \
    \      if (a + b + c + d == n)\n                        return true;\n       \
    \             d--;\n                }\n                c--;\n                d\
    \ = n / 2;\n            }\n            b--;\n            c = n / 2;\n        }\n\
    \        a--;\n        b = n / 2;\n    }\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n\
    \    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n   \
    \ assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L)\
    \ == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) ==\
    \ true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp10u2098f.d(53): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e9d]\n??:? void tmp10u2098f.__unittest_L49_C1() [0x427b2e]\n??:?
    void tmp10u2098f.__modtest() [0x427c1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428273]\n??:? _d_run_main [0x4281de]\n??:? main [0x427c2f]\n??:?
    __libc_start_main [0x9a846554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    else\n    {\n      \
    \  long a = 0;\n        long b = 0;\n        long c = 0;\n        long d = 0;\n\
    \        for (long i = 0; i <= n / 2; i++)\n        {\n            for (long j\
    \ = 0; j <= n / 2; j++)\n            {\n                for (long k = 0; k <=\
    \ n / 2; k++)\n                {\n                    for (long l = 0; l <= n\
    \ / 2; l++)\n                    {\n                        if (i + j + k + l\
    \ == n)\n                        {\n                            a = i;\n     \
    \                       b = j;\n                            c = k;\n         \
    \                   d = l;\n                            break;\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n        if (a == 0 && b == 0 && c == 0 && d == 0)\n            return false;\n\
    \        else\n            return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L)\
    \ == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) ==\
    \ true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n\
    \    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjewibwve.d(54): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ecd]\n??:? void tmpjewibwve.__unittest_L50_C1() [0x427b5e]\n??:?
    void tmpjewibwve.__modtest() [0x427c4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282a3]\n??:? _d_run_main [0x42820e]\n??:? main [0x427c5f]\n??:?
    __libc_start_main [0xc1c34554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n      \
    \  return true;\n    if (n < 0)\n        return false;\n    long sum = 0;\n  \
    \  long count = 0;\n    for (long i = 2; i <= n; i += 2)\n    {\n        sum +=\
    \ i;\n        count++;\n        if (sum == n)\n            return true;\n    \
    \    if (sum > n)\n            return false;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) ==\
    \ false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n\
    \    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n \
    \   assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n  \
    \  assert(candidate(16L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpow0s6wu6.d(40): unittest failure\n----------------\n??:?
    _d_unittestp [0x427e35]\n??:? void tmpow0s6wu6.__unittest_L35_C1() [0x427ae9]\n??:?
    void tmpow0s6wu6.__modtest() [0x427bb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb5b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb81]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430030]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fb0d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a9c5]\n??:? runModuleUnitTests [0x42b931]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428284]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42820b]\n??:? _d_run_main [0x428176]\n??:? main [0x427bcb]\n??:?
    __libc_start_main [0x16ec4554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if (n % 2 != 0)\n        return false;\n    if (n == 0)\n      \
    \  return true;\n    long a = n / 2;\n    long b = n / 2;\n    long c = n / 2;\n\
    \    long d = n / 2;\n    long sum = a + b + c + d;\n    while (sum != n)\n  \
    \  {\n        if (sum > n)\n        {\n            if (a > 0)\n              \
    \  a--;\n            else if (b > 0)\n                b--;\n            else if\
    \ (c > 0)\n                c--;\n            else if (d > 0)\n               \
    \ d--;\n            else\n                return false;\n        }\n        else\n\
    \        {\n            if (d < n)\n                d++;\n            else if\
    \ (c < n)\n                c++;\n            else if (b < n)\n               \
    \ b++;\n            else if (a < n)\n                a++;\n            else\n\
    \                return false;\n        }\n        sum = a + b + c + d;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\
    \n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L)\
    \ == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) ==\
    \ false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpg0wc_p_7.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ecd]\n??:? void tmpg0wc_p_7.__unittest_L57_C1() [0x427b62]\n??:?
    void tmpg0wc_p_7.__modtest() [0x427c50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa86]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fba5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42aa5d]\n??:? runModuleUnitTests [0x42b9c9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4282a3]\n??:? _d_run_main [0x42820e]\n??:? main [0x427c63]\n??:?
    __libc_start_main [0xfe3d6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nEvaluate whether the given\
    \ number n can be written as the sum of exactly 4 positive even numbers\n    Example\n\
    \    >>> is_equal_to_sum_even(4L)\n    false\n    >>> is_equal_to_sum_even(6L)\n\
    \    false\n    >>> is_equal_to_sum_even(8L)\n    true\n    \n*/\nbool is_equal_to_sum_even(long\
    \ n) \n{\n    if(n % 2 != 0) return false;\n    if(n == 0) return true;\n    if(n\
    \ == 2) return false;\n    if(n == 4) return true;\n    if(n == 6) return false;\n\
    \    if(n == 8) return true;\n    if(n == 10) return false;\n    if(n == 12) return\
    \ true;\n    if(n == 14) return false;\n    if(n == 16) return true;\n    if(n\
    \ == 18) return false;\n    if(n == 20) return true;\n    if(n == 22) return false;\n\
    \    if(n == 24) return true;\n    if(n == 26) return false;\n    if(n == 28)\
    \ return true;\n    if(n == 30) return false;\n    if(n == 32) return true;\n\
    \    if(n == 34) return false;\n    if(n == 36) return true;\n    if(n == 38)\
    \ return false;\n    if(n == 40) return true;\n    if(n == 42) return false;\n\
    \    if(n == 44) return true;\n    if(n == 46) return false;\n    if(n == 48)\
    \ return true;\n    if(n == 50) return false;\n    if(n == 52) return true;\n\
    \    if(n == 54) return false;\n    if(n == 56) return true;\n    if(n == 58)\
    \ return false;\n    if(n == 60) return true;\n    if(n == 62) return false;\n\
    \    if(n == 64) return true;\n    if(n == 66) return false;\n    if(n == 68)\
    \ return true;\n    if(n == 70) return false;\n    if(n == 72) return true;\n\
    \    if(n == 74) return false;\n    if(n == 76) return true;\n    if(n == 78)\
    \ return false;\n    if(n == 80) return true;\n    if(n == 82) return false;\n\
    \    if(n == 84) return true;\n    if(n == 86) return false;\n    if(n == 88)\
    \ return true;\n   \nunittest\n{\n    alias candidate = is_equal_to_sum_even;\n\
    \n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n \
    \   assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L)\
    \ == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) ==\
    \ false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwwxsarhx.d(63): Error: found `unittest` instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwwxsarhx.d", "-I/tmp"]\n'''
  stdout: b''
