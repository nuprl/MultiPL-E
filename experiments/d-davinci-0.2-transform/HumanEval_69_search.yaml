name: HumanEval_69_search
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
  \ list of positive integers. Return the greatest integer that is greater than \n\
  \    zero, and has a frequency greater than or equal to the value of the integer\
  \ itself. \n    The frequency of an integer is the number of times it appears in\
  \ the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>> search([4L,\
  \ 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
  \ 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n    \n*/\nlong search(long[]\
  \ lst) \n"
tests: "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
  \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
  \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
  \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
  \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
  \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L])\
  \ == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L,\
  \ 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L,\
  \ 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n\
  \    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L,\
  \ 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L,\
  \ 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L,\
  \ 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n\
  \    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n\
  \    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L,\
  \ 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n\
  \    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L,\
  \ 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L,\
  \ 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
  \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
  \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
  \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
  \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
  \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L,\
  \ 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}"
completions: ["{\n    auto m = max(lst);\n    auto d = new long[m+1];\n    foreach(e;\
    \ lst)\n        d[e]++;\n    foreach(i; 0..m+1)\n        if(d[i] >= i)\n     \
    \       return i;\n    return -1;\n}", "{\n    long max = -1;\n    long maxCount\
    \ = 0;\n    foreach(long i; lst)\n    {\n        long count = 0;\n        foreach(long\
    \ j; lst)\n        {\n            if(i == j)\n            {\n                count++;\n\
    \            }\n        }\n        if(count >= i && count > maxCount)\n      \
    \  {\n            max = i;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n  \
    \      {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] arr = lst.dup;\n    arr.sort;\n  \
    \  long[] arr2 = arr.dup;\n    arr2.sort;\n    long[] arr3 = arr2.dup;\n    arr3.sort;\n\
    \    long[] arr4 = arr3.dup;\n    arr4.sort;\n    long[] arr5 = arr4.dup;\n  \
    \  arr5.sort;\n    long[] arr6 = arr5.dup;\n    arr6.sort;\n    long[] arr7 =\
    \ arr6.dup;\n    arr7.sort;\n    long[] arr8 = arr7.dup;\n    arr8.sort;\n   \
    \ long[] arr9 = arr8.dup;\n    arr9.sort;\n    long[] arr10 = arr9.dup;\n    arr10.sort;\n\
    \    long[] arr11 = arr10.dup;\n    arr11.sort;\n    long[] arr12 = arr11.dup;\n\
    \    arr12.sort;\n    long[] arr13 = arr12.dup;\n    arr13.sort;\n    long[] arr14\
    \ = arr13.dup;\n    arr14.sort;\n    long[] arr15 = arr14.dup;\n    arr15.sort;\n\
    \    long[] arr16 = arr15.dup;\n    arr16.sort;\n    long[] arr17 = arr16.dup;\n\
    \    arr17.sort;\n    long[] arr18 = arr17.dup;\n    arr18.sort;\n    long[] arr19\
    \ = arr18.dup;\n    arr19.sort;\n    long[] arr20 = arr19.dup;\n    arr20.sort;\n\
    \    long[] arr21 = arr20.dup;\n    arr21.sort;\n    long[] arr22 = arr21.dup;\n\
    \    arr22.sort;\n    long[] arr23 = arr22.dup;\n    arr23.sort;\n    long[] arr24\
    \ = arr23.dup;\n    arr24.sort;\n    long[] arr25 = arr24.dup;\n    arr25.sort;\n\
    \    long[] arr26 = arr25.dup;", "{\n    long[] sorted = lst.dup.sort();\n   \
    \ long[] uniq = sorted.uniq;\n    long[] count = sorted.count;\n    long[] result\
    \ = new long[uniq.length];\n    foreach(i, v; uniq)\n    {\n        if(v >= count[i])\n\
    \        {\n            result ~= v;\n        }\n    }\n    if(result.length ==\
    \ 0)\n    {\n        return -1L;\n    }\n    return result.max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n     \
    \   long count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n        \
    \    if(lst[i] == lst[j])\n            {\n                count++;\n         \
    \   }\n        }\n        freq[i] = count;\n    }\n    long max = -1;\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n   \
    \     {\n            max = lst[i];\n        }\n    }\n    return max;\n}", "{\n\
    \    long[] lst2 = lst.dup;\n    lst2.sort();\n    long[] lst3 = lst2.dup;\n \
    \   lst3.removeDuplicates();\n    long[] lst4 = lst3.dup;\n    lst4.reverse;\n\
    \    long[] lst5 = lst4.dup;\n    lst5.removeDuplicates;\n    lst5.reverse;\n\
    \    foreach(long i; lst5)\n    {\n        if(lst2.count(i) >= i)\n        {\n\
    \            return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        long\
    \ count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                count++;\n            }\n       \
    \ }\n        freq[i] = count;\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ long[] sorted = lst.dup;\n    sorted.sort;\n    foreach(i; 0..lst.length)\n\
    \    {\n        freq[i] = sorted.count(sorted[i]);\n    }\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= sorted[i])\n        {\n            return sorted[i];\n\
    \        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    foreach(i; 0..sorted.length)\n\
    \    {\n        if(i == 0)\n        {\n            freq[i] = 1;\n        }\n \
    \       else if(sorted[i] == sorted[i-1])\n        {\n            freq[i] = freq[i-1]\
    \ + 1;\n        }\n        else\n        {\n            freq[i] = 1;\n       \
    \ }\n    }\n    long[] sortedFreq = freq.dup;\n    sortedFreq.sort;\n    foreach(i;\
    \ 0..sortedFreq.length)\n    {\n        if(sortedFreq[i] >= sorted[i])\n     \
    \   {\n            return sorted[i];\n        }\n    }\n    return -1;\n}", "{\n\
    \    long[] sorted = lst.dup.sort;\n    long[] freq = new long[sorted.length];\n\
    \    long[] freq_sorted = new long[sorted.length];\n    long[] freq_sorted_index\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted = new long[sorted.length];\n\
    \    long[] freq_sorted_index_sorted_index = new long[sorted.length];\n    long[]\
    \ freq_sorted_index_sorted_index_sorted = new long[sorted.length];\n    long[]\
    \ freq_sorted_index_sorted_index_sorted_index = new long[sorted.length];\n   \
    \ long[] freq_sorted_index_sorted_index_sorted_index_sorted = new long[sorted.length];\n\
    \    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index = new long[sorted.length];\n\
    \    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted =\
    \ new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[sorted.length];\n    long[] freq_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[sorted.length];\n    long[] fre", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}\n/*\n    You are given a non-empty list of positive\
    \ integers. Return the greatest integer that is greater than \n    zero, and has\
    \ a frequency greater than or equal to the value of the integer itself. \n   \
    \ The frequency of an integer is the number of times it appears in the list.\n\
    \    If no such a value exist, return -1.\n    Examples:\n    >>> search([4L,\
    \ 1L, 2L, 2L, 3L, 1L])\n    2L\n    >>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L,\
    \ 4L])\n    3L\n    >>> search([5L, 5L, 4L, 4L, 4L])\n    -1L\n    \n*/\nlong\
    \ search(long[] lst) \n{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n", "{\n    long[] freq = new long[lst.length];\n \
    \   foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    long[] nums = new long[lst.length];\n    long[] nums2\
    \ = new long[lst.length];\n    long[] freq2 = new long[lst.length];\n    long[]\
    \ freq3 = new long[lst.length];\n    long[] nums3 = new long[lst.length];\n  \
    \  long[] freq4 = new long[lst.length];\n    long[] nums4 = new long[lst.length];\n\
    \    long[] freq5 = new long[lst.length];\n    long[] nums5 = new long[lst.length];\n\
    \    long[] freq6 = new long[lst.length];\n    long[] nums6 = new long[lst.length];\n\
    \    long[] freq7 = new long[lst.length];\n    long[] nums7 = new long[lst.length];\n\
    \    long[] freq8 = new long[lst.length];\n    long[] nums8 = new long[lst.length];\n\
    \    long[] freq9 = new long[lst.length];\n    long[] nums9 = new long[lst.length];\n\
    \    long[] freq10 = new long[lst.length];\n    long[] nums10 = new long[lst.length];\n\
    \    long[] freq11 = new long[lst.length];\n    long[] nums11 = new long[lst.length];\n\
    \    long[] freq12 = new long[lst.length];\n    long[] nums12 = new long[lst.length];\n\
    \    long[] freq13 = new long[lst.length];\n    long[] nums13 = new long[lst.length];\n\
    \    long[] freq14 = new long[lst.length];\n    long[] nums14 = new long[lst.length];\n\
    \    long[] freq15 = new long[lst.length];\n    long[] nums15 = new long[lst.length];\n\
    \    long[] freq16 = new long[lst.length];\n    long[] nums16 = new long[lst.length];",
  "{\n    long max = -1;\n    long maxCount = 0;\n    foreach(long i; lst)\n    {\n\
    \        long count = 0;\n        foreach(long j; lst)\n        {\n          \
    \  if(i == j)\n            {\n                count++;\n            }\n      \
    \  }\n        if(count >= i && count > maxCount)\n        {\n            max =\
    \ i;\n            maxCount = count;\n        }\n    }\n    return max;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n  \
    \      foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    auto m = lst.groupBy!(a => a);\n    auto\
    \ r = m.filter!(a => a.value.length >= a.key).keys.max;\n    return r > 0 ? r\
    \ : -1;\n}", "{\n    long max = 0;\n    long maxCount = 0;\n    foreach(long i;\
    \ lst)\n    {\n        if(i > max)\n        {\n            max = i;\n        }\n\
    \    }\n    foreach(long i; lst)\n    {\n        if(i == max)\n        {\n   \
    \         maxCount++;\n        }\n    }\n    if(maxCount >= max)\n    {\n    \
    \    return max;\n    }\n    else\n    {\n        return -1;\n    }\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
