name: HumanEval_61_correct_bracketing
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"(\"\
  \ and \")\".\n    return True if every opening bracket has a corresponding closing\
  \ bracket.\n\n    >>> correct_bracketing(\"(\")\n    false\n    >>> correct_bracketing(\"\
  ()\")\n    true\n    >>> correct_bracketing(\"(()())\")\n    true\n    >>> correct_bracketing(\"\
  )(()\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n"
tests: "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
  ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
  ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\")\
  \ == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
  )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
  ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
  (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"\
  ()()(()())()))()\") == false);\n}\nvoid main(){}"
completions: ["{\n    int balance = 0;\n    foreach(c; brackets)\n    {\n        if\
    \ (c == '(')\n            balance++;\n        else\n            balance--;\n \
    \       if (balance < 0)\n            return false;\n    }\n    return balance\
    \ == 0;\n}", "{\n    int count = 0;\n    foreach(c; brackets)\n    {\n       \
    \ if(c == '(')\n            count++;\n        else if(c == ')')\n            count--;\n\
    \        if(count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}", "{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n     \
    \   if(c == '(')\n            count++;\n        else if(c == ')')\n          \
    \  count--;\n        if(count < 0)\n            return false;\n    }\n    return\
    \ count == 0;\n}", "{\n    int count = 0;\n    foreach(char c; brackets)\n   \
    \ {\n        if(c == '(')\n            count++;\n        else if(c == ')')\n \
    \           count--;\n        if(count < 0)\n            return false;\n    }\n\
    \    return count == 0;\n}", "{\n    int count = 0;\n    foreach(c; brackets)\n\
    \    {\n        if(c == '(')\n            count++;\n        else if(c == ')')\n\
    \            count--;\n        if(count < 0)\n            return false;\n    }\n\
    \    return count == 0;\n}", "{\n    int count = 0;\n    foreach(char c; brackets)\n\
    \    {\n        if(c == '(')\n            count++;\n        else if(c == ')')\n\
    \            count--;\n        if(count < 0)\n            return false;\n    }\n\
    \    return count == 0;\n}", "{\n    int open = 0;\n    int close = 0;\n    foreach(char\
    \ c; brackets)\n    {\n        if(c == '(')\n            open++;\n        else\
    \ if(c == ')')\n            close++;\n        if(close > open)\n            return\
    \ false;\n    }\n    return open == close;\n}", "{\n    int count = 0;\n    foreach(char\
    \ c; brackets)\n    {\n        if(c == '(')\n            count++;\n        else\
    \ if(c == ')')\n            count--;\n        if(count < 0)\n            return\
    \ false;\n    }\n    return count == 0;\n}", "{\n    int count = 0;\n    foreach(char\
    \ c; brackets)\n    {\n        if(c == '(')\n            count++;\n        else\
    \ if(c == ')')\n            count--;\n        if(count < 0)\n            return\
    \ false;\n    }\n    return count == 0;\n}", "{\n    int count = 0;\n    foreach(char\
    \ c; brackets)\n    {\n        if(c == '(')\n            count++;\n        else\
    \ if(c == ')')\n            count--;\n        if(count < 0)\n            return\
    \ false;\n    }\n    return count == 0;\n}", "{\n    int count = 0;\n    foreach(char\
    \ c; brackets)\n    {\n        if(c == '(')\n            count++;\n        else\
    \ if(c == ')')\n            count--;\n        if(count < 0)\n            return\
    \ false;\n    }\n    return count == 0;\n}", "{\n    int count = 0;\n    foreach(char\
    \ c; brackets) \n    {\n        if (c == '(') \n        {\n            count++;\n\
    \        } \n        else if (c == ')') \n        {\n            count--;\n  \
    \      }\n        if (count < 0) \n        {\n            return false;\n    \
    \    }\n    }\n    return count == 0;\n}\n/*\n    return a string of \"(\" and\
    \ \")\" such that:\n        - every opening bracket has a corresponding closing\
    \ bracket,\n        - the string contains the fewest possible characters, and\n\
    \        - the first opening bracket is matched to the last closing bracket.",
  "{\n    int count = 0;\n    foreach(char c; brackets) \n    {\n        if (c ==\
    \ '(') \n        {\n            count++;\n        } \n        else if (c == ')')\
    \ \n        {\n            count--;\n        }\n        if (count < 0) \n    \
    \    {\n            return false;\n        }\n    }\n    return count == 0;\n}",
  "{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i < n;\
    \ i++)\n    {\n        if (brackets[i] == '(')\n            count++;\n       \
    \ else if (brackets[i] == ')')\n            count--;\n        if (count < 0)\n\
    \            return false;\n    }\n    return count == 0;\n}", "{\n    int count\
    \ = 0;\n    foreach(char c; brackets)\n    {\n        if(c == '(')\n         \
    \   count++;\n        else if(c == ')')\n            count--;\n        if(count\
    \ < 0)\n            return false;\n    }\n    return count == 0;\n}", "{\n   \
    \ int count = 0;\n    foreach(c; brackets) {\n        if (c == '(') {\n      \
    \      count++;\n        } else if (c == ')') {\n            count--;\n      \
    \  }\n        if (count < 0) {\n            return false;\n        }\n    }\n\
    \    return count == 0;\n}", "{\n    int count = 0;\n    foreach(c; brackets)\n\
    \    {\n        if(c == '(')\n            count++;\n        else if(c == ')')\n\
    \            count--;\n        if(count < 0)\n            return false;\n    }\n\
    \    return count == 0;\n}", "{\n    int count = 0;\n    foreach(char c; brackets)\n\
    \    {\n        if(c == '(')\n            count++;\n        else if(c == ')')\n\
    \            count--;\n        if(count < 0)\n            return false;\n    }\n\
    \    return count == 0;\n}", "{\n    int count = 0;\n    foreach(char c; brackets)\n\
    \    {\n        if(c == '(')\n            count++;\n        else if(c == ')')\n\
    \            count--;\n        if(count < 0)\n            return false;\n    }\n\
    \    return count == 0;\n}", "{\n    int count = 0;\n    foreach(char c; brackets)\n\
    \    {\n        if(c == '(')\n            count++;\n        else if(c == ')')\n\
    \            count--;\n        if(count < 0)\n            return false;\n    }\n\
    \    return count == 0;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
