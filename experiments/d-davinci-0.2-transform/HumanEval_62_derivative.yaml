name: HumanEval_62_derivative
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients of\
  \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
  \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
  \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
  */\nlong[] derivative(long[] xs) \n"
tests: "unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
  \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
  \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
  \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
  }\nvoid main(){}"
completions: ["{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n   ", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    71L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n   ", "{ \n    return\
    \ xs[1 .. $].array; \n}", "{\n    long[] result = new long[xs.length - 1];\n \
    \   for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result = result\
    \ * x + xs[i];\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result = result\
    \ * x + xs[i];\n    }\n    return result;\n}", "{\n    int n = xs.length;\n  \
    \  long[] ys = new long[n - 1];\n    for (int i = 1; i < n; i++)\n    {\n    \
    \    ys[i - 1] = xs[i] * i;\n    }\n    return ys;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n\
    \ + 1];\n    for (int i = 0; i < n; i++)\n    {\n        ys[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return ys;\n}\n/*\n    Return the value of a polynomial at\
    \ x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    97L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long y =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i] * pow(x,\
    \ i);\n    }\n    return y;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    97L\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long y = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i] * pow(x, i);\n",
  "{\n    long[] result = new long[$ - 1];\n    for (long i = 0; i < $ - 1; i++)\n\
    \    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    67L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (long i = 0; i < $; i++)\n  \
    \  {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    67L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (long i = 0; i < $; i++)\n  \
    \  {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    67L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (long i = 0; i < $; i++)\n  \
    \  {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    67L\n    >>> value([1L, 2L, 3", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    37L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the composition of two polynomials.\n\
    \    >>> composition([3L, 1L, 2L, 4L, 5L], [1L, 2L, 3L])\n    [3L, 11L, 35L, 101L,\
    \ 295L, 855L]\n    >>> composition([1L, 2L, 3L], [1L, 2L, 3L])\n    [1L, 6L, 21L,\
    \ 58L, 141L]\n    \n*/\nlong[] composition(long[] xs, long[] y", "{\n    return\
    \ xs[1..$].map!(a => a * cast(long)(xs.length - 1));\n}\n/*\n    Return the value\
    \ of the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, a; xs)\n    {\n        result\
    \ += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate2(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, a; xs)\n    {\n        result\
    \ += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate3(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, a; xs)\n    {\n        result\
    \ += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate4(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, a; xs)\n    {\n        result\
    \ +=", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n   \
    \ }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n   \
    \ >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ n-th derivative of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L],\
    \ 2L, 3)\n    20L\n    \n*/\nlong polyval(long[] xs, long x, int n) \n{\n    if\
    \ (n == 0)\n    {\n        return polyval(xs, x);\n    }\n    else\n    {\n  \
    \      return polyval(derivative(xs), x, n - 1);\n    }\n}\n/*\n    Return the\
    \ value of the n-th derivative of a polynomial at x.\n    >>> polyval([3L, 1L,\
    \ 2L, 4L, 5L], 2L, 3)\n    20L\n    \n*/", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1.0L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result =\
    \ new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n \
    \       result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n \
    \   Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n    \n*/\ndouble[] integral(long[] xs) \n\
    {\n    double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial.\n    >>> polynomial([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    43L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n    \n\
    */\nlong polynomial(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    Return the value of a polynomial.\n    >>>\
    \ polynomial([3L, 1L, 2L, 4L, 5L], 2L)\n    43L\n    >>> polynomial([1L, 2L, 3L],\
    \ 2L)\n    17L\n    \n*/\nlong polynomial(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x,", "{\n    long[] result = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i + 1);\n   \
    \ return result;\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] result = new double[xs.length + 1];\n    for (int i =\
    \ 0; i < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x", "{\n    return xs[1..$].map!(a\
    \ => a * cast(long)(xs.length - 1));\n}\n/*\n    Return the value of the polynomial\
    \ at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L,\
    \ 3L], 3L)\n    34L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    foreach (i, a; xs) \n    {\n        result += a * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of the polynomial at x.\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n\
    \    34L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    foreach\
    \ (i, a; xs) \n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of the polynomial at x.\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    foreach (i, a; xs) \n    {\n    \
    \    result += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the\
    \ value of the polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, a; xs) \n    {\n        result\
    \ += a * pow(x, i);\n    }", "{ \n    long[] ys = new long[xs.length - 1];\n \
    \   for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = (i + 1) * xs[i\
    \ + 1];\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n    \n*/\n\
    long[] integral(long[] xs) \n{ \n    long[] ys = new long[xs.length + 1];\n  \
    \  for (int i = 0; i < xs.length; i++)\n    {\n        ys[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{ \n   \
    \ long y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i]\
    \ * pow(x, i);\n    }\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x", "{\n    return xs[1..$].map!(a => a * cast(long)(xs.length - 1));\n}\n\
    /*\n    Return the integral of a polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n  \
    \  >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    return [0L] ~ xs.map!(a => a / cast(long)(xs.length));\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    73L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    53L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    53L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    Return the integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of this polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ polyval(long[] xs, double x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\
    \ \n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the polynomial with coefficients given by xs evaluated at x.\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 0L)\n\
    \    1L\n    >>> evaluate([1L, 2L, 3L], 1L)\n    6L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the polynomial with coefficients given by xs integrated from a\
    \ to b.\n    >>> integrate([1L, 2L, 3L], 0L, 1L)\n    3L\n    >>> integrate([1L,\
    \ 2L, 3L], 0L, 2L)\n    17L\n    >>> integrate([1L, 2L, 3L], 1L, 2L)\n    14L\n\
    */\nlong integrate(long[] xs, long a, long b) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return evaluate(result, b) - evaluate(result,\
    \ a);\n}\n/*\n    Return the polynomial with coefficients given by xs integrated\
    \ from 0 to b.\n    >>> integrate([1L, 2L, 3L], 1L)\n    6L\n    >>> integrate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong integrate(long[] xs, long b) \n{\n    return\
    \ integrate(xs, 0, b);\n}\n/*\n    Return the", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = (i +\
    \ 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    >>>\
    \ integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at a point.\n\
    \    >>> evaluate([1L, 2L, 3L], 4L)\n    57L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a point.\n    >>> evaluate([1L, 2L, 3L],\
    \ 4L)\n    57L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a point.\n    >>> evaluate([1L, 2L, 3L], 4L)\n    57L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i", "{\n    long[] ys =\
    \ new long[xs.length - 1];\n    for (int i = 0; i < ys.length; i++)\n    {\n \
    \       ys[i] = (i + 1) * xs[i + 1];\n    }\n    return ys;\n}\n/*\n    Return\
    \ the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L,\
    \ 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n\
    \    [0L, 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ ys = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n \
    \   {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n  \
    \  Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\ndouble polyval(double[]\
    \ xs, double x) \n{\n    double y = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        y += xs[i] * pow(x", "{ \n    return xs[1..$].map!(a => a * cast(long)(xs.length\
    \ - 1));\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n  \
    \  >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{ \n    return [0L] ~ xs.map!(a => a / cast(long)(xs.length));\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{ \n    return xs.zip(xs.length.iota).map!(a =>\
    \ a[0] * pow(x, a[1])).sum;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{ \n    return\
    \ xs.zip(xs.length.iota).map!(a => a[0] * pow(x, a[1])).sum;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{ \n    return xs.", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1.0L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial.\n    >>> polyval([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial.\n    >>> polyval([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\ndouble polyval(double[]\
    \ xs, double x) \n{\n    double result = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of the polynomial represented by xs at x.\n    >>>\
    \ evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L],\
    \ 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    Return the value of the polynomial\
    \ represented by xs at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of the polynomial represented by xs at x.\n    >>> evaluate([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n  \
    \  return result;\n}\n/*\n    Return the value of the polynomial represented by\
    \ xs at x.\n    >>> evaluate([3L, 1L, 2", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    20L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n   ", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    \n*/\nlong polyval(long[]\
    \ xs, double x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    \n*/\ndouble polyval(double[] xs, double x) ", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i <\
    \ result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n   \
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{\n    if (xs.length == 0)\n    {\n        return\
    \ xs;\n    }\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    45L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2", "{ \n    return xs[1 .. $].array; \n}\n/*\n  \
    \  Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{ \n    return [0.0L] ~ (xs.array.map!(a => a / (xs.length - i++))); \n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    \n*/\nlong polyval(long[] xs, long x) \n{ \n    return\
    \ xs.array.map!(a => a * pow(x, i++)).sum; \n}\n/*\n    Return the value of a\
    \ polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    \n\
    */\nlong polyval(long[] xs, long x) \n{ \n    return xs.array.map!(a => a * pow(x,\
    \ i++)).sum; \n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    \n*/\nlong polyval(long[] xs, long x) \n\
    { \n    return xs.array.map!(a => a * pow(x, i++)).sum; \n}\n/*\n    Return the\
    \ value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n   \
    \ 49L\n    \n*/\nlong polyval(long[] xs, long x) \n{ \n    return xs.array.map!(a\
    \ => a * pow(x, i++)).sum; \n}\n/*\n    Return the value of a polynomial at x.",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    67L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polynomial at x.\n   ", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\
    \ \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n \
    \   {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 0L)\n    3L\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 1L)\n    15L\n    >>> evaluate([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    59L\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 3L)\n    137L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }", "{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length - 1)).array;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    return [0.0L] ~ xs.map!(a => a / cast(double)(xs.length)).array;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long\
    \ ret = 0L;\n    foreach (i, a; xs)\n    {\n        ret += a * pow(x, i);\n  \
    \  }\n    return ret;\n}\n/*\n xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the roots of this polynomial.\n\
    \    >>> roots([1L, -1L, 1L, -1L])\n    [1L, 1L, 1L]\n    >>> roots([1L, 0L, -1L])\n\
    \    [-1L, 1L]\n    \n*/\nlong[] roots(long[] xs) \n{\n    long[] ret = [];\n\
    \    if (xs.length == 1L)\n    {\n        return ret;\n    }\n    if (xs.", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n", "{\n    long[] res\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < res.length; i++)\n    {\n\
    \        res[i] = xs[i + 1] * (i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] res = new double[xs.length + 1];\n    for (int i = 0;\
    \ i < xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n \
    \   return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    37L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i]\
    \ * pow(x, i);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of\
    \ this polynomial at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    47L\n    >>> value([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong\
    \ value(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i <\
    \ xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> value([1L, 2L, 3L], 3L)\n    28L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n   \
    \ long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}",
  "{\n    long[] ys = new long[xs.length - 1];\n    for (int i = 0; i < ys.length;\
    \ i++)\n    {\n        ys[i] = xs[i + 1] * (i + 1);\n    }\n    return ys;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    long[] ys = new long[xs.length + 1];\n   \
    \ for (int i = 0; i < xs.length; i++)\n    {\n        ys[i + 1] = xs[i] / (i +\
    \ 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    55L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i] *\
    \ pow(x, i);\n    }\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial",
  "{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length - 1));\n}\n/*\n xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    return [0L] ~ xs.map!(a => a / cast(long)(xs.length));\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    71L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    71L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n    Return coefficients of the polynomial obtained by multiplying this\
    \ polynomial with", "{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}", "{\n    long[] res = new long[xs.length - 1];\n    for (size_t\
    \ i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n    Return the integral of a polynomial.\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    >>> integral([1L, 2L,\
    \ 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n   \
    \ long[] res = new long[xs.length + 1];\n    for (size_t i = 0; i < xs.length;\
    \ i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n\
    }\n/*\n    Return the value of the polynomial at x.\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long res = 0;\n    for (size_t i = 0; i < xs.length; i++)\n\
    \    {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n/*\n   \
    \ Return the value of the polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long res = 0;\n    for (size_t i = 0; i < xs.length; i++)\n\
    \    {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n/*\n   \
    \ Return the value of the polynomial at x.\n   ", "{\n    long[] res = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < res.length; i++) {\n        res[i] = xs[i + 1]\
    \ * (i + 1);\n    }\n    return res;\n}\n/*\n    Return the integral of this polynomial\
    \ in the same form.\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n  \
    \  >>> integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] res = new long[xs.length + 1];\n    for (int i = 0; i <\
    \ xs.length; i++) {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ res;\n}\n/*\n    Return the value of this polynomial at x.\n    >>> value([1L,\
    \ 2L, 3L], 2L)\n    17L\n    >>> value([1L, 2L, 3L], 3L)\n    34L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n/*\n    Return\
    \ the value of the derivative of this polynomial at x.\n    >>> derivative_value([1L,\
    \ 2L, 3L], 2L)\n    11L\n    >>> derivative_value([1L, 2L, 3L], 3L)\n    20L\n\
    */\nlong derivative_value(long[] xs, long x) \n{\n    long res = 0;\n    for (int\
    \ i = 1; i < xs.length; i++) {\n        res += xs[i] * i * pow(x, i - 1);\n  \
    \  }\n    return res;\n}\n/*\n    Return the value of the integral of this polynomial\
    \ at x.\n    >>> integral", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    91L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n", "{\n    long[] result = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n\
    \    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n   \
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    45L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    57L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> value", "{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the degree of the\
    \ polynomial.\n    >>> degree([1L, 2L, 3L])\n    2\n    >>> degree([1L, 2L, 3L,\
    \ 4L])\n    3\n    >>> degree([1L])\n    0\n    >>> degree([])\n    -1\n*/", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polynomial([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long polynomial(long[] xs, long x) \n{\n    long result = 0;\n    for (int i =\
    \ 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>>\
    \ polynomial([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polynomial([1L, 2L, 3L],\
    \ 2L)\n    17L\n*/\nlong polynomial(long[] xs, long x) \n{\n    long result =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    97L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> value", "{\n    long[] result = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    47L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1", "{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length - 1));\n}\n\
    /*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L,\
    \ 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n    \n*/\nlong[] integral(long[] xs) \n{\n\
    \    return [0L] ~ xs.map!(a => a / cast(long)(xs.length));\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0L;\n    foreach (i, a; xs) \n    {\n   \
    \     result += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n   \
    \ 49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0L;\n    foreach (i, a; xs) \n    {\n   \
    \     result += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n   \
    \ 49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[]\
    \ xs, long", "{\n    long[] result = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>>\
    \ integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>>\
    \ polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n   ", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    67L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>>\
    \ value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n{\n  \
    \  long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n       \
    \ result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n  \
    \  {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    61L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate", "{\
    \ \n    long[] result = new long[xs.length - 1];\n    foreach (i, x; xs[1 .. $])\
    \ \n    {\n        result[i] = x * (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.0L]\n    \n*/\ndouble[] integral(long[] xs) \n\
    { \n    double[] result = new double[xs.length + 1];\n    foreach (i, x; xs) \n\
    \    {\n        result[i + 1] = x / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polynomial([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long polynomial(long[] xs, long x) \n{ \n    long result = 0;\n    foreach (i,\
    \ xi; xs) \n    {\n        result += xi * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polynomial([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n \
    \   \n*/\nlong polynomial(long[] xs, long x) \n{ \n    long result = 0;\n    foreach\
    \ (i, xi; xs) \n    {\n        result += xi * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value", "{ \n    return xs[1..$].map!(a => a * cast(long)(xs.length\
    \ - 1));\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return integral of this polynomial in the same\
    \ form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{ \n    return [0L] ~ xs.map!(a => a / cast(long)(xs.length\
    \ + 1));\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n    >>>\
    \ value([3L, 1L, 2L, 4L, 5L], 2L)\n    61L\n    >>> value([1L, 2L, 3L], 2L)\n\
    \    17L\n*/\nlong value(long[] xs, long x) \n{ \n    return xs.zip(xs.length.iota).map!(a\
    \ => a[0] * pow(x, a[1])).sum;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    61L\n    >>> value([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n{ \n    return xs.zip(xs.length.iota).map!(a\
    \ => a[0]", "{\n    long[] result = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    71L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    result[0]\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial at x.\n    >>> value(3L, [3L, 1L, 2L, 4L, 5L])\n    45L\n    >>>\
    \ value(3L, [1L, 2L, 3L])\n    14L\n*/\nlong value(long x, long[] xs) \n{\n  \
    \  long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result\
    \ += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at x.\n    >>> value(3L, [3L, 1L, 2L, 4L, 5L])\n    45L\n  \
    \  >>> value(3L, [1L, 2L, 3L])\n    14L\n*/\nlong value(long x, long[] xs) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n    \
    \    result += xs[i] * pow(x, i", "{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (size_t i = 0; i < ys.length; i++) \n    {\n        ys[i] = (i + 1) *\
    \ xs[i + 1];\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] ys = new long[xs.length\
    \ + 1];\n    for (size_t i = 0; i < xs.length; i++) \n    {\n        ys[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    69L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long y = 0;\n    for (size_t i = 0; i < xs.length; i++) \n\
    \    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the polynomial with the given coefficients evaluated at x.\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 0L)\n\
    \    1L\n    >>> evaluate([1L, 2L, 3L], 1L)\n    6L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the polynomial with the given coefficients evaluated at x.\n  \
    \  >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 0L)\n\
    \    1L\n    >>> evaluate([1L, 2L, 3L], 1L)\n    6L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the polynomial with the given coefficients evaluated at x.\n  \
    \  >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 0L)\n\
    \    1L\n    >>> evaluate([1L, 2L, 3L], 1L)\n    6L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x,", "{\n    int n = xs.length;\n   \
    \ if (n == 0) return xs;\n    long[] ys = new long[n - 1];\n    for (int i = 0;\
    \ i < n - 1; i++) \n    {\n        ys[i] = (i + 1) * xs[i + 1];\n    }\n    return\
    \ ys;\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n  \
    \  >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n + 1];\n    for (int\
    \ i = 0; i < n; i++) \n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n  \
    \  return ys;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2)\n    49L\n    >>> polyval([1L, 2L, 3L], 2)\n    17L\n*/\n\
    long polyval(long[] xs, long x) \n{\n    int n = xs.length;\n    long y = 0;\n\
    \    for (int i = 0; i < n; i++) \n    {\n        y = y * x + xs[i];\n    }\n\
    \    return y;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2)\n    49L\n    >>> polyval([1L, 2L, 3L], 2)\n    17L\n*/\n\
    long polyval(long[] xs, long x) \n{\n    int n = xs.length;\n    long y", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (long i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (long i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    43L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (long i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ value of this polynomial at x.\n    >>> eval_poly([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> eval_poly([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong eval_poly(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polyn", "{\n    long[] result = new\
    \ long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n\
    \        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at a given point.\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return", "{ \n   \
    \ return xs[1..$].map!(a => a * cast(long)(xs.length - 1));\n}\n/*\n    Return\
    \ the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L,\
    \ 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n\
    \    [0L, 1L, 1.0L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{ \n    return [0.0L]\
    \ ~ xs.map!(a => a / cast(double)(xs.length));\n}\n/*\n    Return the value of\
    \ a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n   \
    \ >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x)\
    \ \n{ \n    return xs.map!(a => a * x ^^ (xs.length - 1)).sum;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    63L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{ \n    return xs.map!(a => a * x ^^ (xs.length - 1)).sum;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    63L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{ \n    return xs.map!(a => a * x ^^ (xs.length - 1)).sum;\n}\n\
    /*\n    Return", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = (i +\
    \ 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{\n    int n = xs.length;\n    long[] ys = new\
    \ long[n - 1];\n    for (int i = 1; i < n; i++) \n    {\n        ys[i - 1] = xs[i]\
    \ * i;\n    }\n    return ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    int n = xs.length;\n  \
    \  long[] ys = new long[n + 1];\n    for (int i = 0; i < n; i++) \n    {\n   \
    \     ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return the value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    int n = xs.length;\n    long y = 0;\n \
    \   for (int i = 0; i < n; i++) \n    {\n        y += xs[i] * pow(x, i);\n   \
    \ }\n    return y;\n}\n/*\n    xs represent coefficients of a polynomial.\n  \
    \  xs[0] + xs[1] * x + xs[", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = (i +\
    \ 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ of degree n with the given coefficients.\n    >>> poly([1L, 2L, 3L])\n    3\
    \ * x^2 + 2 * x + 1\n    >>> poly([1L, 2L, 3L, 4L])\n    4 * x^3 + 3 * x^2 + 2\
    \ * x + 1\n    \n*/\nstring poly(long[] xs) \n{\n    string result = \"\";\n \
    \   for (int i = xs.length - 1; i >= 0; i--) \n    {\n        if (xs[i] != 0)\
    \ \n        {\n            if (result != \"\") \n            {\n             \
    \   result += \" + \";\n            }\n            if (xs[i] == 1) \n        \
    \    {\n                if (i == 0) \n                {\n                    result\
    \ += \"1\";\n                }\n                else if (i == 1) \n          \
    \      {\n                    result += \"x\";\n                }\n          \
    \      else \n                {\n                    result += \"x^\" + i;\n \
    \               }\n            }\n            else if (xs[i] == -1) \n       \
    \     {\n                if (i == 0) \n                {\n                   \
    \ result += \"-1\";\n                }\n                else if (i == 1) \n  \
    \              {\n                    result += \"-x\";\n                }\n \
    \               else \n                {\n                    result += \"-x^\"\
    \ + i;\n                }\n            }\n            else \n            {\n \
    \               if (i == 0) \n                {\n                    result +=\
    \ xs[i];\n                }\n                else if (i == 1) \n             \
    \   {\n                    result += xs[i] + \"*x\";\n                }\n    \
    \            else \n                {\n                    result += xs[i] + \"\
    *x^\" + i;\n                }\n            }\n        }\n    }\n    return result;\n\
    }\n/*\n", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of the polynomial represented\
    \ by xs at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    34L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ polynomial represented by xs at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n   \
    \ 17L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    34L\n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial represented by xs at x.\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    34L\n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of the polynomial represented by\
    \ xs at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([",
  "{\n    long[] result = new long[xs.length - 1];\n    for (size_t i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }", "{\n    long[] res = new long[xs.length - 1];\n    for (int i = 0; i < res.length;\
    \ i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n    }\n    return res;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] res = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        res[i + 1] = xs[i] /\
    \ (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i]\
    \ * pow(x, i);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of\
    \ this polynomial at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    37L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>>", "{\n    long[] res = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] res = new long[xs.length\
    \ + 1];\n    res[0] = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    67L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n/*\n   \
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n    Return value of", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    41L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    41L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of the polynomial at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    41L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of the polynomial at x.\n    >>>\
    \ evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    97L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n", "{ \n    return xs[1 .. $].map!(a => a * cast(long)(xs.length - 1)).array;\n\
    }\n/*\n    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{ \n    return xs.zip(xs.length.iota).map!(a => a[0] * pow(x,\
    \ a[1])).sum;\n}\n/*\n    Return the value of the polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long value(long[] xs, long x) \n{ \n    return xs.zip(xs.length.iota).map!(a =>\
    \ a[0] * pow(x, a[1])).sum;\n}\n/*\n    Return the value of the polynomial at\
    \ x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n{ \n    return xs.zip(xs.length.iota).map!(a\
    \ => a[0] * pow(x, a[1])).sum;\n}\n/*\n    Return the value of the polynomial\
    \ at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n{ \n    return xs.zip(xs.length.iota).map!(a\
    \ => a[0] * pow(x, a[1])).sum;\n}\n/*", "{\n    long[] res = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return res;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ res = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    57L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0;\
    \ i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n    return\
    \ res;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n   ", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n    Return value of this polynomial at x.\n    >>> evaluate([", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    Return the value of the polynomial\
    \ represented by xs at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial represented by xs at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n", "{\n    long[] res = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] res = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        res[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    long res = 0;\n    for (int i = 0; i < xs.length; i++)\n  \
    \  {\n        res += xs[i] * pow(x, i);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> polyval([3L", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    97L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n    \n*/\ndouble[] integral(long[] xs) \n\
    {\n    double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    20L\n    \n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n  \
    \  return result;\n}\n/*\n    Return the sum of two polynomials.\n    >>> add([3L,\
    \ 1L, 2L, 4L, 5L], [1L, 2L, 3L])\n    [4L, 3L, 5L, 4L, 5L]\n    >>> add([1L, 2L,\
    \ 3L], [1L, 2L, 3L])\n    [2L, 4L, 6L]\n    \n*/\nlong[] add(long[] xs, long[]\
    \ ys) \n{\n    long[] result = new long[max(xs", "{\n    long[] res = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return res;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] res\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n    xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    65L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n    return\
    \ res;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return coefficients of the polynomial that is\
    \ the product of this polyn", "{\n    if (xs.length == 0)\n    {\n        return\
    \ new long[0];\n    }\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++)\n    {\n        result[i] = (i + 1) * xs[i +\
    \ 1];\n    }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n   \
    \ \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result = new double[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    51L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the sum of two polynomials.\n    >>> add([3L, 1L, 2L, 4L, 5L], [1L,\
    \ 2L, 3L])\n    [4L, 3L, 5L, 4L, 5L]\n    >>> add([1L, 2L, 3L], [1L, 2L, 3L])\n\
    \    [2L, 4L, 6L]\n    \n*/\nlong", "{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++)\n        ys[i] = xs[i + 1] * (i + 1);\n\
    \    return ys;\n}\n/*\n    Return the value of the polynomial at x.\n    >>>\
    \ value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n{\n  \
    \  long y = 0;\n    for (int i = 0; i < xs.length; i++)\n        y += xs[i] *\
    \ pow(x, i);\n    return y;\n}\n/*\n    Return the value of the polynomial at\
    \ x.\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long\
    \ x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n        y\
    \ += xs[i] * pow(x, i);\n    return y;\n}\n/*\n    Return the value of the polynomial\
    \ at x.\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long\
    \ x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n        y\
    \ += xs[i] * pow(x, i);\n    return y;\n}\n/*\n    Return the value of the polynomial\
    \ at x.\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long\
    \ x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n        y\
    \ += xs[i] * pow(x, i);\n    return y;\n}\n/*\n    Return the value of the polynomial\
    \ at x.\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (size_t i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the result of evaluating a polynomial at x.\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (size_t i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the result of evaluating\
    \ a polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (size_t i = 0; i < xs.length;\
    \ i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the result of evaluating a polynomial at x.\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (size_t i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the result of evaluating\
    \ a polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (size_t i = 0; i < xs.length;\
    \ i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n   ", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\
    \ \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the sum of this polynomial and another polyn", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);", "{\n    long[] result = new\
    \ long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n \
    \       result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n \
    \   Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.0L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1.0L, 1.0L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n\
    \    double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the sum of two polynomials.\n  \
    \  >>> add([3L, 1L, 2L, 4L, 5L], [1L, 2L, 3L])\n    [4L, 3L, 5L, 4L, 5L]\n   \
    \ >>> add([1L, 2L, 3L], [1L, 2L, 3L])\n    [2L, 4L, 6L]\n    \n*/\nlong[] add(long[]\
    \ xs, long[] ys) \n{\n    long[] result = new long", "{\n    long[] result = new\
    \ long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n \
    \       result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n \
    \   Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[]\
    \ result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\ndouble polyval(double[] xs, double x) \n{\n    double result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return", "{\n    long[] result = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value(1L, [3L, 1L, 2L, 4L, 5L])\n    15L\n    >>> value(2L, [3L,\
    \ 1L, 2L, 4L, 5L])\n    61L\n*/\nlong value(long x, long[] xs) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value(1L, [3L, 1L, 2L, 4L, 5L])\n    15L\n    >>> value(2L, [3L,\
    \ 1L, 2L, 4L, 5L])\n    61L\n*/\nlong value(long x, long[] xs) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the polynomial xs evaluated at x.\n    >>> evaluate([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n \
    \   return result;\n}\n/*\n    Return the polynomial xs divided by xs2.\n    >>>\
    \ divide([3L, 1L, 2L, 4L, 5L], [1L, 2L, 3L])\n    [3L, -1L, -1L, 1L]\n    >>>\
    \ divide([1L, 2L, 3L], [1L, 2L, 3L])\n    [1L]\n    >>> divide([1L, 2L, 3L], [1L,\
    \ 2L, 3L, 4L, 5L])\n    [1L, 2L, 3L]\n*/\nlong[] divide(long[] xs, long[] xs2)\
    \ \n{\n    long[] result = new long[xs.length];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i] = xs[i];\n    }\n    for (int i = 0; i < xs2.length;\
    \ i++) \n    {\n        result[i] /= xs2[i];\n    }\n    return result;\n}\n/*\n\
    \    Return the polynomial xs multiplied by xs2.\n    >>> multiply([3L, 1L, 2L,\
    \ 4L, 5L], [1L, 2L, 3L])\n    [3L, 7L", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n   ", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    Return the polynomial with the given\
    \ coefficients evaluated at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the polynomial with the given coefficients\
    \ evaluated at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the polynomial with the given coefficients evaluated at x.\n  \
    \  >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the polynomial with the given coefficients evaluated at x.\n    >>>\
    \ evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n   \
    \     result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n   ", "{\n\
    \    long[] ys = new long[xs.length - 1];\n    for (int i = 0; i < ys.length;\
    \ i++) \n    {\n        ys[i] = (i + 1) * xs[i + 1];\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] ys = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        ys[i + 1] = xs[i] /\
    \ (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ y = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        y += xs[i]\
    \ * pow(x, i);\n    }\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 3", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n  \
    \  {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L,\
    \ 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*", "{\n    long[] ys = new long[xs.length - 1];\n  \
    \  for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = xs[i + 1] * (i\
    \ + 1);\n    }\n    return ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] ys = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        ys[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return ys;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of\
    \ this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n  \
    \      y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n    xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \    Return value of this polynomial at", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\n\
    long evaluate(long[] xs,", "{\n    long[] ys = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] ys = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    59L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial", "{\n    long[] result = new\
    \ long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n \
    \       result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n \
    \   Return the value of the polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n    >>> polyval([1L, 2L, 3L],", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of the polynomial at x.\n    >>>\
    \ evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L],\
    \ 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5", "{\n    int n = xs.length;\n\
    \    long[] ys = new long[n - 1];\n    for (int i = 1; i < n; i++)\n    {\n  \
    \      ys[i - 1] = xs[i] * i;\n    }\n    return ys;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n \
    \   int n = xs.length;\n    long[] ys = new long[n + 1];\n    for (int i = 0;\
    \ i < n; i++)\n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return\
    \ ys;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    97L\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    int n = xs.length;\n\
    \    long y = 0;\n    for (int i = 0; i < n; i++)\n    {\n        y += xs[i] *\
    \ pow(x, i);\n    }\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n  \
    \  }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> value(3L, [3L, 1L, 2L, 4L, 5L])\n    538L\n    >>>\
    \ value(3L, [1L, 2L, 3L])\n    18L\n*/\nlong value(long x, long[] xs) \n{\n  \
    \  long result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n       \
    \ result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial at a given point.\n    >>> value(3L, [3L, 1L, 2L, 4L,\
    \ 5L])\n    538L\n    >>> value(3L, [1L, 2L, 3L])\n    18L\n*/\nlong value(long\
    \ x, long[] xs) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result += xs[i] * pow(", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n   ", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return the value of this polynomial at x.", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    39L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n    double[] result = new\
    \ double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n   \
    \     result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n   \
    \ Return the value of a polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*",
  "{\n    int n = xs.length;\n    if (n == 0)\n    {\n        return new long[0];\n\
    \    }\n    long[] result = new long[n - 1];\n    for (int i = 0; i < n - 1; i++)\n\
    \    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    int n = xs.length;\n    long[] result = new long[n\
    \ + 1];\n    for (int i = 0; i < n; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result = result * x + xs[i];\n    }\n    return result;\n}\n/*\n    xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1", "{\n    long[] res\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < res.length; i++)\n    {\n\
    \        res[i] = xs[i + 1] * (i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return integral of this polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] res = new double[xs.length + 1];\n    for (int i = 0;\
    \ i < xs.length; i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n \
    \   return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    91L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ res = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        res += xs[i]\
    \ * pow(x, i);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of\
    \ this polynomial at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2)\n    17L\n \
    \   \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    47L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a\
    \ polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L,\
    \ 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L,\
    \ 3L], 3L)\n    34L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L,\
    \ 3L], 3L)\n    34L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L,\
    \ 3L],", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    Return the polynomial whose value at x\
    \ is the integral of the polynomial\n    whose value at x is xs[0] + xs[1] * x\
    \ + xs[2] * x^2 + ....\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the polynomial whose value at x is the integral of the polynomial\n    whose\
    \ value at x is xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[]\
    \ xs, long c) \n{\n    long[] result = new long[xs.length + 1];\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n\
    \    }\n    result[0] = c;\n    return", "{\n    return xs[1 .. $].map!(a => a\
    \ * cast(long)(xs.length - 1)).array;\n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    return\
    \ [0L] ~ xs.map!(a => a / cast(long)(xs.length)).array;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    59L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long res = 0L;\n    foreach (i, a; xs)\n\
    \    {\n        res += a * pow(x, i);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return coefficients of the polynomial after multiplying it by x.\n    >>>\
    \ polymulx([3L, 1L, 2L, 4L, 5L])\n    [1L, 2L, 4L, 5L, 0L]\n    >>> polymulx([1L,\
    \ 2L, 3L])\n    [2L, 3L, 0L]\n    \n*/\nlong[]", "{\n    return xs[1 .. $ - 1];\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\ndouble[] integral(long[] xs) \n{\n \
    \   double[] result = new double[$ + 1];\n    foreach (i, x; xs) \n    {\n   \
    \     result[i + 1] = x / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    foreach (i, xi; xs) \n    {\n   \
    \     result += xi * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    foreach (i, xi; xs) \n    {\n   \
    \     result += xi * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of a polynomial at a point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs", "{\n    int n = xs.length;\n    long[] ys = new long[n - 1];\n    for (int\
    \ i = 1; i < n; i++)\n    {\n        ys[i - 1] = xs[i] * i;\n    }\n    return\
    \ ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n    Return integral of this polynomial in the same\
    \ form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n\
    \    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n + 1];\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n   \
    \ return ys;\n}\n/*\n    xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial at x.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    int n = xs.length;\n\
    \    long y = 0;\n    for (int i = 0; i < n; i++)\n    {\n        y += xs[i] *\
    \ pow(x, i);\n    }\n    return y;\n}\n/*\n    xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return", "{\n \
    \   long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n        result[i] = xs[i + 1] * (i + 1);\n    return result;\n}\n/*\n\
    \    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \        result += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the\
    \ value of a polynomial.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n \
    \   >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n\
    {\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n        result\
    \ += xs[i] * pow(x, i);\n    return result;\n}\n/*\n    Return the value of a\
    \ polynomial.\n    >>> value([3L, 1L, 2L, 4L,", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ integral of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n\
    \    double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n", "{\n    long[] result = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < result.length; i++) \n    {\n        result[i] = (i + 1) * xs[i + 1];\n\
    \    }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n  \
    \  \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    67L\n   \
    \ >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result = result * x + xs[i];\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    67L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result = result * x + xs[i];", "{\n    long[]\
    \ ys = new long[xs.length - 1];\n    for (size_t i = 0; i < ys.length; i++)\n\
    \    {\n        ys[i] = (i + 1) * xs[i + 1];\n    }\n    return ys;\n}", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n \
    \   [0L, 1L, 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 3L)\n    28L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n   ", "{\n    long[] result = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    67L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,", "{\n    long[] ys = new long[xs.length - 1];\n    for (int i = 0; i <\
    \ ys.length; i++)\n    {\n        ys[i] = xs[i + 1] * (i + 1);\n    }\n    return\
    \ ys;\n}\n/*\n    Return the result of evaluating a polynomial at x.\n    >>>\
    \ evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n\
    {\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        y\
    \ += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n    Return the result of\
    \ evaluating a polynomial at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long y = 0;\n    for (int i = 0;\
    \ i < xs.length; i++)\n    {\n        y += xs[i] * pow(x, i);\n    }\n    return\
    \ y;\n}\n/*\n    Return the result of evaluating a polynomial at x.\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long y\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i] * pow(x,\
    \ i);\n    }\n    return y;\n}\n/*\n    Return the result of evaluating a polynomial\
    \ at x.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n    Return\
    \ the result of evaluating", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a\
    \ polynomial at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n \
    \   49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at a given point.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L],", "{\n    long[] ys\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < ys.length; i++)\n    {\n\
    \        ys[i] = xs[i + 1] * (i + 1);\n    }\n    return ys;\n}", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\
    \ \n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n\
    {\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at a given\
    \ point.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result\
    \ += xs", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}", "{ \n    long[] result = new long[xs.length -\
    \ 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\ndouble[] integral(long[] xs) \n{ \n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{ \n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{ \n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs\
    \ represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2\
    \ + ....\n    Return value of this polynomial at x.\n    >>> evaluate([", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial with coefficients xs at x.\n    >>>\
    \ evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    41L\n    >>> evaluate([1L, 2L, 3L],\
    \ 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ with coefficients xs at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n   \
    \ 41L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial with coefficients xs at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    41L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of a polynomial with coefficients\
    \ xs at x.\n    >>> evaluate([3L,", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n  \
    \  >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the polynomial xs divided by xs_divisor.\n    >>> divide([3L, 1L,\
    \ 2L, 4L, 5L], [1L, 2L, 3L])\n    [3L, -1L, -2L, -1L]\n    >>> divide([1L, 2L,\
    \ 3L], [1L, 2L, 3L])\n    [1L]\n    >>> divide([1L, 2L, 3L], [1L, 2L])\n    [1L,\
    \ 1L]\n    >>> divide([1L, 2L, 3L], [1L])\n    [1L, 2L, 3L]\n    >>> divide([1L,\
    \ 2L, 3L], [2L])\n    [0L, 1L, 1L, 1L]\n    >>> divide([1L, 2L, 3L], [3L])\n \
    \   [0L, 0L, 1L, 1L]\n    >>> divide([1L, 2L, 3L], [4L])\n    [0L, 0L, 0L, 1L,\
    \ 1L]\n    >>> divide([1L, 2L, 3L], [5L])\n    [0L, 0L, 0L, 0L, 1L, 1L]\n    >>>\
    \ divide([1L, 2L", "{\n    long[] res = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < res.length; i++) {\n        res[i] = xs[i + 1] * (i + 1);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    long[] res = new long[xs.length + 1];\n  \
    \  for (int i = 0; i < xs.length; i++) {\n        res[i + 1] = xs[i] / (i + 1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    105L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long\
    \ res = 0;\n    for (int i = 0; i < xs.length; i++) {\n        res += xs[i] *\
    \ pow(x, i);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> polyval([3", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the", "{\n    long[]\
    \ ys = new long[xs.length - 1];\n    foreach (i, x; xs)\n    {\n        if (i\
    \ == 0)\n            continue;\n        ys[i - 1] = i * x;\n    }\n    return\
    \ ys;\n}\n/*\n Return the integral of a polynomial.\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    >>> integral([1L, 2L, 3L, 4L])\n    [0L, 1L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] ys = new long[xs.length\
    \ + 1];\n    foreach (i, x; xs)\n    {\n        ys[i + 1] = x / (i + 1);\n   \
    \ }\n    return ys;\n}\n/*\n Return the value of a polynomial at x.\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long y = 0;\n    foreach (i, xi; xs)\n \
    \   {\n        y += xi * pow(x, i);\n    }\n    return y;\n}\n/*\n Return the\
    \ value of a polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n  \
    \  >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[] xs, long x)\
    \ \n{\n    long y = 0;\n    foreach (i, xi; xs)\n    {\n        y += xi * pow(x,\
    \ i);\n    }\n    return y;\n}\n/*\n Return the value of a polynomial at x.\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L,", "{\n \
    \   long[] result = new long[xs.length - 1];\n    for (size_t i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }", "{ \n    return xs[1 .. $].array; \n}\n/*\n xs represent coefficients of a\
    \ polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[] xs) \n{ \n\
    \    return [0L] ~ xs.array; \n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{ \n   \
    \ return xs.array.sum!((a, b) => a + b * x)(0L); \n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the\
    \ value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[]\
    \ xs, long x) \n{ \n    return xs.array.sum!((a, b) => a + b * x)(0L); \n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +", "{\n \
    \   long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x +\
    \ xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (size_t i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (size_t i = 0; i < xs.length; i++)\n    {\n        result[i +\
    \ 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value\
    \ of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (size_t i = 0; i < xs.length; i++)\n \
    \   {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (size_t i = 0; i < xs.length;\
    \ i++)\n    {\n        result += xs[i] * pow(x, i);", "{\n    long[] result =\
    \ new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n   \
    \ {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the integral of a polynomial.\n    >>> integral([1L, 2L, 3L])\n\
    \    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result =\
    \ new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    34L\n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the value of a polynomial at a given point.\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 3L)\n\
    \    34L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n   \
    \ for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x,\
    \ i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at a given point.\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    34", "{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length\
    \ - 1)).array;\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    >>> integral([1L, 2L,\
    \ 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n   \
    \ return [0L] ~ xs.map!(a => a / cast(long)(xs.length)).array;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L,\
    \ 3L, 4L], 2L)\n    29L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0L;\n    foreach (i, a; xs) \n    {\n        result += a * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n    >>> polyval([1L, 2L, 3L, 4L], 2L)\n    29L\n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach (i, a; xs)\
    \ \n    {\n        result += a * pow(x, i);\n    }\n    return result;\n", "{\n\
    \    long[] ys = new long[xs.length - 1];\n    for (int i = 0; i < ys.length;\
    \ i++)\n    {\n        ys[i] = xs[i + 1] * (i + 1);\n    }\n    return ys;\n}\n\
    /*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L,\
    \ 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ ys = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n   \
    \ {\n        ys[i + 1] = xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n    Return\
    \ the value of a polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long y = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        y += xs[i] * pow(x, i);\n    }\n    return y;\n}\n/*\n    Return\
    \ the sum of two polynomials.\n    >>> add([3L, 1L, 2L, 4L, 5L], [1L, 2L, 3L])\n\
    \    [4L, 3L, 5L, 4L, 5L]\n    >>> add([1L, 2L, 3L], [1L, 2L, 3L])\n    [2L, 4L,\
    \ 6L]\n*/\nlong[] add(long[] xs, long[] ys) \n{\n    long[] zs = new long[max(xs",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\nlong[] integral(long[] xs) \n{\n    long[]\
    \ result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    57L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at a given point.\n\
    \    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    57L\n    >>> evaluate([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the polynomial\
    \ xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n  \
    \  >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the polynomial xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the polynomial xs evaluated at x.\n    >>> evaluate([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n    }\n   \
    \ return result;\n}\n/*\n    Return the polynomial xs evaluated at x.\n    >>>\
    \ evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    67L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = (i +\
    \ 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    43L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n\
    \    {\n        result = result * x + xs[i];\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n \
    \   }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n \
    \   >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    >>> integral([1L, 2L,\
    \ 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n   \
    \ long[] result = new long[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at the given point.\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 3L)\n    34L\n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return the polynomial that is the product of the two given\
    \ polynomials.\n    >>> multiply([1L, 2L, 3L], [1L, 2L, 3L])\n    [1L, 4L, 10L,\
    \ 12L, 9L]\n    >>> multiply([1L, 2L, 3L], [1L, 2L])\n    [1L, 4L, 7L, 6L]\n*/\n\
    long[] multiply(long[] xs, long[] ys) \n{\n    long[] result = new long[xs.length\
    \ + ys.length - 1];\n    for (int i = 0; i < xs.length; i", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n \
    \   {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n    Return the degree of the polynomial.\n    >>> degree([1L, 2L, 3L])\n \
    \   2\n    >>> degree([1L, 2L, 3L, 4L])\n    3\n    >>> degree([1L])\n    0\n\
    \    >>> degree([])\n    -1\n*/", "{\n    long[] ys = new long[xs.length - 1];\n\
    \    for (int i = 0; i < ys.length; i++) \n    {\n        ys[i] = (i + 1) * xs[i\
    \ + 1];\n    }\n    return ys;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\n\
    double[] integral(long[] xs) \n{\n    double[] ys = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        ys[i + 1] = xs[i] /\
    \ (i + 1);\n    }\n    return ys;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n{\n    long y = 0;\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        y += xs[i] * pow(x,\
    \ i);\n    }\n    return y;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> value([1L, 2L, 3L],\
    \ 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n{\n    long y = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        y += xs[i] * pow(x, i);\n",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }", "{\n    return xs[1 .. $].map!(a => a * cast(long)(xs.length - 1)).array;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\nlong[] integral(long[] xs) \n{\n    return\
    \ [0L] ~ xs.map!(a => a / cast(long)(xs.length)).array;\n}\n/*\n    Return the\
    \ value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n   \
    \ 49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs,\
    \ long x) \n{\n    return xs.map!(a => a * x ^^ (xs.length - 1)).sum;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    return xs.map!(a => a * x ^^ (xs.length - 1)).sum;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    return xs.map!(a => a * x ^^ (xs.length - 1)).sum;\n}\n\
    /*\n    Return the value of a po", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n   ", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value(3L, [3L, 1L, 2L, 4L, 5L])\n    528L\n    >>> value(3L,\
    \ [1L, 2L, 3L])\n    20L\n*/\nlong value(long x, long[] xs) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value(3L, [3L, 1L, 2L, 4L, 5L])\n    528L\n    >>> value(3L,\
    \ [1L, 2L, 3L])\n    20L\n*/\nlong value(long x, long[] xs) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n", "{\n    long[] result = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    Return a polynomial with the same roots\
    \ as xs.\n    >>> roots([1L, -1L, 1L])\n    [1L, 1L]\n    >>> roots([1L, 0L, 0L,\
    \ 0L, -6L, 0L, 0L, 0L, 0L, 1L])\n    [1L, 0L, 0L, 0L, 1L]\n    >>> roots([1L,\
    \ -2L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L",
  "{\n    int n = xs.length;\n    long[] ys = new long[n - 1];\n    for (int i = 1;\
    \ i < n; i++) \n    {\n        ys[i - 1] = xs[i] * i;\n    }\n    return ys;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n\
    \ + 1];\n    for (int i = 0; i < n; i++) \n    {\n        ys[i + 1] = xs[i] /\
    \ (i + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> evaluate([1L,\
    \ 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ y = 0;\n    for (int i = xs.length - 1; i >= 0; i--) \n    {\n        y = y\
    \ * x + xs[i];\n    }\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2", "{\n    long[] res = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] res = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    71L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n\
    \    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{\n    long[] res = new long[xs.length - 1];\n\
    \    for (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] *\
    \ (i + 1);\n    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] res =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    67L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate", "{\n    long[] result = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i + 1);\n   \
    \ return result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in\
    \ the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long\
    \ result = 0;\n    for (int i = 0; i < xs.length; i++)\n        result += xs[i]\
    \ * pow(x, i);\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return coefficients of the polynomial\
    \ that is the product of this\n    polynomial and the given polynomial.\n    >>>\
    \ multiply([3L", "{\n    long[] res = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n  \
    \  }\n    return res;\n}", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = (i +\
    \ 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    >>>\
    \ integral([1L, 2L, 3L, 4L])\n    [0L, 1L, 1L, 1L, 1L]\n*/\nlong[] integral(long[]\
    \ xs) \n{\n    long[] result = new long[xs.length + 1];\n    for (int i = 0; i\
    \ < xs.length; i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n\
    \    return result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>>\
    \ polyval([1L, 2L, 3L], 1L)\n    6L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n \
    \   >>> polyval([1L, 2L, 3L], 1L)\n    6L\n    >>> polyval([1L, 2L, 3L], 2L)\n\
    \    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval([", "{\n    int n = xs.length;\n    long[] res = new long[n -\
    \ 1];\n    for (int i = 1; i < n; i++)\n    {\n        res[i - 1] = xs[i] * i;\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    int n = xs.length;\n\
    \    double[] res = new double[n + 1];\n    for (int i = 0; i < n; i++)\n    {\n\
    \        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    int n = xs.length;\n    long res = 0;\n\
    \    for (int i = 0; i < n; i++)\n    {\n        res = res * x + xs[i];\n    }\n\
    \    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0]\
    \ + xs[1] * x + xs[2] * x^2 + ....\n", "{\n    long[] ys = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < ys.length; i++) \n    {\n        ys[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return ys;\n}\n/*\n    Return the integral of a\
    \ polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n  \
    \  \n*/\ndouble[] integral(long[] xs) \n{\n    double[] ys = new double[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        ys[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return ys;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long\
    \ y = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        y = y * x +\
    \ xs[i];\n    }\n    return y;\n}\n/*\n    Return the value of a polynomial at\
    \ x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\ndouble polyval(double[] xs, double x) \n{\n\
    \    double y = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        y\
    \ = y *", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2)\n    69L\n    >>> evaluate([1L, 2L, 3L], 2)\n    17L\n \
    \   \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    65L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L,", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (size_t i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n    for\
    \ (size_t i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (size_t i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (size_t i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n", "{\n    long[] result = new long[xs.length - 1];\n \
    \   for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i +\
    \ 1] * (i + 1);\n    }\n    return result;\n}", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (long i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (long i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (long\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{\n    return xs[1..$].map!((x, i) => (i + 1) *\
    \ x)();\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return integral of this polynomial in the same\
    \ form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    return [0L] ~ xs.map!((x, i) => x / (i + 1))();\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    return xs.map!((a, i) =>\
    \ a * pow(x, i))().sum;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    return\
    \ xs.map!((a, i) => a * pow(x, i))().sum;\n}\n/*\n xs represent coefficients of",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the degree of a polynomial.\n    >>> degree([3L, 1L, 2L, 4L,\
    \ 5L])\n    4\n    >>> degree([1L, 2L, 3L])\n    2\n*/", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n  \
    \  {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return integral of this polynomial in the same form.\n  \
    \  >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    double[] integral(long[] xs) \n{\n    double[] result = new double[xs.length +\
    \ 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] =\
    \ xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    77L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate", "{\n\
    \    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n    \n*/\ndouble[] integral(long[] xs) \n\
    {\n    double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polynomial([3L, 1L,\
    \ 2L, 4L, 5L], 2L)\n    49L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n \
    \   \n*/\nlong polynomial(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polynomial([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polynomial([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\ndouble polynomial(double[] xs, double x) \n\
    {\n    double result = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n  \
    \      result += xs[i] *", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = (i +\
    \ 1) * xs[i + 1];\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++) \n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> value([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    59L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n  \
    \  \n*/\nlong value(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n", "{\n    long[] result = new long[xs.length - 1];\n    for (int i =\
    \ 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = (double)xs[i] / (i + 1);\n    }\n    return\
    \ result;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> evaluate([1L, 2L, 3L],\
    \ 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n xs represent coefficients of\
    \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n   ", "{\n    long[] result = new long[xs.length -\
    \ 1];\n    for (size_t i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = (i + 1) * xs[i + 1];\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n  \
    \  {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n\
    /*\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return integral of this polynomial in the same form.\n   \
    \ >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    113L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n", "{\n    long[] result\
    \ = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++) \n \
    \   {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n}",
  "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i <\
    \ result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i + 1);\n    }\n\
    \    return result;\n}", "{\n    long[] res = new long[xs.length - 1];\n    for\
    \ (int i = 0; i < res.length; i++)\n    {\n        res[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return res;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] res =\
    \ new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        res[i + 1] = xs[i] / (i + 1);\n    }\n    return res;\n}\n/*\n xs represent\
    \ coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\
    \     Return value of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ evaluate(long[] xs, long x) \n{\n    long res = 0;\n    for (int i = 0; i <\
    \ xs.length; i++)\n    {\n        res += xs[i] * pow(x, i);\n    }\n    return\
    \ res;\n}\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1]\
    \ * x + xs[2] * x^2 + ....\n     Return value of this polynomial at x.\n    >>>\
    \ evaluate", "{\n    long[] result = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n\
    \    }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    71L\n    >>> value([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> value([3L, 1L, 2L, 4L, 5L], 2L)\n    71L\n    >>> value([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong value(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*", "{\n    return xs[1..$].map!(a\
    \ => a * cast(long)(xs.length - 1));\n}\n/*\n    Return the integral of a polynomial.\n\
    \    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.25L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n    \n\
    */\ndouble[] integral(long[] xs) \n{\n    return [0.0] ~ xs.map!(a => a / cast(double)(xs.length));\n\
    }\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\n\
    long polyval(long[] xs, long x) \n{\n    long result = 0;\n    foreach (i, a;\
    \ xs) \n    {\n        result += a * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    foreach (i, a; xs)\
    \ \n    {\n        result += a * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n*/\ndouble[]\
    \ integral(long[] xs) \n{\n    double[] result = new double[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L,\
    \ 1L, 3L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs,\
    \ long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return coefficients of the polynomial obtained by multiplying\
    \ this polynomial with xs.\n    >>>", "{\n    return xs[1 .. $].map!(a => a *\
    \ cast(long)(xs.length - 1)).array;\n}", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
