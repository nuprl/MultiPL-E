name: HumanEval_62_derivative
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n xs represent coefficients of\
  \ a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative\
  \ of this polynomial in the same form.\n    >>> derivative([3L, 1L, 2L, 4L, 5L])\n\
  \    [1L, 4L, 12L, 20L]\n    >>> derivative([1L, 2L, 3L])\n    [2L, 6L]\n    \n\
  */\nlong[] derivative(long[] xs) \n"
tests: "unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L,\
  \ 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) ==\
  \ [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L,\
  \ 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n\
  }\nvoid main(){}"
completions: ["{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0;\
    \ i < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n \
    \   }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \ xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] *\
    \ x^2 + ....\n     Return the value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n   ", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value\
    \ of this polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    71L\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++) \n   \
    \ {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n   ", "{ \n    return\
    \ xs[1 .. $].array; \n}", "{\n    long[] result = new long[xs.length - 1];\n \
    \   for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result = result\
    \ * x + xs[i];\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2)\n    49L\n    >>> polyval([1L,\
    \ 2L, 3L], 2)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result = result\
    \ * x + xs[i];\n    }\n    return result;\n}", "{\n    int n = xs.length;\n  \
    \  long[] ys = new long[n - 1];\n    for (int i = 1; i < n; i++)\n    {\n    \
    \    ys[i - 1] = xs[i] * i;\n    }\n    return ys;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n*/\nlong[]\
    \ integral(long[] xs) \n{\n    int n = xs.length;\n    long[] ys = new long[n\
    \ + 1];\n    for (int i = 0; i < n; i++)\n    {\n        ys[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return ys;\n}\n/*\n    Return the value of a polynomial at\
    \ x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    97L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long y =\
    \ 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i] * pow(x,\
    \ i);\n    }\n    return y;\n}\n/*\n    Return the value of a polynomial at x.\n\
    \    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    97L\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long y = 0;\n\
    \    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i] * pow(x, i);\n",
  "{\n    long[] result = new long[$ - 1];\n    for (long i = 0; i < $ - 1; i++)\n\
    \    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    67L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (long i = 0; i < $; i++)\n  \
    \  {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    67L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (long i = 0; i < $; i++)\n  \
    \  {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    67L\n    >>> value([1L, 2L, 3L], 2L)\n    17L\n*/\nlong value(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (long i = 0; i < $; i++)\n  \
    \  {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of the polynomial at x.\n    >>> value([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    67L\n    >>> value([1L, 2L, 3", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    37L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n    Return the composition of two polynomials.\n\
    \    >>> composition([3L, 1L, 2L, 4L, 5L], [1L, 2L, 3L])\n    [3L, 11L, 35L, 101L,\
    \ 295L, 855L]\n    >>> composition([1L, 2L, 3L], [1L, 2L, 3L])\n    [1L, 6L, 21L,\
    \ 58L, 141L]\n    \n*/\nlong[] composition(long[] xs, long[] y", "{\n    return\
    \ xs[1..$].map!(a => a * cast(long)(xs.length - 1));\n}\n/*\n    Return the value\
    \ of the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, a; xs)\n    {\n        result\
    \ += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate2(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, a; xs)\n    {\n        result\
    \ += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate3(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, a; xs)\n    {\n        result\
    \ += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of\
    \ the polynomial at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    49L\n\
    \    >>> evaluate([1L, 2L, 3L], 3L)\n    28L\n*/\nlong evaluate4(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, a; xs)\n    {\n        result\
    \ +=", "{\n    long[] result = new long[xs.length - 1];\n    for (int i = 0; i\
    \ < result.length; i++)\n    {\n        result[i] = xs[i + 1] * (i + 1);\n   \
    \ }\n    return result;\n}\n/*\n    Return the integral of a polynomial.\n   \
    \ >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n    double[] result\
    \ = new double[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of the\
    \ n-th derivative of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L],\
    \ 2L, 3)\n    20L\n    \n*/\nlong polyval(long[] xs, long x, int n) \n{\n    if\
    \ (n == 0)\n    {\n        return polyval(xs, x);\n    }\n    else\n    {\n  \
    \      return polyval(derivative(xs), x, n - 1);\n    }\n}\n/*\n    Return the\
    \ value of the n-th derivative of a polynomial at x.\n    >>> polyval([3L, 1L,\
    \ 2L, 4L, 5L], 2L, 3)\n    20L\n    \n*/", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral\
    \ of a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1L, 1.0L]\n    \n*/\nlong[] integral(long[] xs) \n{\n    long[] result =\
    \ new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n \
    \       result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n \
    \   Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L],\
    \ 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\n\
    \    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n/*\n\
    \    Return the value of a polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L,\
    \ 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    \n*/\nlong\
    \ polyval(long[] xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i\
    \ < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\n\
    \    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L, 1L, 2L,\
    \ 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n    >>> integral([1L,\
    \ 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n    \n*/\ndouble[] integral(long[] xs) \n\
    {\n    double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial.\n    >>> polynomial([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    43L\n    >>> polynomial([1L, 2L, 3L], 2L)\n    17L\n    \n\
    */\nlong polynomial(long[] xs, long x) \n{\n    long result = 0;\n    for (int\
    \ i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n  \
    \  }\n    return result;\n}\n/*\n    Return the value of a polynomial.\n    >>>\
    \ polynomial([3L, 1L, 2L, 4L, 5L], 2L)\n    43L\n    >>> polynomial([1L, 2L, 3L],\
    \ 2L)\n    17L\n    \n*/\nlong polynomial(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i]\
    \ * pow(x,", "{\n    long[] result = new long[xs.length - 1];\n    for (int i\
    \ = 0; i < result.length; i++)\n        result[i] = xs[i + 1] * (i + 1);\n   \
    \ return result;\n}\n/*\n    Return the integral of a polynomial.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n   \
    \ >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1.0L]\n    \n*/\ndouble[] integral(long[]\
    \ xs) \n{\n    double[] result = new double[xs.length + 1];\n    for (int i =\
    \ 0; i < xs.length; i++)\n        result[i + 1] = xs[i] / (i + 1);\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n        result += xs[i] * pow(x, i);\n    return\
    \ result;\n}\n/*\n    Return the value of a polynomial at x", "{\n    return xs[1..$].map!(a\
    \ => a * cast(long)(xs.length - 1));\n}\n/*\n    Return the value of the polynomial\
    \ at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L,\
    \ 3L], 3L)\n    34L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    foreach (i, a; xs) \n    {\n        result += a * pow(x, i);\n   \
    \ }\n    return result;\n}\n/*\n    Return the value of the polynomial at x.\n\
    \    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n\
    \    34L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0;\n    foreach\
    \ (i, a; xs) \n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of the polynomial at x.\n    >>> polyval([1L, 2L,\
    \ 3L], 2L)\n    17L\n    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    foreach (i, a; xs) \n    {\n    \
    \    result += a * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the\
    \ value of the polynomial at x.\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    >>> polyval([1L, 2L, 3L], 3L)\n    34L\n*/\nlong polyval(long[] xs, long\
    \ x) \n{\n    long result = 0;\n    foreach (i, a; xs) \n    {\n        result\
    \ += a * pow(x, i);\n    }", "{ \n    long[] ys = new long[xs.length - 1];\n \
    \   for (int i = 0; i < ys.length; i++)\n    {\n        ys[i] = (i + 1) * xs[i\
    \ + 1];\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 2L, 4L, 5L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 3L]\n    \n*/\n\
    long[] integral(long[] xs) \n{ \n    long[] ys = new long[xs.length + 1];\n  \
    \  for (int i = 0; i < xs.length; i++)\n    {\n        ys[i + 1] = xs[i] / (i\
    \ + 1);\n    }\n    return ys;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x.\n    >>> evaluate([3L, 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> evaluate([1L,\
    \ 2L, 3L], 2L)\n    17L\n    \n*/\nlong evaluate(long[] xs, long x) \n{ \n   \
    \ long y = 0;\n    for (int i = 0; i < xs.length; i++)\n    {\n        y += xs[i]\
    \ * pow(x, i);\n    }\n    return y;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the value of this polynomial\
    \ at x", "{\n    return xs[1..$].map!(a => a * cast(long)(xs.length - 1));\n}\n\
    /*\n    Return the integral of a polynomial in the same form.\n    >>> integral([3L,\
    \ 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.25L]\n  \
    \  >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\nlong[] integral(long[]\
    \ xs) \n{\n    return [0L] ~ xs.map!(a => a / cast(long)(xs.length));\n}\n/*\n\
    \    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(long[] xs, long x) \n{\n    long result = 0L;\n    foreach\
    \ (i, a; xs)\n    {\n        result += a * pow(x, i);\n    }\n    return result;\n\
    }\n/*\n    Return the value of a polynomial at a given point.\n    >>> polyval([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    69L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong polyval(", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result\
    \ = new long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++)\n    {\n\
    \        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n\
    \    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n    Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    73L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    */\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for (int i\
    \ = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n    }\n\
    \    return result;\n}\n/*\n    xs represent coefficients of a polynomial.\n \
    \   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return value of this polynomial\
    \ at x.\n    >>> evaluate([", "{\n    long[] result = new long[xs.length - 1];\n\
    \    for (int i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i\
    \ + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n    Return the integral of\
    \ a polynomial.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L, 0.6666666666666666L,\
    \ 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L, 1L, 1.0L, 1.5L]\n*/\n\
    long[] integral(long[] xs) \n{\n    long[] result = new long[xs.length + 1];\n\
    \    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1] = xs[i]\
    \ / (i + 1);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    53L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);\n    }\n    return result;\n}\n/*\n    Return the value of a polynomial\
    \ at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n    53L\n    >>> polyval([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[] xs, long x) \n{\n    long result\
    \ = 0;\n    for (int i = 0; i < xs.length; i++) \n    {\n        result += xs[i]\
    \ * pow(x, i);", "{\n    long[] result = new long[xs.length - 1];\n    for (int\
    \ i = 0; i < result.length; i++) \n    {\n        result[i] = xs[i + 1] * (i +\
    \ 1);\n    }\n    return result;\n}\n/*\n    Return the integral of this polynomial\
    \ in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n    [0L, 3L, 0.5L,\
    \ 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L, 3L])\n    [0L,\
    \ 1L, 1.0L, 1.5L]\n*/\nlong[] integral(long[] xs) \n{\n    long[] result = new\
    \ long[xs.length + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n    \
    \    result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n}\n/*\n    Return\
    \ the value of this polynomial at x.\n    >>> polyval([3L, 1L, 2L, 4L, 5L], 2L)\n\
    \    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong polyval(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the value of this polynomial at x.\n    >>> polyval([3L, 1L, 2L,\
    \ 4L, 5L], 2L)\n    49L\n    >>> polyval([1L, 2L, 3L], 2L)\n    17L\n*/\nlong\
    \ polyval(long[] xs, double x) \n{\n    long result = 0;\n    for (int i = 0;\
    \ i < xs.length; i++) \n    {\n        result += xs[i] * pow(", "{\n    long[]\
    \ result = new long[xs.length - 1];\n    for (int i = 0; i < result.length; i++)\
    \ \n    {\n        result[i] = (i + 1) * xs[i + 1];\n    }\n    return result;\n\
    }\n/*\n    Return the polynomial with coefficients given by xs evaluated at x.\n\
    \    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n    >>> evaluate([1L, 2L, 3L], 0L)\n\
    \    1L\n    >>> evaluate([1L, 2L, 3L], 1L)\n    6L\n*/\nlong evaluate(long[]\
    \ xs, long x) \n{\n    long result = 0;\n    for (int i = 0; i < xs.length; i++)\
    \ \n    {\n        result += xs[i] * pow(x, i);\n    }\n    return result;\n}\n\
    /*\n    Return the polynomial with coefficients given by xs integrated from a\
    \ to b.\n    >>> integrate([1L, 2L, 3L], 0L, 1L)\n    3L\n    >>> integrate([1L,\
    \ 2L, 3L], 0L, 2L)\n    17L\n    >>> integrate([1L, 2L, 3L], 1L, 2L)\n    14L\n\
    */\nlong integrate(long[] xs, long a, long b) \n{\n    long[] result = new long[xs.length\
    \ + 1];\n    for (int i = 0; i < xs.length; i++) \n    {\n        result[i + 1]\
    \ = xs[i] / (i + 1);\n    }\n    return evaluate(result, b) - evaluate(result,\
    \ a);\n}\n/*\n    Return the polynomial with coefficients given by xs integrated\
    \ from 0 to b.\n    >>> integrate([1L, 2L, 3L], 1L)\n    6L\n    >>> integrate([1L,\
    \ 2L, 3L], 2L)\n    17L\n*/\nlong integrate(long[] xs, long b) \n{\n    return\
    \ integrate(xs, 0, b);\n}\n/*\n    Return the", "{\n    long[] result = new long[xs.length\
    \ - 1];\n    for (int i = 0; i < result.length; i++)\n    {\n        result[i]\
    \ = xs[i + 1] * (i + 1);\n    }\n    return result;\n}\n/*\n xs represent coefficients\
    \ of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return integral\
    \ of this polynomial in the same form.\n    >>> integral([3L, 1L, 2L, 4L, 5L])\n\
    \    [0L, 3L, 0.5L, 0.6666666666666666L, 1.25L, 1.2L]\n    >>> integral([1L, 2L,\
    \ 3L])\n    [0L, 1L, 1L, 1L]\n    \n*/\ndouble[] integral(long[] xs) \n{\n   \
    \ double[] result = new double[xs.length + 1];\n    for (int i = 0; i < xs.length;\
    \ i++)\n    {\n        result[i + 1] = xs[i] / (i + 1);\n    }\n    return result;\n\
    }\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n     Return value of this polynomial at x.\n    >>> evaluate([3L,\
    \ 1L, 2L, 4L, 5L], 2L)\n    63L\n    >>> evaluate([1L, 2L, 3L], 2L)\n    17L\n\
    \    \n*/\nlong evaluate(long[] xs, long x) \n{\n    long result = 0;\n    for\
    \ (int i = 0; i < xs.length; i++)\n    {\n        result += xs[i] * pow(x, i);\n\
    \    }\n    return result;\n}\n/*\n xs represent coefficients of a polynomial.\n\
    \    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return value of this polynomial\
    \ at x.\n    >>> evaluate"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
