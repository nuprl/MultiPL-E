language: d
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        if(game[i] == guess[i])\n            result[i] = 0;\n        else\n \
    \           result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result;\n    result.length = game.length;\n    foreach(i, v; game)\n\
    \    {\n        if(game[i] == guess[i])\n            result[i] = 0;\n        else\n\
    \            result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdaig95oa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, e; game)\n    {\n\
    \        result[i] = abs(e - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jhchxbp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i,e; game)\n    {\n\
    \        result[i] = abs(e - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo8bem650.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, ref e; game)\n \
    \   {\n        result[i] = abs(e - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulr7ikhg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        if(game[i] == guess[i])\n            result[i] = 0;\n        else\n \
    \           result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        if(guess[i] == game[i])\n            result[i] = 0;\n        else\n \
    \           result[i] = abs(guess[i] - game[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7yn6jw23.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, ref g; game)\n \
    \   {\n        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpte1k9tun.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, e; game)\n    {\n\
    \        result[i] = abs(e - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jhchxbp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i,e; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5uvcllx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    auto result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_hr7b95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, ref e; game)\n \
    \   {\n        result[i] = abs(e - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulr7ikhg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, e; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfs5xfk1e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, item; game)\n  \
    \  {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L,\
    \ 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydl_dned.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, val; game)\n   \
    \ {\n        result[i] = abs(val - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3tbw445n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i,v;game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxxxxiq5a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, e; game)\n    {\n\
    \        result[i] = abs(e - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jhchxbp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, e; game)\n    {\n\
    \        result[i] = abs(e - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jhchxbp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, e; game)\n    {\n\
    \        result[i] = abs(e - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jhchxbp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659795254
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, v; game)\n    {\n\
    \        result[i] = abs(v - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    foreach(i, g; game)\n    {\n\
    \        result[i] = abs(g - guess[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L,\
    \ 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L,\
    \ 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n\
    \    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nI think we all remember that\
    \ feeling when the result of some long-awaited\n    event is finally known. The\
    \ feelings and thoughts you have at that moment are\n    definitely worth noting\
    \ down and comparing.\n    Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n    You are given two arrays of scores\
    \ and guesses of equal length, where each index shows a match. \n    Return an\
    \ array of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n    [0L, 0L, 0L, 0L, 3L, 3L]\n\
    \    >>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n    [4L,\
    \ 4L, 1L, 0L, 0L, 6L]\n    \n*/\nlong[] compare(long[] game, long[] guess) \n\
    {\n    long[] result = new long[game.length];\n    for(int i = 0; i < game.length;\
    \ i++)\n    {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n\
    \    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L,\
    \ 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) ==\
    \ [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) ==\
    \ [2L, 0L, 0L, 1L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
