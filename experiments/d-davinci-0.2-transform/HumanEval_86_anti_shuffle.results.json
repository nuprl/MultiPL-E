{
  "language": "d",
  "name": "HumanEval_86_anti_shuffle",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6zyhdvs2.d(22): Error: undefined identifier `split`\n/tmp/tmp6zyhdvs2.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zyhdvs2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxp8gvg0m.d(22): Error: undefined identifier `split`\n/tmp/tmpxp8gvg0m.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxp8gvg0m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= anti_shuffle_word(word);\n        result ~= \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdi2tai41.d(22): Error: no property `split` for type `string`\n/tmp/tmpdi2tai41.d(26): Error: undefined identifier `anti_shuffle_word`\n/tmp/tmpdi2tai41.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdi2tai41.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk82y1dyn.d(22): Error: no property `split` for type `string`\n/tmp/tmpk82y1dyn.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpk82y1dyn.d(31): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk82y1dyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n        result ~= \" \";\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp_y1z0ho.d(22): Error: no property `split` for type `string`\n/tmp/tmpp_y1z0ho.d(26): Error: no property `split` for type `string`\n/tmp/tmpp_y1z0ho.d(27): Error: no property `sort` for type `string[]`\n/tmp/tmpp_y1z0ho.d(28): Error: no property `join` for type `string[]`\n/tmp/tmpp_y1z0ho.d(31): Error: no property `trim` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_y1z0ho.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ogwp47o.d(22): Error: no property `split` for type `string`\n/tmp/tmp7ogwp47o.d(31): Error: no property `sort` for type `string`\n/tmp/tmp7ogwp47o.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ogwp47o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted_word = \"\";\n        foreach(char c; word)\n        {\n            sorted_word ~= c;\n        }\n        sorted_word.sort();\n        result ~= sorted_word ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0n917uu0.d(22): Error: no property `split` for type `string`\n/tmp/tmp0n917uu0.d(31): Error: no property `sort` for type `string`\n/tmp/tmp0n917uu0.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0n917uu0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt6i5lcm8.d(22): Error: undefined identifier `split`\n/tmp/tmpt6i5lcm8.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6i5lcm8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpe34vjlkf.d(22): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe34vjlkf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted_word = sort(word);\n        result ~= sorted_word;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppgktg6y_.d(22): Error: undefined identifier `split`\n/tmp/tmppgktg6y_.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgktg6y_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgot38w9q.d(22): Error: undefined identifier `split`\n/tmp/tmpgot38w9q.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgot38w9q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string new_word = \"\";\n        foreach(c; word)\n        {\n            new_word ~= c;\n        }\n        new_word = sort(new_word);\n        result ~= new_word ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpho9mm_l7.d(22): Error: no property `split` for type `string`\n/tmp/tmpho9mm_l7.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpho9mm_l7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprynh96ya.d(22): Error: no property `split` for type `string`\n/tmp/tmprynh96ya.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprynh96ya.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplfyu5qis.d(22): Error: undefined identifier `split`\n/tmp/tmplfyu5qis.d(26): Error: undefined identifier `split`\n/tmp/tmplfyu5qis.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmplfyu5qis.d(28): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplfyu5qis.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word, \"\");\n        sort(chars);\n        result ~= join(chars, \"\");\n    }\n    return join(result, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphztd7se1.d(22): Error: undefined identifier `split`\n/tmp/tmphztd7se1.d(26): Error: undefined identifier `split`\n/tmp/tmphztd7se1.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmphztd7se1.d(28): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmphztd7se1.d(30): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphztd7se1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk82y1dyn.d(22): Error: no property `split` for type `string`\n/tmp/tmpk82y1dyn.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpk82y1dyn.d(31): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk82y1dyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4jl74agl.d(22): Error: undefined identifier `split`\n/tmp/tmp4jl74agl.d(29): Error: undefined identifier `minElement`\n/tmp/tmp4jl74agl.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jl74agl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqpsbz7o.d(22): Error: undefined identifier `split`\n/tmp/tmpaqpsbz7o.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmpaqpsbz7o.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqpsbz7o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo6zi9f91.d(22): Error: undefined identifier `split`\n/tmp/tmpo6zi9f91.d(29): Error: undefined identifier `minElement`\n/tmp/tmpo6zi9f91.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6zi9f91.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphfcmqpxq.d(22): Error: no property `split` for type `string`\n/tmp/tmphfcmqpxq.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfcmqpxq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= min(c, sorted);\n        }\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpex8lk0c0.d(22): Error: undefined identifier `split`\n/tmp/tmpex8lk0c0.d(29): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpex8lk0c0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0lx_7ecj.d(22): Error: no property `split` for type `string`\n/tmp/tmp0lx_7ecj.d(31): Error: no property `sort` for type `string`\n/tmp/tmp0lx_7ecj.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lx_7ecj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string new_word = \"\";\n        foreach(char c; word)\n        {\n            new_word ~= c;\n        }\n        new_word = sort(new_word);\n        result ~= new_word ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq224nkyp.d(22): Error: no property `split` for type `string`\n/tmp/tmpq224nkyp.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq224nkyp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo6zi9f91.d(22): Error: undefined identifier `split`\n/tmp/tmpo6zi9f91.d(29): Error: undefined identifier `minElement`\n/tmp/tmpo6zi9f91.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6zi9f91.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted_word = sort(word);\n        result ~= sorted_word;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppgktg6y_.d(22): Error: undefined identifier `split`\n/tmp/tmppgktg6y_.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgktg6y_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxy3ha4ai.d(22): Error: no property `split` for type `string`\n/tmp/tmpxy3ha4ai.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxy3ha4ai.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2fboaahn.d(22): Error: no property `split` for type `string`\n/tmp/tmp2fboaahn.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fboaahn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgot38w9q.d(22): Error: undefined identifier `split`\n/tmp/tmpgot38w9q.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgot38w9q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] sorted_words;\n    foreach(word; words)\n    {\n        string[] chars = split(word, \"\");\n        sort(chars);\n        sorted_words ~= join(chars, \"\");\n    }\n    return join(sorted_words, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpn993k4wp.d(22): Error: undefined identifier `split`\n/tmp/tmpn993k4wp.d(26): Error: undefined identifier `split`\n/tmp/tmpn993k4wp.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpn993k4wp.d(28): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmpn993k4wp.d(30): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn993k4wp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph4gco8o1.d(22): Error: undefined identifier `split`\n/tmp/tmph4gco8o1.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmph4gco8o1.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4gco8o1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string temp = \"\";\n        foreach(c; word)\n        {\n            temp ~= c;\n        }\n        temp.sort();\n        result ~= temp ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzztd_i1t.d(22): Error: no property `split` for type `string`\n/tmp/tmpzztd_i1t.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzztd_i1t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sorted = \"\";\n        foreach(char c; word)\n        {\n            sorted ~= c;\n        }\n        sort(sorted);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpct_dfz9b.d(22): Error: undefined identifier `split`\n/tmp/tmpct_dfz9b.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpct_dfz9b.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        result ~= anti_shuffle_word(word);\n        result ~= \" \";\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7wg1cjw3.d(22): Error: no property `split` for type `string`\n/tmp/tmp7wg1cjw3.d(26): Error: undefined identifier `anti_shuffle_word`\n/tmp/tmp7wg1cjw3.d(29): Error: no property `trim` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7wg1cjw3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sorted_word = sort(word);\n        result ~= sorted_word;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpktbp6_4p.d(22): Error: undefined identifier `split`\n/tmp/tmpktbp6_4p.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpktbp6_4p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted_word = \"\";\n        foreach(char c; word)\n        {\n            sorted_word ~= c;\n        }\n        sorted_word.sort();\n        result ~= sorted_word ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0n917uu0.d(22): Error: no property `split` for type `string`\n/tmp/tmp0n917uu0.d(31): Error: no property `sort` for type `string`\n/tmp/tmp0n917uu0.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0n917uu0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string new_word = \"\";\n        foreach(char c; word)\n        {\n            new_word ~= c;\n        }\n        new_word = new_word.sort();\n        result ~= new_word ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3_itones.d(22): Error: no property `split` for type `string`\n/tmp/tmp3_itones.d(31): Error: no property `sort` for type `string`\n/tmp/tmp3_itones.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_itones.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp714ztngf.d(22): Error: no property `split` for type `string`\n/tmp/tmp714ztngf.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp714ztngf.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp714ztngf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprynh96ya.d(22): Error: no property `split` for type `string`\n/tmp/tmprynh96ya.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprynh96ya.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sorted = \"\";\n        foreach(char c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwyekrfoj.d(22): Error: undefined identifier `split`\n/tmp/tmpwyekrfoj.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwyekrfoj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0lx_7ecj.d(22): Error: no property `split` for type `string`\n/tmp/tmp0lx_7ecj.d(31): Error: no property `sort` for type `string`\n/tmp/tmp0lx_7ecj.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lx_7ecj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnpetkghy.d(22): Error: no property `split` for type `string`\n/tmp/tmpnpetkghy.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpnpetkghy.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnpetkghy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq3ecetcp.d(22): Error: undefined identifier `split`\n/tmp/tmpq3ecetcp.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq3ecetcp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string new_word = \"\";\n        foreach(char c; word)\n        {\n            new_word ~= c;\n        }\n        sort(new_word);\n        result ~= new_word;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgyjl5kmi.d(22): Error: undefined identifier `split`\n/tmp/tmpgyjl5kmi.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgyjl5kmi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphfcmqpxq.d(22): Error: no property `split` for type `string`\n/tmp/tmphfcmqpxq.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfcmqpxq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo6zi9f91.d(22): Error: undefined identifier `split`\n/tmp/tmpo6zi9f91.d(29): Error: undefined identifier `minElement`\n/tmp/tmpo6zi9f91.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6zi9f91.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo6zi9f91.d(22): Error: undefined identifier `split`\n/tmp/tmpo6zi9f91.d(29): Error: undefined identifier `minElement`\n/tmp/tmpo6zi9f91.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6zi9f91.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprynh96ya.d(22): Error: no property `split` for type `string`\n/tmp/tmprynh96ya.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprynh96ya.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk82y1dyn.d(22): Error: no property `split` for type `string`\n/tmp/tmpk82y1dyn.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpk82y1dyn.d(31): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk82y1dyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string new_word = \"\";\n        foreach(char c; word)\n        {\n            new_word ~= c;\n        }\n        new_word = sort(new_word);\n        result ~= new_word ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq224nkyp.d(22): Error: no property `split` for type `string`\n/tmp/tmpq224nkyp.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq224nkyp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6zyhdvs2.d(22): Error: undefined identifier `split`\n/tmp/tmp6zyhdvs2.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zyhdvs2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string new_word = \"\";\n        foreach(char c; word)\n        {\n            new_word ~= c;\n        }\n        new_word.sort();\n        result ~= new_word ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptqqs8cye.d(22): Error: no property `split` for type `string`\n/tmp/tmptqqs8cye.d(31): Error: no property `sort` for type `string`\n/tmp/tmptqqs8cye.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqqs8cye.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sortedWord = \"\";\n        foreach(char c; word)\n        {\n            sortedWord ~= c;\n        }\n        sortedWord.sort;\n        result ~= sortedWord ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpcyc2xwao.d(22): Error: no property `split` for type `string`\n/tmp/tmpcyc2xwao.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcyc2xwao.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ogwp47o.d(22): Error: no property `split` for type `string`\n/tmp/tmp7ogwp47o.d(31): Error: no property `sort` for type `string`\n/tmp/tmp7ogwp47o.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ogwp47o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgot38w9q.d(22): Error: undefined identifier `split`\n/tmp/tmpgot38w9q.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgot38w9q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        std.algorithm.sort(chars);\n        result ~= to!string(chars);\n        result ~= \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppuey1_h3.d(22): Error: undefined identifier `split`\n/tmp/tmppuey1_h3.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmppuey1_h3.d(27): Error: undefined identifier `algorithm` in package `std`\n/tmp/tmppuey1_h3.d(28): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppuey1_h3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgqjdinqv.d(22): Error: undefined identifier `split`\n/tmp/tmpgqjdinqv.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgqjdinqv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort;\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt83i8mbe.d(22): Error: no property `split` for type `string`\n/tmp/tmpt83i8mbe.d(31): Error: no property `sort` for type `string`\n/tmp/tmpt83i8mbe.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt83i8mbe.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted_word = \"\";\n        foreach(c; word)\n        {\n            sorted_word ~= c;\n        }\n        sorted_word.sort();\n        result ~= sorted_word ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7q53zrx3.d(22): Error: no property `split` for type `string`\n/tmp/tmp7q53zrx3.d(31): Error: no property `sort` for type `string`\n/tmp/tmp7q53zrx3.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7q53zrx3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= anti_shuffle_word(word);\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj6j0w89s.d(22): Error: no property `split` for type `string`\n/tmp/tmpj6j0w89s.d(26): Error: undefined identifier `anti_shuffle_word`\n/tmp/tmpj6j0w89s.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6j0w89s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = word.dup;\n        sorted.sort();\n        result ~= sorted;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprvqm67qf.d(22): Error: no property `split` for type `string`\n/tmp/tmprvqm67qf.d(27): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprvqm67qf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= word.sort();\n        result ~= \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwt5o98qi.d(22): Error: no property `split` for type `string`\n/tmp/tmpwt5o98qi.d(26): Error: no property `sort` for type `string`\n/tmp/tmpwt5o98qi.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwt5o98qi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk82y1dyn.d(22): Error: no property `split` for type `string`\n/tmp/tmpk82y1dyn.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpk82y1dyn.d(31): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk82y1dyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word, \"\");\n        sort(chars);\n        result ~= join(chars, \"\");\n    }\n    return join(result, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphztd7se1.d(22): Error: undefined identifier `split`\n/tmp/tmphztd7se1.d(26): Error: undefined identifier `split`\n/tmp/tmphztd7se1.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmphztd7se1.d(28): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmphztd7se1.d(30): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphztd7se1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string temp = \"\";\n        foreach(c; word)\n        {\n            temp ~= c;\n        }\n        temp.sort();\n        result ~= temp ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzztd_i1t.d(22): Error: no property `split` for type `string`\n/tmp/tmpzztd_i1t.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzztd_i1t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt6i5lcm8.d(22): Error: undefined identifier `split`\n/tmp/tmpt6i5lcm8.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6i5lcm8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgqjdinqv.d(22): Error: undefined identifier `split`\n/tmp/tmpgqjdinqv.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgqjdinqv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sortedWord = \"\";\n        foreach(char c; word)\n        {\n            sortedWord ~= c;\n        }\n        sort(sortedWord);\n        result ~= sortedWord ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0655dznu.d(22): Error: no property `split` for type `string`\n/tmp/tmp0655dznu.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0655dznu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string new_word = \"\";\n        foreach(char c; word)\n        {\n            new_word ~= c;\n        }\n        sort(new_word);\n        result ~= new_word;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd1p8fmoe.d(22): Error: undefined identifier `split`\n/tmp/tmpd1p8fmoe.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd1p8fmoe.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp68zdu55n.d(22): Error: no property `split` for type `string`\n/tmp/tmp68zdu55n.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68zdu55n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] result;\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return join(result, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpscksn3lm.d(22): Error: undefined identifier `split`\n/tmp/tmpscksn3lm.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpscksn3lm.d(28): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscksn3lm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4jl74agl.d(22): Error: undefined identifier `split`\n/tmp/tmp4jl74agl.d(29): Error: undefined identifier `minElement`\n/tmp/tmp4jl74agl.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jl74agl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result;\n    string[] words = split(s);\n    foreach(word; words)\n    {\n        string sorted_word;\n        foreach(c; word)\n        {\n            sorted_word ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted_word ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdhag61h_.d(23): Error: undefined identifier `split`\n/tmp/tmpdhag61h_.d(29): Error: undefined identifier `minElement`\n/tmp/tmpdhag61h_.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdhag61h_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxy3ha4ai.d(22): Error: no property `split` for type `string`\n/tmp/tmpxy3ha4ai.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxy3ha4ai.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= word.sort();\n        result ~= \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwt5o98qi.d(22): Error: no property `split` for type `string`\n/tmp/tmpwt5o98qi.d(26): Error: no property `sort` for type `string`\n/tmp/tmpwt5o98qi.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwt5o98qi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6zyhdvs2.d(22): Error: undefined identifier `split`\n/tmp/tmp6zyhdvs2.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zyhdvs2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sortedWord = sort(word);\n        result ~= sortedWord;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7h4f4oew.d(22): Error: undefined identifier `split`\n/tmp/tmp7h4f4oew.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7h4f4oew.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ogwp47o.d(22): Error: no property `split` for type `string`\n/tmp/tmp7ogwp47o.d(31): Error: no property `sort` for type `string`\n/tmp/tmp7ogwp47o.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ogwp47o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprynh96ya.d(22): Error: no property `split` for type `string`\n/tmp/tmprynh96ya.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprynh96ya.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        result ~= anti_shuffle_word(word);\n        result ~= \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5j9p45v8.d(22): Error: no property `split` for type `string`\n/tmp/tmp5j9p45v8.d(26): Error: undefined identifier `anti_shuffle_word`\n/tmp/tmp5j9p45v8.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5j9p45v8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= word.sort();\n        result ~= \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwt5o98qi.d(22): Error: no property `split` for type `string`\n/tmp/tmpwt5o98qi.d(26): Error: no property `sort` for type `string`\n/tmp/tmpwt5o98qi.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwt5o98qi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sorted = \"\";\n        foreach(char c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4h75sj4j.d(22): Error: undefined identifier `split`\n/tmp/tmp4h75sj4j.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4h75sj4j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted_word = sort(word);\n        result ~= sorted_word;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpea2yo0ed.d(22): Error: no property `split` for type `string`\n/tmp/tmpea2yo0ed.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpea2yo0ed.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk82y1dyn.d(22): Error: no property `split` for type `string`\n/tmp/tmpk82y1dyn.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpk82y1dyn.d(31): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk82y1dyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string new_word = \"\";\n        foreach(char c; word)\n        {\n            new_word ~= c;\n        }\n        new_word = sort(new_word);\n        result ~= new_word ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbpa5uvp9.d(22): Error: no property `split` for type `string`\n/tmp/tmpbpa5uvp9.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpbpa5uvp9.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbpa5uvp9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= to!string(chars);\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp6rr3d6k.d(22): Error: undefined identifier `split`\n/tmp/tmpp6rr3d6k.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmpp6rr3d6k.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpp6rr3d6k.d(28): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6rr3d6k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        result ~= anti_shuffle_word(word);\n        result ~= \" \";\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7wg1cjw3.d(22): Error: no property `split` for type `string`\n/tmp/tmp7wg1cjw3.d(26): Error: undefined identifier `anti_shuffle_word`\n/tmp/tmp7wg1cjw3.d(29): Error: no property `trim` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7wg1cjw3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnpetkghy.d(22): Error: no property `split` for type `string`\n/tmp/tmpnpetkghy.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpnpetkghy.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnpetkghy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2fboaahn.d(22): Error: no property `split` for type `string`\n/tmp/tmp2fboaahn.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fboaahn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string res = \"\";\n    foreach(word; words)\n    {\n        res ~= word.sort();\n        res ~= \" \";\n    }\n    return res.trimRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphjuzi8li.d(22): Error: no property `split` for type `string`\n/tmp/tmphjuzi8li.d(26): Error: no property `sort` for type `string`\n/tmp/tmphjuzi8li.d(29): Error: no property `trimRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjuzi8li.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk82y1dyn.d(22): Error: no property `split` for type `string`\n/tmp/tmpk82y1dyn.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpk82y1dyn.d(31): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk82y1dyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sortedWord = \"\";\n        foreach(char c; word)\n        {\n            sortedWord ~= c;\n        }\n        sortedWord.sort();\n        result ~= sortedWord ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppzwpfhi3.d(22): Error: no property `split` for type `string`\n/tmp/tmppzwpfhi3.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzwpfhi3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk82y1dyn.d(22): Error: no property `split` for type `string`\n/tmp/tmpk82y1dyn.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpk82y1dyn.d(31): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk82y1dyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmfv2u2_x.d(22): Error: no property `split` for type `string`\n/tmp/tmpmfv2u2_x.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpmfv2u2_x.d(29): Error: no property `trimRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmfv2u2_x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgot38w9q.d(22): Error: undefined identifier `split`\n/tmp/tmpgot38w9q.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgot38w9q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphfcmqpxq.d(22): Error: no property `split` for type `string`\n/tmp/tmphfcmqpxq.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfcmqpxq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp68zdu55n.d(22): Error: no property `split` for type `string`\n/tmp/tmp68zdu55n.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp68zdu55n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sorted = \"\";\n        foreach(char c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7iauib9_.d(22): Error: no property `split` for type `string`\n/tmp/tmp7iauib9_.d(31): Error: no property `sort` for type `string`\n/tmp/tmp7iauib9_.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7iauib9_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphfcmqpxq.d(22): Error: no property `split` for type `string`\n/tmp/tmphfcmqpxq.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfcmqpxq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6zyhdvs2.d(22): Error: undefined identifier `split`\n/tmp/tmp6zyhdvs2.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zyhdvs2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ogwp47o.d(22): Error: no property `split` for type `string`\n/tmp/tmp7ogwp47o.d(31): Error: no property `sort` for type `string`\n/tmp/tmp7ogwp47o.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ogwp47o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm6vl0985.d(22): Error: undefined identifier `split`\n/tmp/tmpm6vl0985.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6vl0985.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= to!string(chars);\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp6rr3d6k.d(22): Error: undefined identifier `split`\n/tmp/tmpp6rr3d6k.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmpp6rr3d6k.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpp6rr3d6k.d(28): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp6rr3d6k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] sortedWords = new string[words.length];\n    foreach(i, word; words)\n    {\n        sortedWords[i] = sort(word);\n    }\n    return join(sortedWords, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5ltrqraj.d(22): Error: no property `split` for type `string`\n/tmp/tmp5ltrqraj.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp5ltrqraj.d(28): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ltrqraj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = split(word, \"\");\n        sort(chars);\n        result ~= join(chars, \"\");\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplekvntar.d(22): Error: undefined identifier `split`\n/tmp/tmplekvntar.d(26): Error: undefined identifier `split`\n/tmp/tmplekvntar.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmplekvntar.d(28): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplekvntar.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph4gco8o1.d(22): Error: undefined identifier `split`\n/tmp/tmph4gco8o1.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmph4gco8o1.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4gco8o1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo6zi9f91.d(22): Error: undefined identifier `split`\n/tmp/tmpo6zi9f91.d(29): Error: undefined identifier `minElement`\n/tmp/tmpo6zi9f91.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6zi9f91.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0lx_7ecj.d(22): Error: no property `split` for type `string`\n/tmp/tmp0lx_7ecj.d(31): Error: no property `sort` for type `string`\n/tmp/tmp0lx_7ecj.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lx_7ecj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt6i5lcm8.d(22): Error: undefined identifier `split`\n/tmp/tmpt6i5lcm8.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6i5lcm8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    auto words = s.split(\" \");\n    string result;\n    foreach(word; words)\n    {\n        auto chars = word.split(\"\");\n        chars.sort!((a, b) => a > b);\n        result ~= chars.join(\"\");\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjth77ldy.d(22): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjth77ldy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(char c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpje57qokt.d(22): Error: undefined identifier `split`\n/tmp/tmpje57qokt.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpje57qokt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sortedWord = sort(word);\n        result ~= sortedWord;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkyvaycu5.d(22): Error: no property `split` for type `string`\n/tmp/tmpkyvaycu5.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyvaycu5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sortedWord = \"\";\n        foreach(char c; word)\n        {\n            sortedWord ~= c;\n        }\n        sortedWord.sort();\n        result ~= sortedWord ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3pwtpd90.d(22): Error: no property `split` for type `string`\n/tmp/tmp3pwtpd90.d(31): Error: no property `sort` for type `string`\n/tmp/tmp3pwtpd90.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pwtpd90.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo6zi9f91.d(22): Error: undefined identifier `split`\n/tmp/tmpo6zi9f91.d(29): Error: undefined identifier `minElement`\n/tmp/tmpo6zi9f91.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6zi9f91.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= anti_shuffle_word(word);\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj6j0w89s.d(22): Error: no property `split` for type `string`\n/tmp/tmpj6j0w89s.d(26): Error: undefined identifier `anti_shuffle_word`\n/tmp/tmpj6j0w89s.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6j0w89s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm6vl0985.d(22): Error: undefined identifier `split`\n/tmp/tmpm6vl0985.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6vl0985.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo6zi9f91.d(22): Error: undefined identifier `split`\n/tmp/tmpo6zi9f91.d(29): Error: undefined identifier `minElement`\n/tmp/tmpo6zi9f91.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6zi9f91.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words) {\n        result ~= sort(word);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdtjz4_re.d(22): Error: undefined identifier `split`\n/tmp/tmpdtjz4_re.d(25): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtjz4_re.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string[] new_words;\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        new_words ~= chars.idup;\n    }\n    return new_words.join(\" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3cu8qm4r.d(22): Error: no property `split` for type `string`\n/tmp/tmp3cu8qm4r.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp3cu8qm4r.d(30): Error: no property `join` for type `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3cu8qm4r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpze89abvl.d(22): Error: undefined identifier `split`\n/tmp/tmpze89abvl.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpze89abvl.d(29): Error: no property `trimRight` for type `string`\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    auto words = s.split;\n    string result;\n    foreach(word; words)\n    {\n        auto chars = word.to!(dchar[]);\n        std.algorithm.sort(chars);\n        result ~= chars.idup;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnrhhcsq7.d(22): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnrhhcsq7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted_word = \"\";\n        foreach(c; word)\n        {\n            sorted_word ~= c;\n        }\n        sorted_word.sort();\n        result ~= sorted_word ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr1ernjym.d(22): Error: no property `split` for type `string`\n/tmp/tmpr1ernjym.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr1ernjym.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpigllza0x.d(22): Error: undefined identifier `split`\n/tmp/tmpigllza0x.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpigllza0x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sorted = word.dup;\n        sort(sorted);\n        result ~= sorted;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb4pjip7f.d(22): Error: no property `split` for type `string`\n/tmp/tmpb4pjip7f.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb4pjip7f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sortedWord = sort(word);\n        result ~= sortedWord;\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphh7cblym.d(22): Error: no property `split` for type `string`\n/tmp/tmphh7cblym.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmphh7cblym.d(30): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphh7cblym.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm6vl0985.d(22): Error: undefined identifier `split`\n/tmp/tmpm6vl0985.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6vl0985.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(string word; words)\n    {\n        result ~= sort(word);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpv8nim0ch.d(22): Error: undefined identifier `split`\n/tmp/tmpv8nim0ch.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv8nim0ch.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwijrglh0.d(22): Error: no property `split` for type `string`\n/tmp/tmpwijrglh0.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpwijrglh0.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwijrglh0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string[] new_words;\n    foreach(word; words)\n    {\n        new_words ~= sort(word);\n    }\n    return join(new_words, \" \");\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph9awrdth.d(22): Error: undefined identifier `split`\n/tmp/tmph9awrdth.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmph9awrdth.d(28): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph9awrdth.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm6vl0985.d(22): Error: undefined identifier `split`\n/tmp/tmpm6vl0985.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6vl0985.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt6i5lcm8.d(22): Error: undefined identifier `split`\n/tmp/tmpt6i5lcm8.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6i5lcm8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sortedWord = \"\";\n        foreach(char c; word)\n        {\n            sortedWord ~= c;\n        }\n        sortedWord.sort();\n        result ~= sortedWord ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppzwpfhi3.d(22): Error: no property `split` for type `string`\n/tmp/tmppzwpfhi3.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppzwpfhi3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps09uuwig.d(22): Error: undefined identifier `split`\n/tmp/tmps09uuwig.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps09uuwig.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo6zi9f91.d(22): Error: undefined identifier `split`\n/tmp/tmpo6zi9f91.d(29): Error: undefined identifier `minElement`\n/tmp/tmpo6zi9f91.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo6zi9f91.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted_word = \"\";\n        foreach(char c; word)\n        {\n            sorted_word ~= c;\n        }\n        sorted_word.sort();\n        result ~= sorted_word ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0n917uu0.d(22): Error: no property `split` for type `string`\n/tmp/tmp0n917uu0.d(31): Error: no property `sort` for type `string`\n/tmp/tmp0n917uu0.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0n917uu0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphfcmqpxq.d(22): Error: no property `split` for type `string`\n/tmp/tmphfcmqpxq.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfcmqpxq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort(word);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq3ecetcp.d(22): Error: undefined identifier `split`\n/tmp/tmpq3ecetcp.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq3ecetcp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm6vl0985.d(22): Error: undefined identifier `split`\n/tmp/tmpm6vl0985.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm6vl0985.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string new_word = \"\";\n        foreach(char c; word)\n        {\n            new_word ~= c;\n        }\n        new_word.sort();\n        result ~= new_word ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqmgj3tt6.d(22): Error: no property `split` for type `string`\n/tmp/tmpqmgj3tt6.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmgj3tt6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphfcmqpxq.d(22): Error: no property `split` for type `string`\n/tmp/tmphfcmqpxq.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfcmqpxq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted_word = \"\";\n        foreach(c; word)\n        {\n            sorted_word ~= minElement(word);\n            word = word.replaceFirst(minElement(word), \"\");\n        }\n        result ~= sorted_word ~ \" \";\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4yrr4izz.d(22): Error: no property `split` for type `string`\n/tmp/tmp4yrr4izz.d(29): Error: undefined identifier `minElement`\n/tmp/tmp4yrr4izz.d(30): Error: no property `replaceFirst` for type `string`\n/tmp/tmp4yrr4izz.d(34): Error: no property `trimRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4yrr4izz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp93lbjk0r.d(22): Error: no property `split` for type `string`\n/tmp/tmp93lbjk0r.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp93lbjk0r.d(31): Error: no property `trimRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp93lbjk0r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sorted = \"\";\n        foreach(char c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7xyg3avs.d(22): Error: no property `split` for type `string`\n/tmp/tmp7xyg3avs.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xyg3avs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= anti_shuffle_word(word);\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj6j0w89s.d(22): Error: no property `split` for type `string`\n/tmp/tmpj6j0w89s.d(26): Error: undefined identifier `anti_shuffle_word`\n/tmp/tmpj6j0w89s.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj6j0w89s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= word.sort();\n        result ~= \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwt5o98qi.d(22): Error: no property `split` for type `string`\n/tmp/tmpwt5o98qi.d(26): Error: no property `sort` for type `string`\n/tmp/tmpwt5o98qi.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwt5o98qi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2fboaahn.d(22): Error: no property `split` for type `string`\n/tmp/tmp2fboaahn.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fboaahn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n    {\n        auto chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp287onm6w.d(22): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp287onm6w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt6i5lcm8.d(22): Error: undefined identifier `split`\n/tmp/tmpt6i5lcm8.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6i5lcm8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= min(c, sorted);\n        }\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpex8lk0c0.d(22): Error: undefined identifier `split`\n/tmp/tmpex8lk0c0.d(29): Error: undefined identifier `min`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpex8lk0c0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        std.algorithm.sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfve7kl4h.d(22): Error: no property `split` for type `string`\n/tmp/tmpfve7kl4h.d(27): Error: undefined identifier `algorithm` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfve7kl4h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2fboaahn.d(22): Error: no property `split` for type `string`\n/tmp/tmp2fboaahn.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fboaahn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split;\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= word.sort;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5ns8swc9.d(22): Error: no property `split` for type `string`\n/tmp/tmp5ns8swc9.d(26): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ns8swc9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprynh96ya.d(22): Error: no property `split` for type `string`\n/tmp/tmprynh96ya.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprynh96ya.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ogwp47o.d(22): Error: no property `split` for type `string`\n/tmp/tmp7ogwp47o.d(31): Error: no property `sort` for type `string`\n/tmp/tmp7ogwp47o.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ogwp47o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words) {\n        string sorted_word = sort!((a, b) => a < b)(word);\n        result ~= sorted_word;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9dva6ejo.d(22): Error: no property `split` for type `string`\n/tmp/tmp9dva6ejo.d(25): Error: template instance `sort!((a, b) => a < b)` template `sort` is not defined, did you mean sqrt?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9dva6ejo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= to!string(chars);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp_yzctbc.d(22): Error: undefined identifier `split`\n/tmp/tmpp_yzctbc.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmpp_yzctbc.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpp_yzctbc.d(28): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp_yzctbc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk82y1dyn.d(22): Error: no property `split` for type `string`\n/tmp/tmpk82y1dyn.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpk82y1dyn.d(31): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk82y1dyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string result;\n    string[] words = split(s, \" \");\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= to!string(chars);\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmp_5f82p.d(23): Error: undefined identifier `split`\n/tmp/tmpmp_5f82p.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmpmp_5f82p.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpmp_5f82p.d(28): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmp_5f82p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    auto words = split(s);\n    string result;\n    foreach(word; words)\n    {\n        string sorted;\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sort(sorted);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplxyfkl92.d(22): Error: undefined identifier `split`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxyfkl92.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string new_word = \"\";\n        foreach(c; word)\n        {\n            new_word ~= c;\n        }\n        new_word = sort(new_word);\n        result ~= new_word ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxmcrws7r.d(22): Error: undefined identifier `split`\n/tmp/tmpxmcrws7r.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmcrws7r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph4gco8o1.d(22): Error: undefined identifier `split`\n/tmp/tmph4gco8o1.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmph4gco8o1.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4gco8o1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    auto words = s.split(\" \");\n    string result;\n    foreach(word; words)\n    {\n        auto chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi2hta4gi.d(22): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi2hta4gi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sortedWord = sort(word);\n        result ~= sortedWord;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_nwc1588.d(22): Error: undefined identifier `split`\n/tmp/tmp_nwc1588.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_nwc1588.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0lx_7ecj.d(22): Error: no property `split` for type `string`\n/tmp/tmp0lx_7ecj.d(31): Error: no property `sort` for type `string`\n/tmp/tmp0lx_7ecj.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lx_7ecj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6zyhdvs2.d(22): Error: undefined identifier `split`\n/tmp/tmp6zyhdvs2.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zyhdvs2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0lx_7ecj.d(22): Error: no property `split` for type `string`\n/tmp/tmp0lx_7ecj.d(31): Error: no property `sort` for type `string`\n/tmp/tmp0lx_7ecj.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lx_7ecj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sort(sorted);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3krhzyd0.d(22): Error: undefined identifier `split`\n/tmp/tmp3krhzyd0.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3krhzyd0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split;\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= word.sort;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5ns8swc9.d(22): Error: no property `split` for type `string`\n/tmp/tmp5ns8swc9.d(26): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ns8swc9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprynh96ya.d(22): Error: no property `split` for type `string`\n/tmp/tmprynh96ya.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprynh96ya.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string new_word = \"\";\n        foreach(char c; word)\n        {\n            new_word ~= c;\n        }\n        new_word = new_word.sort();\n        result ~= new_word ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3_itones.d(22): Error: no property `split` for type `string`\n/tmp/tmp3_itones.d(31): Error: no property `sort` for type `string`\n/tmp/tmp3_itones.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_itones.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        foreach(char; chars)\n        {\n            result ~= char;\n        }\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpls5vkv27.d(28): Error: no identifier for declarator `char`\n/tmp/tmpls5vkv27.d(30): Error: found `;` when expecting `.` following char\n/tmp/tmpls5vkv27.d(31): Error: found `}` when expecting identifier following `char`.\n/tmp/tmpls5vkv27.d(32): Error: found `result` when expecting `;` following statement\n/tmp/tmpls5vkv27.d(32): Error: found `~=` instead of statement\n/tmp/tmpls5vkv27.d(36): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpls5vkv27.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = word.dup;\n        sort(sorted);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpimx593ca.d(22): Error: no property `split` for type `string`\n/tmp/tmpimx593ca.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpimx593ca.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmph4gco8o1.d(22): Error: undefined identifier `split`\n/tmp/tmph4gco8o1.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmph4gco8o1.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph4gco8o1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sort(sorted);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3krhzyd0.d(22): Error: undefined identifier `split`\n/tmp/tmp3krhzyd0.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3krhzyd0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = split(word, \"\");\n        chars.sort();\n        result ~= join(chars, \"\");\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpik2pxdui.d(22): Error: undefined identifier `split`\n/tmp/tmpik2pxdui.d(26): Error: undefined identifier `split`\n/tmp/tmpik2pxdui.d(27): Error: no property `sort` for type `string[]`\n/tmp/tmpik2pxdui.d(28): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpik2pxdui.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt6i5lcm8.d(22): Error: undefined identifier `split`\n/tmp/tmpt6i5lcm8.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt6i5lcm8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= minElement(word);\n            word = replace(word, minElement(word), \"\");\n        }\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4jl74agl.d(22): Error: undefined identifier `split`\n/tmp/tmp4jl74agl.d(29): Error: undefined identifier `minElement`\n/tmp/tmp4jl74agl.d(30): Error: undefined identifier `replace`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jl74agl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string newWord = \"\";\n        foreach(c; word)\n        {\n            newWord ~= c;\n        }\n        sort(newWord);\n        result ~= newWord;\n        result ~= \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprr0wuiws.d(22): Error: undefined identifier `split`\n/tmp/tmprr0wuiws.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprr0wuiws.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= to!string(chars);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoxm_ekl4.d(22): Error: undefined identifier `split`\n/tmp/tmpoxm_ekl4.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmpoxm_ekl4.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpoxm_ekl4.d(28): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxm_ekl4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ogwp47o.d(22): Error: no property `split` for type `string`\n/tmp/tmp7ogwp47o.d(31): Error: no property `sort` for type `string`\n/tmp/tmp7ogwp47o.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ogwp47o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwijrglh0.d(22): Error: no property `split` for type `string`\n/tmp/tmpwijrglh0.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpwijrglh0.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwijrglh0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = to!(char[])(word);\n        sort(chars);\n        result ~= to!string(chars);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoxm_ekl4.d(22): Error: undefined identifier `split`\n/tmp/tmpoxm_ekl4.d(26): Error: template instance `to!(char[])` template `to` is not defined, did you mean No?\n/tmp/tmpoxm_ekl4.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpoxm_ekl4.d(28): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxm_ekl4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = sort!((a, b) => a < b)(word);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpamho1vg7.d(22): Error: undefined identifier `split`\n/tmp/tmpamho1vg7.d(26): Error: template instance `sort!((a, b) => a < b)` template `sort` is not defined, did you mean sqrt?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpamho1vg7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        result ~= chars.join(\"\");\n        result ~= \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpks10wkfn.d(22): Error: no property `split` for type `string`\n/tmp/tmpks10wkfn.d(26): Error: no property `split` for type `string`\n/tmp/tmpks10wkfn.d(27): Error: no property `sort` for type `string[]`\n/tmp/tmpks10wkfn.d(28): Error: no property `join` for type `string[]`\n/tmp/tmpks10wkfn.d(31): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpks10wkfn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string[] result;\n    foreach(word; words)\n    {\n        string[] chars = split(word);\n        sort(chars);\n        result ~= join(chars);\n    }\n    return join(result);\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ank1tr6.d(22): Error: undefined identifier `split`\n/tmp/tmp7ank1tr6.d(26): Error: undefined identifier `split`\n/tmp/tmp7ank1tr6.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp7ank1tr6.d(28): Error: undefined identifier `join`, did you mean function `main`?\n/tmp/tmp7ank1tr6.d(30): Error: undefined identifier `join`, did you mean function `main`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ank1tr6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string new_word = \"\";\n        foreach(char c; word)\n        {\n            new_word ~= c;\n        }\n        new_word.sort();\n        result ~= new_word ~ \" \";\n    }\n    return result.trim();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp55594xcm.d(22): Error: no property `split` for type `string`\n/tmp/tmp55594xcm.d(31): Error: no property `sort` for type `string`\n/tmp/tmp55594xcm.d(34): Error: no property `trim` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp55594xcm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwijrglh0.d(22): Error: no property `split` for type `string`\n/tmp/tmpwijrglh0.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpwijrglh0.d(29): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwijrglh0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sorted = \"\";\n        foreach(char c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4h75sj4j.d(22): Error: undefined identifier `split`\n/tmp/tmp4h75sj4j.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4h75sj4j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.idup;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphfcmqpxq.d(22): Error: no property `split` for type `string`\n/tmp/tmphfcmqpxq.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphfcmqpxq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    auto words = s.split(\" \");\n    string result;\n    foreach(word; words)\n    {\n        auto chars = word.split(\"\");\n        chars.sort!((a, b) => a.front < b.front);\n        result ~= chars.join(\"\");\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp0bl7bs9.d(22): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp0bl7bs9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0lx_7ecj.d(22): Error: no property `split` for type `string`\n/tmp/tmp0lx_7ecj.d(31): Error: no property `sort` for type `string`\n/tmp/tmp0lx_7ecj.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lx_7ecj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp93lbjk0r.d(22): Error: no property `split` for type `string`\n/tmp/tmp93lbjk0r.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp93lbjk0r.d(31): Error: no property `trimRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp93lbjk0r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s);\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(char c; word)\n        {\n            sorted ~= c;\n        }\n        sorted = sort(sorted);\n        result ~= sorted;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpje57qokt.d(22): Error: undefined identifier `split`\n/tmp/tmpje57qokt.d(31): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpje57qokt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.trimRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp93lbjk0r.d(22): Error: no property `split` for type `string`\n/tmp/tmp93lbjk0r.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmp93lbjk0r.d(31): Error: no property `trimRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp93lbjk0r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        string sorted = \"\";\n        foreach(char c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7xyg3avs.d(22): Error: no property `split` for type `string`\n/tmp/tmp7xyg3avs.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xyg3avs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0lx_7ecj.d(22): Error: no property `split` for type `string`\n/tmp/tmp0lx_7ecj.d(31): Error: no property `sort` for type `string`\n/tmp/tmp0lx_7ecj.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0lx_7ecj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string[] chars = word.split(\"\");\n        chars.sort();\n        foreach(char; chars)\n        {\n            result ~= char;\n        }\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpls5vkv27.d(28): Error: no identifier for declarator `char`\n/tmp/tmpls5vkv27.d(30): Error: found `;` when expecting `.` following char\n/tmp/tmpls5vkv27.d(31): Error: found `}` when expecting identifier following `char`.\n/tmp/tmpls5vkv27.d(32): Error: found `result` when expecting `;` following statement\n/tmp/tmpls5vkv27.d(32): Error: found `~=` instead of statement\n/tmp/tmpls5vkv27.d(36): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpls5vkv27.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        char[] chars = word.dup;\n        sort(chars);\n        result ~= chars;\n        result ~= \" \";\n    }\n    return result.stripRight;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk82y1dyn.d(22): Error: no property `split` for type `string`\n/tmp/tmpk82y1dyn.d(27): Error: undefined identifier `sort`, did you mean function `sqrt`?\n/tmp/tmpk82y1dyn.d(31): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk82y1dyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sorted = \"\";\n        foreach(c; word)\n        {\n            sorted ~= c;\n        }\n        sorted.sort();\n        result ~= sorted ~ \" \";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2fboaahn.d(22): Error: no property `split` for type `string`\n/tmp/tmp2fboaahn.d(31): Error: no property `sort` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fboaahn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        string sortedWord = \"\";\n        foreach(char c; word)\n        {\n            sortedWord ~= min(word);\n            word = word.replaceFirst(min(word), \"\");\n        }\n        result ~= sortedWord ~ \" \";\n    }\n    return result.stripRight();\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpanpy5hhr.d(22): Error: no property `split` for type `string`\n/tmp/tmpanpy5hhr.d(29): Error: undefined identifier `min`, did you mean function `main`?\n/tmp/tmpanpy5hhr.d(30): Error: no property `replaceFirst` for type `string`\n/tmp/tmpanpy5hhr.d(34): Error: no property `stripRight` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpanpy5hhr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    >>> anti_shuffle(\"Hi\")\n    \"Hi\"\n    >>> anti_shuffle(\"hello\")\n    \"ehllo\"\n    >>> anti_shuffle(\"Hello World!!!\")\n    \"Hello !!!Wdlor\"\n    \n*/\nstring anti_shuffle(string s) \n{\n    string[] words = split(s, \" \");\n    string result = \"\";\n    foreach(word; words)\n    {\n        result ~= sort(word);\n        result ~= \" \";\n    }\n    return result[0..$-1];\n}\nunittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps09uuwig.d(22): Error: undefined identifier `split`\n/tmp/tmps09uuwig.d(26): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps09uuwig.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164355
    }
  ]
}