language: d
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6n4qxlo.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo6n4qxlo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28grjq24.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp28grjq24.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d +\
    \ cast(long)(d - cast(long)d);\n    }\n    else\n    {\n        result = cast(long)d\
    \ - cast(long)(d - cast(long)d);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7ua4z3v5.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7ua4z3v5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqcd8wiee.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqcd8wiee.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28grjq24.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp28grjq24.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    long l = to!long(d);\n    if (abs(d - l) < 0.5)\n        return l;\n    else\n\
    \        return l + sign(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr8ocxlt0.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\n/tmp/tmpr8ocxlt0.d(25): Error: template
    instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpr8ocxlt0.d(29):
    Error: undefined identifier `sign`, did you mean template `sgn(F)(F x)`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8ocxlt0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d1 = floor(d);\n    double d2 = ceil(d);\n\
    \    if (d - d1 > d2 - d)\n        result = cast(long)d2;\n    else\n        result\
    \ = cast(long)d1;\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2gm7h7i6.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp2gm7h7i6.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28grjq24.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp28grjq24.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    auto result = to!long(value);\n\
    \    if (result == to!long(value))\n        return result;\n    else\n       \
    \ return result + sign(value.to!double);\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpviyf5d9a.d(24): Error: template instance `to!long` template
    `to` is not defined, did you mean No?\n/tmp/tmpviyf5d9a.d(25): Error: template
    instance `to!long` template `to` is not defined, did you mean No?\n/tmp/tmpviyf5d9a.d(28):
    Error: undefined identifier `sign`, did you mean template `sgn(F)(F x)`?\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpviyf5d9a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_abs = abs(d);\n    long l = to!long(d_abs);\n\
    \    double d_diff = d_abs - l;\n    if (d_diff >= 0.5)\n    {\n        result\
    \ = l + 1;\n    }\n    else\n    {\n        result = l;\n    }\n    if (d < 0)\n\
    \    {\n        result = -result;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb_uyfiwj.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\n/tmp/tmpb_uyfiwj.d(27): Error: template
    instance `to!long` template `to` is not defined, did you mean No?\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpb_uyfiwj.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) d;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzj5dub4_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    auto result = to!long(value);\n\
    \    if (value.length > 1)\n    {\n        auto fraction = value[$-1..$];\n  \
    \      auto fraction_value = to!long(fraction);\n        if (fraction_value >=\
    \ 5)\n        {\n            result++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuakwuj5o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    auto d = to!double(value);\n\
    \    return cast(long) d;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa01xkp63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d +\
    \ 1;\n    }\n    else\n    {\n        result = cast(long)d - 1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphl6ciyv2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6n4qxlo.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo6n4qxlo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = to!double(to!long(d));\n    double\
    \ d_int_plus = to!double(to!long(d) + 1);\n    double d_int_minus = to!double(to!long(d)\
    \ - 1);\n    if (abs(d - d_int) < abs(d - d_int_plus))\n    {\n        result\
    \ = to!long(d_int);\n    }\n    else if (abs(d - d_int) > abs(d - d_int_plus))\n\
    \    {\n        result = to!long(d_int_plus);\n    }\n    else if (abs(d - d_int)\
    \ == abs(d - d_int_plus))\n    {\n        if (d > 0)\n        {\n            result\
    \ = to!long(d_int_plus);\n        }\n        else\n        {\n            result\
    \ = to!long(d_int_minus);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsa5zg_1t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vr6e8gp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    auto d = to!double(value);\n\
    \    return cast(long) d;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa01xkp63.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28grjq24.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp28grjq24.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    auto d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5ioodx7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqcd8wiee.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqcd8wiee.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ val = to!double(value);\n    double intval = to!double(to!string(to!int(val)));\n\
    \    double diff = val - intval;\n    if (diff > 0.5)\n    {\n        result =\
    \ to!long(ceil(val));\n    }\n    else if (diff < -0.5)\n    {\n        result\
    \ = to!long(floor(val));\n    }\n    else\n    {\n        if (val > 0)\n     \
    \   {\n            result = to!long(ceil(val));\n        }\n        else\n   \
    \     {\n            result = to!long(floor(val));\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm4hy3klp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!real(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqmehnwg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28grjq24.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp28grjq24.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d >= 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (d - result < -0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbp7d2n1b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxaomwsf3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!real(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqmehnwg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    // TODO: Implement\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp52jbzlie.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqcd8wiee.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqcd8wiee.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6n4qxlo.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo6n4qxlo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = cast(double) cast(long) d;\n    double\
    \ d_int_plus_one = d_int + 1;\n    double d_int_minus_one = d_int - 1;\n    double\
    \ diff_int = abs(d - d_int);\n    double diff_int_plus_one = abs(d - d_int_plus_one);\n\
    \    double diff_int_minus_one = abs(d - d_int_minus_one);\n    if (diff_int <=\
    \ diff_int_plus_one && diff_int <= diff_int_minus_one)\n    {\n        result\
    \ = cast(long) d_int;\n    }\n    else if (diff_int_plus_one <= diff_int && diff_int_plus_one\
    \ <= diff_int_minus_one)\n    {\n        result = cast(long) d_int_plus_one;\n\
    \    }\n    else if (diff_int_minus_one <= diff_int && diff_int_minus_one <= diff_int_plus_one)\n\
    \    {\n        result = cast(long) d_int_minus_one;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqo7m4rp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6n4qxlo.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo6n4qxlo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!real(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqmehnwg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28grjq24.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp28grjq24.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    // Convert the string to\
    \ a double\n    double d = to!double(value);\n    // Round the double to the nearest\
    \ integer\n    long l = round(d);\n    // Return the rounded integer\n    return\
    \ l;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaagslq_p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28grjq24.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp28grjq24.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d +\
    \ 1;\n    }\n    else\n    {\n        result = cast(long)d - 1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphl6ciyv2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28grjq24.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp28grjq24.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)d;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpispwi121.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fraction = d - cast(long)d;\n    if (fraction\
    \ == 0.5)\n    {\n        if (d > 0)\n        {\n            result = cast(long)d\
    \ + 1;\n        }\n        else\n        {\n            result = cast(long)d -\
    \ 1;\n        }\n    }\n    else\n    {\n        result = cast(long)d;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfw9l1gs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d2 = floor(d);\n    if (d - d2 > 0.5)\n  \
    \      result = cast(long)ceil(d);\n    else\n        result = cast(long)floor(d);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6fnshvf1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    auto number = to!double(value);\n\
    \    auto floor = cast(long) floor(number);\n    auto ceil = cast(long) ceil(number);\n\
    \    if (number - floor > ceil - number)\n        return ceil;\n    else\n   \
    \     return floor;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_87nly3f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28grjq24.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp28grjq24.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2vr6e8gp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxaomwsf3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = cast(double) cast(long) d;\n    double\
    \ d_frac = d - d_int;\n    if (d_frac == 0.5)\n    {\n        if (d_int < 0)\n\
    \        {\n            result = cast(long) (d_int - 1);\n        }\n        else\n\
    \        {\n            result = cast(long) (d_int + 1);\n        }\n    }\n \
    \   else\n    {\n        result = cast(long) d;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyvsdg3m5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    result = cast(long)d;\n    if(d - result > 0.5)\n\
    \        result++;\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp90ynwg6g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d - cast(long)d > 0.5)\n        result = cast(long)d\
    \ + 1;\n    else\n        result = cast(long)d;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpou90anhy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fractional = d - cast(long)d;\n    if (fractional\
    \ >= 0.5)\n    {\n        result = cast(long)d + 1;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu343okku.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28grjq24.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp28grjq24.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)floor(d);\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)ceil(d);\n        if (result - d > 0.5)\n        \
    \    result--;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3a7jh_mv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    long l = cast(long)d;\n    if (d - l > 0.5)\n        return l + 1;\n    else\
    \ if (d - l < -0.5)\n        return l - 1;\n    else\n        return l;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7l5425si.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fractional = d - cast(long)d;\n    if (fractional\
    \ >= 0.5)\n    {\n        result = cast(long)d + 1;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu343okku.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxaomwsf3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6n4qxlo.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo6n4qxlo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    auto d = to!double(value);\n\
    \    return cast(long) round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8d2pbm6e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjlwscy5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = to!double(to!long(d));\n    double\
    \ d_int_plus_one = d_int + 1;\n    double diff_d_int = abs(d - d_int);\n    double\
    \ diff_d_int_plus_one = abs(d - d_int_plus_one);\n    if (diff_d_int < diff_d_int_plus_one)\n\
    \    {\n        result = to!long(d_int);\n    }\n    else\n    {\n        result\
    \ = to!long(d_int_plus_one);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"\
    14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"\
    15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpetzdtaqb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6n4qxlo.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo6n4qxlo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxaomwsf3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqcd8wiee.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpqcd8wiee.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    long l = to!long(d);\n    if (d - l > 0.5)\n        return l + 1;\n    else\
    \ if (d - l < -0.5)\n        return l - 1;\n    else\n        return l;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdxse7ht.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    float\
    \ f = to!float(value);\n    if (f > 0)\n    {\n        result = cast(long)ceil(f);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(f);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphcs0ph8y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjlwscy5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6n4qxlo.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo6n4qxlo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)d +\
    \ 1;\n    }\n    else\n    {\n        result = cast(long)d - 1;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrckhig3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    real num = to!real(value);\n\
    \    long result = cast(long)num;\n    if (num - result > 0.5)\n        result++;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n\
    \    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp60ei8y6v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp28grjq24.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp28grjq24.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    auto d = to!double(value);\n\
    \    return cast(long)round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5ioodx7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = to!double(to!long(d));\n    double\
    \ d_int_plus_one = d_int + 1;\n    double d_int_minus_one = d_int - 1;\n    double\
    \ d_int_plus_one_diff = abs(d_int_plus_one - d);\n    double d_int_minus_one_diff\
    \ = abs(d_int_minus_one - d);\n    if (d_int_plus_one_diff < d_int_minus_one_diff)\n\
    \    {\n        result = to!long(d_int_plus_one);\n    }\n    else if (d_int_plus_one_diff\
    \ > d_int_minus_one_diff)\n    {\n        result = to!long(d_int_minus_one);\n\
    \    }\n    else\n    {\n        if (d_int_plus_one > 0)\n        {\n        \
    \    result = to!long(d_int_plus_one);\n        }\n        else\n        {\n \
    \           result = to!long(d_int_minus_one);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5ahtt7t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    auto val = to!double(value);\n\
    \    auto int_val = to!long(val);\n    auto diff = val - int_val;\n    if (diff\
    \ == 0.5)\n    {\n        if (int_val > 0)\n            return int_val + 1;\n\
    \        else\n            return int_val - 1;\n    }\n    else\n    {\n     \
    \   if (diff > 0.5)\n            return int_val + 1;\n        else\n         \
    \   return int_val;\n    }\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0qhz6n7i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjlwscy5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!real(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsqmehnwg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    auto num = to!double(value);\n\
    \    auto floor = cast(long)num;\n    auto ceil = floor + 1;\n    auto diff_floor\
    \ = abs(num - floor);\n    auto diff_ceil = abs(num - ceil);\n    return diff_floor\
    \ < diff_ceil ? floor : ceil;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrbwarg6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    auto result = to!long(value);\n\
    \    auto diff = abs(to!double(value) - result);\n    if (diff > 0.5)\n    {\n\
    \        result += (result > 0 ? 1 : -1);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkv7wo6j_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double d_int = to!double(to!long(d));\n    if (d_int\
    \ == d)\n        result = to!long(d);\n    else\n    {\n        if (d > 0)\n \
    \           result = to!long(d_int + 1);\n        else\n            result = to!long(d_int\
    \ - 1);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6g5z7559.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fractional = d - cast(long)d;\n    if (fractional\
    \ >= 0.5)\n    {\n        result = cast(long)d + 1;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n\
    \    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n\
    \    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu343okku.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7wby4uve.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp7wby4uve.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double f = floor(d);\n    double c = ceil(d);\n \
    \   if (d - f > c - d)\n        result = cast(long)c;\n    else\n        result\
    \ = cast(long)f;\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41ucahx5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    // TODO: Implement me\n \
    \   return 0;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvqi78ya5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)value.to!real;\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5950upd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxaomwsf3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    // TODO: implement\n    return\
    \ 0;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4qu48pi2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long) ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long) floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxfbdcmm_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long) round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl6x1n_ih.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpl6x1n_ih.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    return cast(long)round(to!double(value));\n\
    }\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprx2pff_u.d(24): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprx2pff_u.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6n4qxlo.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo6n4qxlo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d >= 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result >= 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d >= 0.5)\n            result--;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppmx29dei.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fractional = d - to!long(d);\n    if (fractional\
    \ > 0.5)\n    {\n        result = ceil(d);\n    }\n    else if (fractional < 0.5)\n\
    \    {\n        result = floor(d);\n    }\n    else\n    {\n        result = round(d);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\
    \n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n\
    \    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") ==\
    \ 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6z9dj9j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long) ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long) floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeumkdt2u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659805223
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6n4qxlo.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo6n4qxlo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes a value (string) representing a number\n    and returns the closest integer\
    \ to it. If the number is equidistant\n    from two integers, round it away from\
    \ zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10L\n    >>> closest_integer(\"\
    15.3\")\n    15L\n\n    Note:\n    Rounding away from zero means that if the given\
    \ number is equidistant\n    from two integers, the one you should return is the\
    \ one that is the\n    farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n  \
    \  \n*/\nlong closest_integer(string value) \n{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
    10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
    -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
    0\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6n4qxlo.d(25): Error: template instance `to!double` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo6n4qxlo.d", "-I/tmp"]\n'''
  stdout: b''
