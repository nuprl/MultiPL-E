language: d
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\n/*\nYou will be given a string in binary format, and your task is to convert\
    \ it to decimal format.\n    The function should return a long.\nunittest\n{\n\
    \    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\"\
    );\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1rzipqun.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rzipqun.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjyq6h7jz.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyq6h7jz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb1idhq9w.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb1idhq9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdqq9x33a.d(23): Error: no property `to` for type `long`

    /tmp/tmpdqq9x33a.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqq9x33a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjyq6h7jz.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyq6h7jz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz3xg058v.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3xg058v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8_42uy0.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_42uy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  return \"db\" ~ to!string(decimal, 2) ~ \"db\";\n}\nunittest\n{\n    alias\
    \ candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n\
    \    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) ==\
    \ \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqhz7kuq6.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqhz7kuq6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  // your code here\n    string result = \"db\";\n    while(decimal > 0)\n  \
    \  {\n        if(decimal % 2 == 0)\n            result = \"0\" ~ result;\n   \
    \     else\n            result = \"1\" ~ result;\n        decimal /= 2;\n    }\n\
    \    return result ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0awz6lg3.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f75]

    ??:? void tmp0awz6lg3.__unittest_L32_C1() [0x427b85]

    ??:? void tmp0awz6lg3.__modtest() [0x427cf8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac4d]

    ??:? runModuleUnitTests [0x42bb3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf52_o0j4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf52_o0j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz3xg058v.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3xg058v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.idup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb1g7du54.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpb1g7du54.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb1g7du54.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\n\
    unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3nl0furk.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nl0furk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1v88_zp.d(23): Error: no property `to` for type `long`

    /tmp/tmpg1v88_zp.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1v88_zp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz3xg058v.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3xg058v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjyq6h7jz.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyq6h7jz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz3xg058v.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3xg058v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1v88_zp.d(23): Error: no property `to` for type `long`

    /tmp/tmpg1v88_zp.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1v88_zp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        if(decimal\
    \ % 2 == 0)\n            binary ~= \"0\";\n        else\n            binary ~=\
    \ \"1\";\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ejz1qto.d(30): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ejz1qto.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    long quotient = decimal;\n    long remainder =\
    \ 0;\n    while (quotient != 0)\n    {\n        remainder = quotient % 2;\n  \
    \      quotient = quotient / 2;\n        result = to!string(remainder) ~ result;\n\
    \    }\n    return result ~ \"db\";\n}\n/*\n    You will be given a number in\
    \ binary format and your task is to convert it to decimal format.\n    The function\
    \ should return a long.\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy_4of5r8.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_4of5r8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1v88_zp.d(23): Error: no property `to` for type `long`

    /tmp/tmpg1v88_zp.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1v88_zp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal != 0)\n    {\n        result ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return result ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_re5xktc.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_re5xktc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjyq6h7jz.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyq6h7jz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb1idhq9w.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb1idhq9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8_42uy0.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_42uy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdqq9x33a.d(23): Error: no property `to` for type `long`

    /tmp/tmpdqq9x33a.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqq9x33a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\n/*\nYou\
    \ will be given a string in binary format and your task is to convert it to decimal\
    \ format.\n    The function should return a long.\nunittest\n{\n    alias candidate\
    \ = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L)\
    \ == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzznl__5z.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzznl__5z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result.reverse ~ \"db\";\n}\n\
    unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjei4b53o.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpjei4b53o.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjei4b53o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8_42uy0.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_42uy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf52_o0j4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf52_o0j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary;\n    while(decimal > 0)\n    {\n        binary = to!string(decimal\
    \ % 2) ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhkpr9c8.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhkpr9c8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8_42uy0.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_42uy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4xaoplqz.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xaoplqz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary;\n    while(decimal > 0)\n    {\n        binary = to!string(decimal\
    \ % 2) ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhkpr9c8.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhkpr9c8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary;\n    while(decimal != 0)\n    {\n        binary = (decimal %\
    \ 2).to!string ~ binary;\n        decimal /= 2;\n    }\n    return \"db\" ~ binary\
    \ ~ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc9pq8leh.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc9pq8leh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        if(decimal\
    \ % 2 == 0)\n            result ~= \"0\";\n        else\n            result ~=\
    \ \"1\";\n        decimal /= 2;\n    }\n    result ~= \"db\";\n    return result.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppzzojgwu.d(30): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppzzojgwu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf52_o0j4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf52_o0j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf52_o0j4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf52_o0j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8_42uy0.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_42uy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string bin = \"db\";\n    while(decimal > 0)\n    {\n        if(decimal % 2\
    \ == 0)\n            bin = \"0\" ~ bin;\n        else\n            bin = \"1\"\
    \ ~ bin;\n        decimal /= 2;\n    }\n    return bin ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpobyr5of7.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f75]

    ??:? void tmpobyr5of7.__unittest_L31_C1() [0x427b85]

    ??:? void tmpobyr5of7.__modtest() [0x427cf8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac4d]

    ??:? runModuleUnitTests [0x42bb3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4xaoplqz.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xaoplqz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        if(decimal\
    \ % 2 == 0)\n            result = \"0\" ~ result;\n        else\n            result\
    \ = \"1\" ~ result;\n        decimal /= 2;\n    }\n    return result ~ \"db\"\
    ;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6ddp91qe.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f75]

    ??:? void tmp6ddp91qe.__unittest_L31_C1() [0x427b85]

    ??:? void tmp6ddp91qe.__modtest() [0x427cf8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd67]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc45]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ac4d]

    ??:? runModuleUnitTests [0x42bb3d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164104
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf52_o0j4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf52_o0j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8_42uy0.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_42uy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1v88_zp.d(23): Error: no property `to` for type `long`

    /tmp/tmpg1v88_zp.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1v88_zp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf52_o0j4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf52_o0j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdqq9x33a.d(23): Error: no property `to` for type `long`

    /tmp/tmpdqq9x33a.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqq9x33a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf52_o0j4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf52_o0j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal != 0)\n    {\n        result ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\n\
    unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkukfu4yf.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkukfu4yf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal != 0)\n    {\n        result ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\n\
    unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkukfu4yf.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkukfu4yf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\n\
    unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3nl0furk.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nl0furk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0) {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19kld129.d(22): Error: cannot append type `long` to type `string`

    /tmp/tmp19kld129.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19kld129.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8_42uy0.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_42uy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result;\n    while (decimal) {\n        result ~= (decimal & 1) ? '1'\
    \ : '0';\n        decimal >>= 1;\n    }\n    return \"db\" ~ result.reverse ~\
    \ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwvqjzry2.d(25): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvqjzry2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    if (decimal == 0)\n        return binary + \"\
    0\" + binary;\n    while (decimal != 0)\n    {\n        binary += to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary + \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8pii1p5s.d(22): Error: invalid array operation `binary + "0"` (possible
    missing [])

    /tmp/tmp8pii1p5s.d(25): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmp8pii1p5s.d(28): Error: invalid array operation `binary + "db"` (possible
    missing [])

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8pii1p5s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4xaoplqz.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xaoplqz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8_42uy0.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_42uy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    if (decimal == 0)\n        return binary + \"\
    0\" + binary;\n    while (decimal != 0)\n    {\n        binary += (decimal % 2).to!string;\n\
    \        decimal /= 2;\n    }\n    return binary.reverse + binary;\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplft_i_zk.d(22): Error: invalid array operation `binary + "0"` (possible
    missing [])

    /tmp/tmplft_i_zk.d(25): Error: no property `to` for type `long`

    /tmp/tmplft_i_zk.d(28): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplft_i_zk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    if (decimal == 0)\n        return binary + \"\
    0\" + binary;\n    while (decimal != 0)\n    {\n        binary += (decimal % 2).to!string;\n\
    \        decimal /= 2;\n    }\n    return binary + binary.dup.reverse;\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpji67h6.d(22): Error: invalid array operation `binary + "0"` (possible
    missing [])

    /tmp/tmprpji67h6.d(25): Error: no property `to` for type `long`

    /tmp/tmprpji67h6.d(28): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpji67h6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal != 0)\n    {\n        result ~=\
    \ (decimal % 2).to!string;\n        decimal /= 2;\n    }\n    return result ~\
    \ \"db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmputpur7tz.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmputpur7tz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8_42uy0.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_42uy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8_42uy0.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_42uy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    if (decimal == 0)\n        return result + \"\
    0\" + \"db\";\n    while (decimal > 0)\n    {\n        result += to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return result + \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2ppjknr.d(22): Error: invalid array operation `result + "0"` (possible
    missing [])

    /tmp/tmpw2ppjknr.d(25): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    /tmp/tmpw2ppjknr.d(28): Error: invalid array operation `result + "db"` (possible
    missing [])

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2ppjknr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz3xg058v.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3xg058v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb1idhq9w.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb1idhq9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf52_o0j4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf52_o0j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpil__0g9x.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpil__0g9x.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil__0g9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    if (decimal == 0)\n        return binary + \"\
    0\" + binary;\n    while (decimal > 0)\n    {\n        binary = binary ~ (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return binary.reverse ~ binary;\n\
    }\n/*\nYou will be given a string, which represents a binary number. Your task\
    \ is to convert it to decimal\n    format. The function should return a long.\n\
    unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmerge_5a.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmerge_5a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxy9_6h02.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxy9_6h02.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy9_6h02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkeeffbi.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkeeffbi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    if (decimal == 0)\n        return binary ~ \"\
    0db\";\n    while (decimal != 0)\n    {\n        binary ~= (decimal % 2).to!string;\n\
    \        decimal /= 2;\n    }\n    return binary.reverse ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu8_h6gc1.d(25): Error: no property `to` for type `long`

    /tmp/tmpu8_h6gc1.d(28): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8_h6gc1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf52_o0j4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf52_o0j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxm2n_7kv.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpxm2n_7kv.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm2n_7kv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal != 0)\n    {\n        result ~=\
    \ decimal % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\n\
    unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkukfu4yf.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkukfu4yf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoc7gzsp4.d(23): Error: cannot append type `long` to type `string`

    /tmp/tmpoc7gzsp4.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc7gzsp4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8_42uy0.d(23): Error: cannot append type `long` to type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8_42uy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164103
