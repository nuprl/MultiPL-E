language: d
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhd5aire.d(23): Error: cannot append type `long` to type `string`\n/tmp/tmpjhd5aire.d(27):
    Error: template `std.typecons.reverse` cannot deduce function from argument types
    `!()(char[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhd5aire.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9xlxzy1x.d(23): Error: cannot append type `long` to type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xlxzy1x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\n/*\nYou will be given a string in binary format, and your task is to convert\
    \ it to decimal format.\n    The function should return a long.\nunittest\n{\n\
    \    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\"\
    );\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp21hw5iaw.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp21hw5iaw.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz76lb_l3.d(23): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmpz76lb_l3.d(27): Error: template
    `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz76lb_l3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeoedqx_8.d(23): Error: no property `to` for type `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeoedqx_8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwphix7vb.d(23): Error: no property `to` for type `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwphix7vb.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz76lb_l3.d(23): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmpz76lb_l3.d(27): Error: template
    `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz76lb_l3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return\
    \ binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp67khpxh0.d(23): Error: no property `to` for type `long`\n/tmp/tmp67khpxh0.d(27):
    Error: template `std.typecons.reverse` cannot deduce function from argument types
    `!()(char[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67khpxh0.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz76lb_l3.d(23): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmpz76lb_l3.d(27): Error: template
    `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz76lb_l3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= (decimal\
    \ % 2).to!string;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeoedqx_8.d(23): Error: no property `to` for type `long`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeoedqx_8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    return binary ~ \"\
    db\";\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp78sld056.d(23): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp78sld056.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhd5aire.d(23): Error: cannot append type `long` to type `string`\n/tmp/tmpjhd5aire.d(27):
    Error: template `std.typecons.reverse` cannot deduce function from argument types
    `!()(char[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhd5aire.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhd5aire.d(23): Error: cannot append type `long` to type `string`\n/tmp/tmpjhd5aire.d(27):
    Error: template `std.typecons.reverse` cannot deduce function from argument types
    `!()(char[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhd5aire.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhd5aire.d(23): Error: cannot append type `long` to type `string`\n/tmp/tmpjhd5aire.d(27):
    Error: template `std.typecons.reverse` cannot deduce function from argument types
    `!()(char[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhd5aire.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= to!string(decimal\
    \ % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz76lb_l3.d(23): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmpz76lb_l3.d(27): Error: template
    `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz76lb_l3.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhd5aire.d(23): Error: cannot append type `long` to type `string`\n/tmp/tmpjhd5aire.d(27):
    Error: template `std.typecons.reverse` cannot deduce function from argument types
    `!()(char[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhd5aire.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal != 0)\n    {\n        binary ~=\
    \ to!string(decimal % 2);\n        decimal /= 2;\n    }\n    binary ~= \"db\"\
    ;\n    return binary.dup.reverse;\n}\nunittest\n{\n    alias candidate = decimal_to_binary;\n\
    \n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\"\
    );\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L)\
    \ == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5f4kdof1.d(23): Error: template instance `to!string` template
    `to` is not defined, did you mean No?\n/tmp/tmp5f4kdof1.d(27): Error: template
    `std.typecons.reverse` cannot deduce function from argument types `!()(char[])`,
    candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5f4kdof1.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return binary ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9xlxzy1x.d(23): Error: cannot append type `long` to type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xlxzy1x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string result = \"db\";\n    while(decimal > 0)\n    {\n        result ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    return result ~ \"db\";\n}\nunittest\n\
    {\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"\
    db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv97oy0n4.d(23): Error: cannot append type `long` to type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv97oy0n4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou will be given a number\
    \ in decimal form and your task is to convert it to\n    binary format. The function\
    \ should return a string, with each character representing a binary\n    number.\
    \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n \
    \   The extra characters are there to help with the format.\n\n    Examples:\n\
    \    >>> decimal_to_binary(15L)\n    \"db1111db\"\n    >>> decimal_to_binary(32L)\n\
    \    \"db100000db\"\n    \n*/\nstring decimal_to_binary(long decimal) \n{\n  \
    \  string binary = \"db\";\n    while(decimal > 0)\n    {\n        binary ~= decimal\
    \ % 2;\n        decimal /= 2;\n    }\n    binary ~= \"db\";\n    return binary.dup.reverse;\n\
    }\nunittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
    \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
    \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjhd5aire.d(23): Error: cannot append type `long` to type `string`\n/tmp/tmpjhd5aire.d(27):
    Error: template `std.typecons.reverse` cannot deduce function from argument types
    `!()(char[])`, candidates are:\n/home/zi.ya/spack/opt/spack/linux-centos7-haswell/gcc-4.8.5/dmd-2.081.1-uf6xyx53fosvucuy7fkpiod2bnffx7of/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhd5aire.d",
    "-I/tmp"]\n'''
  stdout: b''
