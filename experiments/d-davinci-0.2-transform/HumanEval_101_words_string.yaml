name: HumanEval_101_words_string
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You will be given a string\
  \ of words separated by commas or spaces. Your task is\n    to split the string\
  \ into words and return an array of the words.\n    \n    For example:\n    >>>\
  \ words_string(\"Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\",\
  \ \"John\"]\n    >>> words_string(\"One, two, three, four, five, six\")\n    [\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \n*/\nstring[] words_string(string\
  \ s) \n"
tests: "unittest\n{\n    alias candidate = words_string;\n\n    assert(candidate(\"\
  Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n    assert(candidate(\"\
  One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"\
  five\", \"six\"]);\n    assert(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"\
  name\"]);\n    assert(candidate(\"One,, two, three, four, five, six,\") == [\"One\"\
  , \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"\"\
  ) == []);\n    assert(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"\
  ]);\n}\nvoid main(){}"
completions: ["{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\"\
    );\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return split(s, \" \");\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n    return\
    \ split(s, \" \");\n}", "{\n    return split(s, \" ,;\");\n}", "{\n    return\
    \ split(s);\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return split(s);\n}", "{\n    return split(s, \" ,\\t\\\
    n\");\n}", "{\n    return split(s, \" \");\n}", "{\n    return split(s);\n}",
  "{\n    return split(s, \" \");\n}", "{\n    return split(s);\n}", "{\n    return\
    \ s.split(\"[ ,]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split();\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    string[] words;\n\
    \    foreach(immutable w; s.split)\n    {\n        if(w.length > 0)\n        \
    \    words ~= w;\n    }\n    return words;\n}", "{\n    return s.split;\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return split(s, \" ,\\n\\t\");\n}", "{\n    return split(s, \" \");\n}",
  "{\n    return s.split(\"[, ]\");\n}", "{\n    string[] words;\n    int start =\
    \ 0;\n    int end = 0;\n    int length = s.length;\n    int i = 0;\n    while\
    \ (i < length)\n    {\n        if (s[i] == ' ' || s[i] == ',')\n        {\n  \
    \          end = i;\n            words ~= s[start..end];\n            start =\
    \ i + 1;\n        }\n        i++;\n    }\n    words ~= s[start..$];\n    return\
    \ words;\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"[,\
    \ ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return split(s, \" ,;\");\n}", "{\n    return split(s);\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n\
    \    return split(s);\n}", "{\n    return split(s, \" \");\n}", "{\n    return\
    \ split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n    return split(s,\
    \ \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split;\n}",
  "{\n    return split(s);\n}", "{\n    return split(s, \" \");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s, \" ,\\t\");\n}", "{\n    return\
    \ split(s, \" \");\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s, \"\
    \ \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s, \"\
    \ \");\n}", "{\n    return split(s);\n}", "{\n    return split(s, \" \");\n}",
  "{\n    return split(s, \" \");\n}", "{\n    return split(s);\n}", "{\n    return\
    \ split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ split(s, \" \");\n}", "{\n    return split(s, \" \");\n}", "{\n    return split(s,\
    \ \" ,\\n\\t\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n\
    }", "{\n    return split(s);\n}", "{\n    return split(s);\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split;\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"[,\
    \ ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n\
    \    return split(s, \" ,\\n\");\n}", "{\n    string[] words = split(s);\n   \
    \ return words;\n}", "{\n    return split(s, \" \");\n}", "{\n    string[] words\
    \ = split(s);\n    return words;\n}", "{\n    return s.split();\n}", "{\n    return\
    \ s.split();\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"\
    [, ]+\");\n}", "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return s.split;\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return split(s);\n}", "{\n    return split(s, \" ,;\");\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return s.split();\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n    return split(s);\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split;\n}", "{\n \
    \   return s.split();\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    string[] words;\n    words = s.split(\" \");\n\
    \    return words;\n}", "{\n    return split(s);\n}", "{\n    return split(s,\
    \ \" \");\n}", "{\n    return split(s, \" , \");\n}", "{\n    return split(s);\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n\
    \    return split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n    return\
    \ split(s);\n}", "{\n    return s.split();\n}", "{\n    return split(s, \" \"\
    );\n}", "{\n    return s.split();\n}", "{\n    return split(s, \" \");\n}", "{\n\
    \    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s, \" \");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s, \" \");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n    return split(s);\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return s.split(\"[, ]+\");\n}", "{\n    return s.split(\"[, ]\");\n\
    }", "{\n    return split(s, \" \");\n}", "{\n    return split(s);\n}", "{\n  \
    \  return s.split(\"[, ]\");\n}", "{\n    return s.split();\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    string[] words;\n    int i = 0;\n    foreach(w;\
    \ split(s))\n    {\n        words[i] = w;\n        i++;\n    }\n    return words;\n\
    }", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split;\n}", "{\n \
    \   return split(s);\n}", "{\n    return s.split();\n}", "{\n    return split(s);\n\
    }", "{\n    return split(s);\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n\
    \    return s.split;\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return\
    \ s.split(\"[ ,]\");\n}", "{\n    auto words = split(s);\n    return words;\n}",
  "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s, \" \");\n}", "{\n    return\
    \ split(s, \" \");\n}", "{\n    return split(s, \" , \");\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s, \" \");\n}", "{\n    return\
    \ s.split(\",\");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return s.split;\n}", "{\n    return s.split();\n}", "{\n\
    \    string[] words = s.split;\n    return words;\n}", "{\n    return split(s,\
    \ \" \");\n}", "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n\
    }", "{\n    return split(s, \" \");\n}", "{\n    return s.split(\"[, ]\");\n}",
  "{\n    return s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n    return\
    \ s.split(\"[, ]\");\n}", "{\n    return split(s);\n}", "{\n    return s.split(\"\
    [, ]\");\n}", "{\n    return s.split;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
