language: d
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    long[] fibfibs = new long[n+1];\n    fibfibs[0] = 0;\n\
    \    fibfibs[1] = 0;\n    fibfibs[2] = 1;\n    for (long i = 3; i <= n; i++)\n\
    \    {\n        fibfibs[i] = fibfibs[i-1] + fibfibs[i-2] + fibfibs[i-3];\n   \
    \ }\n    return fibfibs[n];\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpa_8v1dcc.d(23): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x42824e]\n??:? long tmpa_8v1dcc.fibfib(long) [0x427d25]\n??:?
    void tmpa_8v1dcc.__unittest_L30_C1() [0x427e4a]\n??:? void tmpa_8v1dcc.__modtest()
    [0x427f1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c19b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b02e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4302b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430768]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430245]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b005]\n??:? runModuleUnitTests [0x42bf71]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428660]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4285e7]\n??:? _d_run_main [0x428552]\n??:? main [0x427f2f]\n??:?
    __libc_start_main [0x9087f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\nunittest\n{\n    alias candidate =\
    \ fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpts7rjo4z.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x427de5]\n??:? void tmpts7rjo4z.__unittest_L24_C1() [0x427ac9]\n??:?
    void tmpts7rjo4z.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428234]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281bb]\n??:? _d_run_main [0x428126]\n??:? main [0x427b77]\n??:?
    __libc_start_main [0xa7caa554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++)\n  \
    \      {\n            long d = a + b + c;\n            a = b;\n            b =\
    \ c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n\
    \    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp913x2bdt.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ded]\n??:? void tmp913x2bdt.__unittest_L35_C1() [0x427ad5]\n??:?
    void tmp913x2bdt.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281c3]\n??:? _d_run_main [0x42812e]\n??:? main [0x427b83]\n??:?
    __libc_start_main [0x3aef9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) \n        return n - 1;\n    long a = 0,\
    \ b = 0, c = 1;\n    foreach (i; 2 .. n) \n    {\n        long d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0, b = 1, c = 1;\n        foreach (i; 2 .. n)\n        {\n \
    \           long d = a + b + c;\n            a = b;\n            b = c;\n    \
    \        c = d;\n        }\n        return c;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2vqyusvx.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427df5]\n??:? void tmp2vqyusvx.__unittest_L35_C1() [0x427ad9]\n??:?
    void tmp2vqyusvx.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428244]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281cb]\n??:? _d_run_main [0x428136]\n??:? main [0x427b87]\n??:?
    __libc_start_main [0xf4153554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) \n    {\n        return 0;\n    }\n    if\
    \ (n == 1) \n    {\n        return 0;\n    }\n    if (n == 2) \n    {\n      \
    \  return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n\
    \    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L)\
    \ == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n\
    \    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d\
    \ = 0;\n    while (n > 2)\n    {\n        d = a + b + c;\n        a = b;\n   \
    \     b = c;\n        c = d;\n        n--;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) \n        return n - 1;\n    long a = 0,\
    \ b = 0, c = 1;\n    foreach (i; 2 .. n) \n    {\n        long d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2) \n        return 0;\n    if (n == 2) \n \
    \       return 1;\n    long a = 0, b = 0, c = 1;\n    foreach (i; 2 .. n) \n \
    \   {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c\
    \ = d;\n    }\n    return c;\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 0)\n        return 0;\n    if (n < 2)\n    \
    \    return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L)\
    \ == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n\
    \    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L)\
    \ == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nunittest\n{\n    alias candidate = fibfib;\n\n\
    \    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    else\n    {\n\
    \        long a = 0;\n        long b = 1;\n        long c = 1;\n        long d\
    \ = 0;\n        while (n > 3)\n        {\n            d = a + b + c;\n       \
    \     a = b;\n            b = c;\n            c = d;\n            n--;\n     \
    \   }\n        return d;\n    }\n}\nunittest\n{\n    alias candidate = fibfib;\n\
    \n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L)\
    \ == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n\
    \    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\n\
    void main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2)\n        return 0;\n    if (n == 2)\n   \
    \     return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n    long d\
    \ = 0;\n    for (long i = 3; i <= n; i++) \n    {\n        d = a + b + c;\n  \
    \      a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3) \n        return n - 1;\n    else \n    {\n\
    \        long a = 0, b = 1, c = 1;\n        for (long i = 3; i <= n; i++) \n \
    \       {\n            long d = a + b + c;\n            a = b;\n            b\
    \ = c;\n            c = d;\n        }\n        return c;\n    }\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnph8puww.d(41): unittest failure\n----------------\n??:?
    _d_unittestp [0x427ded]\n??:? void tmpnph8puww.__unittest_L35_C1() [0x427ad5]\n??:?
    void tmpnph8puww.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb13]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a9a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb39]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fac5]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a97d]\n??:? runModuleUnitTests [0x42b8e9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42823c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4281c3]\n??:? _d_run_main [0x42812e]\n??:? main [0x427b83]\n??:?
    __libc_start_main [0x9698a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 3)\n        return n - 1;\n    long a = 0, b\
    \ = 0, c = 1;\n    foreach (i; 2 .. n)\n    {\n        long d = a + b + c;\n \
    \       a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0L)\n        return 0L;\n    if (n == 1L)\n\
    \        return 0L;\n    if (n == 2L)\n        return 1L;\n    return fibfib(n\
    \ - 1L) + fibfib(n - 2L) + fibfib(n - 3L);\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n == 0) return 0;\n    if (n == 1) return 0;\n \
    \   if (n == 2) return 1;\n    long a = 0;\n    long b = 0;\n    long c = 1;\n\
    \    long d = 0;\n    for (long i = 3; i <= n; i++) {\n        d = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\nunittest\n\
    {\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L)\
    \ == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n\
    \    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n   \
    \ assert(candidate(14L) == 927L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nThe FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    \    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) ==\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently\
    \ compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1L)\n\
    \    0L\n    >>> fibfib(5L)\n    4L\n    >>> fibfib(8L)\n    24L\n    \n*/\nlong\
    \ fibfib(long n) \n{\n    if (n < 2) return 0;\n    if (n == 2) return 1;\n  \
    \  long a = 0;\n    long b = 0;\n    long c = 1;\n    long d = 0;\n    while (n\
    \ > 2) {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c =\
    \ d;\n        n--;\n    }\n    return d;\n}\nunittest\n{\n    alias candidate\
    \ = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n\
    \    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L)\
    \ == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) ==\
    \ 927L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
