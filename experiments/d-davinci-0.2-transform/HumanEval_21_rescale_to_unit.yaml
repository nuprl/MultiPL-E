name: HumanEval_21_rescale_to_unit
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Given list of numbers (of at\
  \ least two elements), apply a linear transform to that list,\n    such that the\
  \ smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
  \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
  \ numbers) \n"
tests: "unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
  \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
  \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
  \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
  \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
  }\nvoid main(){}"
completions: ["{\n    float min_number = min(numbers);\n    float max_number = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_number) / (max_number - min_number);\n\
    \    }\n    return result;\n}\n/*\n Given a list of numbers, return a list of\
    \ the same length, where each element is the\n    product of all the elements\
    \ in the original list, except for the one at that index\n    >>> product_of_all_others([1,\
    \ 2, 3, 4, 5])\n    [120, 60, 40, 30, 24]\n*/\nfloat[] product_of_all_others(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float product\
    \ = 1;\n    foreach(i, number; numbers)\n    {\n        product *= number;\n \
    \   }\n    foreach(i, number; numbers)\n    {\n        result[i] = product / number;\n\
    \    }\n    return result;\n}\n/*\n Given a list of numbers, return the largest\
    \ number in the list\n    >>> largest_number([1, 2, 3, 4, 5])\n    5\n*/\nfloat\
    \ largest_number(float[] numbers) \n{\n    float largest = numbers[0];\n    foreach(i,\
    \ number; numbers)\n    {\n        if(number > largest)\n        {\n         \
    \   largest = number;\n        }\n    }\n    return largest;\n}\n/*\n Given a\
    \ list of numbers, return the smallest number in the list\n    >>> smallest_number([1,\
    \ 2, 3, 4, 5])\n    1\n*/\nfloat smallest_number(float[] numbers) \n{\n    float\
    \ smallest = numbers[0];\n    foreach(i, number; numbers)\n    {\n        if(number\
    \ < smallest)\n        {\n            smallest = number;\n        }\n    }\n \
    \   return smallest;\n}\n/*\n Given a list of numbers, return the sum of all the\
    \ numbers in the list\n    >>> sum_of_numbers([1, 2, 3, 4, 5])", "{\n    float[]\
    \ result = new float[numbers.length];\n    float min = min(numbers);\n    float\
    \ max = max(numbers);\n    float range = max - min;\n    foreach(i, number; numbers)\
    \ \n    {\n        result[i] = (number - min) / range;\n    }\n    return result;\n\
    }", "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}\n/*\n Given a list of numbers, return a list of\
    \ tuples, where each tuple contains the original index\n    and the number.\n\
    \    >>> enumerate([6, 7, 8, 9])\n    [(0, 6), (1, 7), (2, 8), (3, 9)]\n*/\nTuple!(size_t,\
    \ float)[] enumerate(float[] numbers) \n{\n    Tuple!(size_t, float)[] result\
    \ = new Tuple!(size_t, float)[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = tuple(i, number);\n    }\n    return result;\n}\n\
    /*\n Given a list of tuples, where each tuple contains an index and a number,\
    \ return a list of the\n    numbers in the order specified by the index.\n   \
    \ >>> denumerate([(0, 6), (1, 7), (2, 8), (3, 9)])\n    [6, 7, 8, 9]\n*/\nfloat[]\
    \ denumerate(Tuple!(size_t, float)[] tuples) \n{\n    float[] result = new float[tuples.length];\n\
    \    foreach(tuple; tuples)\n    {\n        result[tuple[0]] = tuple[1];\n   \
    \ }\n    return result;\n}\n/*\n Given a list of numbers, return the mean of the\
    \ numbers.\n    >>> mean([1, 2, 3, 4, 5])\n    3.0\n*/\nfloat mean(float[] numbers)\
    \ \n{\n    float sum = 0;\n    foreach(number; numbers)\n    {\n        sum +=\
    \ number;\n    }\n    return sum / numbers.length;\n}\n/*\n Given a list of numbers,\
    \ return the variance of the numbers.\n    >>> variance([1, 2, 3, 4, 5])\n   \
    \ 2.0", "{\n    float min = min(numbers);\n    float max = max(numbers);\n   \
    \ float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return result;\n}", "{\n    float min_n = min(numbers);\n    float max_n\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min_n)\
    \ / (max_n - min_n);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, num; numbers)\n    {\n        result[i] = (num - min) / (max -\
    \ min);\n    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min_value)\
    \ / (max_value - min_value);\n    }\n    return result;\n}", "{\n    float min_value\
    \ = min(numbers);\n    float max_value = max(numbers);\n    float[] result = new\
    \ float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        result[i] = (numbers[i] - min_value) / (max_value - min_value);\n   \
    \ }\n    return result;\n}\n/*\n Given list of numbers (of at least two elements),\
    \ apply a linear transform to that list,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}\n/*\n Given list of numbers (of at least two elements),\
    \ apply a linear transform to that list,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n\
    \    float[] result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min_value) / (max_value - min_value);\n\
    \    }\n    return result;", "{\n    float min = min(numbers);\n    float max\
    \ = max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min) / (max - min);\n\
    \    }\n    return result;\n}", "{\n    float min = minElement(numbers);\n   \
    \ float max = maxElement(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    foreach(i, number; numbers)\n    {\n        result[i] = (number - min) /\
    \ (max - min);\n    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n\
    \    float max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min_value) / (max_value - min_value);\n    }\n    return result;\n}", "{\n\
    \    float[] result = new float[numbers.length];\n    float min = min(numbers);\n\
    \    float max = max(numbers);\n    float range = max - min;\n    for (int i =\
    \ 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i] - min)\
    \ / range;\n    }\n    return result;\n}\n/*\n Given list of numbers (of at least\
    \ two elements), apply a linear transform to that list,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float range = max - min;\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / range;\n    }\n    return result;\n}\n/*\n Given list of numbers (of\
    \ at least two elements), apply a linear transform to that list,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = min(numbers);\n    float max = max(numbers);\n    float range = max - min;\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min) / range;\n    }\n    return result;\n}\n/*\n Given list of numbers",
  "{\n    float min_value = min(numbers);\n    float max_value = max(numbers);\n \
    \   float[] result = new float[numbers.length];\n    foreach(i, number; numbers)\n\
    \    {\n        result[i] = (number - min_value) / (max_value - min_value);\n\
    \    }\n    return result;\n}", "{\n    float min_value = min(numbers);\n    float\
    \ max_value = max(numbers);\n    float[] result = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        result[i] = (numbers[i]\
    \ - min_value) / (max_value - min_value);\n    }\n    return result;\n}", "{\n\
    \    float min = min(numbers);\n    float max = max(numbers);\n    float[] result\
    \ = new float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return\
    \ result;\n}", "{\n    float min_value = min(numbers);\n    float max_value =\
    \ max(numbers);\n    float[] result = new float[numbers.length];\n    foreach(i,\
    \ number; numbers)\n    {\n        result[i] = (number - min_value) / (max_value\
    \ - min_value);\n    }\n    return result;\n}", "{\n    float[] result = new float[numbers.length];\n\
    \    float min_value = min(numbers);\n    float max_value = max(numbers);\n  \
    \  float range = max_value - min_value;\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - min_value) / range;\n    }\n\
    \    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
