name: HumanEval_65_circular_shift
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of\
  \ the integer x, shift the digits right by shift\n    and return the result as a\
  \ string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L,\
  \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring\
  \ circular_shift(long x, long shift) \n"
tests: "unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
  \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
  \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
  \ 101L) == \"11\");\n}\nvoid main(){}"
completions: ["{\n    string s = to!string(x);\n    if (shift > s.length)\n      \
    \  return s[$-1 .. $];\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift >= s.length) \n    {\n        return\
    \ s[$-1 .. $];\n    }\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n\
    \    >>> circular_shift(123L, 1L)\n    \"312\"\n    >>> circular_shift(123L, 2L)\n\
    \    \"231\"\n    >>> circular_shift(123L, 3L)\n    \"123\"\n    >>> circular_shift(123L,\
    \ 4L)\n    \"312\"\n    >>> circular_shift(123L, 5L)\n    \"231\"\n    >>> circular_shift(123L,\
    \ 6L)\n    \"123\"\n*/", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    long n = s.length;\n    if (shift > n) \n \
    \   {\n        return s[n..0].idup;\n    }\n    return s[shift..n] ~ s[0..shift].idup;\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n  \
    \  string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    return s[shift..$] ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    long n = s.length;\n    if (shift >\
    \ n)\n    {\n        return s[$-1..$];\n    }\n    else\n    {\n        return\
    \ s[shift..$] ~ s[0..shift-1];\n    }\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1 .. $];\n    return s[shift ..\
    \ $] ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1 .. $].reverse;\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"\
    21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"\
    21\"\n    >>> circular_shift(12L,", "{\n    string result = to!string(x);\n  \
    \  if (shift > result.length)\n    {\n        return result[$-1..$];\n    }\n\
    \    return result[shift..$] ~ result[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-shift..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>>\
    \ circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long x, long\
    \ shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n      \
    \  return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n\
    \    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L,", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1 .. $].reverse;\n\
    \    }\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n    Return a list\
    \ of all circular shifts of the integer x.\n    >>> circular_shifts(12L)\n   \
    \ [\"21\", \"12\"]\n    >>> circular_shifts(123L)\n    [\"321\", \"231\", \"123\"\
    ]\n*/\nstring[] circular_shifts(long x) \n{\n    string s = to!string(x);\n  \
    \  long n = s.length;\n    string[] shifts = new string[n];\n    foreach (i; 0\
    \ .. n)\n    {\n        shifts[i] = circular_shift(x, i);\n    }\n    return shifts;\n\
    }\n/*\n    Return a list of all circular shifts of the integer x, sorted in ascending\
    \ order.\n    >>> circular_shifts_sorted(12L)\n    [\"12\", \"21\"]\n    >>> circular_shifts_sorted(123L)\n\
    \    [\"123\", \"231\", \"321\"]\n*/\nstring[] circular_shifts_sorted(long x)\
    \ \n{\n    string[] shifts = circular_shifts(x);\n    sort(shifts);\n    return\
    \ shifts;\n}\n/*\n    Return the smallest circular shift of the integer x.\n \
    \   >>> smallest_circular_shift(12L)\n    \"12\"\n    >>> smallest_circular_shift(123L)\n\
    \    \"123\"\n*/\nstring smallest_circular_shift(long x) \n{\n    return circular_shifts_sorted(x)[0];\n\
    }\n/*\n    Return the largest circular shift of the integer x.\n    >>> largest_circular_shift(12L)\n\
    \    \"21\"\n    >>> largest_circular_shift(123L)\n    \"321\"\n*/\nstring largest_circular_shift(long\
    \ x) \n{\n    return circular_shifts_sorted(x)[$ - 1];\n}\n/*\n    Return the\
    \ number of circular shifts of the integer x.\n", "{\n    string result = \"\"\
    ;\n    long num_digits = log10(x) + 1;\n    if (shift > num_digits)\n    {\n \
    \       result = to!string(x);\n        result = result.dup.reverse;\n    }\n\
    \    else\n    {\n        long divisor = pow(10, shift);\n        long remainder\
    \ = x % divisor;\n        result = to!string(remainder) ~ to!string(x / divisor);\n\
    \    }\n    return result;\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
