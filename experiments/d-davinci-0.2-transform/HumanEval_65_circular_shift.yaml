name: HumanEval_65_circular_shift
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nCircular shift the digits of\
  \ the integer x, shift the digits right by shift\n    and return the result as a\
  \ string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12L,\
  \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n    \n*/\nstring\
  \ circular_shift(long x, long shift) \n"
tests: "unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L,\
  \ 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L,\
  \ 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L,\
  \ 101L) == \"11\");\n}\nvoid main(){}"
completions: ["{\n    string s = to!string(x);\n    if (shift > s.length)\n      \
    \  return s[$-1 .. $];\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift >= s.length) \n    {\n        return\
    \ s[$-1 .. $];\n    }\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n\
    \    >>> circular_shift(123L, 1L)\n    \"312\"\n    >>> circular_shift(123L, 2L)\n\
    \    \"231\"\n    >>> circular_shift(123L, 3L)\n    \"123\"\n    >>> circular_shift(123L,\
    \ 4L)\n    \"312\"\n    >>> circular_shift(123L, 5L)\n    \"231\"\n    >>> circular_shift(123L,\
    \ 6L)\n    \"123\"\n*/", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    long n = s.length;\n    if (shift > n) \n \
    \   {\n        return s[n..0].idup;\n    }\n    return s[shift..n] ~ s[0..shift].idup;\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n  \
    \  string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    return s[shift..$] ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    long n = s.length;\n    if (shift >\
    \ n)\n    {\n        return s[$-1..$];\n    }\n    else\n    {\n        return\
    \ s[shift..$] ~ s[0..shift-1];\n    }\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1 .. $];\n    return s[shift ..\
    \ $] ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1 .. $].reverse;\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"\
    21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"\
    21\"\n    >>> circular_shift(12L,", "{\n    string result = to!string(x);\n  \
    \  if (shift > result.length)\n    {\n        return result[$-1..$];\n    }\n\
    \    return result[shift..$] ~ result[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-shift..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>>\
    \ circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long x, long\
    \ shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n      \
    \  return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n   \
    \ >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n \
    \   \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n\
    \    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n\
    \    \"21\"\n    >>> circular_shift(12L,", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1 .. $].reverse;\n\
    \    }\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n    Return a list\
    \ of all circular shifts of the integer x.\n    >>> circular_shifts(12L)\n   \
    \ [\"21\", \"12\"]\n    >>> circular_shifts(123L)\n    [\"321\", \"231\", \"123\"\
    ]\n*/\nstring[] circular_shifts(long x) \n{\n    string s = to!string(x);\n  \
    \  long n = s.length;\n    string[] shifts = new string[n];\n    foreach (i; 0\
    \ .. n)\n    {\n        shifts[i] = circular_shift(x, i);\n    }\n    return shifts;\n\
    }\n/*\n    Return a list of all circular shifts of the integer x, sorted in ascending\
    \ order.\n    >>> circular_shifts_sorted(12L)\n    [\"12\", \"21\"]\n    >>> circular_shifts_sorted(123L)\n\
    \    [\"123\", \"231\", \"321\"]\n*/\nstring[] circular_shifts_sorted(long x)\
    \ \n{\n    string[] shifts = circular_shifts(x);\n    sort(shifts);\n    return\
    \ shifts;\n}\n/*\n    Return the smallest circular shift of the integer x.\n \
    \   >>> smallest_circular_shift(12L)\n    \"12\"\n    >>> smallest_circular_shift(123L)\n\
    \    \"123\"\n*/\nstring smallest_circular_shift(long x) \n{\n    return circular_shifts_sorted(x)[0];\n\
    }\n/*\n    Return the largest circular shift of the integer x.\n    >>> largest_circular_shift(12L)\n\
    \    \"21\"\n    >>> largest_circular_shift(123L)\n    \"321\"\n*/\nstring largest_circular_shift(long\
    \ x) \n{\n    return circular_shifts_sorted(x)[$ - 1];\n}\n/*\n    Return the\
    \ number of circular shifts of the integer x.\n", "{\n    string result = \"\"\
    ;\n    long num_digits = log10(x) + 1;\n    if (shift > num_digits)\n    {\n \
    \       result = to!string(x);\n        result = result.dup.reverse;\n    }\n\
    \    else\n    {\n        long divisor = pow(10, shift);\n        long remainder\
    \ = x % divisor;\n        result = to!string(remainder) ~ to!string(x / divisor);\n\
    \    }\n    return result;\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1 .. 0];\n    return\
    \ s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n \
    \   if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(1234567890L)\n\
    \    10\n*/", "{\n    string s = to!string(x);\n    if (shift > s.length)\n  \
    \      return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n  \
    \  string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\
    \ \n    {\n        return s[$-1..$];\n    }\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string\
    \ s = to!string(x);\n    long n = s.length;\n    if (shift > n) \n    {\n    \
    \    return s[n..0].idup;\n    }\n    return s[n-shift..n] ~ s[0..n-shift-1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(12345L)\n    5\n\
    */\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(12345L)\n    5\n\
    */\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x", "{\n    string s = to!string(x);\n\
    \    long len = s.length;\n    if (shift > len)\n    {\n        return s[$-len..$].dup.reverse;\n\
    \    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n    else\n\
    \        return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string result = to!string(x);\n    if (shift > result.length) \n    {\n \
    \       return result[$-1..$];\n    }\n    return result[shift..$] ~ result[0..shift-1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n   ", "{\n   \
    \ string result = to!string(x);\n    long len = result.length;\n    if (shift\
    \ > len)\n    {\n        return result[$-1..$];\n    }\n    else\n    {\n    \
    \    return result[shift..$] ~ result[0..shift-1];\n    }\n}", "{\n    string\
    \ result = to!string(x);\n    if (shift > result.length)\n    {\n        return\
    \ result[$-1..$];\n    }\n    else\n    {\n        return result[shift..$] ~ result[0..shift-1];\n\
    \    }\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n    \
    \    return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n   ", "{\n    string s = to!string(x);\n\
    \    shift %= s.length;\n    return s[shift..$] ~ s[0..shift];\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(1L)\n    1\n    >>>\
    \ num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].reverse;\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(1L)\n\
    \    1\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(1L)\n    1\n    >>>\
    \ num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(1L)\n    1\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(1L)\n\
    \    1\n    >>> num_digits(", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length) \n    {\n        return s[$-1..$];\n    }\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\nGenerate a list of all circular shifts of the integer\
    \ x.\n    >>> circular_shifts(12L)\n    [\"21\", \"12\"]\n    >>> circular_shifts(123L)\n\
    \    [\"321\", \"231\", \"123\"]\n*/\nstring[] circular_shifts(long x) \n{\n \
    \   string s = to!string(x);\n    string[] shifts = new string[s.length];\n  \
    \  foreach (i; 0..s.length) \n    {\n        shifts[i] = circular_shift(x, i);\n\
    \    }\n    return shifts;\n}\n/*\nSort the list of circular shifts of the integer\
    \ x.\n    >>> circular_shifts_sorted(12L)\n    [\"12\", \"21\"]\n    >>> circular_shifts_sorted(123L)\n\
    \    [\"123\", \"231\", \"321\"]\n*/\nstring[] circular_shifts_sorted(long x)\
    \ \n{\n    string[] shifts = circular_shifts(x);\n    sort(shifts);\n    return\
    \ shifts;\n}\n/*\nReturn the smallest circular shift of the integer x.\n    >>>\
    \ smallest_circular_shift(12L)\n    \"12\"\n    >>> smallest_circular_shift(123L)\n\
    \    \"123\"\n*/\nstring smallest_circular_shift(long x) \n{\n    return circular_shifts_sorted(x)[0];\n\
    }\n/*\nReturn the largest circular shift of the integer x.\n    >>> largest_circular_shift(12L)\n\
    \    \"21\"\n    >>> largest_circular_shift(123L)\n    \"321\"\n*/\nstring largest_circular_shift(long\
    \ x) \n{\n    return circular_shifts_sorted(x)[$-1];\n}\n/*\nReturn the integer\
    \ corresponding to the string s.\n    >>> int_from_string(\"123\")\n    123L\n\
    */\nlong int_from_string(", "{\n    string s = format(\"%d\", x);\n    if (shift\
    \ > s.length)\n    {\n        return s[$-1..$];\n    }\n    else\n    {\n    \
    \    return s[shift..$] ~ s[0..shift-1];\n    }\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length) {\n        return s[$-1..$];\n    }\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\
    \ \n    {\n        return s[$-1..$].dup;\n    }\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].reversed;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-shift..$];\n    else\n        return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-shift..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(0L)\n    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(1L)\n    1\n \
    \   >>> num_digits(10L)\n    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(1L)\n \
    \   1\n    >>> num_digits(10L)\n    2\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_dig", "{\n    string s = to!string(x);\n    if (shift > s.length)\n    \
    \    return s[$-1..$].reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n\
    \    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n\
    \    \"12\"\n*/", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   >>> is_circular_prime(197L)\n    true\n    >>> is_circular_prime(197L)\n \
    \   true\n    >>> is_circular_prime(197L)\n    true\n    >>> is_circular_prime(197L)\n\
    \    true\n    >>> is_circular_prime(197L)\n    true\n    >>> is_circular_prime(197L)\n\
    \    true\n    >>> is_circular_prime(197L)\n    true\n    >>> is_circular_prime(197L)\n\
    \    true\n    >>> is_circular_prime(197L)\n    true\n*/", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length) \n    {\n        return s[$-1..$];\n    }\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\
    \ {\n        return s[$-1 .. $].dup;\n    }\n    return s[shift .. $] ~ s[0 ..\
    \ shift - 1];\n}", "{\n    string s = to!string(x);\n    long n = s.length;\n\
    \    if (shift > n)\n        return s[$-1..$].reverse;\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(1234567890L)\n\
    \    10\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(1234567890L)\n    9876543210L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x)[$-1..$].reverse);\n}\n/*\n    Return\
    \ the integer formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n\
    \    9876543210L\n*/\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1..$].reverse);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(1234567890L)\n    9876543210L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x)[$-1..$].reverse);\n}\n/*\n    Return\
    \ the integer formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n\
    \    9876543210L\n*/\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1..$].reverse);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(1234567890L)\n    9876543210L\n*/\nlong reverse_digits(long\
    \ x) \n{", "{\n    string s = to!string(x);\n    return s[shift..$] ~ s[0..shift];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s =\
    \ to!string(x);\n    shift %= s.length;\n    return s[shift..$] ~ s[0..shift];\n\
    }", "{\n    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift >= s.length)\n        return s[$-1..$].reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    long num_digits = (long)log10(x);\n\
    \    long shift_digits = shift % (num_digits + 1);\n    if (shift_digits == 0)\n\
    \        return to!string(x);\n    else\n    {\n        string s = to!string(x);\n\
    \        return s[shift_digits..$] ~ s[0..shift_digits - 1];\n    }\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n \
    \   1\n    >>> num_digits(1234567890L)\n    10\n*/\nlong num_digits(long x) \n\
    {\n    return to!string(x).length;\n}\n/*\n    Return the integer formed by reversing\
    \ the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n    9876543210L\n\
    */\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1..$]);\n\
    }\n/*\n    Return True if the integer x is a palindrome.\n    >>> is_palindrome(12321L)\n\
    \    true\n    >>> is_palindrome(12345L)\n    false\n*/", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   Return the number of digits in the integer x.\n    >>> num_digits(12L)\n \
    \   2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n  \
    \  return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}",
  "{\n    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}", "{\n    string digits = to!string(x);\n    if (shift > digits.length)\n\
    \    {\n        return digits.dup.reverse;\n    }\n    else\n    {\n        return\
    \ digits[shift..$] ~ digits[0..shift];\n    }\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}\n/*\n    Return the number of digits in the integer x.\n \
    \   >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n\
    \    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long", "{\n    string s = to!string(x);\n    long n = s.length;\n\
    \    shift = shift % n;\n    if (shift == 0)\n        return s;\n    if (shift\
    \ < 0)\n        shift += n;\n    return s[shift .. $] ~ s[0 .. shift];\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n \
    \   1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    if (x == 0)\n        return 1;\n    return cast(long)\
    \ ceil(log10(abs(x) + 1));\n}\n/*\n    Return the integer formed by reversing\
    \ the digits of the integer x.\n    >>> reverse_digits(12345L)\n    54321L\n \
    \   >>> reverse_digits(1L)\n    1L\n*/\nlong reverse_digits(long x) \n{\n    string\
    \ s = to!string(x);\n    return to!long(s[$ .. 0]);\n}\n/*\n    Return the integer\
    \ formed by reversing the digits of the integer x.\n    >>> reverse_digits(12345L)\n\
    \    54321L\n    >>> reverse_digits(1L)\n    1L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    string s = to!string(x);\n    return to!long(s[$ .. 0]);\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n \
    \   1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    if (x == 0)\n        return 1;\n    return cast(long)\
    \ ceil(log10(abs(x) + 1));\n}\n/*\n    Return the integer formed by reversing\
    \ the digits of the integer x.\n    >>> reverse_digits(12345L)\n    54321L\n \
    \   >>> reverse_dig", "{\n    string s = to!string(x);\n    if (shift > s.length)\
    \ \n    {\n        return s[$-1..$].dup.reverse;\n    }\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n", "{\n    long n = log10(x);\n    long y = x;\n\
    \    long z = 0;\n    long i = 0;\n    while (i < n) {\n        z += y % 10 *\
    \ pow(10, (n - i + shift) % n);\n        y /= 10;\n        i++;\n    }\n    return\
    \ to!string(z);\n}", "{\n    string s = to!string(x);\n    long n = s.length;\n\
    \    if (shift > n)\n    {\n        return s[$-1..$];\n    }\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   Return the number of digits in the integer x.\n    >>> num_digits(0L)\n  \
    \  1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(1234567890L)\n    10\n\
    */\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the integer formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n\
    \    9876543210L\n*/\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1..$]);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(1234567890L)\n    9876543210L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x)[$-1..$]);\n}\n/*\n    Return the integer\
    \ formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n\
    \    9876543210L\n*/\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1..$]);\n\
    }\n/*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(1234567890L)\n    9876543210L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x)[$-1..$]);\n}\n/*\n    Return the integer\
    \ formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n\
    \    9876543210L\n*/\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1..",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n \
    \   1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n  \
    \  return to!string(x).length;\n}\n/*\n    Return the integer formed by reversing\
    \ the digits of the integer x.\n    >>> reverse_digits(1234L)\n    4321L\n   \
    \ >>> reverse_digits(3456789L)\n    9876543L\n*/\nlong reverse_digits(long x)\
    \ \n{\n    string s = to!string(x);\n    return to!long(s[$-1..$]);\n}\n/*\n \
    \   Return the integer formed by reversing the digits of the integer x.\n    >>>\
    \ reverse_digits(1234L)\n    4321L\n    >>> reverse_digits(3456789L)\n    9876543L\n\
    */\nlong reverse_digits(long x) \n{\n    string s = to!string(x);\n    return\
    \ to!long(s[$-1..$]);\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the integer formed by reversing the digits of the integer x.\n\
    \    >>> reverse_digits(1234L)\n    4321L\n    >>> reverse_digits(3456789L)\n\
    \    9876543L\n*/\nlong reverse_digits(long x) \n{\n    string s = to!string(x);\n\
    \    return to!long(s[$-1..$", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L", "{\n    string result;\n    long n = x.digits;\n\
    \    if (shift > n) \n    {\n        result = x.to!string;\n        result = result.reverse;\n\
    \    } \n    else \n    {\n        result = x.to!string;\n        result = result[shift\
    \ .. $] ~ result[0 .. shift - 1];\n    }\n    return result;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> digits(12L)\n    2\n    >>>\
    \ digits(12345L)\n    5\n*/\nlong digits(long x) \n{\n    return x.digits;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> digits(12L)\n \
    \   2\n    >>> digits(12345L)\n    5\n*/\nlong digits(long x) \n{\n    return\
    \ x.digits;\n}\n/*\n    Return the number of digits in the integer x.\n    >>>\
    \ digits(12L)\n    2\n    >>> digits(12345L)\n    5\n*/\nlong digits(long x) \n\
    {\n    return x.digits;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> digits(12L)\n    2\n    >>> digits(12345L)\n    5\n*/\nlong digits(long\
    \ x) \n{\n    return x.digits;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> digits(12L)\n    2\n    >>> digits(12345L)\n    5\n*/\n\
    long digits(long x) \n{\n    return x.digits;\n}\n/*\n    Return the number of\
    \ digits in the integer x.\n    >>> digits(12L)\n    2\n    >>> digits(12345L)\n\
    \    5\n*/\nlong digits(long x) \n{\n    return x.digits;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> digits(12L)\n    2\n    >>> digits(12345L)\n\
    \    5\n*/\nlong digits(long x) \n{\n    return x.digits;\n}\n/*", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}", "{\n    long n = x.length;\n    if (shift\
    \ > n)\n        return x.reversed;\n    return x[shift..$] ~ x[0..shift];\n}",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n\
    \    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length) \n    {\n        return\
    \ s[$-1 .. $];\n    }\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n \
    \   1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(1234567890L)\n    10\n\
    */\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the integer formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n\
    \    9876543210L\n*/\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1\
    \ .. $]);\n}\n/*\n    Return the integer formed by reversing the digits of the\
    \ integer x.\n    >>> reverse_digits(1234567890L)\n    9876543210L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x)[$-1 .. $]);\n}\n/*\n    Return the integer\
    \ formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n\
    \    9876543210L\n*/\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x)[$-1\
    \ .. $]);\n}\n/*\n    Return the integer formed by reversing the digits of the\
    \ integer x.\n    >>> reverse_digits(1234567890L)\n    9876543210L\n*/\nlong reverse_digits(long\
    \ x) \n{\n    return to!long(to!string(x)[$-1 .. $]);\n}\n/*\n    Return the integer\
    \ formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234567890L)\n\
    \    9876543210L\n*/\nlong reverse_digits(long x) \n{\n    return to!long(to!string",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$ - 1 .. 0];\n    return s[shift .. $ - 1] ~ s[0 .. shift -\
    \ 1];\n}\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the integer formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234L)\n\
    \    4321L\n    >>> reverse_digits(0L)\n    0L\n*/\nlong reverse_digits(long x)\
    \ \n{\n    return to!long(to!string(x)[$ - 1 .. 0]);\n}\n/*\n    Return the integer\
    \ formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234L)\n\
    \    4321L\n    >>> reverse_digits(0L)\n    0L\n*/\nlong reverse_digits(long x)\
    \ \n{\n    return to!long(to!string(x)[$ - 1 .. 0]);\n}\n/*\n    Return the integer\
    \ formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234L)\n\
    \    4321L\n    >>> reverse_digits(0L)\n    0L\n*/\nlong reverse_digits(long x)\
    \ \n{\n    return to!long(to!string(x)[$ - 1 .. 0]);\n}\n/*\n    Return the integer\
    \ formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234L)\n\
    \    4321L\n    >>> reverse_digits(0L)\n    0L\n*/\nlong reverse_digits(long x)\
    \ \n{\n    return to!long(to!string(x)[$ - 1 .. 0]);\n}\n/*\n    Return the integer\
    \ formed by reversing the digits of the integer x.\n    >>> reverse_digits(1234L)\n\
    \   ", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1 .. $];\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].reverse;\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1 .. $].dup.reverse;\n    return s[shift .. $] ~ s[0 .. shift\
    \ - 1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length) {\n \
    \       return s[$-1 .. $];\n    }\n    return s[shift .. $] ~ s[0 .. shift -\
    \ 1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n     \
    \   return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1\
    \ .. $];\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(10L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(10L)\n    2\n\
    \    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(10L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(10L)\n    2\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(10L)\n    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the sum of the digits\
    \ of the integer x.\n    >>> sum_digits(12L)\n    3\n    >>> sum_digits(12345L)\n\
    \    15\n*/\nlong sum_digits(long x) \n{\n    string s = to!string(x);\n    long\
    \ sum = 0;\n    foreach (c; s)\n        sum += c - '0';\n    return sum;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n", "{\n    string s = to!string(x);\n    long\
    \ len = s.length;\n    if (shift > len)\n    {\n        return s[$-1..$];\n  \
    \  }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string result = to!string(x);\n\
    \    if (shift > result.length)\n    {\n        return result[$-1..$];\n    }\n\
    \    else\n    {\n        return result[shift..$] ~ result[0..shift-1];\n    }\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1..$];\n\
    \    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length) \n    {\n        return s[$-1 .. $];\n    }\n    return\
    \ s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n \
    \   if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~\
    \ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    long n = s.length;\n\
    \    if (shift > n)\n    {\n        return s[$-1..$];\n    }\n    else\n    {\n\
    \        return s[shift..$] ~ s[0..shift-1];\n    }\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-shift..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    >>> circular_shift(1234L, 1L)\n    \"4123\"\n \
    \   >>> circular_shift(1234L, 2L)\n    \"3412\"\n    >>> circular_shift(1234L,\
    \ 3L)\n    \"2341\"\n    >>> circular_shift(1234L, 4L)\n    \"1234\"\n    >>>\
    \ circular_shift(1234L, 5L)\n    \"1234\"\n    >>> circular_shift(1234L, 6L)\n\
    \    \"1234\"\n    >>> circular_shift(1234L, 7L)\n    \"1234\"\n    >>> circular_shift(1234L,\
    \ 8L)\n    \"1234\"\n    >>> circular_shift(1234L, 9L)\n    \"1234\"\n    >>>\
    \ circular_shift(1234L, 10L)\n    \"1234\"\n    >>> circular_shift(1234L, 11L)\n\
    \    \"1234\"\n    >>> circular_shift(1234L, 12L)\n    \"1234\"\n    >>> circular_shift(1234L,\
    \ 13L)\n    \"1234\"\n    >>> circular_shift(1234L, 14L)\n    \"1234\"\n    >>>\
    \ circular_shift(1234L, 15L)\n    \"1234\"\n    >>> circular_shift(1234L, 16L)\n\
    \    \"1234\"\n    >>> circular_shift(1234L, 17L)\n    \"1234\"\n    >>> circular_shift(1234L,\
    \ 18L)\n    \"1234\"\n    >>> circular_shift(1234L, 19L)\n    \"1234\"\n    >>>\
    \ circular_shift(1234L, 20L)\n    \"1234\"\n    >>> circular_shift(1234L, 21L)\n\
    \    \"1234\"\n    >>> circular_shift(1234L, 22L)\n    \"1234\"\n    >>> circular_shift(1234L,\
    \ 23L)\n   ", "{\n    string s = to!string(x);\n    if (shift > s.length)\n  \
    \      return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length) \n    {\n    \
    \    return s[$-1 .. $];\n    }\n    return s[shift .. $] ~ s[0 .. shift - 1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>>", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number\
    \ of digits in the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(12345L)\n\
    \    5\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(12L)\n\
    \    2\n    >>> number_of_digits(12345L)\n    5\n*/\nlong number_of_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(12345L)\n\
    \    5\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(12L)\n\
    \    2\n    >>> number_of_digits(12345L)\n    5\n*/\nlong number_of_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> number_of_digits(12L)\n    2\n    >>> number_of_digits(12345L)\n\
    \    5\n*/\nlong number_of_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> number_of_digits(12L)\n\
    \    2\n    >>> number_of_digits(12345L)\n    5\n*/\nlong number_of_digits(long\
    \ x) \n{\n    return to!string(x).", "{\n    string s = to!string(x);\n    long\
    \ n = s.length;\n    if (shift > n) \n    {\n        return s[n-1..0];\n    }\n\
    \    return s[shift..n-1] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n \
    \   1\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n  \
    \  return to!string(x).length;\n}\n/*\n    Return the integer formed by reversing\
    \ the digits of the integer x.\n    >>> reverse_digits(12345L)\n    54321L\n \
    \   >>> reverse_digits(1L)\n    1L\n*/\nlong reverse_digits(long x) \n{\n    return\
    \ to!long(to!string(x)[$-1..0]);\n}\n/*\n    Return the integer formed by reversing\
    \ the digits of the integer x.\n    >>> reverse_digits(12345L)\n    54321L\n \
    \   >>> reverse_digits(1L)\n    1L\n*/\nlong reverse_digits(long x) \n{\n    return\
    \ to!long(to!string(x)[$-1..0]);\n}\n/*\n    Return the integer formed by reversing\
    \ the digits of the integer x.\n    >>> reverse_digits(12345L)\n    54321L\n \
    \   >>> reverse_digits(1L)\n    1L\n*/\nlong reverse_digits(long x) \n{\n    return\
    \ to!long(to!string(x)[$-1..0]);\n}\n/*\n    Return the integer formed by reversing\
    \ the digits of the integer x.\n    >>> reverse_digits(12345L)\n    54321L\n \
    \   >>> reverse_digits(1L)\n    1L\n*/\nlong reverse_digits(long x) \n{\n    return\
    \ to!long(to!string(x)[$-1..0]);\n}\n/*\n    Return the integer formed by reversing\
    \ the digits of", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    long len = s.length;\n    if (shift\
    \ > len)\n    {\n        return s[$-1..$];\n    }\n    return s[shift..$] ~ s[0..shift-1];\n\
    }\n/*\n    Return a list of all circular shifts of the integer x.\n    >>> circular_shifts(12L)\n\
    \    [\"21\", \"12\"]\n    >>> circular_shifts(123L)\n    [\"321\", \"231\", \"\
    123\"]\n*/\nstring[] circular_shifts(long x) \n{\n    string s = to!string(x);\n\
    \    long len = s.length;\n    string[] result = new string[len];\n    foreach\
    \ (i; 0..len)\n    {\n        result[i] = circular_shift(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return a list of all circular shifts of the integer x, sorted\
    \ in ascending order.\n    >>> sorted_circular_shifts(12L)\n    [\"12\", \"21\"\
    ]\n    >>> sorted_circular_shifts(123L)\n    [\"123\", \"231\", \"321\"]\n*/\n\
    string[] sorted_circular_shifts(long x) \n{\n    string[] result = circular_shifts(x);\n\
    \    sort(result);\n    return result;\n}\n/*\n    Return the integer whose digits\
    \ are the circular shifts of the integer x, sorted in ascending order.\n    >>>\
    \ circular_sort(12L)\n    12\n    >>> circular_sort(123L)\n    123\n    >>> circular_sort(321L)\n\
    \    123\n*/\nlong circular_sort(long x) \n{\n    string[] result = sorted_circular_shifts(x);\n\
    \    return to!long(result[0]);\n}\n/*\n    Return the integer whose digits are\
    \ the circular shifts of the integer x, sorted in ascending order.\n    >>> circular_sort(12L)\n\
    \    12\n    >>> circular_sort(123L)\n    123\n    >>> circular_sort(321L)\n \
    \   123\n*/\nlong circular_sort(long x) \n{\n    string[] result = sorted_", "{\n\
    \    string s = to!string(x);\n    long n = s.length;\n    if (shift > n)\n  \
    \  {\n        return s[$-1..$];\n    }\n    else\n    {\n        return s[shift..$]\
    \ ~ s[0..shift-1];\n    }\n}", "{\n    string result = to!string(x);\n    if (shift\
    \ > result.length)\n    {\n        return result[$-1..$].dup;\n    }\n    else\n\
    \    {\n        return result[shift..$] ~ result[0..shift-1];\n    }\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n \
    \   1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n   ", "{\n    string s = to!string(x);\n\
    \    shift %= s.length;\n    return s[shift..$] ~ s[0..shift];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length) \n    {\n        return s[$-1..$].dup;\n\
    \    }\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number\
    \ of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2", "{\n  \
    \  string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1 ..\
    \ $].reverse;\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n    >>> circular_shift(12L,\
    \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1 .. $].reverse;\n    return s[shift .. $] ~ s[0 .. shift\
    \ - 1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L,\
    \ 2L)\n    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1 .. $].reverse;\n\
    \    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n    >>> circular_shift(12L,\
    \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1 .. $].reverse;\n    return s[shift .. $] ~ s[0 .. shift\
    \ - 1];\n}\n/*\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L,\
    \ 2L)\n    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1 .. $].reverse;\n\
    \    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n    >>> circular_shift(12L,\
    \ 1L)\n    \"21\"", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].reverse;\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string result = to!string(x);\n    if (shift >\
    \ result.length)\n    {\n        return result[$-1..$].reverse;\n    }\n    return\
    \ result[shift..$] ~ result[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(1L)\n \
    \   1\n    >>> num_digits(10L)\n    2\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1..$];\n\
    \    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    shift %= s.length;\n    return s[shift..$] ~ s[0..shift];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    shift %= s.length;\n\
    \    return s[shift..$] ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string result = to!string(x);\n    shift %= result.length;\n\
    \    if (shift == 0) return result;\n    return result[shift..$] ~ result[0..shift-1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the integer formed by reversing the digits in the integer x.\n    >>> reverse_digits(1L)\n\
    \    1\n    >>> reverse_digits(12L)\n    21\n    >>> reverse_digits(12345L)\n\
    \    54321\n*/\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x).reverse);\n\
    }\n/*\n    Return the integer formed by reversing the digits in the integer x.\n\
    \    >>> reverse_digits(1L)\n    1\n    >>> reverse_digits(12L)\n    21\n    >>>\
    \ reverse_digits(12345L)\n    54321\n*/\nlong reverse_digits(long x) \n{\n   \
    \ return to!long(to!string(x).reverse);\n}\n/*\n    Return the integer formed\
    \ by reversing the digits in the integer x.\n    >>> reverse_digits(1L)\n    1\n\
    \    >>> reverse_digits(12L)\n    21\n    >>> reverse_digits(12345L)\n    54321\n\
    */\nlong reverse_digits(long x) \n{\n    return to!long(to!string(x).reverse);\n\
    }\n/*\n    Return the integer formed by reversing the digits in the integer x.\n\
    \    >>> reverse_digits(1L)\n    1\n    >>> reverse_digits(12L)\n    21\n    >>>\
    \ reverse_digits(12345L)\n    54321\n*/\nlong reverse_digits(long x) \n{\n   \
    \ return to!long(to!string(x).reverse);", "{\n    string s = to!string(x);\n \
    \   long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1..$];\n\
    \    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1..$];\n\
    \    }\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n  \
    \  string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1 ..\
    \ $];\n    return s[shift .. $] ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length) \n    {\n        return s[$-1..$];\n    }\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1 .. $].reverse();\n    return s[shift .. $]\
    \ ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n    if (shift >\
    \ s.length)\n        return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string result = to!string(x);\n    shift %= result.length;\n    if\
    \ (shift == 0) return result;\n    return result[shift..$] ~ result[0..shift-1];\n\
    }\n/*\n    Given a list of integers, return a list of the integers, omitting any\
    \ that\n    are less than 0.\n    >>> positive_integers_only([1, -1, -2, 3, 4,\
    \ -5])\n    [1, 3, 4]\n*/", "{\n    string s = to!string(x);\n    if (shift >\
    \ s.length)\n        return s[$-1 .. $].reverse;\n    else\n        return s[shift\
    \ .. $] ~ s[0 .. shift - 1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    long n = s.length;\n\
    \    if (shift > n)\n    {\n        return s[$-1..$];\n    }\n    return s[shift..$-1]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-shift..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}\n/*\n    Return the number of digits in the integer x.\n \
    \   >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long", "{\n    string s = to!string(x);\n    long len = s.length;\n\
    \    if (shift > len)\n    {\n        return s[$-1..$];\n    }\n    else\n   \
    \ {\n        return s[shift..$] ~ s[0..shift-1];\n    }\n}", "{\n    string s\
    \ = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..$].dup.reverse;\n    return s[shift..$] ~\
    \ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1 .. 0];\n    return s[shift .. $] ~ s[0 .. shift - 1];\n\
    }\n/*\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L,\
    \ 2L)\n    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1 .. 0];\n\
    \    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n    >>> circular_shift(12L,\
    \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1 .. 0];\n    return s[shift .. $] ~ s[0 .. shift - 1];\n\
    }\n/*\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L,\
    \ 2L)\n    \"12\"\n*/\nstring circular_shift(long x, long shift) \n{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1 .. 0];\n\
    \    return s[shift .. $] ~ s[0 .. shift - 1];\n}\n/*\n    >>> circular_shift(12L,\
    \ 1L)\n    \"21\"\n    >>> circular_shift(12L, 2L)\n    \"12\"\n*/\nstring circular_shift(long\
    \ x, long shift) \n{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1 .. 0];\n    return s[shift .. $] ~ s[0 .. shift - 1];\n\
    }\n/*\n    >>> circular_shift(12L, 1L)\n    \"21\"\n    >>> circular_shift(12L,",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-shift..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}",
  "{\n    string s = to!string(x);\n    shift %= s.length;\n    return s[shift..$]\
    \ ~ s[0..shift];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n \
    \   >>> circular_shift(12345L, 1L)\n    \"23451\"\n    >>> circular_shift(12345L,\
    \ 2L)\n    \"34512\"\n    >>> circular_shift(12345L, 3L)\n    \"45123\"\n    >>>\
    \ circular_shift(12345L, 4L)\n    \"51234\"\n    >>> circular_shift(12345L, 5L)\n\
    \    \"12345\"\n    >>> circular_shift(12345L, 6L)\n    \"23451\"\n    >>> circular_shift(12345L,\
    \ 7L)\n    \"34512\"\n    >>> circular_shift(12345L, 8L)\n    \"45123\"\n    >>>\
    \ circular_shift(12345L, 9L)\n    \"51234\"\n    >>> circular_shift(12345L, 10L)\n\
    \    \"12345\"\n*/", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1 .. $].reverse;\n    return s[shift .. $] ~ s[0 .. shift\
    \ - 1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n   \
    \     return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Given\
    \ a list of integers, return the list of circular shifts of each integer.\n  \
    \  >>> circular_shifts([12L, 56L])\n    [\"21\", \"65\"]\n*/\nstring[] circular_shifts(long[]\
    \ xs) \n{\n    return xs.map!circular_shift;\n}\n/*\n    Given a list of integers,\
    \ return the list of circular shifts of each integer,\n    sorted in ascending\
    \ order.\n    >>> circular_shifts_sorted([12L, 56L])\n    [\"12\", \"21\", \"\
    56\", \"65\"]\n*/\nstring[] circular_shifts_sorted(long[] xs) \n{\n    return\
    \ circular_shifts(xs).sort;\n}\n/*\n    Given a list of integers, return the list\
    \ of circular shifts of each integer,\n    sorted in ascending order, with duplicates\
    \ removed.\n    >>> circular_shifts_sorted_unique([12L, 56L])\n    [\"12\", \"\
    21\", \"56\", \"65\"]\n*/\nstring[] circular_shifts_sorted_unique(long[] xs) \n\
    {\n    return circular_shifts_sorted(xs).uniq;\n}\n/*\n    Given a list of integers,\
    \ return the list of circular shifts of each integer,\n    sorted in ascending\
    \ order, with duplicates removed, and converted back to integers.\n    >>> circular_shifts_sorted_unique_ints([12L,\
    \ 56L])\n    [12, 21, 56, 65]\n*/\nlong[] circular_shifts_sorted_unique_ints(long[]\
    \ xs) \n{\n    return circular_shifts_sorted_unique(xs).map!to!long;\n}\n/*\n\
    \    Given a list of integers, return the list of circular shifts of each integer,\n\
    \    sorted in ascending order, with duplicates removed, and converted back to\
    \ integers,\n    and the number of times each integer appears in the original\
    \ list.\n    >>> circular_shifts_sorted_unique_", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..$].reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}",
  "{\n    string s = to!string(x);\n    long n = s.length;\n    if (shift > n)\n \
    \   {\n        return s[$-1..$];\n    }\n    else\n    {\n        return s[shift..$]\
    \ ~ s[0..shift-1];\n    }\n}", "{\n    string s = to!string(x);\n    long len\
    \ = s.length;\n    if (shift > len)\n    {\n        return s[$-1 .. $];\n    }\n\
    \    return s[shift .. $] ~ s[0 .. shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].reverse;\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n\
    \        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    shift %= s.length;\n    return s[shift..$] ~ s[0..shift];\n}", "{\n    string\
    \ s = to!string(x);\n    shift %= s.length;\n    return s[shift..$] ~ s[0..shift];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}\n/*\n    >>> is_circular_prime(197L)\n    True\n\
    \    >>> is_circular_prime(197L, primes)\n    True\n    >>> is_circular_prime(197L,\
    \ [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 9", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..$].dup.reverse;\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n  \
    \  string result = to!string(x);\n    if (shift > result.length)\n    {\n    \
    \    return result[$-1 .. $].reverse;\n    }\n    else\n    {\n        return\
    \ result[shift .. $] ~ result[0 .. shift - 1];\n    }\n}", "{\n    string s =\
    \ to!string(x);\n    long n = s.length;\n    if (shift > n)\n    {\n        return\
    \ s[$-1..$];\n    }\n    else\n    {\n        return s[shift..$] ~ s[0..shift-1];\n\
    \    }\n}", "{\n    string s = to!string(x);\n    if (shift > s.length)\n    \
    \    return s[$-1..$];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string\
    \ s = to!string(x);\n    shift %= s.length;\n    return s[shift..$] ~ s[0..shift-1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(1234567890L)\n    10\n\
    */\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(5L)\n    1\n    >>> num_digits(1234567890L)\n    10\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n \
    \   1\n    >>> num_digits(1234567890L)\n    10\n*/\nlong num_digits(long x) \n\
    {\n    return to!string(x).length;\n}\n/*\n    Return the number of digits in\
    \ the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n\
    \    >>> num_digits(1234567890L)\n    10\n*/\nlong num_digits(long x) \n{\n  \
    \  return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n \
    \   >>> num_digits(1234567890L)\n    10\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L)\n\
    \    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(123L", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length) \n    {\n        return s[$-1..$].dup.reverse;\n  \
    \  }\n    else \n    {\n        return s[shift..$] ~ s[0..shift-1];\n    }\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(5L)\n    1\n    >>> num_digits(1234567890L)\n    10\n\
    */\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(5L)\n    1\n    >>> num_digits(1234567890L)\n    10\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n \
    \   1\n    >>> num_digits(1234567890L)\n    10\n*/\nlong num_digits(long x) \n\
    {\n    return to!string(x).length;\n}\n/*\n    Return the number of digits in\
    \ the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n\
    \    >>> num_digits(1234567890L)\n    10\n*/\nlong num_digits(long x) \n{\n  \
    \  return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(5L)\n    1\n \
    \   >>> num_digits(1234567890L)\n    10\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n", "{\n    string s = to!string(x);\n    long\
    \ n = s.length;\n    if (shift > n)\n    {\n        return s[$-1..$];\n    }\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$].dup.reverse;\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n    if (shift\
    \ > s.length)\n        return s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length) \n    {\n    \
    \    return s[$-1..$].reverse;\n    }\n    return s[shift..$] ~ s[0..shift-1];\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\n    Return the number of digits in the\
    \ integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n   \
    \ 5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n\
    \    Return the number of digits in the integer x.\n    >>> num_digits(12", "{\n\
    \    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..$];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return a list of the circular shifts of the integer\
    \ x.\n    >>> circular_shifts(12L)\n    [\"21\", \"12\"]\n*/\nstring[] circular_shifts(long\
    \ x) \n{\n    string s = to!string(x);\n    string[] result;\n    foreach (i;\
    \ 0..s.length) \n    {\n        result ~= circular_shift(x, i);\n    }\n    return\
    \ result;\n}\n/*\n    Return a list of the circular shifts of the integer x,\n\
    \    sorted in ascending order.\n    >>> sorted_circular_shifts(12L)\n    [\"\
    12\", \"21\"]\n*/\nstring[] sorted_circular_shifts(long x) \n{\n    return circular_shifts(x).sort();\n\
    }\n/*\n    Return a list of the circular shifts of the integer x,\n    sorted\
    \ in ascending order,\n    with each shift converted to the corresponding integer.\n\
    \    >>> sorted_circular_shifts_int(12L)\n    [12, 21]\n*/\nlong[] sorted_circular_shifts_int(long\
    \ x) \n{\n    return sorted_circular_shifts(x).map!(to!long).array;\n}\n/*\n \
    \   Return a list of the circular shifts of the integer x,\n    sorted in ascending\
    \ order,\n    with each shift converted to the corresponding integer,\n    and\
    \ with duplicates removed.\n    >>> unique_sorted_circular_shifts_int(12L)\n \
    \   [12]\n*/\nlong[] unique_sorted_circular_shifts_int(long x) \n{\n    return\
    \ sorted_circular_shifts_int(x).uniq;\n}\n/*\n    Return a list of the circular\
    \ shifts of the integer x,\n    sorted in ascending order,\n    with each shift\
    \ converted to the corresponding integer,\n    and with duplicates removed.\n\
    \    >>> unique_sorted_circular_shifts_int(12L", "{\n    string s = to!string(x);\n\
    \    long n = s.length;\n    if (shift > n)\n    {\n        return s[$-1..$];\n\
    \    }\n    return s[shift..$] ~ s[0..shift-1];\n}\n/*\nReturn the number of digits\
    \ in the integer x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\nReturn the number of digits in the integer x.\n    >>> num_digits(12L)\n \
    \   2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n  \
    \  return to!string(x).length;\n}\n/*\nReturn the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\nReturn the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\nReturn the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n \
    \   return to!string(x).length;\n}\n/*\nReturn the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\nReturn the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    long len = s.length;\n    if (shift > len)\n    {\n        return s[$-1 ..\
    \ $];\n    }\n    else\n    {\n        return s[shift .. $] ~ s[0 .. shift - 1];\n\
    \    }\n}\n/*\n    Return the digits of the integer x as a string.\n    >>> digits(12L)\n\
    \    \"12\"\n    >>> digits(123L)\n    \"123\"\n*/\nstring digits(long x) \n{\n\
    \    return to!string(x);\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(12L)\n\
    \    2\n    >>> num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n   \
    \ return to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(12L)\n    2\n    >>> num_digits(123L)\n    3\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(12L)\n    2\n    >>>\
    \ num_digits(123L)\n    3\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(",
  "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..$];\n\
    \    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s = to!string(x);\n\
    \    if (shift > s.length)\n        return s[$-1..0];\n    return s[shift..$]\
    \ ~ s[0..shift-1];\n}\n/*\n    Return the number of digits in the integer x.\n\
    \    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long\
    \ x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n\
    \    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L)\n    1\n*/\nlong\
    \ num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return the\
    \ number of digits in the integer x.\n    >>> num_digits(123L)\n    3\n    >>>\
    \ num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(123L)\n\
    \    3\n    >>> num_digits(0L)\n    1\n*/\nlong num_digits(long x) \n{\n    return\
    \ to!string(x).length;\n}\n/*\n    Return the number of digits in the integer\
    \ x.\n    >>> num_digits(123L)\n    3\n    >>> num_digits(0L", "{\n    string\
    \ s = to!string(x);\n    return s[shift..$] ~ s[0..shift];\n}", "{\n    string\
    \ s = to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n  \
    \  return s[shift..$] ~ s[0..shift-1];\n}\n/*\n    Return the number of digits\
    \ in the integer x.\n    >>> num_digits(0L)\n    1\n    >>> num_digits(1L)\n \
    \   1\n    >>> num_digits(10L)\n    2\n    >>> num_digits(12345L)\n    5\n*/\n\
    long num_digits(long x) \n{\n    return to!string(x).length;\n}\n/*\n    Return\
    \ the number of digits in the integer x.\n    >>> num_digits(0L)\n    1\n    >>>\
    \ num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>> num_digits(12345L)\n\
    \    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n}\n\
    /*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_digits(12345L)\n    5\n*/\nlong num_digits(long x) \n{\n    return to!string(x).length;\n\
    }\n/*\n    Return the number of digits in the integer x.\n    >>> num_digits(0L)\n\
    \    1\n    >>> num_digits(1L)\n    1\n    >>> num_digits(10L)\n    2\n    >>>\
    \ num_dig", "{\n    string s = to!string(x);\n    long n = s.length;\n    if (shift\
    \ > n)\n    {\n        return s[$-1..0];\n    }\n    return s[shift..$] ~ s[0..shift-1];\n\
    }", "{\n    string s = to!string(x);\n    if (shift > s.length)\n        return\
    \ s[$-1..0];\n    return s[shift..$] ~ s[0..shift-1];\n}", "{\n    string s =\
    \ to!string(x);\n    if (shift > s.length)\n        return s[$-1..0];\n    return\
    \ s[shift..$] ~ s[0..shift-1];\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
