name: HumanEval_68_pluck
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
  \ a branch of a tree that has non-negative integer nodes\n    your task is to pluck\
  \ one of the nodes and return it.\n    The plucked node should be the node with\
  \ the smallest even value.\n    If multiple nodes with the same smallest even value\
  \ are found return the node that has smallest index.\n\n    The plucked node should\
  \ be returned in a list, [ smalest_value, its index ],\n    If there are no even\
  \ values or the given array is empty, return [].\n\n    Example 1:\n    >>> pluck([4L,\
  \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and 2\
  \ has the smallest index.\n\n    Example 2:\n    >>> pluck([1L, 2L, 3L])\n    [2L,\
  \ 1L]\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5L,\
  \ 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n    Explanation: 0 is the smallest value,\
  \ but  there are two zeros,\n                 so we will choose the first zero,\
  \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
  \ <= 10000\n        * 0 <= node.value\n    \n*/\nlong[] pluck(long[] arr) \n"
tests: "unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
  \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
  \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
  \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
  \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
  \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[2];\n    if (arr.length == 0)\n   \
    \     return result;\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (min == arr[0])\n\
    \        return result;\n    result[0] = min;\n    result[1] = index;\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if\
    \ (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return [];\n}", "{\n    long[] result = [];\n    long min = long.max;\n \
    \   long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e\
    \ < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min != long.max)\n    {\n        result ~= min;\n        result\
    \ ~= index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(index == -1)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  long[] result = [];\n    long min = long.max;\n    long index = 0;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if(min != long.max)\n  \
    \  {\n        result ~= min;\n        result ~= index;\n    }\n    return result;\n\
    }", "{\n    long[] result = [0L, 0L];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    long minEven = 0;\n    long minEvenIndex = 0;\n    bool foundEven\
    \ = false;\n    foreach(i, v; arr)\n    {\n        if(v < min)\n        {\n  \
    \          min = v;\n            minIndex = i;\n        }\n        if(v % 2 ==\
    \ 0)\n        {\n            if(!foundEven)\n            {\n                minEven\
    \ = v;\n                minEvenIndex = i;\n                foundEven = true;\n\
    \            }\n            else if(v < minEven)\n            {\n            \
    \    minEven = v;\n                minEvenIndex = i;\n            }\n        }\n\
    \    }\n    if(foundEven)\n    {\n        result[0] = minEven;\n        result[1]\
    \ = minEvenIndex;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n\
    \        return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return new long[0];\n}", "{\n\
    \    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if(min == long.max)\n        return [];\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}", "{\n    long[] result = [0L,\
    \ 0L];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    result[0] = -1;\n    result[1] = -1;\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (int i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n\
    \    if(arr.length == 0) return result;\n    long min = arr[0];\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            result[0] = v;\n            result[1] = i;\n        }\n  \
    \  }\n    if(result[0] == 0)\n        result = [];\n    return result;\n}", "{\n\
    \    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n     \
    \   {\n            min = e;\n            index = i;\n        }\n    }\n    if(min\
    \ != long.max)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min ==\
    \ arr[0])\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0\
    \ && arr[i] < min)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    auto min = arr[0];\n    auto minIndex = 0;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n        return [min, minIndex];\n    return [];\n}", "{\n    long[]\
    \ result = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n    long\
    \ min = arr[0];\n    long min_index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i]\
    \ < min)\n            {\n                min = arr[i];\n                min_index\
    \ = i;\n            }\n        }\n    }\n    if (min == arr[0])\n        return\
    \ result;\n    result[0] = min;\n    result[1] = min_index;\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long minIndex = 0;\n    bool found = false;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0)\n        {\n        \
    \    if (!found)\n            {\n                min = e;\n                minIndex\
    \ = i;\n                found = true;\n            }\n            else\n     \
    \       {\n                if (e < min)\n                {\n                 \
    \   min = e;\n                    minIndex = i;\n                }\n         \
    \   }\n        }\n    }\n    if (found)\n    {\n        result[0] = min;\n   \
    \     result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    bool found = false;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0)\n        {\n            if (!found)\n\
    \            {\n                min = v;\n                minIndex = i;\n    \
    \            found = true;\n            }\n            else\n            {\n \
    \               if (v < min)\n                {\n                    min = v;\n\
    \                    minIndex = i;\n                }\n            }\n       \
    \ }\n    }\n    if (found)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long minEven = arr[0];\n    long minEvenIndex\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n\
    \        {\n            minEven = v;\n            minEvenIndex = i;\n        }\n\
    \    }\n    if (minEven == arr[0])\n        return [minEven, minEvenIndex];\n\
    \    return [];\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n       \
    \ if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    long[] result = [];\n    long minEven = long.max;\n\
    \    long minEvenIndex = long.max;\n    foreach(i, n; arr)\n    {\n        if(n\
    \ % 2 == 0 && n < minEven)\n        {\n            minEven = n;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if(minEven != long.max)\n    {\n        result ~=\
    \ minEven;\n        result ~= minEvenIndex;\n    }\n    return result;\n}", "{\n\
    \    long[] result = [];\n    long smallestEven = long.max;\n    long index =\
    \ 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < smallestEven)\n\
    \        {\n            smallestEven = e;\n            index = i;\n        }\n\
    \    }\n    if(smallestEven != long.max)\n    {\n        result ~= smallestEven;\n\
    \        result ~= index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n \
    \       return result;\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (min == arr[0])\n\
    \        return result;\n    result[0] = min;\n    result[1] = index;\n    return\
    \ result;\n}", "{\n    long[] result = [0L, 0L];\n    long min = long.max;\n \
    \   foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            result[0] = v;\n            result[1] = i;\n\
    \        }\n    }\n    if(min == long.max)\n        return [];\n    return result;\n\
    }", "{\n    long[] result = [0L, 0L];\n    long min = arr[0];\n    long index\
    \ = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n   \
    \     {\n            min = v;\n            index = i;\n        }\n    }\n    if(min\
    \ == arr[0])\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = [long.max, long.max];\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n        {\n       \
    \     result[0] = v;\n            result[1] = i;\n        }\n    }\n    if(result[0]\
    \ == long.max)\n        return [];\n    return result;\n}", "{\n    if (arr.length\
    \ == 0) return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    bool found = false;\n    foreach (i, v; arr)\n    {\n        if (v % 2 ==\
    \ 0)\n        {\n            if (!found)\n            {\n                min =\
    \ v;\n                minIndex = i;\n                found = true;\n         \
    \   }\n            else\n            {\n                if (v < min)\n       \
    \         {\n                    min = v;\n                    minIndex = i;\n\
    \                }\n            }\n        }\n    }\n    if (found)\n    {\n \
    \       return [min, minIndex];\n    }\n    else\n    {\n        return new long[0];\n\
    \    }\n}", "{\n    long[] result = [0L, 0L];\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if(min != arr[0])\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min == arr[0])\n    {\n        return result;\n    }\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  if (arr.length == 0)\n        return [];\n    long[] result = [arr[0], 0];\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < result[0])\n  \
    \      {\n            result[0] = e;\n            result[1] = i;\n        }\n\
    \    }\n    if (result[0] % 2 != 0)\n        return [];\n    return result;\n}",
  "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n    \
    \    result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long min = arr[0];\n    long index\
    \ = 0;\n    bool found = false;\n    foreach(i, e; arr)\n    {\n        if(e %\
    \ 2 == 0)\n        {\n            if(e < min)\n            {\n               \
    \ min = e;\n                index = i;\n                found = true;\n      \
    \      }\n        }\n    }\n    if(found)\n    {\n        result[0] = min;\n \
    \       result[1] = index;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0) return [].dup;\n    long min = long.max;\n    long index = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (min == long.max)\
    \ return [].dup;\n    return [min, index].dup;\n}", "{\n    long[] result = new\
    \ long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}", "{\n    long[] result = [0L,\
    \ 0L];\n    long min = arr[0];\n    foreach(i, v; arr)\n    {\n        if(v <\
    \ min && v % 2 == 0)\n        {\n            min = v;\n            result[0] =\
    \ v;\n            result[1] = i;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach (i, val; arr)\n    {\n\
    \        if (val % 2 == 0 && val < min)\n        {\n            min = val;\n \
    \           index = i;\n        }\n    }\n    if (min == arr[0])\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n\
    \        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n       \
    \     index = i;\n        }\n    }\n    if (min == arr[0])\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    foreach (i, v; arr)\n    {\n        if (v < min &&\
    \ v % 2 == 0)\n        {\n            min = v;\n            result[0] = v;\n \
    \           result[1] = i;\n        }\n    }\n    if (result[0] == 0)\n      \
    \  return result;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n        \
    \    {\n                min = arr[i];\n                minIndex = i;\n       \
    \     }\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    if (arr.length == 0)\n        return result;\n  \
    \  long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i]\
    \ < min)\n            {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n    }\n    if (min % 2 == 0)\n    {\n      \
    \  result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}",
  "{\n    long[] result = [0L, 0L];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            minIndex = i;\n        }\n    }\n    if(min\
    \ == arr[0])\n    {\n        return result;\n    }\n    result[0] = min;\n   \
    \ result[1] = minIndex;\n    return result;\n}", "{\n    long[] result = [long.max,\
    \ long.max];\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < result[0])\n\
    \        {\n            result[0] = e;\n            result[1] = i;\n        }\n\
    \    }\n    if(result[0] == long.max)\n        return [];\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n \
    \   {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}", "{\n    long[] res = new long[2];\n    long min = long.max;\n \
    \   long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v\
    \ < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return res;\n    res[0] = min;\n    res[1]\
    \ = index;\n    return res;\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(index != -1)\n    {\n        result[0] = min;\n\
    \        result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v\
    \ < min && v % 2 == 0)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = index;\n    }\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long index =\
    \ 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n   \
    \     {\n            min = e;\n            index = i;\n        }\n    }\n    if\
    \ (min % 2 == 0)\n        return [min, index];\n    return new long[0];\n}", "{\n\
    \    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    bool hasEven = false;\n \
    \   foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n         \
    \   hasEven = true;\n            if (v < min)\n            {\n               \
    \ min = v;\n                minIndex = i;\n            }\n        }\n    }\n \
    \   if (hasEven)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length\
    \ == 0)\n        return result;\n    long minEven = arr[0];\n    long minEvenIndex\
    \ = 0;\n    foreach (i, value; arr)\n    {\n        if (value % 2 == 0)\n    \
    \    {\n            if (value < minEven)\n            {\n                minEven\
    \ = value;\n                minEvenIndex = i;\n            }\n        }\n    }\n\
    \    if (minEven % 2 == 0)\n    {\n        result[0] = minEven;\n        result[1]\
    \ = minEvenIndex;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long index = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v < min && v % 2 == 0)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            result[0] = e;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0L)\n        return [0L, 0L];\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    long minEven = long.max;\n    long\
    \ minEvenIndex = long.max;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0 && arr[i] < minEven)\n        {\n            minEven\
    \ = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    if (minEven\
    \ == long.max)\n    {\n        return result;\n    }\n    result[0] = minEven;\n\
    \    result[1] = minEvenIndex;\n    return result;\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    long min = 0L;\n    long index = 0L;\n    bool found = false;\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0)\n        {\n          \
    \  if(!found)\n            {\n                min = e;\n                index\
    \ = i;\n                found = true;\n            }\n            else\n     \
    \       {\n                if(e < min)\n                {\n                  \
    \  min = e;\n                    index = i;\n                }\n            }\n\
    \        }\n    }\n    if(found)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n      \
    \  if (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min != long.max)\n    {\n        result ~= min;\n\
    \        result ~= index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    int index = -1;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ min)\n        {\n            min = arr[i];\n            index = i;\n       \
    \ }\n    }\n    if (index == -1)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}", "{\n    long[] result = [0L,\
    \ 0L];\n    if (arr.length == 0) \n    {\n        return result;\n    }\n    long\
    \ minEven = arr[0];\n    long minEvenIndex = 0;\n    foreach (i, e; arr) \n  \
    \  {\n        if (e % 2 == 0) \n        {\n            if (e < minEven) \n   \
    \         {\n                minEven = e;\n                minEvenIndex = i;\n\
    \            }\n        }\n    }\n    if (minEven % 2 == 0) \n    {\n        result[0]\
    \ = minEven;\n        result[1] = minEvenIndex;\n    }\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if(min != long.max)\n    {\n        result[0] = min;\n        result[1] =\
    \ index;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n      \
    \  return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v < min && v % 2 == 0)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return [];\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            minIndex = i;\n        }\n    }\n    if (min % 2 ==\
    \ 0)\n        return [min, minIndex];\n    return [];\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    long min = long.max;\n    foreach(i, v; arr)\n    {\n     \
    \   if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            result[0]\
    \ = v;\n            result[1] = i;\n        }\n    }\n    if(min == long.max)\n\
    \        return [];\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n\
    \    long min = arr[0];\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == arr[0])\n    {\n        return\
    \ result;\n    }\n    else\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n        return result;\n    }\n}", "{\n    if (arr.length == 0)\n\
    \        return [];\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \        return [min, index];\n    return [];\n}", "{\n    long[] result = new\
    \ long[2];\n    result[0] = -1;\n    result[1] = -1;\n    if (arr.length == 0)\n\
    \        return result;\n    foreach (i, v; arr)\n    {\n        if (v % 2 ==\
    \ 0)\n        {\n            if (result[0] == -1)\n            {\n           \
    \     result[0] = v;\n                result[1] = i;\n            }\n        \
    \    else if (v < result[0])\n            {\n                result[0] = v;\n\
    \                result[1] = i;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v < min && v % 2 == 0)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min == arr[0] && min % 2 !=\
    \ 0)\n        return result;\n    result[0] = min;\n    result[1] = index;\n \
    \   return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    bool found = false;\n    for (long i = 0; i < arr.length; i++)\n    {\n \
    \       if (arr[i] % 2 == 0)\n        {\n            if (!found)\n           \
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \      found = true;\n            }\n            else\n            {\n       \
    \         if (arr[i] < min)\n                {\n                    min = arr[i];\n\
    \                    minIndex = i;\n                }\n            }\n       \
    \ }\n    }\n    if (found)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n\
    \    long min = long.max;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    if\
    \ (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long index\
    \ = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n \
    \       {\n            min = e;\n            index = i;\n        }\n    }\n  \
    \  if (min % 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n \
    \   long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n   \
    \ {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min == arr[0])\n        return\
    \ result;\n    result[0] = min;\n    result[1] = minIndex;\n    return result;\n\
    }", "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (index,\
    \ value; arr)\n    {\n        if (value % 2 == 0 && value < min)\n        {\n\
    \            min = value;\n            minIndex = index;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = minIndex;\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n   \
    \ long min = long.max;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n    \
    \    if (v % 2 == 0 && v < min)\n        {\n            min = v;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min == arr[0])\n        return result;\n\
    \    result[0] = min;\n    result[1] = minIndex;\n    return result;\n}", "{\n\
    \    long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n\
    \    \n    long min = arr[0];\n    long minIndex = 0;\n    long minEven = 0;\n\
    \    long minEvenIndex = 0;\n    bool hasEven = false;\n    foreach (i, v; arr)\n\
    \    {\n        if (v < min)\n        {\n            min = v;\n            minIndex\
    \ = i;\n        }\n        if (v % 2 == 0)\n        {\n            if (!hasEven)\n\
    \            {\n                minEven = v;\n                minEvenIndex = i;\n\
    \                hasEven = true;\n            }\n            else if (v < minEven)\n\
    \            {\n                minEven = v;\n                minEvenIndex = i;\n\
    \            }\n        }\n    }\n    if (hasEven)\n    {\n        result[0] =\
    \ minEven;\n        result[1] = minEvenIndex;\n    }\n    return result;\n}",
  "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    foreach (i, e; arr)\n    {\n        if (e % 2 ==\
    \ 0 && e < min)\n        {\n            min = e;\n            result[0] = e;\n\
    \            result[1] = i;\n        }\n    }\n    if (result[0] == 0L)\n    \
    \    return [];\n    return result;\n}", "{\n    if (arr.length == 0) \n     \
    \   return new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach\
    \ (i, v; arr) \n    {\n        if (v < min && v % 2 == 0) \n        {\n      \
    \      min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2\
    \ == 0) \n        return [min, minIndex];\n    return new long[0];\n}", "{\n \
    \   if (arr.length == 0)\n        return [];\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n\
    }", "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min == arr[0])\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n}",
  "{\n    long[] ret = [0L, 0L];\n    long min = long.max;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           ret[0] = v;\n            ret[1] = i;\n        }\n    }\n    if(min\
    \ == long.max)\n        return [];\n    return ret;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min &&\
    \ arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return [];\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length ==\
    \ 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ == arr[0])\n        return result;\n    result[0] = min;\n    result[1] = minIndex;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n\
    \    {\n        return result;\n    }\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    long index = long.max;\n    foreach(i, v; arr)\n    {\n     \
    \   if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n  \
    \  result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n    long[]\
    \ result = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (min == long.max)\n \
    \       return result;\n    result[0] = min;\n    result[1] = index;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min != long.max)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n    long min\
    \ = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            result[0] = v;\n            result[1]\
    \ = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n    return\
    \ result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if\
    \ (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return [];\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  if (arr.length == 0)\n        return [];\n    long min = long.max;\n    long\
    \ index = -1;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (index == -1)\n        return [];\n    return [min, index];\n}", "{\n \
    \   long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n   \
    \ {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min == arr[0])\n        return\
    \ result;\n    result[0] = min;\n    result[1] = minIndex;\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n     \
    \   if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}", "{\n    long[] ret = new long[2];\n    long\
    \ min = long.max;\n    long index = long.max;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return ret;\n\
    \    ret[0] = min;\n    ret[1] = index;\n    return ret;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if(min == long.max)\n  \
    \      return result;\n    result[0] = min;\n    result[1] = index;\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    long minIndex = 0;\n    for\
    \ (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i]\
    \ < min)\n        {\n            min = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    long min = long.max;\n    foreach(i, v; arr)\n    {\n     \
    \   if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            result[0]\
    \ = v;\n            result[1] = i;\n        }\n    }\n    if(min == long.max)\n\
    \        return [];\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}", "{\n    long[] result = [0L,\
    \ 0L];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n\
    \    long min_index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 ==\
    \ 0 && v < min)\n        {\n            min = v;\n            min_index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = min_index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = long.max;\n    foreach(i, v; arr)\n    {\n  \
    \      if (v % 2 == 0 && v < min)\n        {\n            min = v;\n         \
    \   result[0] = v;\n            result[1] = i;\n        }\n    }\n    if (min\
    \ == long.max)\n        return [];\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    long min = arr[0];\n    long index = 0;\n    for (int i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n\
    \            if (arr[i] < min)\n            {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n    }\n    if (min % 2\
    \ == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ int.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e %\
    \ 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min == int.max)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    long[] evens = arr.filter!(x => x % 2 == 0).array;\n    if\
    \ (evens.length == 0)\n        return result;\n    result[0] = evens.min;\n  \
    \  result[1] = arr.indexOf(result[0]);\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [0L, 0L];\n    long min = arr[0];\n    long minIndex =\
    \ 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n   \
    \     {\n            min = v;\n            minIndex = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n        return [min, minIndex];\n    else\n        return\
    \ [0L, 0L];\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    int index = -1;\n    foreach(i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (index == -1)\n        return result;\n    result[0] = min;\n \
    \   result[1] = index;\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n\
    \    long min = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 ==\
    \ 0 && e < min)\n        {\n            min = e;\n            result[0] = e;\n\
    \            result[1] = i;\n        }\n    }\n    if(min == long.max)\n     \
    \   return [];\n    return result;\n}", "{\n    long min = long.max;\n    long\
    \ index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if(index == -1)\n        return [];\n    return [min, index];\n}", "{\n  \
    \  long[] result = new long[2];\n    long min = long.max;\n    long index = 0;\n\
    \    foreach(long i, long v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if(min == long.max)\n    {\n        return result;\n    }\n    result[0] =\
    \ min;\n    result[1] = index;\n    return result;\n}", "{\n    if (arr.length\
    \ == 0)\n        return [];\n    long min = arr[0];\n    long index = 0;\n   \
    \ foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}", "{\n    if (arr.length\
    \ == 0)\n        return new long[0];\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if (arr[i] <\
    \ min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n\
    \    return new long[0];\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if (min ==\
    \ arr[0])\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min ==\
    \ arr[0])\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long min = long.max;\n    long index = -1;\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if(index\
    \ == -1)\n        return [];\n    return [min, index];\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e\
    \ < min && e % 2 == 0)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    long min = arr[0];\n    long index = 0;\n    foreach(i, v;\
    \ arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n            min =\
    \ v;\n            index = i;\n        }\n    }\n    if(min == arr[0])\n      \
    \  return result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }", "{\n    long[] result = [0L, 0L];\n    long min = 0L;\n    long index = 0L;\n\
    \    bool found = false;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0)\n\
    \        {\n            if(!found)\n            {\n                min = v;\n\
    \                index = i;\n                found = true;\n            }\n  \
    \          else\n            {\n                if(v < min)\n                {\n\
    \                    min = v;\n                    index = i;\n              \
    \  }\n            }\n        }\n    }\n    if(found)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0]\
    \ = min;\n        result[1] = minIndex;\n    }\n    return result;\n}", "{\n \
    \   long[] result = [];\n    if(arr.length == 0)\n        return result;\n   \
    \ long min = arr[0];\n    long index = 0;\n    foreach(i, e; arr)\n    {\n   \
    \     if(e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ index = i;\n        }\n    }\n    if(min % 2 == 0)\n        result ~= [min,\
    \ index];\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0;\n    long index = 0;\n    bool found = false;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0)\n        {\n            if(!found)\n          \
    \  {\n                min = e;\n                index = i;\n                found\
    \ = true;\n            }\n            else\n            {\n                if(e\
    \ < min)\n                {\n                    min = e;\n                  \
    \  index = i;\n                }\n            }\n        }\n    }\n    if(found)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            result[0] = e;\n            result[1] = i;\n\
    \        }\n    }\n    if(min == long.max)\n    {\n        return new long[0];\n\
    \    }\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            result[0] = e;\n            result[1] = i;\n        }\n    }\n  \
    \  if (result[0] == 0L)\n        return [];\n    return result;\n}", "{\n    long[]\
    \ result = [0L, 0L];\n    long min = 10001L;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    result[0] = e;\n            result[1] = i;\n        }\n    }\n    if(min\
    \ == 10001L)\n        return [];\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    int minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n\
    \            {\n                min = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0]\
    \ = min;\n        result[1] = minIndex;\n    }\n    return result;\n}", "{\n \
    \   long[] result = new long[2];\n    long min = long.max;\n    long index = 0;\n\
    \    foreach(i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if (min ==\
    \ long.max)\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    long min =\
    \ long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min == long.max)\n        return [];\n    else\n   \
    \ {\n        result[0] = min;\n        result[1] = index;\n        return result;\n\
    \    }\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n \
    \       return result;\n    long min = arr[0];\n    long index = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    if (arr.length == 0) return new long[0];\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if\
    \ (e % 2 == 0 && e < min)\n        {\n            min = e;\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0) return [min, minIndex];\n    return\
    \ new long[0];\n}", "{\n    long[] result = new long[2];\n    if (arr.length ==\
    \ 0)\n        return result;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ == arr[0])\n        return result;\n    result[0] = min;\n    result[1] = minIndex;\n\
    \    return result;\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min ==\
    \ arr[0])\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = [0L, 0L];\n    long min = long.max;\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            result[0] = e;\n            result[1] = i;\n\
    \        }\n    }\n    if(min == long.max)\n        return [];\n    return result;\n\
    }", "{\n    long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n \
    \           index = i;\n        }\n    }\n    if(index == -1)\n        return\
    \ [];\n    return [min, index];\n}", "{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min &&\
    \ v % 2 == 0)\n        {\n            min = v;\n            minIndex = i;\n  \
    \      }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long minEven\
    \ = arr[0];\n    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i]\
    \ < minEven)\n            {\n                minEven = arr[i];\n             \
    \   minEvenIndex = i;\n            }\n        }\n    }\n    if (minEven % 2 ==\
    \ 0)\n    {\n        result[0] = minEven;\n        result[1] = minEvenIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n    long min\
    \ = long.max;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ < min && e % 2 == 0)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min == long.max)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    long min = 0L;\n    long index = 0L;\n    bool found = false;\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0)\n        {\n          \
    \  if(!found)\n            {\n                min = e;\n                index\
    \ = i;\n                found = true;\n            }\n            else\n     \
    \       {\n                if(e < min)\n                {\n                  \
    \  min = e;\n                    index = i;\n                }\n            }\n\
    \        }\n    }\n    if(found)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    if (arr.length == 0)\n    \
    \    return [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            index = i;\n        }\n    }\n    if (min == arr[0])\n   \
    \     return [min, index];\n    return [];\n}", "{\n    long[] result = [long.max,\
    \ long.max];\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n\
    \        {\n            result[0] = v;\n            result[1] = i;\n        }\n\
    \    }\n    if(result[0] == long.max)\n        return [];\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return new long[0];\n    long min =\
    \ arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n    return\
    \ new long[0];\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            result[0] = v;\n            result[1] = i;\n\
    \        }\n    }\n    if(min == long.max)\n    {\n        return [];\n    }\n\
    \    return result;\n}", "{\n    long[] result = [0L, 0L];\n    long min = 0;\n\
    \    long index = 0;\n    bool found = false;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0)\n        {\n            if(!found)\n            {\n  \
    \              found = true;\n                min = e;\n                index\
    \ = i;\n            }\n            else\n            {\n                if(e <\
    \ min)\n                {\n                    min = e;\n                    index\
    \ = i;\n                }\n            }\n        }\n    }\n    if(found)\n  \
    \  {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n\
    \        return result;\n    long min = arr[0];\n    int index = 0;\n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 ==\
    \ 0)\n        {\n            min = arr[i];\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  long[] result = [0L, 0L];\n    long min = 0L;\n    long index = 0L;\n    long\
    \ count = 0L;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0)\n       \
    \ {\n            if(count == 0)\n            {\n                min = e;\n   \
    \             index = i;\n                count++;\n            }\n          \
    \  else if(e < min)\n            {\n                min = e;\n               \
    \ index = i;\n            }\n        }\n    }\n    if(count != 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }", "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e;\
    \ arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            minIndex = i;\n        }\n    }\n    if (min == arr[0])\n\
    \        return result;\n    result[0] = min;\n    result[1] = minIndex;\n   \
    \ return result;\n}", "{\n    long[] result = new long[2];\n    long min = long.max;\n\
    \    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(min == long.max)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = 0;\n    foreach(long i, long v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           index = i;\n        }\n    }\n    if(min == long.max)\n    {\n   \
    \     return result;\n    }\n    result[0] = min;\n    result[1] = index;\n  \
    \  return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n       \
    \ if (v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min, index];\n\
    \    return [];\n}", "{\n    long[] result = [];\n    long min = long.max;\n \
    \   long index = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 ==\
    \ 0 && e < min)\n        {\n            min = e;\n            index = i;\n   \
    \     }\n    }\n    if(min != long.max)\n    {\n        result ~= min;\n     \
    \   result ~= index;\n    }\n    return result;\n}", "{\n    long[] result = [0L,\
    \ 0L];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            result[0] = v;\n            result[1] = i;\n\
    \        }\n    }\n    if (result[0] == 0)\n        return [];\n    return result;\n\
    }", "{\n    long[] result = [0L, 0L];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n     \
    \       if (arr[i] < min)\n            {\n                min = arr[i];\n    \
    \            minIndex = i;\n            }\n        }\n    }\n    if (min % 2 ==\
    \ 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n\
    \    return result;\n}", "{\n    long[] result = [0L, 0L];\n    long min = arr[0];\n\
    \    long minIndex = 0;\n    bool hasEven = false;\n    foreach(i, v; arr)\n \
    \   {\n        if(v % 2 == 0)\n        {\n            hasEven = true;\n      \
    \      if(v < min)\n            {\n                min = v;\n                minIndex\
    \ = i;\n            }\n        }\n    }\n    if(hasEven)\n    {\n        result[0]\
    \ = min;\n        result[1] = minIndex;\n    }\n    return result;\n}", "{\n \
    \   long[] result = [0L, 0L];\n    long min = 10001L;\n    long index = 0L;\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if(min ==\
    \ 10001L)\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] res = new long[2];\n    if (arr.length\
    \ == 0)\n        return res;\n    long min = arr[0];\n    long minIndex = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    if (min\
    \ % 2 == 0)\n    {\n        res[0] = min;\n        res[1] = minIndex;\n    }\n\
    \    return res;\n}", "{\n    if (arr.length == 0)\n        return new long[0];\n\
    \    \n    long min = long.max;\n    long minIndex = long.max;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            minIndex = i;\n        }\n    }\n    \n    if (min == long.max)\n\
    \        return new long[0];\n    \n    return [min, minIndex];\n}", "{\n    long[]\
    \ result = new long[2];\n    if (arr.length == 0)\n        return result;\n  \
    \  long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n \
    \       if (v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}", "{\n    long\
    \ minEven = long.max;\n    long minEvenIndex = long.max;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0 && e < minEven)\n        {\n            minEven\
    \ = e;\n            minEvenIndex = i;\n        }\n    }\n    if(minEven == long.max)\n\
    \        return [];\n    return [minEven, minEvenIndex];\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if\
    \ (v < min && v % 2 == 0)\n        {\n            min = v;\n            minIndex\
    \ = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n\
    \        result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [0L, 0L];\n    long min = 0L;\n    long index = 0L;\n    foreach(long\
    \ i, long e; arr)\n    {\n        if(e % 2 == 0)\n        {\n            if(min\
    \ == 0L)\n            {\n                min = e;\n                index = i;\n\
    \            }\n            else if(e < min)\n            {\n                min\
    \ = e;\n                index = i;\n            }\n        }\n    }\n    if(min\
    \ != 0L)\n    {\n        result[0] = min;\n        result[1] = index;\n    }\n\
    \    return result;\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min ==\
    \ arr[0])\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    \n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n \
    \       {\n            min = e;\n            minIndex = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = minIndex;\n\
    \    }\n    return result;\n}", "{\n    long min = long.max;\n    long index =\
    \ -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n    \
    \    {\n            min = v;\n            index = i;\n        }\n    }\n    if(index\
    \ == -1)\n        return [];\n    return [min, index];\n}", "{\n    long[] result\
    \ = new long[2];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if (min == arr[0])\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}", "{\n    long[] res =\
    \ new long[2];\n    if (arr.length == 0)\n        return res;\n    long min =\
    \ arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        res[0] = min;\n     \
    \   res[1] = index;\n    }\n    return res;\n}", "{\n    long[] result = [0L,\
    \ 0L];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}", "{\n    long[] result = [0L,\
    \ 0L];\n    if (arr.length == 0)\n        return result;\n    long smallest =\
    \ arr[0];\n    long smallestIndex = 0;\n    foreach (i, v; arr)\n    {\n     \
    \   if (v % 2 == 0 && v < smallest)\n        {\n            smallest = v;\n  \
    \          smallestIndex = i;\n        }\n    }\n    if (smallest % 2 == 0)\n\
    \    {\n        result[0] = smallest;\n        result[1] = smallestIndex;\n  \
    \  }\n    return result;\n}", "{\n    long[] result = [0L, 0L];\n    long min\
    \ = 0L;\n    long index = 0L;\n    bool found = false;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0)\n        {\n            if(!found)\n          \
    \  {\n                found = true;\n                min = v;\n              \
    \  index = i;\n            }\n            else\n            {\n              \
    \  if(v < min)\n                {\n                    min = v;\n            \
    \        index = i;\n                }\n            }\n        }\n    }\n    if(found)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}", "{\n    long[] res = [0L, 0L];\n    if (arr.length == 0) return\
    \ res;\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            minIndex = i;\n        }\n    }\n    if (min == arr[0]) return res;\n\
    \    res[0] = min;\n    res[1] = minIndex;\n    return res;\n}", "{\n    long[]\
    \ result = new long[2];\n    long min = long.max;\n    long index = 0;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if(min == long.max)\n  \
    \      return result;\n    result[0] = min;\n    result[1] = index;\n    return\
    \ result;\n}", "{\n    auto result = arr.filter!(a => a % 2 == 0).min;\n    if\
    \ (result is null)\n        return [];\n    return [result, arr.indexOf(result)];\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long[] result = [arr[0],\
    \ 0];\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < result[0])\n\
    \        {\n            result[0] = e;\n            result[1] = i;\n        }\n\
    \    }\n    if (result[0] % 2 != 0)\n        return [];\n    return result;\n}",
  "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    bool found = false;\n   \
    \ foreach (i, e; arr)\n    {\n        if (e % 2 == 0)\n        {\n           \
    \ if (!found)\n            {\n                min = e;\n                minIndex\
    \ = i;\n                found = true;\n            }\n            else\n     \
    \       {\n                if (e < min)\n                {\n                 \
    \   min = e;\n                    minIndex = i;\n                }\n         \
    \   }\n        }\n    }\n    if (found)\n    {\n        result[0] = min;\n   \
    \     result[1] = minIndex;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            result[0] = v;\n            result[1]\
    \ = i;\n        }\n    }\n    if (result[0] == 0)\n        return result[0..0];\n\
    \    return result;\n}", "{\n    long[] result = [0L, 0L];\n    if (arr.length\
    \ == 0) return result;\n    long min = arr[0];\n    foreach (i, e; arr)\n    {\n\
    \        if (e < min && e % 2 == 0)\n        {\n            min = e;\n       \
    \     result[0] = e;\n            result[1] = i;\n        }\n    }\n    if (result[0]\
    \ == 0) return result;\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n  \
    \  long minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n \
    \       result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[2];\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}", "{\n    long[] result = new long[2];\n\
    \    long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(index == -1)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n   \
    \ {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n    \
    \    result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }", "{\n    if (arr.length == 0)\n        return [];\n    long min = arr[0];\n\
    \    long index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n        return [min, index];\n    return [];\n}",
  "{\n    if (arr.length == 0)\n        return [];\n    \n    long minEven = arr[0];\n\
    \    long minEvenIndex = 0;\n    bool found = false;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0)\n        {\n            if (!found)\n        \
    \    {\n                minEven = e;\n                minEvenIndex = i;\n    \
    \            found = true;\n            }\n            else\n            {\n \
    \               if (e < minEven)\n                {\n                    minEven\
    \ = e;\n                    minEvenIndex = i;\n                }\n           \
    \ }\n        }\n    }\n    if (found)\n        return [minEven, minEvenIndex];\n\
    \    else\n        return [];\n}", "{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            result[0] = e;\n            result[1]\
    \ = i;\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[2];\n    if (arr.length == 0)\n        return result;\n    long min = arr[0];\n\
    \    long index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n      \
    \  if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n          \
    \  {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = index;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [0L, 0L];\n    if (arr.length == 0)\n        return result;\n    long min\
    \ = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if\
    \ (v % 2 == 0 && v < min)\n        {\n            min = v;\n            minIndex\
    \ = i;\n        }\n    }\n    if (min == arr[0])\n        return result;\n   \
    \ result[0] = min;\n    result[1] = minIndex;\n    return result;\n}", "{\n  \
    \  if (arr.length == 0)\n        return [];\n    long minEven = arr[0];\n    long\
    \ minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n      \
    \  if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < minEven)\n      \
    \      {\n                minEven = arr[i];\n                minEvenIndex = i;\n\
    \            }\n        }\n    }\n    if (minEven % 2 == 0)\n        return [minEven,\
    \ minEvenIndex];\n    else\n        return [];\n}", "{\n    long min = long.max;\n\
    \    long index = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 &&\
    \ e < min)\n        {\n            min = e;\n            index = i;\n        }\n\
    \    }\n    if(index == -1)\n        return [];\n    return [min, index];\n}",
  "{\n    long[] result = new long[2];\n    long min = long.max;\n    long index =\
    \ 0;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n     \
    \   {\n            min = v;\n            index = i;\n        }\n    }\n    if(min\
    \ == long.max)\n        return [];\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = long.max;\n    long index = 0;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            index = i;\n        }\n    }\n    if (min ==\
    \ long.max)\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    if (arr.length == 0)\n        return [];\n  \
    \  long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n    {\n \
    \       if (e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return [min,\
    \ index];\n    return [];\n}", "{\n    long[] result = new long[2];\n    long\
    \ min = long.max;\n    long index = long.max;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}", "{\n  \
    \  long[] result = new long[2];\n    if (arr.length == 0)\n        return result;\n\
    \    long minEven = arr[0];\n    long minEvenIndex = 0;\n    for (long i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n     \
    \       if (arr[i] < minEven)\n            {\n                minEven = arr[i];\n\
    \                minEvenIndex = i;\n            }\n        }\n    }\n    if (minEven\
    \ % 2 == 0)\n    {\n        result[0] = minEven;\n        result[1] = minEvenIndex;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[2];\n    if (arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if (min ==\
    \ arr[0])\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}", "{\n    long[] result = [long.max, long.max];\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n        {\n       \
    \     result[0] = v;\n            result[1] = i;\n        }\n    }\n    if(result[0]\
    \ == long.max)\n        return [];\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
