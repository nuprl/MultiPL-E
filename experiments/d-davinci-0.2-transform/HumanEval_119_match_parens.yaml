name: HumanEval_119_match_parens
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a list of\
  \ two strings, both strings consist of open\n    parentheses '(' or close parentheses\
  \ ')' only.\n    Your job is to check if it is possible to concatenate the two strings\
  \ in\n    some order, that the resulting string will be good.\n    A string S is\
  \ considered to be good if and only if all parentheses in S\n    are balanced. For\
  \ example: the string '(())()' is good, while the string\n    '())' is not.\n  \
  \  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\
  \n    Examples:\n    >>> match_parens([\"()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\"\
  )\", \")\"])\n    \"No\"\n    \n*/\nstring match_parens(string[] lst) \n"
tests: "unittest\n{\n    alias candidate = match_parens;\n\n    assert(candidate([\"\
  ()(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \")\"]) == \"No\");\n\
  \    assert(candidate([\"(()(())\", \"())())\"]) == \"No\");\n    assert(candidate([\"\
  )())\", \"(()()(\"]) == \"Yes\");\n    assert(candidate([\"(())))\", \"(()())((\"\
  ]) == \"Yes\");\n    assert(candidate([\"()\", \"())\"]) == \"No\");\n    assert(candidate([\"\
  (()(\", \"()))()\"]) == \"Yes\");\n    assert(candidate([\"((((\", \"((())\"]) ==\
  \ \"No\");\n    assert(candidate([\")(()\", \"(()(\"]) == \"No\");\n    assert(candidate([\"\
  )(\", \")(\"]) == \"No\");\n    assert(candidate([\"(\", \")\"]) == \"Yes\");\n\
  \    assert(candidate([\")\", \"(\"]) == \"Yes\");\n}\nvoid main(){}"
completions: ["{\n    string s1 = lst[0];\n    string s2 = lst[1];\n    int c1 = 0;\n\
    \    int c2 = 0;\n    foreach(c; s1)\n    {\n        if(c == '(')\n          \
    \  c1++;\n        else\n            c1--;\n    }\n    foreach(c; s2)\n    {\n\
    \        if(c == '(')\n            c2++;\n        else\n            c2--;\n  \
    \  }\n    if(c1 == 0 && c2 == 0)\n        return \"Yes\";\n    if(c1 == 0 && c2\
    \ != 0)\n        return \"No\";\n    if(c1 != 0 && c2 == 0)\n        return \"\
    No\";\n    if(c1 < 0 && c2 < 0)\n        return \"No\";\n    if(c1 > 0 && c2 >\
    \ 0)\n        return \"No\";\n    if(c1 > 0 && c2 < 0)\n    {\n        if(abs(c1)\
    \ == abs(c2))\n            return \"Yes\";\n        else\n            return \"\
    No\";\n    }\n    if(c1 < 0 && c2 > 0)\n    {\n        if(abs(c1) == abs(c2))\n\
    \            return \"Yes\";\n        else\n            return \"No\";\n    }\n\
    \    return \"No\";\n}", "{\n    int open = 0;\n    int close = 0;\n    foreach(char\
    \ c; lst[0])\n    {\n        if(c == '(')\n            open++;\n        else\n\
    \            close++;\n    }\n    foreach(char c; lst[1])\n    {\n        if(c\
    \ == '(')\n            open++;\n        else\n            close++;\n    }\n  \
    \  if(open == close)\n        return \"Yes\";\n    return \"No\";\n}", "{\n  \
    \  string s1 = lst[0];\n    string s2 = lst[1];\n    int count1 = 0;\n    int\
    \ count2 = 0;\n    foreach(c; s1)\n    {\n        if(c == '(')\n            count1++;\n\
    \        else\n            count1--;\n    }\n    foreach(c; s2)\n    {\n     \
    \   if(c == '(')\n            count2++;\n        else\n            count2--;\n\
    \    }\n    return count1 == count2 ? \"Yes\" : \"No\";\n}", "{\n    string s1\
    \ = lst[0];\n    string s2 = lst[1];\n    int c1 = 0;\n    int c2 = 0;\n    foreach(c;\
    \ s1)\n    {\n        if(c == '(')\n            c1++;\n        else\n        \
    \    c1--;\n    }\n    foreach(c; s2)\n    {\n        if(c == '(')\n         \
    \   c2++;\n        else\n            c2--;\n    }\n    if(c1 == 0 && c2 == 0)\n\
    \        return \"Yes\";\n    else\n        return \"No\";\n}", "{\n    string\
    \ s = lst[0] ~ lst[1];\n    int count = 0;\n    foreach(c; s)\n    {\n       \
    \ if(c == '(')\n            count++;\n        else\n            count--;\n   \
    \     if(count < 0)\n            return \"No\";\n    }\n    return count == 0\
    \ ? \"Yes\" : \"No\";\n}", "{\n    string s = lst[0] ~ lst[1];\n    int count\
    \ = 0;\n    foreach(c; s)\n    {\n        if(c == '(')\n            count++;\n\
    \        else if(c == ')')\n            count--;\n        if(count < 0)\n    \
    \        return \"No\";\n    }\n    return count == 0 ? \"Yes\" : \"No\";\n}",
  "{\n    string s = \"\";\n    foreach(e; lst)\n        s ~= e;\n    int count =\
    \ 0;\n    foreach(c; s)\n    {\n        if(c == '(')\n            count++;\n \
    \       else if(c == ')')\n            count--;\n        if(count < 0)\n     \
    \       return \"No\";\n    }\n    return count == 0 ? \"Yes\" : \"No\";\n}",
  "{\n    string s = \"\";\n    foreach(e; lst)\n        s ~= e;\n    int count =\
    \ 0;\n    foreach(e; s)\n    {\n        if(e == '(')\n            count++;\n \
    \       else if(e == ')')\n            count--;\n        if(count < 0)\n     \
    \       return \"No\";\n    }\n    if(count == 0)\n        return \"Yes\";\n \
    \   return \"No\";\n}", "{\n    string s = \"\";\n    foreach(string str; lst)\n\
    \        s ~= str;\n    return s.balance == 0 ? \"Yes\" : \"No\";\n}", "{\n  \
    \  string s1 = lst[0];\n    string s2 = lst[1];\n    int count1 = 0;\n    int\
    \ count2 = 0;\n    foreach(c; s1)\n    {\n        if(c == '(')\n            count1++;\n\
    \        else\n            count1--;\n        if(count1 < 0)\n            return\
    \ \"No\";\n    }\n    foreach(c; s2)\n    {\n        if(c == '(')\n          \
    \  count2++;\n        else\n            count2--;\n        if(count2 < 0)\n  \
    \          return \"No\";\n    }\n    if(count1 == count2)\n        return \"\
    Yes\";\n    return \"No\";\n}", "{\n    string s1 = lst[0];\n    string s2 = lst[1];\n\
    \    int count1 = 0;\n    int count2 = 0;\n    foreach(c; s1)\n    {\n       \
    \ if(c == '(')\n            count1++;\n        else\n            count1--;\n \
    \   }\n    foreach(c; s2)\n    {\n        if(c == '(')\n            count2++;\n\
    \        else\n            count2--;\n    }\n    if(count1 == 0 && count2 == 0)\n\
    \        return \"Yes\";\n    else\n        return \"No\";\n}", "{\n    string\
    \ s1 = lst[0];\n    string s2 = lst[1];\n    int count1 = 0;\n    int count2 =\
    \ 0;\n    foreach(c; s1)\n    {\n        if(c == '(')\n            count1++;\n\
    \        else\n            count1--;\n    }\n    foreach(c; s2)\n    {\n     \
    \   if(c == '(')\n            count2++;\n        else\n            count2--;\n\
    \    }\n    if(count1 == count2 && count1 >= 0)\n        return \"Yes\";\n   \
    \ else\n        return \"No\";\n}", "{\n    string s1 = lst[0];\n    string s2\
    \ = lst[1];\n    int count1 = 0;\n    int count2 = 0;\n    foreach(c; s1)\n  \
    \  {\n        if(c == '(')\n            count1++;\n        else\n            count1--;\n\
    \    }\n    foreach(c; s2)\n    {\n        if(c == '(')\n            count2++;\n\
    \        else\n            count2--;\n    }\n    if(count1 == 0 && count2 == 0)\n\
    \        return \"Yes\";\n    else\n        return \"No\";\n}", "{\n    string\
    \ s1 = lst[0];\n    string s2 = lst[1];\n    int len1 = s1.length;\n    int len2\
    \ = s2.length;\n    int count1 = 0;\n    int count2 = 0;\n    for (int i = 0;\
    \ i < len1; i++)\n    {\n        if (s1[i] == '(')\n            count1++;\n  \
    \      else\n            count1--;\n    }\n    for (int i = 0; i < len2; i++)\n\
    \    {\n        if (s2[i] == '(')\n            count2++;\n        else\n     \
    \       count2--;\n    }\n    if (count1 == 0 && count2 == 0)\n        return\
    \ \"Yes\";\n    else\n        return \"No\";\n}", "{\n    string s = lst[0] ~\
    \ lst[1];\n    int cnt = 0;\n    foreach(c; s)\n    {\n        if(c == '(')\n\
    \            cnt++;\n        else if(c == ')')\n            cnt--;\n        if(cnt\
    \ < 0)\n            return \"No\";\n    }\n    return cnt == 0 ? \"Yes\" : \"\
    No\";\n}", "{\n    string s = \"\";\n    foreach(el; lst)\n        s ~= el;\n\
    \    int count = 0;\n    foreach(c; s)\n    {\n        if(c == '(')\n        \
    \    count++;\n        else if(c == ')')\n            count--;\n        if(count\
    \ < 0)\n            return \"No\";\n    }\n    return count == 0 ? \"Yes\" : \"\
    No\";\n}", "{\n    string s = \"\";\n    foreach(e; lst)\n        s ~= e;\n  \
    \  int count = 0;\n    foreach(c; s)\n    {\n        if(c == '(')\n          \
    \  count++;\n        else if(c == ')')\n            count--;\n        if(count\
    \ < 0)\n            return \"No\";\n    }\n    return count == 0 ? \"Yes\" : \"\
    No\";\n}", "{\n    string s1 = lst[0];\n    string s2 = lst[1];\n    int s1_open\
    \ = 0;\n    int s2_open = 0;\n    foreach(c; s1)\n    {\n        if(c == '(')\n\
    \            s1_open++;\n        else\n            s1_open--;\n    }\n    foreach(c;\
    \ s2)\n    {\n        if(c == '(')\n            s2_open++;\n        else\n   \
    \         s2_open--;\n    }\n    if(s1_open == 0 && s2_open == 0)\n        return\
    \ \"Yes\";\n    else if(s1_open < 0 && s2_open > 0)\n        return \"Yes\";\n\
    \    else if(s1_open > 0 && s2_open < 0)\n        return \"Yes\";\n    else\n\
    \        return \"No\";\n}", "{\n    string s1 = lst[0];\n    string s2 = lst[1];\n\
    \    int count1 = 0;\n    int count2 = 0;\n    foreach(c; s1)\n    {\n       \
    \ if(c == '(')\n            count1++;\n        else\n            count1--;\n \
    \   }\n    foreach(c; s2)\n    {\n        if(c == '(')\n            count2++;\n\
    \        else\n            count2--;\n    }\n    if(count1 == 0 && count2 == 0)\n\
    \        return \"Yes\";\n    else\n        return \"No\";\n}", "{\n    string\
    \ s1 = lst[0];\n    string s2 = lst[1];\n    int s1_len = s1.length;\n    int\
    \ s2_len = s2.length;\n    int s1_open = 0;\n    int s2_open = 0;\n    int s1_close\
    \ = 0;\n    int s2_close = 0;\n    foreach(c; s1)\n    {\n        if(c == '(')\n\
    \            s1_open++;\n        else\n            s1_close++;\n    }\n    foreach(c;\
    \ s2)\n    {\n        if(c == '(')\n            s2_open++;\n        else\n   \
    \         s2_close++;\n    }\n    if(s1_open == s1_close && s2_open == s2_close)\n\
    \        return \"Yes\";\n    else if(s1_open == s1_close && s2_open != s2_close)\n\
    \        return \"No\";\n    else if(s1_open != s1_close && s2_open == s2_close)\n\
    \        return \"No\";\n    else if(s1_open != s1_close && s2_open != s2_close)\n\
    \    {\n        if(s1_open > s1_close)\n        {\n            if(s2_open > s2_close)\n\
    \            {\n                if(s1_open - s1_close == s2_open - s2_close)\n\
    \                    return \"Yes\";\n                else\n                 \
    \   return \"No\";\n            }\n            else\n            {\n         \
    \       if(s1_open - s1_close == s2_close - s2_open)\n                    return\
    \ \"Yes\";\n                else\n                    return \"No\";\n       \
    \     }\n        }\n        else\n        {\n            if(s2_open > s2_close)\n\
    \            {\n                if(s1_close - s1_open == s2_open - s2_close)\n\
    \                    return \"Yes\";\n                else\n                 \
    \   return \"No\";\n            }\n            else\n            {\n         \
    \       if(s1_close - s1_open == s2_close - s"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
