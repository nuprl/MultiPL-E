language: d
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length - 1; i++)\n    {\n        for (int j =\
    \ i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn_f4_urs.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fb1]

    ??:? void tmpn_f4_urs.__unittest_L33_C1() [0x428f6d]

    ??:? void tmpn_f4_urs.__modtest() [0x429968]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbd2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432485]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba9]

    ??:? runModuleUnitTests [0x42ea99]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a474]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_distance = abs(numbers[0]\
    \ - numbers[1]);\n    float min_number1 = numbers[0];\n    float min_number2 =\
    \ numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        for\
    \ (int j = i + 1; j < numbers.length; j++) \n        {\n            float distance\
    \ = abs(numbers[i] - numbers[j]);\n            if (distance < min_distance) \n\
    \            {\n                min_distance = distance;\n                min_number1\
    \ = numbers[i];\n                min_number2 = numbers[j];\n            }\n  \
    \      }\n    }\n    return tuple(min_number1, min_number2);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppmp8q1z7.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmppmp8q1z7.__unittest_L33_C1() [0x428f65]

    ??:? void tmppmp8q1z7.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu3z3w5my.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpu3z3w5my.__unittest_L31_C1() [0x429041]

    ??:? void tmpu3z3w5my.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0;\n    float b = 0;\n    foreach(i,\
    \ number; numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n \
    \           if(i != j)\n            {\n                float diff = abs(number\
    \ - number2);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    a = number;\n                    b\
    \ = number2;\n                }\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe8l1i3ha.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpe8l1i3ha.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpe8l1i3ha.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.infinity;\n    float min_a = 0;\n    float min_b\
    \ = 0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n  \
    \      {\n            if (i != j)\n            {\n                float diff =\
    \ abs(a - b);\n                if (diff < min_diff)\n                {\n     \
    \               min_diff = diff;\n                    min_a = a;\n           \
    \         min_b = b;\n                }\n            }\n        }\n    }\n   \
    \ return tuple(min(min_a, min_b), max(min_a, min_b));\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpppfq3xgm.d(33): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpppfq3xgm.d(33): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpppfq3xgm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_xq02oj6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp_xq02oj6.__unittest_L33_C1() [0x428f65]

    ??:? void tmp_xq02oj6.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float diff\
    \ = numbers[0] - numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n \
    \   {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n     \
    \       if (abs(numbers[i] - numbers[j]) < diff)\n            {\n            \
    \    diff = abs(numbers[i] - numbers[j]);\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl9jg1jcz.d(24): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmpl9jg1jcz.d(25): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9jg1jcz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min_a = numbers[i];\n                min_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9v003cpz.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp9v003cpz.__unittest_L32_C1() [0x428e99]

    ??:? void tmp9v003cpz.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe0pycyqg.d(26): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmpe0pycyqg.d(27): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0pycyqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzxwmyfr9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fb9]

    ??:? void tmpzxwmyfr9.__unittest_L33_C1() [0x428f75]

    ??:? void tmpzxwmyfr9.__modtest() [0x429970]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432501]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43248d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dbb1]

    ??:? runModuleUnitTests [0x42eaa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a47c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    foreach(i, num; numbers)\n    {\n        if(i\
    \ == 0)\n            continue;\n        float diff = num - numbers[i-1];\n   \
    \     if(diff < min_diff)\n        {\n            min_diff = diff;\n         \
    \   min = numbers[i-1];\n            max = num;\n        }\n    }\n    return\
    \ tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpykyxlsa4.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429de5]

    ??:? void tmpykyxlsa4.__unittest_L31_C1() [0x428e61]

    ??:? void tmpykyxlsa4.__modtest() [0x429850]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ead3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9e2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432309]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4327b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432295]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d9b9]

    ??:? runModuleUnitTests [0x42e8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    foreach(i, number; numbers)\n    {\n        if(i == 0)\n            continue;\n\
    \        float diff = number - numbers[i-1];\n        if(diff < min_diff)\n  \
    \      {\n            min_diff = diff;\n            min = numbers[i-1];\n    \
    \        max = number;\n        }\n        if(diff > max_diff)\n        {\n  \
    \          max_diff = diff;\n            min = numbers[i-1];\n            max\
    \ = number;\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8_qr3cla.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e85]

    ??:? void tmp8_qr3cla.__unittest_L38_C1() [0x428efd]

    ??:? void tmp8_qr3cla.__modtest() [0x4298ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da82]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432858]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432335]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da59]

    ??:? runModuleUnitTests [0x42e949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a348]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_diff_a = numbers[i];\n          \
    \      min_diff_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0ts75lyk.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp0ts75lyk.__unittest_L33_C1() [0x428f65]

    ??:? void tmp0ts75lyk.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3p18eu28.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmp3p18eu28.__unittest_L33_C1() [0x428f49]

    ??:? void tmp3p18eu28.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = float.max;\n   \
    \ float min_diff_a = 0;\n    float min_diff_b = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n    \
    \        }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpplupu3_r.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f29]

    ??:? void tmpplupu3_r.__unittest_L33_C1() [0x428ee1]

    ??:? void tmpplupu3_r.__modtest() [0x4298dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432471]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432920]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db21]

    ??:? runModuleUnitTests [0x42ea11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min_diff)\n            {\n                min_diff = abs(numbers[i] - numbers[j]);\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9d6eexcd.d(25): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmp9d6eexcd.d(26): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9d6eexcd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(x - y);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = x;\n                    b = y;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpygeqgg6s.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpygeqgg6s.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpygeqgg6s.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(x - y);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 result[0] = x;\n                    result[1] = y;\n       \
    \         }\n            }\n        }\n    }\n    return tuple(result[0], result[1]);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnak1y4ss.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f15]

    ??:? void tmpnak1y4ss.__unittest_L34_C1() [0x428f81]

    ??:? void tmpnak1y4ss.__modtest() [0x42997c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43274d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432bfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4326d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd05]

    ??:? runModuleUnitTests [0x42ebf5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpueebnq_9.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpueebnq_9.__unittest_L31_C1() [0x429041]

    ??:? void tmpueebnq_9.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0;\n    float b = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn3rbe7xw.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpn3rbe7xw.__unittest_L32_C1() [0x428e99]

    ??:? void tmpn3rbe7xw.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpatllz6d_.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429ded]

    ??:? void tmpatllz6d_.__unittest_L29_C1() [0x428e69]

    ??:? void tmpatllz6d_.__modtest() [0x429858]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eadb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432311]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4327c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43229d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d9c1]

    ??:? runModuleUnitTests [0x42e8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp52b0dmyb.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp52b0dmyb.__unittest_L33_C1() [0x428f65]

    ??:? void tmp52b0dmyb.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    float diff;\n    foreach(i, v; numbers)\n    {\n        if(i == 0)\n    \
    \        continue;\n        diff = v - numbers[i-1];\n        if(diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = v;\n        }\n        if(diff > max_diff)\n        {\n     \
    \       max_diff = diff;\n            min = numbers[i-1];\n            max = v;\n\
    \        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgxdtc1mq.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e8d]

    ??:? void tmpgxdtc1mq.__unittest_L39_C1() [0x428f09]

    ??:? void tmpgxdtc1mq.__modtest() [0x4298f8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da8a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432860]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43233d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da61]

    ??:? runModuleUnitTests [0x42e951]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a350]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpolhyvifq.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpolhyvifq.__unittest_L33_C1() [0x428f49]

    ??:? void tmpolhyvifq.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmpk94auo.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fb9]

    ??:? void tmpmpk94auo.__unittest_L33_C1() [0x428f75]

    ??:? void tmpmpk94auo.__modtest() [0x429970]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432501]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43248d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dbb1]

    ??:? runModuleUnitTests [0x42eaa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a47c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            if (abs(numbers[i] - numbers[j]) < min)\n     \
    \       {\n                min = abs(numbers[i] - numbers[j]);\n             \
    \   a = numbers[i];\n                b = numbers[j];\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxfpqf1em.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a021]

    ??:? void tmpxfpqf1em.__unittest_L32_C1() [0x428fdd]

    ??:? void tmpxfpqf1em.__modtest() [0x4299d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ed33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dc42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432569]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432a18]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4324f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dc19]

    ??:? runModuleUnitTests [0x42eb09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a4e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float a = numbers[0];\n    float b = numbers[1];\n    for\
    \ (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t j = i +\
    \ 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                a = numbers[i];\n                b =\
    \ numbers[j];\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt315c1ml.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fb9]

    ??:? void tmpt315c1ml.__unittest_L33_C1() [0x428f75]

    ??:? void tmpt315c1ml.__modtest() [0x429970]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432501]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43248d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dbb1]

    ??:? runModuleUnitTests [0x42eaa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a47c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.infinity;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min_a = numbers[i];\n                min_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmposn05w94.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmposn05w94.__unittest_L32_C1() [0x428e99]

    ??:? void tmposn05w94.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_num1 = numbers[i];\n                min_num2 = numbers[j];\n         \
    \   }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp44q5z5s1.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429eb5]

    ??:? void tmp44q5z5s1.__unittest_L32_C1() [0x428f21]

    ??:? void tmp44q5z5s1.__modtest() [0x42991c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ebc7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4328ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432389]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42daad]

    ??:? runModuleUnitTests [0x42e99d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a378]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i] - numbers[i\
    \ - 1];\n        if (diff < min_diff)\n        {\n            min_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcseza_1u.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429ee1]

    ??:? void tmpcseza_1u.__unittest_L30_C1() [0x428ea9]

    ??:? void tmpcseza_1u.__modtest() [0x429898]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ebcf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dade]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4328b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dab5]

    ??:? runModuleUnitTests [0x42e9a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ min2 = numbers[1];\n    float diff = abs(min - min2);\n    for (int i = 0; i\
    \ < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float newDiff = abs(numbers[i] - numbers[j]);\n\
    \            if (newDiff < diff)\n            {\n                min = numbers[i];\n\
    \                min2 = numbers[j];\n                diff = newDiff;\n       \
    \     }\n        }\n    }\n    return tuple(min, min2);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpchxz6i1b.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f61]

    ??:? void tmpchxz6i1b.__unittest_L33_C1() [0x428f19]

    ??:? void tmpchxz6i1b.__modtest() [0x429914]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db82]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432958]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432435]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db59]

    ??:? runModuleUnitTests [0x42ea49]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a424]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc0lgwqkc.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpc0lgwqkc.__unittest_L33_C1() [0x428f65]

    ??:? void tmpc0lgwqkc.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    foreach(number; numbers)\n    {\n        if(number <\
    \ min)\n        {\n            min = number;\n        }\n        if(number > max)\n\
    \        {\n            max = number;\n        }\n    }\n    float min_diff =\
    \ max - min;\n    float min_num = min;\n    float max_num = max;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for(int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if(diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_num = min(numbers[i], numbers[j]);\n                max_num\
    \ = max(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ tuple(min_num, max_num);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk0kq2dvu.d(39): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmpk0kq2dvu.d(40): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk0kq2dvu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = numbers[1] - numbers[0];\n    float min_diff_a = numbers[0];\n\
    \    float min_diff_b = numbers[1];\n    for (size_t i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (size_t j = i + 1; j < numbers.length; j++)\n     \
    \   {\n            float diff = numbers[j] - numbers[i];\n            if (diff\
    \ < min_diff)\n            {\n                min_diff = diff;\n             \
    \   min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n     \
    \       }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppm4plmqd.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmppm4plmqd.__unittest_L32_C1() [0x428e89]

    ??:? void tmppm4plmqd.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eafb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da0a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432331]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4327e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4322bd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d9e1]

    ??:? runModuleUnitTests [0x42e8d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_num1 = numbers[i];\n           \
    \     min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzu7e0ksh.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpzu7e0ksh.__unittest_L33_C1() [0x428f65]

    ??:? void tmpzu7e0ksh.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = float.infinity;\n\
    \    float min_a = 0.0;\n    float min_b = 0.0;\n    for (size_t i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (size_t j = i + 1; j < numbers.length; j++) \n   \
    \     {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff) \n            {\n                min_diff = diff;\n      \
    \          min_a = numbers[i];\n                min_b = numbers[j];\n        \
    \    }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9fpyl3kb.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f31]

    ??:? void tmp9fpyl3kb.__unittest_L33_C1() [0x428eed]

    ??:? void tmp9fpyl3kb.__modtest() [0x4298e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432479]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432928]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432405]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db29]

    ??:? runModuleUnitTests [0x42ea19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length > 1);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_elements = tuple(numbers[0],\
    \ numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for\
    \ (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n        \
    \    {\n                min_diff = diff;\n                closest_elements = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return closest_elements;\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp54vcj4jf.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp54vcj4jf.__unittest_L31_C1() [0x429045]

    ??:? void tmp54vcj4jf.__modtest() [0x429b08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            if (abs(numbers[i] - numbers[j]) < min)\n     \
    \       {\n                min = abs(numbers[i] - numbers[j]);\n             \
    \   a = numbers[i];\n                b = numbers[j];\n            }\n        }\n\
    \    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxfpqf1em.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a021]

    ??:? void tmpxfpqf1em.__unittest_L32_C1() [0x428fdd]

    ??:? void tmpxfpqf1em.__modtest() [0x4299d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ed33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dc42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432569]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432a18]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4324f5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dc19]

    ??:? runModuleUnitTests [0x42eb09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a4e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw22quyr9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpw22quyr9.__unittest_L33_C1() [0x428f65]

    ??:? void tmpw22quyr9.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe0pycyqg.d(26): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmpe0pycyqg.d(27): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0pycyqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(x - y);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = x;\n                    b = y;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpygeqgg6s.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpygeqgg6s.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpygeqgg6s.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) \n            {\n              \
    \  min = diff;\n                result[0] = numbers[i];\n                result[1]\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(result[0],\
    \ result[1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ejj4kzt.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f35]

    ??:? void tmp8ejj4kzt.__unittest_L31_C1() [0x428fa1]

    ??:? void tmp8ejj4kzt.__modtest() [0x42999c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43276d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432c1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4326f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd25]

    ??:? runModuleUnitTests [0x42ec15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw22quyr9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpw22quyr9.__unittest_L33_C1() [0x428f65]

    ??:? void tmpw22quyr9.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_elements = tuple(numbers[0],\
    \ numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for\
    \ (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n        \
    \    {\n                min_diff = diff;\n                closest_elements = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return closest_elements;\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqjjv4cq.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpfqjjv4cq.__unittest_L31_C1() [0x429041]

    ??:? void tmpfqjjv4cq.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_xq02oj6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp_xq02oj6.__unittest_L33_C1() [0x428f65]

    ??:? void tmp_xq02oj6.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe0pycyqg.d(26): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmpe0pycyqg.d(27): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0pycyqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(x - y);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = x;\n                    b = y;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpygeqgg6s.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpygeqgg6s.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpygeqgg6s.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(a - b);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    min_a = a;\n                    min_b = b;\n    \
    \            }\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpimawkuyb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpimawkuyb.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpimawkuyb.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float first = 0;\n    float second = 0;\n\
    \    foreach(i, n; numbers)\n    {\n        if(i == 0) continue;\n        float\
    \ diff = abs(numbers[i] - numbers[i-1]);\n        if(diff < min)\n        {\n\
    \            min = diff;\n            first = numbers[i-1];\n            second\
    \ = numbers[i];\n        }\n    }\n    return tuple(first, second);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn3fenh0x.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e45]

    ??:? void tmpn3fenh0x.__unittest_L30_C1() [0x428eb1]

    ??:? void tmpn3fenh0x.__modtest() [0x4298ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43238d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43283c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432319]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da3d]

    ??:? runModuleUnitTests [0x42e92d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a308]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min1 = 0.0;\n    float min2 = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min1 = numbers[i];\n                min2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min1, min2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeocqd315.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpeocqd315.__unittest_L32_C1() [0x428e99]

    ??:? void tmpeocqd315.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd62uzcqi.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpd62uzcqi.__unittest_L31_C1() [0x429041]

    ??:? void tmpd62uzcqi.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    auto min_diff = float.max;\n    auto min_diff_pair = tuple(0.0, 0.0);\n\
    \    foreach (i, n; numbers)\n    {\n        foreach (j, m; numbers[i+1..$])\n\
    \        {\n            auto diff = abs(n - m);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min_diff_pair\
    \ = tuple(n, m);\n            }\n        }\n    }\n    return min_diff_pair;\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3ntq88l.d(28): Error: cannot implicitly convert expression `min_diff_pair`
    of type `Tuple!(double, double)` to `Tuple!(float, float)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3ntq88l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0;\n    float b = 0;\n    foreach(i,\
    \ n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(n - m);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 a = n;\n                    b = m;\n                }\n    \
    \        }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyxk1pzyf.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpyxk1pzyf.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpyxk1pzyf.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n        if (diff > max_diff) \n        {\n            max_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpde2vixot.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x429ead]

    ??:? void tmpde2vixot.__unittest_L36_C1() [0x428f25]

    ??:? void tmpde2vixot.__modtest() [0x429914]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42daaa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432880]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43235d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da81]

    ??:? runModuleUnitTests [0x42e971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a370]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length - 1; i++) \n    {\n        for (int j\
    \ = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpczhmwd13.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a159]

    ??:? void tmpczhmwd13.__unittest_L31_C1() [0x429049]

    ??:? void tmpczhmwd13.__modtest() [0x429b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f157]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e066]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43298d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432919]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e03d]

    ??:? runModuleUnitTests [0x42ef2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min1 = 0.0;\n    float min2 = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min1 = numbers[i];\n                min2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min1, min2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeocqd315.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpeocqd315.__unittest_L32_C1() [0x428e99]

    ??:? void tmpeocqd315.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ result = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min)\n            {\n                min = diff;\n                result =\
    \ tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt9wr_pzo.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a065]

    ??:? void tmpt9wr_pzo.__unittest_L30_C1() [0x42900d]

    ??:? void tmpt9wr_pzo.__modtest() [0x429ad0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f063]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42df72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432899]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432d48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432825]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42df49]

    ??:? runModuleUnitTests [0x42ee39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a5b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] min_pair = new float[2];\n    for\
    \ (int i = 0; i < numbers.length - 1; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min_pair[0] = numbers[i];\n                min_pair[1]\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min_pair[0],\
    \ min_pair[1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3nj_78_c.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f3d]

    ??:? void tmp3nj_78_c.__unittest_L31_C1() [0x428fa9]

    ??:? void tmp3nj_78_c.__modtest() [0x4299a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432775]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432c24]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432701]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd2d]

    ??:? runModuleUnitTests [0x42ec1d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a400]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    foreach(i, float num; numbers)\n    {\n\
    \        if(num < min)\n        {\n            min = num;\n        }\n       \
    \ if(num > max)\n        {\n            max = num;\n        }\n        if(i >\
    \ 0)\n        {\n            float diff = abs(num - numbers[i-1]);\n         \
    \   if(diff < min_diff)\n            {\n                min_diff = diff;\n   \
    \         }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_15m104p.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e75]

    ??:? void tmp_15m104p.__unittest_L38_C1() [0x428ee5]

    ??:? void tmp_15m104p.__modtest() [0x4298e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb87]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43286c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da6d]

    ??:? runModuleUnitTests [0x42e95d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a338]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] -\
    \ numbers[1]);\n    float min1 = numbers[0];\n    float min2 = numbers[1];\n \
    \   for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff) \n            {\n          \
    \      minDiff = diff;\n                min1 = numbers[i];\n                min2\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo3z4vtj5.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpo3z4vtj5.__unittest_L33_C1() [0x428f65]

    ??:? void tmpo3z4vtj5.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           result = tuple(numbers[i], numbers[j]);\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5olho2mn.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp5olho2mn.__unittest_L31_C1() [0x429041]

    ??:? void tmp5olho2mn.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float\
    \ min_b = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for\
    \ (int j = i + 1; j < numbers.length; j++)\n        {\n            float diff\
    \ = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n        \
    \    {\n                min_diff = diff;\n                min_a = numbers[i];\n\
    \                min_b = numbers[j];\n            }\n        }\n    }\n    return\
    \ tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwtgmyo1k.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpwtgmyo1k.__unittest_L32_C1() [0x428e99]

    ??:? void tmpwtgmyo1k.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpexhpj_dr.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpexhpj_dr.__unittest_L32_C1() [0x428e99]

    ??:? void tmpexhpj_dr.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ result = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min)\n            {\n                min = diff;\n                result =\
    \ tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt9wr_pzo.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a065]

    ??:? void tmpt9wr_pzo.__unittest_L30_C1() [0x42900d]

    ??:? void tmpt9wr_pzo.__modtest() [0x429ad0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f063]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42df72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432899]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432d48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432825]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42df49]

    ??:? runModuleUnitTests [0x42ee39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a5b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n    \
    \        float diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n\
    \            {\n                min_diff = diff;\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwcc_8ujy.d(25): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmpwcc_8ujy.d(26): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcc_8ujy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu3z3w5my.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpu3z3w5my.__unittest_L31_C1() [0x429041]

    ??:? void tmpu3z3w5my.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_num1 = numbers[i];\n           \
    \     min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzu7e0ksh.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpzu7e0ksh.__unittest_L33_C1() [0x428f65]

    ??:? void tmpzu7e0ksh.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.max;\n    float min_diff_a = 0.0;\n    float\
    \ min_diff_b = 0.0;\n    for (int i = 0; i < numbers.length; i++) \n    {\n  \
    \      for (int j = i + 1; j < numbers.length; j++) \n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) \n  \
    \          {\n                min_diff = diff;\n                min_diff_a = numbers[i];\n\
    \                min_diff_b = numbers[j];\n            }\n        }\n    }\n \
    \   return tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo62n5gpp.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpo62n5gpp.__unittest_L32_C1() [0x428e99]

    ??:? void tmpo62n5gpp.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw22quyr9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpw22quyr9.__unittest_L33_C1() [0x428f65]

    ??:? void tmpw22quyr9.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i+1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxw5d34t8.d(26): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmpxw5d34t8.d(27): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxw5d34t8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    foreach(n; numbers)\n    {\n        if(n < min)\n   \
    \         min = n;\n        if(n > max)\n            max = n;\n    }\n    float\
    \ min_diff = max - min;\n    float min_a = min;\n    float min_b = max;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for(int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if(diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpimja84vb.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fe1]

    ??:? void tmpimja84vb.__unittest_L42_C1() [0x428f99]

    ??:? void tmpimja84vb.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dc02]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432529]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4324b5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dbd9]

    ??:? runModuleUnitTests [0x42eac9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a4a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_xq02oj6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp_xq02oj6.__unittest_L33_C1() [0x428f65]

    ??:? void tmp_xq02oj6.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length - 1; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3biwq8an.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fb1]

    ??:? void tmp3biwq8an.__unittest_L33_C1() [0x428f6d]

    ??:? void tmp3biwq8an.__modtest() [0x429968]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbd2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432485]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba9]

    ??:? runModuleUnitTests [0x42ea99]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a474]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float first = numbers[0];\n    float second = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                first = numbers[i];\n              \
    \  second = numbers[j];\n            }\n        }\n    }\n    return tuple(first,\
    \ second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n \
    \   assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n  \
    \  assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe6m1rc0f.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpe6m1rc0f.__unittest_L33_C1() [0x428f65]

    ??:? void tmpe6m1rc0f.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float min_num1\
    \ = numbers[0];\n    float min_num2 = numbers[1];\n    foreach(i, num1; numbers)\
    \ \n    {\n        foreach(j, num2; numbers) \n        {\n            if (i !=\
    \ j) \n            {\n                float diff = abs(num1 - num2);\n       \
    \         if (diff < min_diff) \n                {\n                    min_diff\
    \ = diff;\n                    min_num1 = num1;\n                    min_num2\
    \ = num2;\n                }\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmvdf8jvs.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e8d]

    ??:? void tmpmvdf8jvs.__unittest_L35_C1() [0x428ef9]

    ??:? void tmpmvdf8jvs.__modtest() [0x4298f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb9f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42daae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432884]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432361]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da85]

    ??:? runModuleUnitTests [0x42e975]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a350]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, number; numbers)\n    {\n        foreach(j, number2; numbers)\n\
    \        {\n            if(i == j)\n                continue;\n            float\
    \ diff = abs(number - number2);\n            if(diff < min)\n            {\n \
    \               min = diff;\n                a = number;\n                b =\
    \ number2;\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq8i6thte.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpq8i6thte.__unittest_L34_C1() [0x428e7d]

    ??:? void tmpq8i6thte.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp52b0dmyb.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp52b0dmyb.__unittest_L33_C1() [0x428f65]

    ??:? void tmp52b0dmyb.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_xq02oj6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp_xq02oj6.__unittest_L33_C1() [0x428f65]

    ??:? void tmp_xq02oj6.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) min_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return min_pair;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2m7o1wm1.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp2m7o1wm1.__unittest_L31_C1() [0x429041]

    ??:? void tmp2m7o1wm1.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc0lgwqkc.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpc0lgwqkc.__unittest_L33_C1() [0x428f65]

    ??:? void tmpc0lgwqkc.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float temp = abs(numbers[i] - numbers[j]);\n  \
    \          if (temp < min)\n            {\n                min = temp;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa3l5arax.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpa3l5arax.__unittest_L33_C1() [0x428f65]

    ??:? void tmpa3l5arax.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_xq02oj6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp_xq02oj6.__unittest_L33_C1() [0x428f65]

    ??:? void tmp_xq02oj6.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc0lgwqkc.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpc0lgwqkc.__unittest_L33_C1() [0x428f65]

    ??:? void tmpc0lgwqkc.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0;\n    float b = 0;\n    foreach(i,\
    \ x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float d = abs(x - y);\n              \
    \  if(d < min)\n                {\n                    min = d;\n            \
    \        a = x;\n                    b = y;\n                }\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkw71nbe4.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpkw71nbe4.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpkw71nbe4.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpexhpj_dr.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpexhpj_dr.__unittest_L32_C1() [0x428e99]

    ??:? void tmpexhpj_dr.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    int min_index = 0;\n    for (int i = 0; i < numbers.length\
    \ - 1; i++)\n    {\n        float diff = abs(numbers[i] - numbers[i + 1]);\n \
    \       if (diff < min_diff)\n        {\n            min_diff = diff;\n      \
    \      min_index = i;\n        }\n    }\n    return tuple(numbers[min_index],\
    \ numbers[min_index + 1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptqt_bahx.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f31]

    ??:? void tmptqt_bahx.__unittest_L28_C1() [0x428ee9]

    ??:? void tmptqt_bahx.__modtest() [0x4298e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432479]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432928]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432405]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db29]

    ??:? runModuleUnitTests [0x42ea19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             result[0] = numbers[i];\n                result[1] = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(result[0], result[1]);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpiouls5tc.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f35]

    ??:? void tmpiouls5tc.__unittest_L31_C1() [0x428fa1]

    ??:? void tmpiouls5tc.__modtest() [0x42999c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43276d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432c1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4326f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd25]

    ??:? runModuleUnitTests [0x42ec15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length > 1);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxlf257nz.d(26): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmpxlf257nz.d(27): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxlf257nz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_xq02oj6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp_xq02oj6.__unittest_L33_C1() [0x428f65]

    ??:? void tmp_xq02oj6.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float d = abs(numbers[i] -\
    \ numbers[j]);\n            if (d < min)\n            {\n                min =\
    \ d;\n                a = numbers[i];\n                b = numbers[j];\n     \
    \       }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq58y2xlz.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpq58y2xlz.__unittest_L32_C1() [0x428e99]

    ??:? void tmpq58y2xlz.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ result = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min)\n            {\n                min = diff;\n                result =\
    \ tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt9wr_pzo.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a065]

    ??:? void tmpt9wr_pzo.__unittest_L30_C1() [0x42900d]

    ??:? void tmpt9wr_pzo.__modtest() [0x429ad0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f063]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42df72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432899]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432d48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432825]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42df49]

    ??:? runModuleUnitTests [0x42ee39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a5b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    foreach(i,\
    \ num; numbers)\n    {\n        if(num < min)\n        {\n            min = num;\n\
    \        }\n        if(num > max)\n        {\n            max = num;\n       \
    \ }\n        if(i > 0)\n        {\n            float diff = num - numbers[i-1];\n\
    \            if(diff < min_diff)\n            {\n                min_diff = diff;\n\
    \            }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpraxd5c6u.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x429ed1]

    ??:? void tmpraxd5c6u.__unittest_L39_C1() [0x428e99]

    ??:? void tmpraxd5c6u.__modtest() [0x429888]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ebbf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dace]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4328a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432381]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42daa5]

    ??:? runModuleUnitTests [0x42e995]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a394]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n        if (diff > max_diff) \n        {\n            max_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpde2vixot.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x429ead]

    ??:? void tmpde2vixot.__unittest_L36_C1() [0x428f25]

    ??:? void tmpde2vixot.__modtest() [0x429914]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42daaa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432880]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43235d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da81]

    ??:? runModuleUnitTests [0x42e971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a370]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    foreach(float num; numbers)\n    {\n        if(num < min)\n        {\n  \
    \          min = num;\n        }\n        if(num > max)\n        {\n         \
    \   max = num;\n        }\n        if(num - min < min_diff)\n        {\n     \
    \       min_diff = num - min;\n        }\n        if(num - max < max_diff)\n \
    \       {\n            max_diff = num - max;\n        }\n    }\n    return tuple(min,\
    \ max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo_5r6vnx.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e1d]

    ??:? void tmpo_5r6vnx.__unittest_L39_C1() [0x428e99]

    ??:? void tmpo_5r6vnx.__modtest() [0x429888]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da1a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432341]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4327f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4322cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d9f1]

    ??:? runModuleUnitTests [0x42e8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    foreach(i, n; numbers)\n    {\n        foreach(j,\
    \ m; numbers)\n        {\n            if(i != j)\n            {\n            \
    \    float diff = abs(n - m);\n                if(diff < min)\n              \
    \  {\n                    min = diff;\n                    a = n;\n          \
    \          b = m;\n                }\n            }\n        }\n    }\n    return\
    \ tuple(a, b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplx2fjoaz.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e8d]

    ??:? void tmplx2fjoaz.__unittest_L35_C1() [0x428ef9]

    ??:? void tmplx2fjoaz.__modtest() [0x4298f4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb9f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42daae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432884]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432361]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da85]

    ??:? runModuleUnitTests [0x42e975]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a350]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    auto min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    auto min_pair = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            auto diff = abs(numbers[i] - numbers[j]);\n   \
    \         if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min_pair = tuple(numbers[i], numbers[j]);\n            }\n  \
    \      }\n    }\n    return min_pair;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpajk2k3ci.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpajk2k3ci.__unittest_L31_C1() [0x429041]

    ??:? void tmpajk2k3ci.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             result[0] = numbers[i];\n                result[1] = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(result[0], result[1]);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpiouls5tc.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f35]

    ??:? void tmpiouls5tc.__unittest_L31_C1() [0x428fa1]

    ??:? void tmpiouls5tc.__modtest() [0x42999c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43276d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432c1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4326f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd25]

    ??:? runModuleUnitTests [0x42ec15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    int min_diff_index = 0;\n    for (int i = 0; i < numbers.length\
    \ - 1; i++)\n    {\n        float diff = abs(numbers[i] - numbers[i + 1]);\n \
    \       if (diff < min_diff)\n        {\n            min_diff = diff;\n      \
    \      min_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[min_diff_index + 1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2oqr31y_.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f31]

    ??:? void tmp2oqr31y_.__unittest_L28_C1() [0x428ee9]

    ??:? void tmp2oqr31y_.__modtest() [0x4298e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432479]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432928]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432405]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db29]

    ??:? runModuleUnitTests [0x42ea19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp52b0dmyb.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp52b0dmyb.__unittest_L33_C1() [0x428f65]

    ??:? void tmp52b0dmyb.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_num1 = numbers[i];\n           \
    \     min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzu7e0ksh.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpzu7e0ksh.__unittest_L33_C1() [0x428f65]

    ??:? void tmpzu7e0ksh.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] -\
    \ numbers[1]);\n    float min1 = numbers[0];\n    float min2 = numbers[1];\n \
    \   for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff)\n            {\n           \
    \     minDiff = diff;\n                min1 = numbers[i];\n                min2\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1a94mmq2.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp1a94mmq2.__unittest_L33_C1() [0x428f65]

    ??:? void tmp1a94mmq2.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] -\
    \ numbers[1]);\n    float minNum1 = numbers[0];\n    float minNum2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff)\n            {\n           \
    \     minDiff = diff;\n                minNum1 = numbers[i];\n               \
    \ minNum2 = numbers[j];\n            }\n        }\n    }\n    return tuple(minNum1,\
    \ minNum2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyw1epked.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpyw1epked.__unittest_L33_C1() [0x428f65]

    ??:? void tmpyw1epked.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_distance = abs(numbers[0]\
    \ - numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float distance = abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < min_distance)\n            {\n  \
    \              min_distance = distance;\n                closest_pair = tuple(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return closest_pair;\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp44tqtwws.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp44tqtwws.__unittest_L31_C1() [0x429041]

    ??:? void tmp44tqtwws.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    foreach(i, num; numbers)\n    {\n        if(i == 0)\n            continue;\n\
    \        float diff = num - numbers[i-1];\n        if(diff < min_diff)\n     \
    \   {\n            min_diff = diff;\n            min = num;\n        }\n     \
    \   if(diff > max_diff)\n        {\n            max_diff = diff;\n           \
    \ max = num;\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcgd8ebp3.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e1d]

    ??:? void tmpcgd8ebp3.__unittest_L36_C1() [0x428e99]

    ??:? void tmpcgd8ebp3.__modtest() [0x429888]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da1a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432341]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4327f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4322cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d9f1]

    ??:? runModuleUnitTests [0x42e8e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd62uzcqi.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpd62uzcqi.__unittest_L31_C1() [0x429041]

    ??:? void tmpd62uzcqi.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.max;\n    float min_a = 0.0;\n    float min_b\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaxxy6ulj.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpaxxy6ulj.__unittest_L32_C1() [0x428e99]

    ??:? void tmpaxxy6ulj.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float\
    \ min_b = 0.0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n\
    \        {\n            if(i == j)\n                continue;\n            float\
    \ diff = abs(a - b);\n            if(diff < min_diff)\n            {\n       \
    \         min_diff = diff;\n                min_a = a;\n                min_b\
    \ = b;\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8scrz_m1.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmp8scrz_m1.__unittest_L34_C1() [0x428e7d]

    ??:? void tmp8scrz_m1.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0, b = 0.0;\n    foreach(i,\
    \ num; numbers)\n    {\n        foreach(j, num2; numbers)\n        {\n       \
    \     if(i != j)\n            {\n                float diff = abs(num - num2);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = num;\n                    b = num2;\n       \
    \         }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpez0zhevl.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpez0zhevl.__unittest_L34_C1() [0x428e7d]

    ??:? void tmpez0zhevl.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0] - numbers[1];\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[1];\n    foreach(i, number;\
    \ numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n         \
    \   if(i != j)\n            {\n                float diff = abs(number - number2);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    min1 = number;\n                    min2 = number2;\n\
    \                }\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1ogm_nto.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f69]

    ??:? void tmp1ogm_nto.__unittest_L36_C1() [0x428f21]

    ??:? void tmp1ogm_nto.__modtest() [0x42991c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db8a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432960]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43243d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db61]

    ??:? runModuleUnitTests [0x42ea51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a42c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp52b0dmyb.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp52b0dmyb.__unittest_L33_C1() [0x428f65]

    ??:? void tmp52b0dmyb.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] -\
    \ numbers[1]);\n    float min1 = numbers[0];\n    float min2 = numbers[1];\n \
    \   for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff)\n            {\n           \
    \     minDiff = diff;\n                min1 = numbers[i];\n                min2\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1a94mmq2.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp1a94mmq2.__unittest_L33_C1() [0x428f65]

    ??:? void tmp1a94mmq2.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = float.infinity;\n\
    \    float min_diff_first = 0.0;\n    float min_diff_second = 0.0;\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_diff_first = numbers[i];\n                min_diff_second\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_first,\
    \ min_diff_second);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplph3vlk1.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f29]

    ??:? void tmplph3vlk1.__unittest_L33_C1() [0x428ee1]

    ??:? void tmplph3vlk1.__modtest() [0x4298dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432471]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432920]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db21]

    ??:? runModuleUnitTests [0x42ea11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0, b = 0.0;\n    foreach(i,\
    \ n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(n - m);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 a = n;\n                    b = m;\n                }\n    \
    \        }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjcqzpg5l.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpjcqzpg5l.__unittest_L34_C1() [0x428e7d]

    ??:? void tmpjcqzpg5l.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             result[0] = numbers[i];\n                result[1] = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(result[0], result[1]);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpiouls5tc.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f35]

    ??:? void tmpiouls5tc.__unittest_L31_C1() [0x428fa1]

    ??:? void tmpiouls5tc.__modtest() [0x42999c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43276d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432c1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4326f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd25]

    ??:? runModuleUnitTests [0x42ec15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.max;\n    float min_diff_a = float.max;\n  \
    \  float min_diff_b = float.max;\n    foreach(i, a; numbers)\n    {\n        foreach(j,\
    \ b; numbers)\n        {\n            if(i != j)\n            {\n            \
    \    float diff = abs(a - b);\n                if(diff < min_diff)\n         \
    \       {\n                    min_diff = diff;\n                    min_diff_a\
    \ = a;\n                    min_diff_b = b;\n                }\n            }\n\
    \        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppmjkf6w_.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e05]

    ??:? void tmppmjkf6w_.__unittest_L35_C1() [0x428e75]

    ??:? void tmppmjkf6w_.__modtest() [0x429870]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432788]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432265]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d989]

    ??:? runModuleUnitTests [0x42e879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a254]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpexhpj_dr.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpexhpj_dr.__unittest_L32_C1() [0x428e99]

    ??:? void tmpexhpj_dr.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           result = tuple(numbers[i], numbers[j]);\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5olho2mn.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp5olho2mn.__unittest_L31_C1() [0x429041]

    ??:? void tmp5olho2mn.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float diff\
    \ = numbers[0] - numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        if (numbers[i] < min) \n        {\n            min = numbers[i];\n\
    \        }\n        if (numbers[i] > max) \n        {\n            max = numbers[i];\n\
    \        }\n        if (i > 0) \n        {\n            float temp = numbers[i]\
    \ - numbers[i - 1];\n            if (temp < diff) \n            {\n          \
    \      diff = temp;\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj910n7s5.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e55]

    ??:? void tmpj910n7s5.__unittest_L38_C1() [0x428ed1]

    ??:? void tmpj910n7s5.__modtest() [0x4298c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432379]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432828]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432305]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da29]

    ??:? runModuleUnitTests [0x42e919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a318]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_a = numbers[i];\n               \
    \ min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc0lgwqkc.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpc0lgwqkc.__unittest_L33_C1() [0x428f65]

    ??:? void tmpc0lgwqkc.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_xq02oj6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp_xq02oj6.__unittest_L33_C1() [0x428f65]

    ??:? void tmp_xq02oj6.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    foreach(i, n; numbers)\n    {\n        if(i == 0) continue;\n        float\
    \ diff = n - numbers[i-1];\n        if(diff < min_diff)\n        {\n         \
    \   min_diff = diff;\n            min = numbers[i-1];\n            max = n;\n\
    \        }\n        if(diff > max_diff)\n        {\n            max_diff = diff;\n\
    \            min = numbers[i-1];\n            max = n;\n        }\n    }\n   \
    \ return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpehb0o0pz.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e85]

    ??:? void tmpehb0o0pz.__unittest_L37_C1() [0x428efd]

    ??:? void tmpehb0o0pz.__modtest() [0x4298ec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da82]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432858]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432335]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da59]

    ??:? runModuleUnitTests [0x42e949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a348]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float minDiff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff)\n            {\n           \
    \     minDiff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7d1glbhk.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp7d1glbhk.__unittest_L31_C1() [0x429041]

    ??:? void tmp7d1glbhk.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzxwmyfr9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fb9]

    ??:? void tmpzxwmyfr9.__unittest_L33_C1() [0x428f75]

    ??:? void tmpzxwmyfr9.__modtest() [0x429970]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432501]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43248d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dbb1]

    ??:? runModuleUnitTests [0x42eaa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a47c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(n - m);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = n;\n                    b = m;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdlbqmedt.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpdlbqmedt.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpdlbqmedt.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpexhpj_dr.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpexhpj_dr.__unittest_L32_C1() [0x428e99]

    ??:? void tmpexhpj_dr.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.infinity;\n    float[] result = new float[2];\n \
    \   for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                result[0] = numbers[i];\n                result[1]\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(result[0],\
    \ result[1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ug0nvkw.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f35]

    ??:? void tmp8ug0nvkw.__unittest_L31_C1() [0x428fa1]

    ??:? void tmp8ug0nvkw.__modtest() [0x42999c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43276d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432c1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4326f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd25]

    ??:? runModuleUnitTests [0x42ec15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5oco051d.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmp5oco051d.__unittest_L31_C1() [0x429041]

    ??:? void tmp5oco051d.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float first = 0;\n    float second = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                first = numbers[i];\n                second = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(first, second);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkn03wf8q.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpkn03wf8q.__unittest_L32_C1() [0x428e99]

    ??:? void tmpkn03wf8q.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_diff_index = 0;\n    for (int i = 0; i < numbers.length\
    \ - 1; i++)\n    {\n        float diff = abs(numbers[i] - numbers[i + 1]);\n \
    \       if (diff < min_diff)\n        {\n            min_diff = diff;\n      \
    \      min_diff_index = i;\n        }\n    }\n    return tuple(numbers[min_diff_index],\
    \ numbers[min_diff_index + 1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpju92nx17.d(26): Error: cannot implicitly convert expression `min_diff_index`
    of type `float` to `ulong`

    /tmp/tmpju92nx17.d(26): Error: cannot implicitly convert expression `min_diff_index
    + 1.00000F` of type `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpju92nx17.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min1 = 0.0;\n    float min2 = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min1 = numbers[i];\n                min2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min1, min2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeocqd315.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpeocqd315.__unittest_L32_C1() [0x428e99]

    ??:? void tmpeocqd315.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe0pycyqg.d(26): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmpe0pycyqg.d(27): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe0pycyqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min = min(numbers[i], numbers[j]);\n\
    \                max = max(numbers[i], numbers[j]);\n            }\n        }\n\
    \    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvwt6qwn.d(26): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmplvwt6qwn.d(27): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvwt6qwn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    foreach(i,\
    \ num; numbers)\n    {\n        if(num < min)\n        {\n            min = num;\n\
    \        }\n        if(num > max)\n        {\n            max = num;\n       \
    \ }\n        if(i > 0)\n        {\n            float diff = abs(num - numbers[i-1]);\n\
    \            if(diff < min_diff)\n            {\n                min_diff = diff;\n\
    \            }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplun7ln2b.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f61]

    ??:? void tmplun7ln2b.__unittest_L39_C1() [0x428f1d]

    ??:? void tmplun7ln2b.__modtest() [0x429918]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db82]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432958]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432435]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db59]

    ??:? runModuleUnitTests [0x42ea49]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a424]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length - 1; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3biwq8an.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fb1]

    ??:? void tmp3biwq8an.__unittest_L33_C1() [0x428f6d]

    ??:? void tmp3biwq8an.__modtest() [0x429968]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbd2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432485]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba9]

    ??:? runModuleUnitTests [0x42ea99]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a474]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(a - b);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    min_a = a;\n                    min_b = b;\n    \
    \            }\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpimawkuyb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpimawkuyb.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpimawkuyb.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ number; numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n \
    \           if(i != j)\n            {\n                float diff = abs(number\
    \ - number2);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    result[0] = number;\n             \
    \       result[1] = number2;\n                }\n            }\n        }\n  \
    \  }\n    return tuple(result[0], result[1]);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm0xz06of.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f15]

    ??:? void tmpm0xz06of.__unittest_L34_C1() [0x428f81]

    ??:? void tmpm0xz06of.__modtest() [0x42997c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43274d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432bfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4326d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd05]

    ??:? runModuleUnitTests [0x42ebf5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0;\n    float b = 0;\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn3rbe7xw.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpn3rbe7xw.__unittest_L32_C1() [0x428e99]

    ??:? void tmpn3rbe7xw.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_num1 = numbers[i];\n           \
    \     min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzu7e0ksh.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpzu7e0ksh.__unittest_L33_C1() [0x428f65]

    ??:? void tmpzu7e0ksh.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float diff = numbers[0] - numbers[1];\n    foreach(i,\
    \ number; numbers)\n    {\n        if(number < min)\n        {\n            min\
    \ = number;\n        }\n        if(number > max)\n        {\n            max =\
    \ number;\n        }\n        if(i != 0)\n        {\n            if(abs(number\
    \ - numbers[i-1]) < abs(diff))\n            {\n                diff = number -\
    \ numbers[i-1];\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdsiw77me.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpdsiw77me.__unittest_L38_C1() [0x428f61]

    ??:? void tmpdsiw77me.__modtest() [0x42995c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_num1 = numbers[i];\n           \
    \     min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzu7e0ksh.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpzu7e0ksh.__unittest_L33_C1() [0x428f65]

    ??:? void tmpzu7e0ksh.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = 0;\
    \ j < numbers.length; j++)\n        {\n            if (i != j)\n            {\n\
    \                float diff = abs(numbers[i] - numbers[j]);\n                if\
    \ (diff < min_diff)\n                {\n                    min_diff = diff;\n\
    \                    min = numbers[i];\n                    max = numbers[j];\n\
    \                }\n                if (diff > max_diff)\n                {\n\
    \                    max_diff = diff;\n                }\n            }\n    \
    \    }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqzmlchqh.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x429efd]

    ??:? void tmpqzmlchqh.__unittest_L40_C1() [0x428f6d]

    ??:? void tmpqzmlchqh.__modtest() [0x429968]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec0f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432445]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4328f4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323d1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42daf5]

    ??:? runModuleUnitTests [0x42e9e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    Tuple!(float, float)\
    \ result = tuple(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    result = tuple(numbers[i], numbers[j]);\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkbcx009j.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a065]

    ??:? void tmpkbcx009j.__unittest_L30_C1() [0x42900d]

    ??:? void tmpkbcx009j.__modtest() [0x429ad0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f063]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42df72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432899]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432d48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432825]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42df49]

    ??:? runModuleUnitTests [0x42ee39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a5b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min1 = 0;\n    float min2 = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min1 = numbers[i];\n                min2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min1, min2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprjsyn8k5.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmprjsyn8k5.__unittest_L32_C1() [0x428e99]

    ??:? void tmprjsyn8k5.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(x - y);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = x;\n                    b = y;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpygeqgg6s.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpygeqgg6s.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpygeqgg6s.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++)\n    {\n        float diff = numbers[i]\
    \ - numbers[i-1];\n        if (diff < min_diff)\n        {\n            min_diff\
    \ = diff;\n            min = numbers[i-1];\n            max = numbers[i];\n  \
    \      }\n        if (diff > max_diff)\n        {\n            max_diff = diff;\n\
    \        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9mcfw5ev.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e55]

    ??:? void tmp9mcfw5ev.__unittest_L34_C1() [0x428ecd]

    ??:? void tmp9mcfw5ev.__modtest() [0x4298bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432379]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432828]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432305]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da29]

    ??:? runModuleUnitTests [0x42e919]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a318]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_num1 = numbers[i];\n           \
    \     min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzu7e0ksh.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpzu7e0ksh.__unittest_L33_C1() [0x428f65]

    ??:? void tmpzu7e0ksh.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min) \n            {\n                min = diff;\n   \
    \             result = tuple(numbers[i], numbers[j]);\n            }\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn50rcdr2.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpn50rcdr2.__unittest_L31_C1() [0x429041]

    ??:? void tmpn50rcdr2.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_difference = float.max;\n\
    \    float first_number = 0.0;\n    float second_number = 0.0;\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float difference = abs(numbers[i] - numbers[j]);\n\
    \            if (difference < min_difference)\n            {\n               \
    \ min_difference = difference;\n                first_number = numbers[i];\n \
    \               second_number = numbers[j];\n            }\n        }\n    }\n\
    \    return tuple(first_number, second_number);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp24c7bg62.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f29]

    ??:? void tmp24c7bg62.__unittest_L33_C1() [0x428ee1]

    ??:? void tmp24c7bg62.__modtest() [0x4298dc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432471]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432920]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db21]

    ??:? runModuleUnitTests [0x42ea11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(x - y);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = x;\n                    b = y;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpygeqgg6s.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpygeqgg6s.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpygeqgg6s.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_num1 = numbers[i];\n           \
    \     min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzu7e0ksh.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpzu7e0ksh.__unittest_L33_C1() [0x428f65]

    ??:? void tmpzu7e0ksh.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1;\
    \ j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpexhpj_dr.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmpexhpj_dr.__unittest_L32_C1() [0x428e99]

    ??:? void tmpexhpj_dr.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float\
    \ min_b = 0.0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n\
    \        {\n            if(i != j)\n            {\n                float diff\
    \ = abs(a - b);\n                if(diff < min_diff)\n                {\n    \
    \                min_diff = diff;\n                    min_a = a;\n          \
    \          min_b = b;\n                }\n            }\n        }\n    }\n  \
    \  return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8romz76_.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmp8romz76_.__unittest_L35_C1() [0x428e7d]

    ??:? void tmp8romz76_.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             result[0] = numbers[i];\n                result[1] = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(result[0], result[1]);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpiouls5tc.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f35]

    ??:? void tmpiouls5tc.__unittest_L31_C1() [0x428fa1]

    ??:? void tmpiouls5tc.__modtest() [0x42999c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43276d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432c1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4326f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd25]

    ??:? runModuleUnitTests [0x42ec15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu3z3w5my.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a151]

    ??:? void tmpu3z3w5my.__unittest_L31_C1() [0x429041]

    ??:? void tmpu3z3w5my.__modtest() [0x429b04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e035]

    ??:? runModuleUnitTests [0x42ef25]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    foreach(i, number; numbers)\n    {\n        if(i == 0)\n            continue;\n\
    \        float diff = abs(number - numbers[i-1]);\n        if(diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = number;\n        \
    \    max = numbers[i-1];\n        }\n        if(diff > max_diff)\n        {\n\
    \            max_diff = diff;\n            min = numbers[i-1];\n            max\
    \ = number;\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcnr1jhmi.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f15]

    ??:? void tmpcnr1jhmi.__unittest_L38_C1() [0x428f81]

    ??:? void tmpcnr1jhmi.__modtest() [0x42997c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec27]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43245d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43290c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4323e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db0d]

    ??:? runModuleUnitTests [0x42e9fd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min1 = 0;\n    float min2 = 0;\n\
    \    foreach(i, e; numbers)\n    {\n        foreach(j, f; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(e - f);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    min1 = e;\n                    min2 = f;\n      \
    \          }\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyxavhf77.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpyxavhf77.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpyxavhf77.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) result = tuple(numbers[0], numbers[1]);\n\
    \    for (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                result = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqm0r6mj4.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a161]

    ??:? void tmpqm0r6mj4.__unittest_L31_C1() [0x429051]

    ??:? void tmpqm0r6mj4.__modtest() [0x429b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f15f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e06e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432995]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432921]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e045]

    ??:? runModuleUnitTests [0x42ef35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ v; numbers)\n    {\n        foreach(j, w; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(v - w);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 result[0] = v;\n                    result[1] = w;\n       \
    \         }\n            }\n        }\n    }\n    return tuple(result[0], result[1]);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzeym8hur.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f15]

    ??:? void tmpzeym8hur.__unittest_L34_C1() [0x428f81]

    ??:? void tmpzeym8hur.__modtest() [0x42997c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43274d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432bfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4326d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd05]

    ??:? runModuleUnitTests [0x42ebf5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = float.infinity;\n\
    \    float min_diff_a = 0.0, min_diff_b = 0.0;\n    for (size_t i = 0; i < numbers.length;\
    \ i++)\n    {\n        for (size_t j = i + 1; j < numbers.length; j++)\n     \
    \   {\n            float diff = abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < min_diff)\n            {\n                min_diff = diff;\n       \
    \         min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwpjgcdgv.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f31]

    ??:? void tmpwpjgcdgv.__unittest_L32_C1() [0x428eed]

    ??:? void tmpwpjgcdgv.__modtest() [0x4298e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432479]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432928]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432405]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db29]

    ??:? runModuleUnitTests [0x42ea19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_num1 = numbers[i];\n           \
    \     min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzu7e0ksh.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpzu7e0ksh.__unittest_L33_C1() [0x428f65]

    ??:? void tmpzu7e0ksh.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (size_t i = 1; i < numbers.length; i++)\n    {\n        float diff =\
    \ numbers[i] - numbers[i - 1];\n        if (diff < min_diff)\n        {\n    \
    \        min_diff = diff;\n            min = numbers[i - 1];\n            max\
    \ = numbers[i];\n        }\n        if (diff > max_diff)\n        {\n        \
    \    max_diff = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxi__28aw.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x429ea5]

    ??:? void tmpxi__28aw.__unittest_L36_C1() [0x428f21]

    ??:? void tmpxi__28aw.__modtest() [0x429910]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42daa2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432878]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432355]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da79]

    ??:? runModuleUnitTests [0x42e969]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a368]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw22quyr9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpw22quyr9.__unittest_L33_C1() [0x428f65]

    ??:? void tmpw22quyr9.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = abs(numbers[0] - numbers[1]);\n\
    \    float a = numbers[0];\n    float b = numbers[1];\n    for (int i = 0; i <\
    \ numbers.length; i++)\n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n  \
    \          if (diff < min)\n            {\n                min = diff;\n     \
    \           a = numbers[i];\n                b = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp52b0dmyb.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp52b0dmyb.__unittest_L33_C1() [0x428f65]

    ??:? void tmp52b0dmyb.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (size_t i = 0; i < numbers.length; i++) \n    {\n        for (size_t\
    \ j = i + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1aq94w51.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a161]

    ??:? void tmp1aq94w51.__unittest_L31_C1() [0x429051]

    ??:? void tmp1aq94w51.__modtest() [0x429b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f15f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e06e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432995]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432e44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432921]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42e045]

    ??:? runModuleUnitTests [0x42ef35]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_xq02oj6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp_xq02oj6.__unittest_L33_C1() [0x428f65]

    ??:? void tmp_xq02oj6.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_xq02oj6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp_xq02oj6.__unittest_L33_C1() [0x428f65]

    ??:? void tmp_xq02oj6.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) \n            {\n              \
    \  min = diff;\n                a = numbers[i];\n                b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n{\n  \
    \  alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp32x8knci.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp32x8knci.__unittest_L32_C1() [0x428e99]

    ??:? void tmp32x8knci.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    for (int i = 1; i < numbers.length; i++) \n    {\n        float diff = numbers[i]\
    \ - numbers[i - 1];\n        if (diff < min_diff) \n        {\n            min_diff\
    \ = diff;\n            min = numbers[i - 1];\n            max = numbers[i];\n\
    \        }\n        if (diff > max_diff) \n        {\n            max_diff = diff;\n\
    \            min = numbers[i - 1];\n            max = numbers[i];\n        }\n\
    \    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpde2vixot.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x429ead]

    ??:? void tmpde2vixot.__unittest_L36_C1() [0x428f25]

    ??:? void tmpde2vixot.__modtest() [0x429914]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42daaa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432880]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43235d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da81]

    ??:? runModuleUnitTests [0x42e971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a370]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        float diff = numbers[i] - numbers[i-1];\n        if (diff < min_diff)\n\
    \        {\n            min_diff = diff;\n            min = numbers[i-1];\n  \
    \          max = numbers[i];\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpatllz6d_.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x429ded]

    ??:? void tmpatllz6d_.__unittest_L29_C1() [0x428e69]

    ??:? void tmpatllz6d_.__modtest() [0x429858]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eadb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432311]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4327c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43229d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d9c1]

    ??:? runModuleUnitTests [0x42e8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j\
    \ < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min = min(numbers[i], numbers[j]);\n\
    \                max = max(numbers[i], numbers[j]);\n            }\n        }\n\
    \    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvwt6qwn.d(26): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmplvwt6qwn.d(27): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvwt6qwn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0] - numbers[1];\n\
    \    float min1 = numbers[0];\n    float min2 = numbers[1];\n    for (size_t i\
    \ = 0; i < numbers.length; i++)\n    {\n        for (size_t j = i + 1; j < numbers.length;\
    \ j++)\n        {\n            if (abs(numbers[i] - numbers[j]) < min)\n     \
    \       {\n                min = abs(numbers[i] - numbers[j]);\n             \
    \   min1 = numbers[i];\n                min2 = numbers[j];\n            }\n  \
    \      }\n    }\n    return tuple(min1, min2);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6taba79s.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42a001]

    ??:? void tmp6taba79s.__unittest_L32_C1() [0x428fb9]

    ??:? void tmp6taba79s.__modtest() [0x4299b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ed13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dc22]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432549]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4324d5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dbf9]

    ??:? runModuleUnitTests [0x42eae9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a4c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    foreach(float i; numbers)\n    {\n        if(i\
    \ < min)\n        {\n            min = i;\n        }\n        if(i > max)\n  \
    \      {\n            max = i;\n        }\n        if(i - min < min_diff)\n  \
    \      {\n            min_diff = i - min;\n        }\n    }\n    return tuple(min,\
    \ min + min_diff);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprgzy5pmu.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429db5]

    ??:? void tmprgzy5pmu.__unittest_L34_C1() [0x428e31]

    ??:? void tmprgzy5pmu.__modtest() [0x429820]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432788]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432265]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d989]

    ??:? runModuleUnitTests [0x42e879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a278]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min1 = 0.0;\n    float min2 = 0.0;\n\
    \    foreach(i, n; numbers)\n    {\n        foreach(j, m; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(n - m);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    min1 = n;\n                    min2 = m;\n      \
    \          }\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyd5cs33o.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpyd5cs33o.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpyd5cs33o.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.infinity;\n    float min_a = 0.0;\n    float\
    \ min_b = 0.0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n\
    \        {\n            if (i != j)\n            {\n                float diff\
    \ = abs(a - b);\n                if (diff < min_diff)\n                {\n   \
    \                 min_diff = diff;\n                    min_a = a;\n         \
    \           min_b = b;\n                }\n            }\n        }\n    }\n \
    \   return tuple(min_a, min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzck93qw5.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpzck93qw5.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpzck93qw5.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0] - numbers[1];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    foreach(i,\
    \ a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(a - b);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 min_a = a;\n                    min_b = b;\n               \
    \ }\n            }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmponsqbwgw.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f69]

    ??:? void tmponsqbwgw.__unittest_L36_C1() [0x428f21]

    ??:? void tmponsqbwgw.__modtest() [0x42991c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db8a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432960]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43243d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db61]

    ??:? runModuleUnitTests [0x42ea51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a42c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ a; numbers)\n    {\n        foreach(j, b; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(a - b);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 result[0] = a;\n                    result[1] = b;\n       \
    \         }\n            }\n        }\n    }\n    return tuple(result[0], result[1]);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9wpey9oo.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f15]

    ??:? void tmp9wpey9oo.__unittest_L34_C1() [0x428f81]

    ??:? void tmp9wpey9oo.__modtest() [0x42997c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43274d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432bfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4326d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd05]

    ??:? runModuleUnitTests [0x42ebf5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min)\n            {\n                min = diff;\n   \
    \             result[0] = numbers[i];\n                result[1] = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(result[0], result[1]);\n}\n\
    unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpiouls5tc.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f35]

    ??:? void tmpiouls5tc.__unittest_L31_C1() [0x428fa1]

    ??:? void tmpiouls5tc.__modtest() [0x42999c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43276d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432c1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4326f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dd25]

    ??:? runModuleUnitTests [0x42ec15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min_a = 0.0;\n    float min_b = 0.0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min_a = numbers[i];\n                min_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3jnrhjee.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp3jnrhjee.__unittest_L32_C1() [0x428e99]

    ??:? void tmp3jnrhjee.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_num1 = numbers[i];\n                min_num2 = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_num1, min_num2);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo74g74np.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f91]

    ??:? void tmpo74g74np.__unittest_L33_C1() [0x428f49]

    ??:? void tmpo74g74np.__modtest() [0x429944]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432988]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432465]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db89]

    ??:? runModuleUnitTests [0x42ea79]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = abs(numbers[0] - numbers[1]);\n    for (int i = 0; i < numbers.length; i++)\
    \ \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n        {\n\
    \            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfvazowie.d(25): Error: function expected before `()`, not `min`
    of type `float`

    /tmp/tmpfvazowie.d(26): Error: function expected before `()`, not `max` of type
    `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvazowie.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164229
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_xq02oj6.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmp_xq02oj6.__unittest_L33_C1() [0x428f65]

    ??:? void tmp_xq02oj6.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    int index = 0;\n   \
    \ for (int i = 0; i < numbers.length - 1; i++)\n    {\n        float diff = abs(numbers[i]\
    \ - numbers[i + 1]);\n        if (diff < min)\n        {\n            min = diff;\n\
    \            index = i;\n        }\n    }\n    return tuple(numbers[index], numbers[index\
    \ + 1]);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n   \
    \ assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp1vfvz7o.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e35]

    ??:? void tmpp1vfvz7o.__unittest_L27_C1() [0x428ea5]

    ??:? void tmpp1vfvz7o.__modtest() [0x4298a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb47]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43237d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43282c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da2d]

    ??:? runModuleUnitTests [0x42e91d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkpeiiq_a.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f2d]

    ??:? void tmpkpeiiq_a.__unittest_L31_C1() [0x428f99]

    ??:? void tmpkpeiiq_a.__modtest() [0x429994]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432924]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432401]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db25]

    ??:? runModuleUnitTests [0x42ea15]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw22quyr9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x429fa9]

    ??:? void tmpw22quyr9.__unittest_L33_C1() [0x428f65]

    ??:? void tmpw22quyr9.__modtest() [0x429960]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4329a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43247d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42dba1]

    ??:? runModuleUnitTests [0x42ea91]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164228
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float minDiff = float.infinity;\n    float min1 = 0.0;\n    float min2\
    \ = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < minDiff)\n            {\n           \
    \     minDiff = diff;\n                min1 = numbers[i];\n                min2\
    \ = numbers[j];\n            }\n        }\n    }\n    return tuple(min1, min2);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0kv1e7c5.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp0kv1e7c5.__unittest_L32_C1() [0x428e99]

    ??:? void tmp0kv1e7c5.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(x - y);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = x;\n                    b = y;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpygeqgg6s.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e0d]

    ??:? void tmpygeqgg6s.__unittest_L35_C1() [0x428e7d]

    ??:? void tmpygeqgg6s.__modtest() [0x429878]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432790]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43226d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42d991]

    ??:? runModuleUnitTests [0x42e881]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164227
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float minDiff = float.max;\n    float minDiffFirst = 0.0;\n    float\
    \ minDiffSecond = 0.0;\n    for (int i = 0; i < numbers.length - 1; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     float diff = abs(numbers[i] - numbers[j]);\n            if (diff < minDiff)\n\
    \            {\n                minDiff = diff;\n                minDiffFirst\
    \ = numbers[i];\n                minDiffSecond = numbers[j];\n            }\n\
    \        }\n    }\n    return tuple(minDiffFirst, minDiffSecond);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp14nv5u3j.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmp14nv5u3j.__unittest_L32_C1() [0x428e9d]

    ??:? void tmp14nv5u3j.__modtest() [0x429898]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = numbers[1] - numbers[0];\n    foreach(i,\
    \ v; numbers)\n    {\n        if(v < min)\n        {\n            min = v;\n \
    \       }\n        if(v > max)\n        {\n            max = v;\n        }\n \
    \       if(i > 0)\n        {\n            float diff = abs(v - numbers[i-1]);\n\
    \            if(diff < min_diff)\n            {\n                min_diff = diff;\n\
    \            }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsm2bwzs_.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x429f61]

    ??:? void tmpsm2bwzs_.__unittest_L39_C1() [0x428f1d]

    ??:? void tmpsm2bwzs_.__modtest() [0x429918]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db82]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432958]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432435]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42db59]

    ??:? runModuleUnitTests [0x42ea49]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a424]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.max;\n    float min_diff_a = 0.0;\n    float\
    \ min_diff_b = 0.0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n   \
    \     for (int j = i + 1; j < numbers.length; j++)\n        {\n            float\
    \ diff = abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\n   \
    \         {\n                min_diff = diff;\n                min_diff_a = numbers[i];\n\
    \                min_diff_b = numbers[j];\n            }\n        }\n    }\n \
    \   return tuple(min_diff_a, min_diff_b);\n}\nunittest\n{\n    alias candidate\
    \ = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0,\
    \ 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n \
    \   assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprjbmprwm.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429e2d]

    ??:? void tmprjbmprwm.__unittest_L32_C1() [0x428e99]

    ??:? void tmprjbmprwm.__modtest() [0x429894]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x432824]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x432301]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42da25]

    ??:? runModuleUnitTests [0x42e915]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164230
