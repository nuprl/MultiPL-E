language: d
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (int i = 0; i < numbers.length - 1; i++)\n    {\n        for (int j =\
    \ i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp80getfvy.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x429fb1]\n??:? void tmp80getfvy.__unittest_L33_C1() [0x428f6d]\n??:?
    void tmp80getfvy.__modtest() [0x429968]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbd2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x432485]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42dba9]\n??:? runModuleUnitTests [0x42ea99]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a474]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a3fb]\n??:? _d_run_main [0x42a366]\n??:? main [0x42997b]\n??:?
    __libc_start_main [0x799c9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_distance = abs(numbers[0]\
    \ - numbers[1]);\n    float min_number1 = numbers[0];\n    float min_number2 =\
    \ numbers[1];\n    for (int i = 0; i < numbers.length; i++) \n    {\n        for\
    \ (int j = i + 1; j < numbers.length; j++) \n        {\n            float distance\
    \ = abs(numbers[i] - numbers[j]);\n            if (distance < min_distance) \n\
    \            {\n                min_distance = distance;\n                min_number1\
    \ = numbers[i];\n                min_number2 = numbers[j];\n            }\n  \
    \      }\n    }\n    return tuple(min_number1, min_number2);\n}\nunittest\n{\n\
    \    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp2bt7j1cf.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x429fa9]\n??:? void tmp2bt7j1cf.__unittest_L33_C1() [0x428f65]\n??:?
    void tmp2bt7j1cf.__modtest() [0x429960]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43247d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42dba1]\n??:? runModuleUnitTests [0x42ea91]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a3f3]\n??:? _d_run_main [0x42a35e]\n??:? main [0x429973]\n??:?
    __libc_start_main [0xd6e6554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpkg_jlw0w.d(35): unittest failure\n----------------\n??:?
    _d_unittestp [0x42a151]\n??:? void tmpkg_jlw0w.__unittest_L31_C1() [0x429041]\n??:?
    void tmpkg_jlw0w.__modtest() [0x429b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x432e34]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x432911]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42e035]\n??:? runModuleUnitTests [0x42ef25]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a627]\n??:? _d_run_main [0x42a592]\n??:? main [0x429b17]\n??:?
    __libc_start_main [0x7079b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0;\n    float b = 0;\n    foreach(i,\
    \ number; numbers)\n    {\n        foreach(j, number2; numbers)\n        {\n \
    \           if(i != j)\n            {\n                float diff = abs(number\
    \ - number2);\n                if(diff < min)\n                {\n           \
    \         min = diff;\n                    a = number;\n                    b\
    \ = number2;\n                }\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwrc1uweo.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x429e0d]\n??:? void tmpwrc1uweo.__unittest_L35_C1() [0x428e7d]\n??:?
    void tmpwrc1uweo.__modtest() [0x429878]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43226d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42d991]\n??:? runModuleUnitTests [0x42e881]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a1e3]\n??:? _d_run_main [0x42a14e]\n??:? main [0x42988b]\n??:?
    __libc_start_main [0x8823c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min_diff = float.infinity;\n    float min_a = 0;\n    float min_b\
    \ = 0;\n    foreach(i, a; numbers)\n    {\n        foreach(j, b; numbers)\n  \
    \      {\n            if (i != j)\n            {\n                float diff =\
    \ abs(a - b);\n                if (diff < min_diff)\n                {\n     \
    \               min_diff = diff;\n                    min_a = a;\n           \
    \         min_b = b;\n                }\n            }\n        }\n    }\n   \
    \ return tuple(min(min_a, min_b), max(min_a, min_b));\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6plvdsf_.d(33): Error: undefined identifier `min`, did you mean
    function `main`?\n/tmp/tmp6plvdsf_.d(33): Error: undefined identifier `max`, did
    you mean function `fmax`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6plvdsf_.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_a = numbers[0];\n    float min_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        for (int j = i\
    \ + 1; j < numbers.length; j++) \n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff) \n            {\n         \
    \       min_diff = diff;\n                min_a = numbers[i];\n              \
    \  min_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_a,\
    \ min_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n  \
    \  assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n   \
    \ assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpef6ix3nw.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x429fa9]\n??:? void tmpef6ix3nw.__unittest_L33_C1() [0x428f65]\n??:?
    void tmpef6ix3nw.__modtest() [0x429960]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43247d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42dba1]\n??:? runModuleUnitTests [0x42ea91]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a3f3]\n??:? _d_run_main [0x42a35e]\n??:? main [0x429973]\n??:?
    __libc_start_main [0xa9f6d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float diff\
    \ = numbers[0] - numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n \
    \   {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n     \
    \       if (abs(numbers[i] - numbers[j]) < diff)\n            {\n            \
    \    diff = abs(numbers[i] - numbers[j]);\n                min = min(numbers[i],\
    \ numbers[j]);\n                max = max(numbers[i], numbers[j]);\n         \
    \   }\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n    alias\
    \ candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) ==\
    \ tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0,\
    \ 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxl8mobk2.d(24): Error: function expected before `()`, not `min`
    of type `float`\n/tmp/tmpxl8mobk2.d(25): Error: function expected before `()`,
    not `max` of type `float`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxl8mobk2.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float min_a = 0;\n    float min_b = 0;\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min)\n            {\n               \
    \ min = diff;\n                min_a = numbers[i];\n                min_b = numbers[j];\n\
    \            }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpu9gxs5uz.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x429e2d]\n??:? void tmpu9gxs5uz.__unittest_L32_C1() [0x428e99]\n??:?
    void tmpu9gxs5uz.__modtest() [0x429894]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb3f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432375]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x432824]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x432301]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42da25]\n??:? runModuleUnitTests [0x42e915]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2f0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a277]\n??:? _d_run_main [0x42a1e2]\n??:? main [0x4298a7]\n??:?
    __libc_start_main [0xd70d7554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            float diff = abs(numbers[i] - numbers[j]);\n\
    \            if (diff < min_diff)\n            {\n                min_diff = diff;\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9f4966to.d(26): Error: function expected before `()`, not `min`
    of type `float`\n/tmp/tmp9f4966to.d(27): Error: function expected before `()`,
    not `max` of type `float`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9f4966to.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_num1 = numbers[0];\n    float min_num2 = numbers[1];\n\
    \    for (size_t i = 0; i < numbers.length; i++)\n    {\n        for (size_t j\
    \ = i + 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_num1 = numbers[i];\n            \
    \    min_num2 = numbers[j];\n            }\n        }\n    }\n    return tuple(min_num1,\
    \ min_num2);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n\
    \    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n \
    \   assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmptl3tnn03.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x429fb9]\n??:? void tmptl3tnn03.__unittest_L33_C1() [0x428f75]\n??:?
    void tmptl3tnn03.__modtest() [0x429970]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eccb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbda]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432501]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4329b0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43248d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42dbb1]\n??:? runModuleUnitTests [0x42eaa1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a47c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a403]\n??:? _d_run_main [0x42a36e]\n??:? main [0x429983]\n??:?
    __libc_start_main [0x45da1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    foreach(i, num; numbers)\n    {\n        if(i\
    \ == 0)\n            continue;\n        float diff = num - numbers[i-1];\n   \
    \     if(diff < min_diff)\n        {\n            min_diff = diff;\n         \
    \   min = numbers[i-1];\n            max = num;\n        }\n    }\n    return\
    \ tuple(min, max);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpsb1_boa5.d(35): unittest failure\n----------------\n??:?
    _d_unittestp [0x429de5]\n??:? void tmpsb1_boa5.__unittest_L31_C1() [0x428e61]\n??:?
    void tmpsb1_boa5.__modtest() [0x429850]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ead3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432309]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4327b8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x432295]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42d9b9]\n??:? runModuleUnitTests [0x42e8a9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a2a8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a22f]\n??:? _d_run_main [0x42a19a]\n??:? main [0x429863]\n??:?
    __libc_start_main [0x82b95554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = numbers[0];\n    float max = numbers[0];\n    float min_diff\
    \ = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n\
    \    foreach(i, number; numbers)\n    {\n        if(i == 0)\n            continue;\n\
    \        float diff = number - numbers[i-1];\n        if(diff < min_diff)\n  \
    \      {\n            min_diff = diff;\n            min = numbers[i-1];\n    \
    \        max = number;\n        }\n        if(diff > max_diff)\n        {\n  \
    \          max_diff = diff;\n            min = numbers[i-1];\n            max\
    \ = number;\n        }\n    }\n    return tuple(min, max);\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqz6xla8j.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x429e85]\n??:? void tmpqz6xla8j.__unittest_L38_C1() [0x428efd]\n??:?
    void tmpqz6xla8j.__modtest() [0x4298ec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eb73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42da82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4323a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x432858]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x432335]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42da59]\n??:? runModuleUnitTests [0x42e949]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a348]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a2cf]\n??:? _d_run_main [0x42a23a]\n??:? main [0x4298ff]\n??:?
    __libc_start_main [0x8a3ab554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    float min_diff_a = numbers[0];\n    float min_diff_b = numbers[1];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                min_diff_a = numbers[i];\n          \
    \      min_diff_b = numbers[j];\n            }\n        }\n    }\n    return tuple(min_diff_a,\
    \ min_diff_b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\
    \n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n\
    \    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp51bqqe1c.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x429fa9]\n??:? void tmp51bqqe1c.__unittest_L33_C1() [0x428f65]\n??:?
    void tmp51bqqe1c.__modtest() [0x429960]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ecbb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbca]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324f1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4329a0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43247d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42dba1]\n??:? runModuleUnitTests [0x42ea91]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a46c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a3f3]\n??:? _d_run_main [0x42a35e]\n??:? main [0x429973]\n??:?
    __libc_start_main [0x78195554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = numbers[1] - numbers[0];\n\
    \    float min_a = numbers[0];\n    float min_b = numbers[1];\n    for (int i\
    \ = 0; i < numbers.length; i++) \n    {\n        for (int j = i + 1; j < numbers.length;\
    \ j++) \n        {\n            float diff = abs(numbers[i] - numbers[j]);\n \
    \           if (diff < min_diff) \n            {\n                min_diff = diff;\n\
    \                min_a = numbers[i];\n                min_b = numbers[j];\n  \
    \          }\n        }\n    }\n    return tuple(min_a, min_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp74sbdcy9.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x429f91]\n??:? void tmp74sbdcy9.__unittest_L33_C1() [0x428f49]\n??:?
    void tmp74sbdcy9.__modtest() [0x429944]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eca3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dbb2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4324d9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x432988]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x432465]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42db89]\n??:? runModuleUnitTests [0x42ea79]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a454]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a3db]\n??:? _d_run_main [0x42a346]\n??:? main [0x429957]\n??:?
    __libc_start_main [0xbb361554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = float.max;\n   \
    \ float min_diff_a = 0;\n    float min_diff_b = 0;\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < numbers.length; j++) \n      \
    \  {\n            float diff = abs(numbers[i] - numbers[j]);\n            if (diff\
    \ < min_diff) \n            {\n                min_diff = diff;\n            \
    \    min_diff_a = numbers[i];\n                min_diff_b = numbers[j];\n    \
    \        }\n        }\n    }\n    return tuple(min_diff_a, min_diff_b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmptsngu0oe.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x429f29]\n??:? void tmptsngu0oe.__unittest_L33_C1() [0x428ee1]\n??:?
    void tmptsngu0oe.__modtest() [0x4298dc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432471]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x432920]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4323fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42db21]\n??:? runModuleUnitTests [0x42ea11]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3ec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a373]\n??:? _d_run_main [0x42a2de]\n??:? main [0x4298ef]\n??:?
    __libc_start_main [0x5a4a2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    float min_diff = abs(numbers[0] - numbers[1]);\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i + 1; j <\
    \ numbers.length; j++)\n        {\n            if (abs(numbers[i] - numbers[j])\
    \ < min_diff)\n            {\n                min_diff = abs(numbers[i] - numbers[j]);\n\
    \                min = min(numbers[i], numbers[j]);\n                max = max(numbers[i],\
    \ numbers[j]);\n            }\n        }\n    }\n    return tuple(min, max);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1lii0zup.d(25): Error: function expected before `()`, not `min`
    of type `float`\n/tmp/tmp1lii0zup.d(26): Error: function expected before `()`,
    not `max` of type `float`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1lii0zup.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float a = 0.0;\n    float b = 0.0;\n  \
    \  foreach(i, x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n\
    \            if(i != j)\n            {\n                float diff = abs(x - y);\n\
    \                if(diff < min)\n                {\n                    min =\
    \ diff;\n                    a = x;\n                    b = y;\n            \
    \    }\n            }\n        }\n    }\n    return tuple(a, b);\n}\nunittest\n\
    {\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp6f7sma0w.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x429e0d]\n??:? void tmp6f7sma0w.__unittest_L35_C1() [0x428e7d]\n??:?
    void tmp6f7sma0w.__modtest() [0x429878]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42eaab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42d9ba]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4322e1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x432790]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43226d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42d991]\n??:? runModuleUnitTests [0x42e881]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a25c]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a1e3]\n??:? _d_run_main [0x42a14e]\n??:? main [0x42988b]\n??:?
    __libc_start_main [0x3f346554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = float.max;\n    float[] result = new float[2];\n    foreach(i,\
    \ x; numbers)\n    {\n        foreach(j, y; numbers)\n        {\n            if(i\
    \ != j)\n            {\n                float diff = abs(x - y);\n           \
    \     if(diff < min)\n                {\n                    min = diff;\n   \
    \                 result[0] = x;\n                    result[1] = y;\n       \
    \         }\n            }\n        }\n    }\n    return tuple(result[0], result[1]);\n\
    }\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpdcp1t186.d(38): unittest failure\n----------------\n??:?
    _d_unittestp [0x429f15]\n??:? void tmpdcp1t186.__unittest_L34_C1() [0x428f81]\n??:?
    void tmpdcp1t186.__modtest() [0x42997c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ee1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42dd2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43274d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x432bfc]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4326d9]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42dd05]\n??:? runModuleUnitTests [0x42ebf5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3d8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a35f]\n??:? _d_run_main [0x42a2ca]\n??:? main [0x42998f]\n??:?
    __libc_start_main [0x8b8c8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    float min = abs(numbers[0] - numbers[1]);\n    float a = numbers[0];\n\
    \    float b = numbers[1];\n    for (int i = 0; i < numbers.length; i++)\n   \
    \ {\n        for (int j = i + 1; j < numbers.length; j++)\n        {\n       \
    \     if (abs(numbers[i] - numbers[j]) < min)\n            {\n               \
    \ min = abs(numbers[i] - numbers[j]);\n                a = numbers[i];\n     \
    \           b = numbers[j];\n            }\n        }\n    }\n    return tuple(a,\
    \ b);\n}\nunittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0,\
    \ 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1])\
    \ == tuple(2.2, 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnt7bhrm8.d(35): unittest failure\n----------------\n??:?
    _d_unittestp [0x429f2d]\n??:? void tmpnt7bhrm8.__unittest_L31_C1() [0x428f99]\n??:?
    void tmpnt7bhrm8.__modtest() [0x429994]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ec3f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42db4e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432475]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x432924]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x432401]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42db25]\n??:? runModuleUnitTests [0x42ea15]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a3f0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a377]\n??:? _d_run_main [0x42a2e2]\n??:? main [0x4299a7]\n??:?
    __libc_start_main [0xf64d5554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From a supplied list of numbers\
    \ (of length at least two) select and return two that are the closest to each\n\
    \    other and return them in order (smaller number, larger number).\n    >>>\
    \ find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    tuple(2.0, 2.2)\n\
    \    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    tuple(2.0,\
    \ 2.0)\n    \n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\
    \ \n{\n    assert(numbers.length >= 2);\n    float min_diff = abs(numbers[0] -\
    \ numbers[1]);\n    Tuple!(float, float) closest_pair = tuple(numbers[0], numbers[1]);\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = i +\
    \ 1; j < numbers.length; j++)\n        {\n            float diff = abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min_diff)\n            {\n          \
    \      min_diff = diff;\n                closest_pair = tuple(numbers[i], numbers[j]);\n\
    \            }\n        }\n    }\n    return closest_pair;\n}\nunittest\n{\n \
    \   alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2,\
    \ 3.1));\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp033vzsle.d(35): unittest failure\n----------------\n??:?
    _d_unittestp [0x42a151]\n??:? void tmp033vzsle.__unittest_L31_C1() [0x429041]\n??:?
    void tmp033vzsle.__modtest() [0x429b04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42f14f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42e05e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x432985]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x432e34]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x432911]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42e035]\n??:? runModuleUnitTests [0x42ef25]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42a6a0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42a627]\n??:? _d_run_main [0x42a592]\n??:? main [0x429b17]\n??:?
    __libc_start_main [0x7900b554]\n1/1 unittests FAILED\n'''
  stdout: b''
