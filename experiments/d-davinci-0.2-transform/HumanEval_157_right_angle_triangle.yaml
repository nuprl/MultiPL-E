name: HumanEval_157_right_angle_triangle
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return True if the three\n    sides form a right-angled\
  \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
  \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n    \n\
  */\nbool right_angle_triangle(long a, long b, long c) \n"
tests: "unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
  \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
  \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
  \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
  \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
  \ 2L, 10L) == false);\n}\nvoid main(){}"
completions: ["{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    // sort the sides of the triangle\n\
    \    auto sides = tuple(a, b, c).sort();\n    // Pythagorean theorem\n    return\
    \ pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    if (a < b)\n        swap(a, b);\n    if\
    \ (a < c)\n        swap(a, c);\n    if (b < c)\n        swap(b, c);\n    return\
    \ a * a == b * b + c * c;\n}", "{\n    long[3] arr = [a, b, c];\n    sort(arr);\n\
    \    return (arr[0] * arr[0] + arr[1] * arr[1]) == arr[2] * arr[2];\n}", "{\n\
    \    // your code here\n    return false;\n}", "{\n    return (a * a + b * b ==\
    \ c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n  \
    \  long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) +\
    \ pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[3] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n    return\
    \ pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    long a2 = sides[0] * sides[0];\n \
    \   long b2 = sides[1] * sides[1];\n    long c2 = sides[2] * sides[2];\n    return\
    \ a2 + b2 == c2;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}",
  "{\n    // TODO: implement this function\n    // Hint: use the Pythagorean theorem\n\
    \    // https://en.wikipedia.org/wiki/Pythagorean_theorem\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/triangle.html\n    // https://www.mathsisfun.com/triangle-types.html\n\
    \    // https://www.mathsisfun.com/triangle-types.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    return (a\
    \ * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
