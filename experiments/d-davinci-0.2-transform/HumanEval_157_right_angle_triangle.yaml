name: HumanEval_157_right_angle_triangle
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return True if the three\n    sides form a right-angled\
  \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
  \ 4L, 5L)\n    true\n    >>> right_angle_triangle(1L, 2L, 3L)\n    false\n    \n\
  */\nbool right_angle_triangle(long a, long b, long c) \n"
tests: "unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
  \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
  \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
  \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
  \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
  \ 2L, 10L) == false);\n}\nvoid main(){}"
completions: ["{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    // sort the sides of the triangle\n\
    \    auto sides = tuple(a, b, c).sort();\n    // Pythagorean theorem\n    return\
    \ pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    if (a < b)\n        swap(a, b);\n    if\
    \ (a < c)\n        swap(a, c);\n    if (b < c)\n        swap(b, c);\n    return\
    \ a * a == b * b + c * c;\n}", "{\n    long[3] arr = [a, b, c];\n    sort(arr);\n\
    \    return (arr[0] * arr[0] + arr[1] * arr[1]) == arr[2] * arr[2];\n}", "{\n\
    \    // your code here\n    return false;\n}", "{\n    return (a * a + b * b ==\
    \ c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n  \
    \  long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) +\
    \ pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[3] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n    return\
    \ pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    long a2 = sides[0] * sides[0];\n \
    \   long b2 = sides[1] * sides[1];\n    long c2 = sides[2] * sides[2];\n    return\
    \ a2 + b2 == c2;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n  \
    \  return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}",
  "{\n    // TODO: implement this function\n    // Hint: use the Pythagorean theorem\n\
    \    // https://en.wikipedia.org/wiki/Pythagorean_theorem\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/triangle.html\n    // https://www.mathsisfun.com/triangle-types.html\n\
    \    // https://www.mathsisfun.com/triangle-types.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun.com/pythagoras.html\n    // https://www.mathsisfun.com/pythagoras.html\n\
    \    // https://www.mathsisfun", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    return (a\
    \ * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }", "{\n    // your code here\n    return false;\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long max = max(a, max(b, c));\n    long sum = a + b + c;\n    return\
    \ (max * max) == (sum - max) * (sum - max);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    auto sum_of_other_sides = other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n    return max_side * max_side == sum_of_other_sides;\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    // your code here\n    long[] arr = [a, b, c];\n    sort(arr);\n    return\
    \ arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n}", "{\n    // TODO:\
    \ implement\n    return false;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n  \
    \  sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[3] arr = [a,\
    \ b, c];\n    sort(arr);\n    return arr[0] * arr[0] + arr[1] * arr[1] == arr[2]\
    \ * arr[2];\n}", "{\n    // your code here\n    return a*a + b*b == c*c;\n}",
  "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) ==\
    \ pow(sides[2], 2);\n}", "{\n    // TODO: implement\n    //return (a*a + b*b ==\
    \ c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n    return (a*a + b*b ==\
    \ c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    auto sides =\
    \ tuple(a, b, c);\n    auto max = maxElement(sides);\n    auto sum = a + b + c;\n\
    \    return (sum - max) > max;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto other_sides\
    \ = sides.filter!(x => x != max_side);\n    return max_side * max_side == other_sides[0]\
    \ * other_sides[0] + other_sides[1] * other_sides[1];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    long a2 = sides[0] * sides[0];\n    long\
    \ b2 = sides[1] * sides[1];\n    long c2 = sides[2] * sides[2];\n    return a2\
    \ + b2 == c2;\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n\
    \    auto other_sides = sides.filter!(x => x != max_side);\n    return max_side\
    \ * max_side == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n\
    }", "{\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n\
    \    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    //\
    \ a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2\
    \ + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2\
    \ = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n\
    \    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    //\
    \ a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2\
    \ + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2\
    \ = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n\
    \    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    //\
    \ a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2\
    \ + b^2 = c^2\n    // a^2", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // TODO:\
    \ implement\n    return false;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    // TODO: Implement me\n\
    \    return false;\n}", "{\n    auto sides = tuple(a, b, c);\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    // your code here\n    return false;\n}", "{\n    // Your code here\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2)\
    \ + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    // TODO: Implement me!\n\
    \    return false;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n    return (sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    // your code here\n    return false;\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2],\
    \ 2);\n}", "{\n    // your code here\n    return false;\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n  \
    \  sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    // your code here\n    if(a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long max = max(a, max(b, c));\n    long min = min(a, min(b, c));\n    long\
    \ mid = a + b + c - max - min;\n    if(max * max == mid * mid + min * min)\n \
    \       return true;\n    return false;\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long max = max(a,\
    \ max(b, c));\n    long sum = a + b + c;\n    return max * max == sum - max;\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n  \
    \  auto sum_of_other_sides = sum(sides) - max_side;\n    return max_side * max_side\
    \ == sum_of_other_sides * sum_of_other_sides;\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto sum_of_other_sides = sum(sides)\
    \ - max_side;\n    return max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    // your code here\n    return\
    \ false;\n}", "{\n    // your code here\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    // your code goes here\n \
    \   long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    auto sides = tuple(a, b, c);\n    auto\
    \ max_side = max(sides);\n    auto other_sides = sides.filter!(x => x != max_side);\n\
    \    return max_side * max_side == other_sides[0] * other_sides[0] + other_sides[1]\
    \ * other_sides[1];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2)\
    \ + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    long aa = sides[0];\n  \
    \  long bb = sides[1];\n    long cc = sides[2];\n    return aa * aa + bb * bb\
    \ == cc * cc;\n}", "{\n    return a * a + b * b == c * c;\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n\
    \    auto other_sides = sides.filter!(x => x != max_side);\n    return max_side\
    \ * max_side == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n\
    }", "{\n    // TODO: implement\n    return false;\n}", "{\n    // TODO: Implement\
    \ this function\n    // return true;\n    long max = max(a, max(b, c));\n    long\
    \ min = min(a, min(b, c));\n    long mid = a + b + c - max - min;\n    return\
    \ max * max == mid * mid + min * min;\n}", "{\n    // your code here\n    long[]\
    \ arr = [a, b, c];\n    sort(arr);\n    return arr[0] * arr[0] + arr[1] * arr[1]\
    \ == arr[2] * arr[2];\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side\
    \ = max(sides);\n    auto sum_of_other_sides = a + b + c - max_side;\n    return\
    \ max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n}", "{\n  \
    \  long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // Your code here\n\
    \    return false;\n}", "{\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n \
    \   // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    //\
    \ a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2\
    \ + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2\
    \ = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n\
    \    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    //\
    \ a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2\
    \ + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2\
    \ = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n\
    \    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    //\
    \ a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2\
    \ + b^2 = c^2\n    // a^2 + b^2 = c^2\n    // a^2", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) ==\
    \ pow(sides[2], 2);\n}", "{\n    // If the sum of the squares of the two smaller\
    \ sides is equal to the square of the largest side, \n    // then the triangle\
    \ is a right-angled triangle.\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b,\
    \ c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    auto sides = tuple(a, b, c);\n\
    \    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x => x\
    \ != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    return a * a + b\
    \ * b == c * c;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n   \
    \ return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // TODO:\
    \ implement\n    return false;\n}", "{\n    long max = max(a, max(b, c));\n  \
    \  long min = min(a, min(b, c));\n    long mid = a + b + c - max - min;\n    return\
    \ max * max == mid * mid + min * min;\n}", "{\n    auto sides = tuple(a, b, c);\n\
    \    auto max_side = max(sides);\n    auto sum_of_other_sides = a + b + c - max_side;\n\
    \    return max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n}",
  "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[3] sides = [a,\
    \ b, c];\n    sort(sides);\n    return (sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]);\n}", "{\n    long[] arr = [a, b, c];\n    sort(arr);\n\
    \    return arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n}", "{\n  \
    \  // TODO: implement the function\n    return false;\n}", "{\n    auto sides\
    \ = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    // your code here\n    long[] arr = [a, b, c];\n  \
    \  sort(arr);\n    return arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // your\
    \ code here\n    long[] arr = [a, b, c];\n    sort(arr);\n    return arr[0] *\
    \ arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n}", "{\n    // your code here\n\
    \    //return a*a + b*b == c*c;\n    return a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a;\n}", "{\n    // your code here\n    return (a*a + b*b ==\
    \ c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    auto sides = tuple(a, b, c);\n    auto\
    \ max = maxElement(sides);\n    auto sum = a + b + c;\n    return (sum - max)\
    \ > max;\n}", "{\n    // your code here\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a,\
    \ b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    auto sides = tuple(a, b, c);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long max = max(a, max(b, c));\n    long min = min(a, min(b, c));\n    long\
    \ mid = a + b + c - max - min;\n    return max * max == min * min + mid * mid;\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // Write\
    \ your code here\n    long max = max(a, max(b, c));\n    long sum = a + b + c;\n\
    \    if (sum - max == max)\n        return true;\n    return false;\n}", "{\n\
    \    // TODO: implement\n    return false;\n}", "{\n    // TODO: implement\n \
    \   return false;\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side\
    \ = max(sides);\n    auto other_sides = sides.filter!(x => x != max_side);\n \
    \   return max_side * max_side == other_sides[0] * other_sides[0] + other_sides[1]\
    \ * other_sides[1];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[3]\
    \ sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1],\
    \ 2) == pow(sides[2], 2);\n}", "{\n    auto sides = tuple(a, b, c);\n    auto\
    \ max_side = max(sides);\n    auto sum_of_other_sides = sum(sides) - max_side;\n\
    \    return max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n}",
  "{\n    // TODO: implement this function\n    if(a == 0 || b == 0 || c == 0)\n \
    \       return false;\n    if(a < 0 || b < 0 || c < 0)\n        return false;\n\
    \    if(a == b && b == c)\n        return false;\n    if(a == b || b == c || a\
    \ == c)\n        return false;\n    if(a > b && a > c)\n    {\n        if(a *\
    \ a == b * b + c * c)\n            return true;\n        else\n            return\
    \ false;\n    }\n    else if(b > a && b > c)\n    {\n        if(b * b == a * a\
    \ + c * c)\n            return true;\n        else\n            return false;\n\
    \    }\n    else if(c > a && c > b)\n    {\n        if(c * c == a * a + b * b)\n\
    \            return true;\n        else\n            return false;\n    }\n  \
    \  else\n        return false;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    long[] arr = [a, b, c];\n    sort(arr);\n    return arr[0] * arr[0] + arr[1]\
    \ * arr[1] == arr[2] * arr[2];\n}", "{\n    auto sides = tuple(a, b, c);\n   \
    \ auto max_side = max(sides);\n    auto sum_of_other_sides = sum(sides) - max_side;\n\
    \    return max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n}",
  "{\n    // your code here\n    return false;\n}", "{\n    long[] sides = [a, b,\
    \ c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    // your code here\n    return false;\n\
    }\n/*", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[3]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // a^2 + b^2 = c^2\n\
    \    // a^2 + b^2 - c^2 = 0\n    // a^2 + b^2 - c^2 == 0\n    // a^2 + b^2 ==\
    \ c^2\n    // a^2 + b^2 == pow(c, 2)\n    // pow(a, 2) + pow(b, 2) == pow(c, 2)\n\
    \    // pow(a, 2) + pow(b, 2) == c^2\n    // pow(a, 2) + pow(b, 2) == c*c\n  \
    \  // pow(a, 2) + pow(b, 2) == c*c\n    // pow(a, 2) + pow(b, 2) == c*c\n    //\
    \ pow(a, 2) + pow(b, 2) == c*c\n    // pow(a, 2) + pow(b, 2) == c*c\n    // pow(a,\
    \ 2) + pow(b, 2) == c*c\n    // pow(a, 2) + pow(b, 2) == c*c\n    // pow(a, 2)\
    \ + pow(b, 2) == c*c\n    // pow(a, 2) + pow(b, 2) == c*c\n    // pow(a, 2) +\
    \ pow(b, 2) == c*c\n    // pow(a, 2) + pow(b, 2) == c*c\n    // pow(a, 2) + pow(b,\
    \ 2) == c*c\n    // pow(a, 2) + pow(b, 2) == c*c\n    // pow(a, 2) + pow(b, 2)\
    \ == c*c\n    // pow(a, 2) + pow(b, 2) == c*c\n    // pow(a, 2) + pow(b, 2) ==\
    \ c*c\n    // pow(a, 2) + pow(b, 2) == c*c\n    // pow(a, 2) + pow(b, 2) == c*c\n\
    \    // pow(a, 2) + pow(b, 2) == c*c\n    // pow(a, 2) +", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    // TODO: Implement me!\n    return\
    \ false;\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n\
    \    auto other_sides = sides.filter!(x => x != max_side);\n    return max_side\
    \ * max_side == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n\
    }", "{\n    // a^2 + b^2 = c^2\n    return (a*a + b*b == c*c);\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2];\n}", "{\n    // TODO: implement\n    return\
    \ false;\n}", "{\n    // TODO: implement\n    return false;\n}", "{\n    auto\
    \ sides = tuple(a, b, c);\n    auto max = maxElement(sides);\n    auto sum = a\
    \ + b + c;\n    return (sum - max) > max;\n}", "{\n    // TODO: Implement me\n\
    \    return false;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    long[] sides = [a, b,\
    \ c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    // your code here\n    return false;\n}", "{\n    // your code here\n\
    \    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // TODO: Implement\
    \ me!\n    return false;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    // TODO: Implement me!\n    return false;\n}", "{\n    auto triangle\
    \ = tuple(a, b, c);\n    auto max = maxElement(triangle);\n    auto sum = a +\
    \ b + c;\n    return max * max == sum - max * max;\n}", "{\n    long max = max(a,\
    \ max(b, c));\n    long sum = a + b + c;\n    long rest = sum - max;\n    return\
    \ max * max == rest * rest;\n}", "{\n    // Your code here\n    if (a == 0 ||\
    \ b == 0 || c == 0)\n        return false;\n    if (a == b && b == c)\n      \
    \  return false;\n    if (a == b || b == c || a == c)\n        return false;\n\
    \    if (a > b && a > c)\n        return a * a == b * b + c * c;\n    if (b >\
    \ a && b > c)\n        return b * b == a * a + c * c;\n    if (c > a && c > b)\n\
    \        return c * c == a * a + b * b;\n    return false;\n}", "{\n    long[]\
    \ sides = [a, b, c];\n    sort(sides);\n    return (sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]);\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n    return\
    \ sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n\
    \    // your code here\n    return false;\n}", "{\n    // TODO: Implement me\n\
    \    return false;\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side\
    \ = max(sides);\n    auto sum_of_other_sides = sum(sides) - max_side;\n    return\
    \ max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n}", "{\n  \
    \  long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0]\
    \ + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    auto sum_of_other_sides = other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n    return max_side * max_side == sum_of_other_sides;\n\
    }", "{\n    // sort the sides\n    auto sides = tuple(a, b, c);\n    sort(sides);\n\
    \    // check if the square of the hypotenuse is equal to the sum of the squares\
    \ of the other two sides\n    return pow(sides[2], 2) == pow(sides[0], 2) + pow(sides[1],\
    \ 2);\n}", "{\n    long[3] sides = [a, b, c];\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // your\
    \ code here\n    long max = max(a, b, c);\n    long sum = a + b + c;\n    return\
    \ max * max == sum - max * max;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]);\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n  \
    \  sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return\
    \ pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    // https://en.wikipedia.org/wiki/Pythagorean_theorem\n\
    \    // a^2 + b^2 = c^2\n    // a^2 + b^2 == c^2\n    // a^2 + b^2 == pow(c, 2)\n\
    \    // pow(a, 2) + pow(b, 2) == pow(c, 2)\n    // pow(a, 2) + pow(b, 2) == c\
    \ * c\n    // pow(a, 2) + pow(b, 2) == c * c\n    // pow(a, 2) + pow(b, 2) ==\
    \ c ^ 2\n    // pow(a, 2) + pow(b, 2) == c ^ 2\n    // pow(a, 2) + pow(b, 2) ==\
    \ c ^^ 2\n    // pow(a, 2) + pow(b, 2) == c ^^ 2\n    // pow(a, 2) + pow(b, 2)\
    \ == c ^^ 2\n    // pow(a, 2) + pow(b, 2) == c ^^ 2\n    // pow(a, 2) + pow(b,\
    \ 2) == c ^^ 2\n    // pow(a, 2) + pow(b, 2) == c ^^ 2\n    // pow(a, 2) + pow(b,\
    \ 2) == c ^^ 2\n    // pow(a, 2) + pow(b, 2) == c ^^ 2\n    // pow(a, 2) + pow(b,\
    \ 2) == c ^^ 2\n    // pow(a, 2) + pow(b, 2) == c ^^ 2\n    // pow(a, 2) + pow(b,\
    \ 2) == c ^^ 2\n    // pow(a, 2) + pow(b, 2) == c ^^ 2\n    // pow(a, 2) + pow(b,\
    \ 2) == c ^^ 2\n    // pow(a, 2) + pow(b, 2) == c ^^ 2\n    // pow(a, 2) + pow(b,\
    \ 2) == c ^^ 2\n    // pow(a, 2) + pow(b, 2) == c ^^ 2\n    // pow(a", "{\n  \
    \  auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto other_sides\
    \ = sides.filter!(x => x != max_side);\n    auto sum_of_other_sides = reduce!((a,\
    \ b) => a + b)(other_sides);\n    return max_side * max_side == sum_of_other_sides;\n\
    }", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    long[] sides = [a, b, c];\n  \
    \  sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    // return (a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a);\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b)\
    \ || (b*b + c*c == a*a);\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
