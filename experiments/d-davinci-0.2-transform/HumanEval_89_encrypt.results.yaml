language: d
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30vlbyld.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30vlbyld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdid56th5.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdid56th5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if (c == 'z')\n            result ~= 'b';\n\
    \        else if (c == 'y')\n            result ~= 'a';\n        else\n      \
    \      result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjkwo85t9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpjkwo85t9.__unittest_L33_C1() [0x427c5a]

    ??:? void tmpjkwo85t9.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3ylwlpe.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmph3ylwlpe.__unittest_L33_C1() [0x427c5a]

    ??:? void tmph3ylwlpe.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        int i = c;\n        if(i >= 97\
    \ && i <= 122)\n        {\n            i = (i + 2 * 2) % 122;\n            if(i\
    \ < 97)\n            {\n                i += 97;\n            }\n        }\n \
    \       result ~= cast(char)i;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n  \
    \  assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51zfaq4_.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280ad]

    ??:? void tmp51zfaq4_.__unittest_L37_C1() [0x427c9e]

    ??:? void tmp51zfaq4_.__modtest() [0x427e30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c743]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b652]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430029]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b629]

    ??:? runModuleUnitTests [0x42c519]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wc6kftk.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp5wc6kftk.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp5wc6kftk.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n\
    \    return result;\n}\n/*\nCreate a function decrypt that takes a string as an\
    \ argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n    >>> decrypt(\"\
    lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>>\
    \ decrypt(\"kj\")\n    \"gf\"\n    >>> decrypt(\"ix\")\n    \"et\"\n*/\nstring\
    \ decrypt(string s) \n{\n    string result = \"\";\n    foreach(c; s)\n    {\n\
    \        result ~= (char)(c - 2 * 2);\n    }\n    return result;\n}\n/*\nCreate\
    \ a function encrypt that takes a string as an argument and\n    returns a string\
    \ encrypted with the alphabet being rotated. \n    The alphabet should be rotated\
    \ in a manner such that the letters \n    shift down by two multiplied to two\
    \ places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"\
    asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>>\
    \ encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\n/*\nCreate a function decrypt that takes a string\
    \ as an argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n    >>> decrypt(\"\
    lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>>\
    \ decrypt(\"kj\")\n    \"gf\"\n    >>> decrypt(\"ix\")\n    \"et\nunittest\n{\n\
    \    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdsj3frhg.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    /tmp/tmpdsj3frhg.d(48): Error: C style cast illegal, use `cast(char)(c - 2 * 2)`

    /tmp/tmpdsj3frhg.d(73): Error: C style cast illegal, use `cast(char)(c + 2 * 2)`

    /tmp/tmpdsj3frhg.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdsj3frhg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66fa8uji.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66fa8uji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string encrypted\
    \ = \"\";\n    foreach(char c; s)\n    {\n        encrypted ~= (c + 2 * 2);\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjgy5ioqz.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmpjgy5ioqz.__unittest_L28_C1() [0x427d1e]

    ??:? void tmpjgy5ioqz.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30vlbyld.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30vlbyld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppzvm1yrd.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmppzvm1yrd.__unittest_L28_C1() [0x427d1e]

    ??:? void tmppzvm1yrd.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjru9ql28.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmpjru9ql28.__unittest_L28_C1() [0x427d1e]

    ??:? void tmpjru9ql28.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if (c == 'z')\n            result\
    \ ~= 'b';\n        else if (c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqj5zrnf.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpfqj5zrnf.__unittest_L33_C1() [0x427c5a]

    ??:? void tmpfqj5zrnf.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph2p384sb.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph2p384sb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)((c - 'a' + 2\
    \ * 2) % 26 + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpks4r6uv0.d(24): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpks4r6uv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3ylwlpe.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmph3ylwlpe.__unittest_L33_C1() [0x427c5a]

    ??:? void tmph3ylwlpe.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)((c - 'a' + 2*2)\
    \ % 26 + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1bla1rhi.d(24): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bla1rhi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3ylwlpe.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmph3ylwlpe.__unittest_L33_C1() [0x427c5a]

    ??:? void tmph3ylwlpe.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n \
    \   }\n    return result;\n}\n/*\nCreate a function decrypt that takes a string\
    \ as an argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n    >>> decrypt(\"\
    lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>>\
    \ decrypt(\"kj\")\n    \"gf\"\n    >>> decrypt(\"ix\")\n    \"et\"\n*/\nstring\
    \ decrypt(string s) \n{\n    string result = \"\";\n    foreach(c; s) \n    {\n\
    \        result ~= (c - 2 * 2).to!char;\n    }\n    return result;\n}\n/*\nCreate\
    \ a function encrypt that takes a string as an argument and\n    returns a string\
    \ encrypted with the alphabet being rotated. \n    The alphabet should be rotated\
    \ in a manner such that the letters \n    shift down by two multiplied to two\
    \ places.\n    For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"\
    asdfghjkl\")\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>>\
    \ encrypt(\"et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string\
    \ result = \"\";\n    foreach(c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n\
    \    }\n    return result;\n}\n/*\nCreate a function decrypt that takes a string\
    \ as an argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n    >>> decrypt(\"\
    lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>>\
    \ decrypt(\"kj\")\n    \"gf\"\n   \nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpay1gqm7h.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpay1gqm7h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (cast(char)(c + 2 * 2));\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnxabr8zr.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428085]

    ??:? void tmpnxabr8zr.__unittest_L28_C1() [0x427c76]

    ??:? void tmpnxabr8zr.__modtest() [0x427e08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c71b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430001]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c4f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if (c >= 'a' && c <= 'z')\n  \
    \      {\n            result ~= (char)(((c - 'a' + 2) % 26) + 'a');\n        }\n\
    \        else if (c >= 'A' && c <= 'Z')\n        {\n            result ~= (char)(((c\
    \ - 'A' + 2) % 26) + 'A');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmul9q6a.d(26): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    /tmp/tmpvmul9q6a.d(30): Error: C style cast illegal, use `cast(char)((c - ''A''
    + 2) % 26 + ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmul9q6a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66fa8uji.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66fa8uji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wc6kftk.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp5wc6kftk.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp5wc6kftk.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp67tm5qxe.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp67tm5qxe.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp67tm5qxe.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        if (c >= 'a' && c <= 'z') \n\
    \        {\n            result ~= (char)((c - 'a' + 2 * 2) % 26 + 'a');\n    \
    \    }\n        else if (c >= 'A' && c <= 'Z') \n        {\n            result\
    \ ~= (char)((c - 'A' + 2 * 2) % 26 + 'A');\n        }\n        else \n       \
    \ {\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprk5cfd7d.d(26): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    /tmp/tmprk5cfd7d.d(30): Error: C style cast illegal, use `cast(char)((c - ''A''
    + 2 * 2) % 26 + ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprk5cfd7d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdid56th5.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdid56th5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if (c == 'z')\n            result\
    \ ~= 'b';\n        else if (c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqj5zrnf.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpfqj5zrnf.__unittest_L33_C1() [0x427c5a]

    ??:? void tmpfqj5zrnf.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wc6kftk.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp5wc6kftk.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp5wc6kftk.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        int index = alphabet.find(c);\n        encrypted ~= alphabet[(index\
    \ + 2*2) % alphabet.length];\n    }\n    return encrypted;\n}\nunittest\n{\n \
    \   alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n \
    \   assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmdbjfmjn.d(25): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmdbjfmjn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30vlbyld.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30vlbyld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2) % 26 + 'a';\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp37hydwno.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42808d]

    ??:? void tmp37hydwno.__unittest_L28_C1() [0x427b52]

    ??:? void tmp37hydwno.__modtest() [0x427e10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c723]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430009]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c4f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + (c < 'x'\
    \ ? 2 : -24));\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpphzxkdsk.d(24): Error: C style cast illegal, use `cast(char)(c
    + (c < ''x'' ? 2 : -24))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphzxkdsk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2*2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppd74wn84.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmppd74wn84.__unittest_L28_C1() [0x427d1e]

    ??:? void tmppd74wn84.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string encrypted\
    \ = \"\";\n    foreach(char c; s)\n    {\n        encrypted ~= (c + 2 * 2);\n\
    \    }\n    return encrypted;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjgy5ioqz.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmpjgy5ioqz.__unittest_L28_C1() [0x427d1e]

    ??:? void tmpjgy5ioqz.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string encrypted = \"\";\n    foreach(char\
    \ c; s)\n    {\n        int index = alphabet.find(c);\n        encrypted ~= alphabet[(index\
    \ + (2 * 2)) % alphabet.length];\n    }\n    return encrypted;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqxbsx6s1.d(25): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqxbsx6s1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (cast(char)((c + 2*2\
    \ - 'a') % 26 + 'a'));\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= (char)(c + 2);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpckl6mxmj.d(29): Error: C style cast illegal, use `cast(char)(c
    + 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpckl6mxmj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppzvm1yrd.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmppzvm1yrd.__unittest_L28_C1() [0x427d1e]

    ??:? void tmppzvm1yrd.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wc6kftk.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp5wc6kftk.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp5wc6kftk.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (c + 2*2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyaezxcx0.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmpyaezxcx0.__unittest_L28_C1() [0x427d1e]

    ??:? void tmpyaezxcx0.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30vlbyld.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30vlbyld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= char(c + 2 * 2);\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hvq_4kr.d(24): Error: cannot implicitly convert expression `cast(int)c
    + 4` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hvq_4kr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= (char)(c + 2);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpckl6mxmj.d(29): Error: C style cast illegal, use `cast(char)(c
    + 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpckl6mxmj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdid56th5.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdid56th5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3ylwlpe.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmph3ylwlpe.__unittest_L33_C1() [0x427c5a]

    ??:? void tmph3ylwlpe.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        if(c >= 'a' && c <= 'z') \n \
    \       {\n            result ~= (c + 2) % 26 + 'a';\n        }\n        else\
    \ if(c >= 'A' && c <= 'Z') \n        {\n            result ~= (c + 2) % 26 + 'A';\n\
    \        }\n        else \n        {\n            result ~= c;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkfrllfos.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428135]

    ??:? void tmpkfrllfos.__unittest_L39_C1() [0x427bf6]

    ??:? void tmpkfrllfos.__modtest() [0x427eb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6da]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430560]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43003d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b1]

    ??:? runModuleUnitTests [0x42c5a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428584]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string ret;\n \
    \   foreach(c; s)\n    {\n        ret ~= (c + 2 * 2).to!char;\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy7zcb9th.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7zcb9th.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        int index = c - 'a';\n        result ~=\
    \ (char)('a' + (index + 2 * 2) % 26);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsikrqjpc.d(25): Error: C style cast illegal, use `cast(char)(''a''
    + (index + 2 * 2) % 26)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsikrqjpc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66fa8uji.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66fa8uji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdid56th5.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdid56th5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s) \n    {\n        result ~= (c + 2 * 2);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprtxjdrfo.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmprtxjdrfo.__unittest_L28_C1() [0x427d1e]

    ??:? void tmprtxjdrfo.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp67tm5qxe.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp67tm5qxe.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp67tm5qxe.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66fa8uji.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66fa8uji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wc6kftk.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp5wc6kftk.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp5wc6kftk.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30vlbyld.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30vlbyld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        int i = c;\n        i = (i + (2\
    \ * 2)) % 128;\n        result ~= cast(char)i;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") ==\
    \ \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpikel3x5k.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x428095]

    ??:? void tmpikel3x5k.__unittest_L30_C1() [0x427c86]

    ??:? void tmpikel3x5k.__modtest() [0x427e18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c72b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b63a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430011]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b611]

    ??:? runModuleUnitTests [0x42c501]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (char)(c + 2*2);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpywdngydz.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpywdngydz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3ylwlpe.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmph3ylwlpe.__unittest_L33_C1() [0x427c5a]

    ??:? void tmph3ylwlpe.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        if(c == 'z') \n        {\n  \
    \          result ~= 'b';\n        } \n        else if(c == 'y') \n        {\n\
    \            result ~= 'a';\n        } \n        else \n        {\n          \
    \  result ~= c + 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n  \
    \  assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx9qq4mp.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpqx9qq4mp.__unittest_L39_C1() [0x427c5a]

    ??:? void tmpqx9qq4mp.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30vlbyld.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30vlbyld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3ylwlpe.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmph3ylwlpe.__unittest_L33_C1() [0x427c5a]

    ??:? void tmph3ylwlpe.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\n/*\nCreate a function\
    \ decrypt that takes a string as an argument and\n    returns a string decrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift up by two multiplied to two places.\n    For\
    \ example:\n    >>> decrypt(\"lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\"\
    )\n    \"asdfghjkl\"\n    >>> decrypt(\"kj\")\n    \"gf\"\n    >>> decrypt(\"\
    ix\")\n    \"et\"\n*/\nstring decrypt(string s) \n{\n    string result = \"\"\
    ;\n    foreach(char c; s)\n    {\n        if(c == 'b')\n            result ~=\
    \ 'z';\n        else if(c == 'a')\n            result ~= 'y';\n        else\n\
    \            result ~= c - 2;\n    }\n    return result;\n}\n/*\nCreate a function\
    \ encrypt_decrypt that takes a string as an argument and\n    returns a string\
    \ encrypted and then decrypted. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt_decrypt(\"hi\")\n    \"hi\"\n    >>> encrypt_decrypt(\"\
    asdfghjkl\")\n    \"asdfghjkl\"\n    >>> encrypt_decrypt(\"gf\")\n    \"gf\"\n\
    \    >>> encrypt_decrypt(\"et\")\n    \"et\"\n*/\nstring encrypt_decrypt(string\
    \ s) \n{\n    return decrypt(encrypt(s));\n}\n/*\nCreate a function encrypt_decrypt_encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted, then\
    \ decrypted, and then encrypted. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1kfltey.d(81): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1kfltey.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(immutable c; s)\n    {\n        result ~= (char)((c - 'a' + 2 * 2)\
    \ % 26 + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbao5c1o9.d(24): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbao5c1o9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8co_up52.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8co_up52.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    string result = \"\";\n    foreach(char\
    \ c; s)\n    {\n        int index = alphabet.find(c);\n        if(index != -1)\n\
    \        {\n            int newIndex = (index + 2*2) % alphabet.length;\n    \
    \        result ~= alphabet[newIndex];\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpom39wx02.d(25): Error: no property `find` for type `string`

    /tmp/tmpom39wx02.d(28): Error: cannot implicitly convert expression `cast(ulong)(index
    + 4) % alphabet.length` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpom39wx02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdid56th5.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdid56th5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s) \n    {\n        if(c == 'z') \n        {\n          \
    \  result ~= 'b';\n        }\n        else if(c == 'y') \n        {\n        \
    \    result ~= 'a';\n        }\n        else \n        {\n            result ~=\
    \ c + 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplhoob31a.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmplhoob31a.__unittest_L39_C1() [0x427c5a]

    ??:? void tmplhoob31a.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66fa8uji.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66fa8uji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\n/*\nCreate a function\
    \ decrypt that takes a string as an argument and\n    returns a string decrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift up by two multiplied to two places.\n    For\
    \ example:\n    >>> decrypt(\"lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\"\
    )\n    \"asdfghjkl\"\n    >>> decrypt(\"kj\")\n    \"gf\"\n    >>> decrypt(\"\
    ix\")\n    \"et\"\n*/\nstring decrypt(string s) \n{\n    string result = \"\"\
    ;\n    foreach(char c; s)\n    {\n        if(c == 'b')\n            result ~=\
    \ 'z';\n        else if(c == 'a')\n            result ~= 'y';\n        else\n\
    \            result ~= c - 2;\n    }\n    return result;\n}\n/*\nCreate a function\
    \ encrypt that takes a string as an argument and\n    returns a string encrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\n/*\nCreate a function\
    \ decrypt that takes a string as an argument and\n\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz3blk6wf.d(92): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3blk6wf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66fa8uji.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66fa8uji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2) % 26 + 'a';\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp37hydwno.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42808d]

    ??:? void tmp37hydwno.__unittest_L28_C1() [0x427b52]

    ??:? void tmp37hydwno.__modtest() [0x427e10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c723]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430009]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c4f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        if(c == 'z') \n        {\n  \
    \          result ~= 'b';\n        }\n        else if(c == 'y') \n        {\n\
    \            result ~= 'a';\n        }\n        else \n        {\n           \
    \ result ~= c + 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi5jqxkd1.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpi5jqxkd1.__unittest_L39_C1() [0x427c5a]

    ??:? void tmpi5jqxkd1.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (cast(char)((c + 2\
    \ * 2) % 256));\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo1aytltt.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42808d]

    ??:? void tmpo1aytltt.__unittest_L28_C1() [0x427c7e]

    ??:? void tmpo1aytltt.__modtest() [0x427e10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c723]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430009]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c4f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        int i = c;\n        if(i >= 97\
    \ && i <= 122) \n        {\n            i = i + 2;\n            if(i > 122) \n\
    \            {\n                i = i - 26;\n            }\n        }\n      \
    \  result ~= cast(char)i;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0vuo3tmb.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4280a5]

    ??:? void tmp0vuo3tmb.__unittest_L37_C1() [0x427b66]

    ??:? void tmp0vuo3tmb.__modtest() [0x427e24]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430021]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ffad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if (c == 'z')\n            result\
    \ ~= 'b';\n        else if (c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfqj5zrnf.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpfqj5zrnf.__unittest_L33_C1() [0x427c5a]

    ??:? void tmpfqj5zrnf.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptpvcir82.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmptpvcir82.__unittest_L33_C1() [0x427c5a]

    ??:? void tmptpvcir82.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        char newChar = c;\n        if(c\
    \ >= 'a' && c <= 'z')\n        {\n            newChar = c + 2;\n            if(newChar\
    \ > 'z')\n            {\n                newChar = newChar - 'z' + 'a' - 1;\n\
    \            }\n        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n\
    \            newChar = c + 2;\n            if(newChar > 'Z')\n            {\n\
    \                newChar = newChar - 'Z' + 'A' - 1;\n            }\n        }\n\
    \        result ~= newChar;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp57gz26mb.d(27): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp57gz26mb.d(30): Error: cannot implicitly convert expression `cast(int)newChar
    - 122 + 97 - 1` of type `int` to `char`

    /tmp/tmp57gz26mb.d(35): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    /tmp/tmp57gz26mb.d(38): Error: cannot implicitly convert expression `cast(int)newChar
    - 90 + 65 - 1` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57gz26mb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8co_up52.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8co_up52.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= (c + 2);\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n \
    \   assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprbm76jqb.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmprbm76jqb.__unittest_L33_C1() [0x427c5a]

    ??:? void tmprbm76jqb.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppzvm1yrd.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmppzvm1yrd.__unittest_L28_C1() [0x427d1e]

    ??:? void tmppzvm1yrd.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30vlbyld.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30vlbyld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (char)(c + 2*2);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpywdngydz.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpywdngydz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66fa8uji.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66fa8uji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(immutable char c; s)\n    {\n        if(c == 'z')\n     \
    \       result ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n\
    \        else\n            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpihkpnc5p.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpihkpnc5p.__unittest_L33_C1() [0x427c5a]

    ??:? void tmpihkpnc5p.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfg24m55x.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfg24m55x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wc6kftk.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp5wc6kftk.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp5wc6kftk.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2) % 26 + 'a';\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp37hydwno.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42808d]

    ??:? void tmp37hydwno.__unittest_L28_C1() [0x427b52]

    ??:? void tmp37hydwno.__modtest() [0x427e10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c723]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430009]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c4f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        int index = c - 'a';\n      \
    \  index = (index + 2 * 2) % 26;\n        result ~= (char)(index + 'a');\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n  \
    \  assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmb9_ivp.d(26): Error: C style cast illegal, use `cast(char)(index
    + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmb9_ivp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= (char)(c + 2);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpckl6mxmj.d(29): Error: C style cast illegal, use `cast(char)(c
    + 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpckl6mxmj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfg24m55x.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfg24m55x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    int len = s.length;\n\
    \    string result = \"\";\n    foreach(i; 0..len)\n    {\n        result ~= (s[i]\
    \ + 2*2);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdijd9sz6.d(21): Error: cannot implicitly convert expression `s.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdijd9sz6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwm7nu1a3.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwm7nu1a3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        if(c == 'z') \n        {\n  \
    \          result ~= 'b';\n        } \n        else if(c == 'y') \n        {\n\
    \            result ~= 'a';\n        } \n        else \n        {\n          \
    \  result ~= c + 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n  \
    \  assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx9qq4mp.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpqx9qq4mp.__unittest_L39_C1() [0x427c5a]

    ??:? void tmpqx9qq4mp.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3ylwlpe.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmph3ylwlpe.__unittest_L33_C1() [0x427c5a]

    ??:? void tmph3ylwlpe.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (char)((c - 'a' + 2 * 2) % 26\
    \ + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbhmosyvj.d(24): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbhmosyvj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\n/*\nCreate a function decrypt that takes a string\
    \ as an argument and\n    returns a string decrypted with the alphabet being rotated.\
    \ \n    The alphabet should be rotated in a manner such that the letters \n  \
    \  shift up by two multiplied to two places.\n    For example:\n    >>> decrypt(\"\
    lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>>\
    \ decrypt(\"kj\")\n    \"gf\"\n    >>> decrypt(\"ix\")\n    \"et\"\n*/\nstring\
    \ decrypt(string s) \n{\n    string result = \"\";\n    foreach(char c; s)\n \
    \   {\n        result ~= (char)(c - 2 * 2);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppax3bcoa.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    /tmp/tmppax3bcoa.d(48): Error: C style cast illegal, use `cast(char)(c - 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppax3bcoa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30vlbyld.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30vlbyld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)((c - 'a' + 2\
    \ * 2) % 26 + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpks4r6uv0.d(24): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpks4r6uv0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        if(c == 'z') \n        {\n  \
    \          result ~= 'b';\n        } \n        else if(c == 'y') \n        {\n\
    \            result ~= 'a';\n        } \n        else \n        {\n          \
    \  result ~= c + 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n  \
    \  assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx9qq4mp.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpqx9qq4mp.__unittest_L39_C1() [0x427c5a]

    ??:? void tmpqx9qq4mp.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp67tm5qxe.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp67tm5qxe.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp67tm5qxe.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdid56th5.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdid56th5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjru9ql28.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmpjru9ql28.__unittest_L28_C1() [0x427d1e]

    ??:? void tmpjru9ql28.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        if(c == 'z') \n        {\n  \
    \          result ~= 'b';\n        }\n        else if(c == 'y') \n        {\n\
    \            result ~= 'a';\n        }\n        else \n        {\n           \
    \ result ~= c + 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi5jqxkd1.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpi5jqxkd1.__unittest_L39_C1() [0x427c5a]

    ??:? void tmpi5jqxkd1.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)((c - 'a' + 2*2)\
    \ % 26 + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1bla1rhi.d(24): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2 * 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bla1rhi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s) \n    {\n        result ~= (c + 2 * 2).to!char;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpexpzkb57.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexpzkb57.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2) % 26 + 'a';\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp37hydwno.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42808d]

    ??:? void tmp37hydwno.__unittest_L28_C1() [0x427b52]

    ??:? void tmp37hydwno.__modtest() [0x427e10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c723]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430009]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c4f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return\
    \ result;\n}\n/*\nCreate a function decrypt that takes a string as an argument\
    \ and\n    returns a string decrypted with the alphabet being rotated. \n    The\
    \ alphabet should be rotated in a manner such that the letters \n    shift up\
    \ by two multiplied to two places.\n    For example:\n    >>> decrypt(\"lm\")\n\
    \    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt(\"\
    kj\")\n    \"gf\"\n    >>> decrypt(\"ix\")\n    \"et\"\n*/\nstring decrypt(string\
    \ s) \n{\n    string result;\n    foreach(char c; s)\n    {\n        result ~=\
    \ (c - 2 * 2);\n    }\n    return result;\n}\n/*\nCreate a function encrypt2 that\
    \ takes a string as an argument and\n    returns a string encrypted with the alphabet\
    \ being rotated. \n    The alphabet should be rotated in a manner such that the\
    \ letters \n    shift down by two multiplied to two places.\n    For example:\n\
    \    >>> encrypt2(\"hi\")\n    \"lm\"\n    >>> encrypt2(\"asdfghjkl\")\n    \"\
    ewhjklnop\"\n    >>> encrypt2(\"gf\")\n    \"kj\"\n    >>> encrypt2(\"et\")\n\
    \    \"ix\"\n    \n*/\nstring encrypt2(string s) \n{\n    string result;\n   \
    \ foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return\
    \ result;\n}\n/*\nCreate a function decrypt2 that takes a string as an argument\
    \ and\n    returns a string decrypted with the alphabet being rotated. \n    The\
    \ alphabet should be rotated in a manner such that the letters \n    shift up\
    \ by two multiplied to two places.\n    For example:\n    >>> decrypt2(\"lm\"\
    )\n    \"hi\"\n    >>> decrypt2(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt2(\"\
    kj\")\n    \"gf\"\n    >>> decrypt2(\"ix\")\n   \nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5pxn7bfz.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5pxn7bfz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp67tm5qxe.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp67tm5qxe.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp67tm5qxe.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdid56th5.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdid56th5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wc6kftk.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp5wc6kftk.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp5wc6kftk.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n\
    \            result ~= (cast(char)((c - 'a' + 2) % 26 + 'a'));\n        }\n  \
    \      else if(c >= 'A' && c <= 'Z')\n        {\n            result ~= (cast(char)((c\
    \ - 'A' + 2) % 26 + 'A'));\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\n/*\nCreate a function decrypt\
    \ that takes a string as an argument and\n    returns a string decrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift up by two multiplied to two places.\n    For\
    \ example:\n    >>> decrypt(\"lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\"\
    )\n    \"asdfghjkl\"\n    >>> decrypt(\"kj\")\n    \"gf\"\n    >>> decrypt(\"\
    ix\")\n    \"et\"\n*/\nstring decrypt(string s) \n{\n    string result;\n    foreach(char\
    \ c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n            result\
    \ ~= (cast(char)((c - 'a' - 2 + 26) % 26 + 'a'));\n        }\n        else if(c\
    \ >= 'A' && c <= 'Z')\n        {\n            result ~= (cast(char)((c - 'A' -\
    \ 2 + 26) % 26 + 'A'));\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result;\n}\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwprxnhi9.d(74): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwprxnhi9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)((c - 'a' + 2)\
    \ % 26 + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzw3p1s58.d(24): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzw3p1s58.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwjwz9b2.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmpbwjwz9b2.__unittest_L28_C1() [0x427d1e]

    ??:? void tmpbwjwz9b2.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppzvm1yrd.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmppzvm1yrd.__unittest_L28_C1() [0x427d1e]

    ??:? void tmppzvm1yrd.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= rotate(c, 2 * 2);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6wh6h5y.d(24): Error: undefined identifier `rotate`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6wh6h5y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n \
    \   assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\")\
    \ == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpipjha1mh.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpipjha1mh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        int i = c;\n        i += 2 * 2;\n\
    \        if(i > 122)\n        {\n            i -= 26;\n        }\n        result\
    \ ~= cast(char)i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp66fa8uji.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66fa8uji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if(c >= 'a' && c <= 'z')\n        {\n\
    \            result ~= (cast(char)((cast(int)(c) + 2 * 2 - 97) % 26 + 97));\n\
    \        }\n        else if(c >= 'A' && c <= 'Z')\n        {\n            result\
    \ ~= (cast(char)((cast(int)(c) + 2 * 2 - 65) % 26 + 65));\n        }\n       \
    \ else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return\
    \ result;\n}\n/*\nCreate a function decrypt that takes a string as an argument\
    \ and\n    returns a string decrypted with the alphabet being rotated. \n    The\
    \ alphabet should be rotated in a manner such that the letters \n    shift up\
    \ by two multiplied to two places.\n    For example:\n    >>> decrypt(\"lm\")\n\
    \    \"hi\"\n    >>> decrypt(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt(\"\
    kj\")\n    \"gf\"\n    >>> decrypt(\"ix\")\n    \"et\"\n*/\nstring decrypt(string\
    \ s) \n{\n    string result;\n    foreach(char c; s)\n    {\n        result ~=\
    \ (c - 2 * 2);\n    }\n    return result;\n}\n/*\nCreate a function encrypt2 that\
    \ takes a string as an argument and\n    returns a string encrypted with the alphabet\
    \ being rotated. \n    The alphabet should be rotated in a manner such that the\
    \ letters \n    shift down by two multiplied to two places.\n    For example:\n\
    \    >>> encrypt2(\"hi\")\n    \"lm\"\n    >>> encrypt2(\"asdfghjkl\")\n    \"\
    ewhjklnop\"\n    >>> encrypt2(\"gf\")\n    \"kj\"\n    >>> encrypt2(\"et\")\n\
    \    \"ix\"\n    \n*/\nstring encrypt2(string s) \n{\n    string result;\n   \
    \ foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return\
    \ result;\n}\n/*\nCreate a function decrypt2 that takes a string as an argument\
    \ and\n    returns a string decrypted with the alphabet being rotated. \n    The\
    \ alphabet should be rotated in a manner such that the letters \n    shift up\
    \ by two multiplied to two places.\n    For example:\n    >>> decrypt2(\"lm\"\
    )\n    \"hi\"\n    >>> decrypt2(\"ewhjklnop\")\n    \"asdfghjkl\"\n    >>> decrypt2(\"\
    kj\")\n    \"gf\"\n    >>> decrypt2(\"ix\")\n   \nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5pxn7bfz.d(77): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5pxn7bfz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbwjwz9b2.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmpbwjwz9b2.__unittest_L28_C1() [0x427d1e]

    ??:? void tmpbwjwz9b2.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30vlbyld.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30vlbyld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)((c - 'a' + 2)\
    \ % 26 + 'a');\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzw3p1s58.d(24): Error: C style cast illegal, use `cast(char)((c
    - ''a'' + 2) % 26 + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzw3p1s58.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wc6kftk.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp5wc6kftk.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp5wc6kftk.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s) \n    {\n        if(c == 'z') \n        {\n          \
    \  result ~= 'b';\n        }\n        else if(c == 'y') \n        {\n        \
    \    result ~= 'a';\n        }\n        else \n        {\n            result ~=\
    \ c + 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplhoob31a.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmplhoob31a.__unittest_L39_C1() [0x427c5a]

    ??:? void tmplhoob31a.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        if(c == 'z') \n        {\n  \
    \          result ~= 'b';\n        }\n        else if(c == 'y') \n        {\n\
    \            result ~= 'a';\n        }\n        else \n        {\n           \
    \ result ~= c + 2;\n        }\n    }\n    return result;\n}\n/*\nCreate a function\
    \ decrypt that takes a string as an argument and\n    returns a string decrypted\
    \ with the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift up by two multiplied to two places.\n    For\
    \ example:\n    >>> decrypt(\"lm\")\n    \"hi\"\n    >>> decrypt(\"ewhjklnop\"\
    )\n    \"asdfghjkl\"\n    >>> decrypt(\"kj\")\n    \"gf\"\n    >>> decrypt(\"\
    ix\")\n    \"et\"\n*/\nstring decrypt(string s) \n{\n    string result = \"\"\
    ;\n    foreach(char c; s) \n    {\n        if(c == 'b') \n        {\n        \
    \    result ~= 'z';\n        }\n        else if(c == 'a') \n        {\n      \
    \      result ~= 'y';\n        }\n        else \n        {\n            result\
    \ ~= c - 2;\n        }\n    }\n    return result;\n}\n/*\nCreate a function encrypt_file\
    \ that takes a file name as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt_file(\"test.txt\")\n    \"ewhjklnop\"\n*/\nstring\
    \ encrypt_file(string file_name) \n{\n    string result = \"\";\n    string[]\
    \ lines = readText(file_name);\n    foreach(string line; lines) \n    {\n    \
    \    result ~= encrypt(line);\n    }\n    return result;\n}\n/*\nCreate a function\
    \ decrypt_file that takes a file name as an argument and\n    returns a string\
    \ decrypted with the alphabet being\nunittest\n{\n    alias candidate = encrypt;\n\
    \n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ghscvmc.d(93): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ghscvmc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= char(c + 2);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpassa6sv1.d(29): Error: cannot implicitly convert expression `cast(int)c
    + 2` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpassa6sv1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        if(c == 'z') \n        {\n  \
    \          result ~= 'b';\n        } \n        else if(c == 'y') \n        {\n\
    \            result ~= 'a';\n        } \n        else \n        {\n          \
    \  result ~= c + 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n  \
    \  assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx9qq4mp.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpqx9qq4mp.__unittest_L39_C1() [0x427c5a]

    ??:? void tmpqx9qq4mp.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s) \n    {\n        if(c == 'z') \n        {\n          \
    \  result ~= 'b';\n        }\n        else if(c == 'y') \n        {\n        \
    \    result ~= 'a';\n        }\n        else \n        {\n            result ~=\
    \ c + 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplhoob31a.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmplhoob31a.__unittest_L39_C1() [0x427c5a]

    ??:? void tmplhoob31a.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(immutable char c; s) \n    {\n        immutable int index = c.to!int\
    \ - 'a'.to!int;\n        immutable int newIndex = (index + 2 * 2) % 26;\n    \
    \    result ~= cast(char)('a'.to!int + newIndex);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\"\
    ) == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplx1837l4.d(24): Error: no property `to` for type `immutable(char)`

    /tmp/tmplx1837l4.d(24): Error: no property `to` for type `char`

    /tmp/tmplx1837l4.d(26): Error: no property `to` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplx1837l4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(immutable c; s) \n    {\n        immutable char c2 = c;\n       \
    \ immutable char c3 = c;\n        immutable char c4 = c;\n        immutable char\
    \ c5 = c;\n        immutable char c6 = c;\n        immutable char c7 = c;\n  \
    \      immutable char c8 = c;\n        immutable char c9 = c;\n        immutable\
    \ char c10 = c;\n        immutable char c11 = c;\n        immutable char c12 =\
    \ c;\n        immutable char c13 = c;\n        immutable char c14 = c;\n     \
    \   immutable char c15 = c;\n        immutable char c16 = c;\n        immutable\
    \ char c17 = c;\n        immutable char c18 = c;\n        immutable char c19 =\
    \ c;\n        immutable char c20 = c;\n        immutable char c21 = c;\n     \
    \   immutable char c22 = c;\n        immutable char c23 = c;\n        immutable\
    \ char c24 = c;\n        immutable char c25 = c;\n        immutable char c26 =\
    \ c;\n        immutable char c27 = c;\n        immutable char c28 = c;\n     \
    \   immutable char c29 = c;\n        immutable char c30 = c;\n        immutable\
    \ char c31 = c;\n        immutable char c32 = c;\n        immutable char c33 =\
    \ c;\n        immutable char c34 = c;\n        immutable char c35 = c;\n     \
    \   immutable char c36 = c;\n        immutable char c37 = c;\n        immutable\
    \ char c38 = c;\n        immutable char c39 = c;\n        immutable char c40 =\
    \ c;\n        immutable char c41 = c;\n        immutable char c42 = c;\n     \
    \   immutable char c43 = c;\n        immutable char c44 = c;\n        immutable\
    \ char c45 = c;\n        immutable char c46 = c;\n        immutable char c47 =\
    \ c;\n        immutable char c48 = c;\n        immutable char c49 = c;\n     \
    \   immutable char c50 = c;\n        immutable char c51 = c;\n        immutable\
    \ char c52 = c;\n        immutable char c53 = c;\n        immutable char c54 =\
    \ c;\n        immutable char c55 = c;\n        immutable char\nunittest\n{\n \
    \   alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n \
    \   assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2c8ywtwi.d(79): Error: no identifier for declarator `char`

    /tmp/tmp2c8ywtwi.d(79): Error: found `unittest` instead of statement

    /tmp/tmp2c8ywtwi.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2c8ywtwi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2 * 2).to!char;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30vlbyld.d(24): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30vlbyld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s) \n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= (char)(c + 2);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n\
    \    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj0wmdltt.d(29): Error: C style cast illegal, use `cast(char)(c
    + 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0wmdltt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= (c + 2);\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n \
    \   assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi9em4f9t.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmpi9em4f9t.__unittest_L33_C1() [0x427c5a]

    ??:? void tmpi9em4f9t.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdid56th5.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdid56th5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (c + 2*2);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl47ee6xf.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmpl47ee6xf.__unittest_L28_C1() [0x427d1e]

    ??:? void tmpl47ee6xf.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163091
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        result ~= (char)(c + 2 * 2);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n\
    \    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"\
    et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\
    );\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    );\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkiup988h.d(24): Error: C style cast illegal, use `cast(char)(c
    + 2 * 2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkiup988h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        if(c == 'z')\n            result ~= 'b';\n\
    \        else if(c == 'y')\n            result ~= 'a';\n        else\n       \
    \     result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n  \
    \  assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    );\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") ==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3ylwlpe.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmph3ylwlpe.__unittest_L33_C1() [0x427c5a]

    ??:? void tmph3ylwlpe.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result =\
    \ \"\";\n    foreach(char c; s)\n    {\n        if(c == 'z')\n            result\
    \ ~= 'b';\n        else if(c == 'y')\n            result ~= 'a';\n        else\n\
    \            result ~= c + 2;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n   \
    \ assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"\
    gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7g__u8dt.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428195]

    ??:? void tmp7g__u8dt.__unittest_L33_C1() [0x427c5a]

    ??:? void tmp7g__u8dt.__modtest() [0x427f18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb1f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430405]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430391]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba05]

    ??:? runModuleUnitTests [0x42c8f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4285e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(c; s)\n    {\n        result ~= (c + 2) % 26 + 'a';\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp37hydwno.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42808d]

    ??:? void tmp37hydwno.__unittest_L28_C1() [0x427b52]

    ??:? void tmp37hydwno.__modtest() [0x427e10]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c723]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430009]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4304b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c4f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nCreate a function encrypt\
    \ that takes a string as an argument and\n    returns a string encrypted with\
    \ the alphabet being rotated. \n    The alphabet should be rotated in a manner\
    \ such that the letters \n    shift down by two multiplied to two places.\n  \
    \  For example:\n    >>> encrypt(\"hi\")\n    \"lm\"\n    >>> encrypt(\"asdfghjkl\"\
    )\n    \"ewhjklnop\"\n    >>> encrypt(\"gf\")\n    \"kj\"\n    >>> encrypt(\"\
    et\")\n    \"ix\"\n    \n*/\nstring encrypt(string s) \n{\n    string result;\n\
    \    foreach(char c; s)\n    {\n        result ~= (c + 2 * 2);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"\
    hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n  \
    \  assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\"\
    );\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"\
    a\") == \"e\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp67tm5qxe.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42812d]

    ??:? void tmp67tm5qxe.__unittest_L28_C1() [0x427d1e]

    ??:? void tmp67tm5qxe.__modtest() [0x427eb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c0cb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afda]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4300f1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4305a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43007d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afb1]

    ??:? runModuleUnitTests [0x42bea1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42857c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
