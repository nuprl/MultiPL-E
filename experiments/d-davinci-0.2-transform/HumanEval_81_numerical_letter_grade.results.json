{
  "language": "d",
  "name": "HumanEval_81_numerical_letter_grade",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn2h7jn2w.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpn2h7jn2w.__unittest_L90_C1() [0x4287a9]\n??:? void tmpn2h7jn2w.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6qwjl5yd.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp6qwjl5yd.__unittest_L90_C1() [0x428799]\n??:? void tmp6qwjl5yd.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn2h7jn2w.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpn2h7jn2w.__unittest_L90_C1() [0x4287a9]\n??:? void tmpn2h7jn2w.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_1sj8vzq.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_1sj8vzq.__unittest_L64_C1() [0x428589]\n??:? void tmp_1sj8vzq.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_1sj8vzq.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_1sj8vzq.__unittest_L64_C1() [0x428589]\n??:? void tmp_1sj8vzq.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            result ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            result ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            result ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            result ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpur3scveo.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmpur3scveo.__unittest_L90_C1() [0x428799]\n??:? void tmpur3scveo.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcastfsw5.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpcastfsw5.__unittest_L64_C1() [0x428589]\n??:? void tmpcastfsw5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_1sj8vzq.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_1sj8vzq.__unittest_L64_C1() [0x428589]\n??:? void tmp_1sj8vzq.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n            result[i] = \"A+\";\n        else if(grade > 3.7)\n            result[i] = \"A\";\n        else if(grade > 3.3)\n            result[i] = \"A-\";\n        else if(grade > 3.0)\n            result[i] = \"B+\";\n        else if(grade > 2.7)\n            result[i] = \"B\";\n        else if(grade > 2.3)\n            result[i] = \"B-\";\n        else if(grade > 2.0)\n            result[i] = \"C+\";\n        else if(grade > 1.7)\n            result[i] = \"C\";\n        else if(grade > 1.3)\n            result[i] = \"C-\";\n        else if(grade > 1.0)\n            result[i] = \"D+\";\n        else if(grade > 0.7)\n            result[i] = \"D\";\n        else if(grade > 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpa6ezm1m9.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpa6ezm1m9.__unittest_L64_C1() [0x428589]\n??:? void tmpa6ezm1m9.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_6og4hir.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmp_6og4hir.__unittest_L90_C1() [0x428591]\n??:? void tmp_6og4hir.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn2h7jn2w.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpn2h7jn2w.__unittest_L90_C1() [0x4287a9]\n??:? void tmpn2h7jn2w.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcastfsw5.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpcastfsw5.__unittest_L64_C1() [0x428589]\n??:? void tmpcastfsw5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(float grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpab8vj87j.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpab8vj87j.__unittest_L90_C1() [0x4287a9]\n??:? void tmpab8vj87j.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades) \n    {\n        if(grade == 4.0) \n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7) \n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade > 3.3) \n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade > 3.0) \n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7) \n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3) \n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade > 2.0) \n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7) \n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3) \n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade > 1.0) \n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade > 0.7) \n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0) \n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0) \n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpww52b68x.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpww52b68x.__unittest_L90_C1() [0x4287a9]\n??:? void tmpww52b68x.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr9r3vori.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x4299dd]\n??:? void tmpr9r3vori.__unittest_L90_C1() [0x428735]\n??:? void tmpr9r3vori.__modtest() [0x428c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e55b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429736]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b235]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b1c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42970d]\n??:? runModuleUnitTests [0x42e331]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429ea0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn2h7jn2w.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpn2h7jn2w.__unittest_L90_C1() [0x4287a9]\n??:? void tmpn2h7jn2w.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_6og4hir.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmp_6og4hir.__unittest_L90_C1() [0x428591]\n??:? void tmp_6og4hir.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn2h7jn2w.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpn2h7jn2w.__unittest_L90_C1() [0x4287a9]\n??:? void tmpn2h7jn2w.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo8xjd_i8.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpo8xjd_i8.__unittest_L90_C1() [0x428589]\n??:? void tmpo8xjd_i8.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy4rm9deq.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpy4rm9deq.__unittest_L90_C1() [0x428591]\n??:? void tmpy4rm9deq.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if (grades[i] == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr9r3vori.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x4299dd]\n??:? void tmpr9r3vori.__unittest_L90_C1() [0x428735]\n??:? void tmpr9r3vori.__modtest() [0x428c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e55b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429736]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b235]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b2c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b1c1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42970d]\n??:? runModuleUnitTests [0x42e331]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429ea0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn2h7jn2w.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpn2h7jn2w.__unittest_L90_C1() [0x4287a9]\n??:? void tmpn2h7jn2w.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\n/*\n    The teacher has also given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_rs253df.d(90): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_rs253df.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164475
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_6og4hir.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmp_6og4hir.__unittest_L90_C1() [0x428591]\n??:? void tmp_6og4hir.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn2h7jn2w.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpn2h7jn2w.__unittest_L90_C1() [0x4287a9]\n??:? void tmpn2h7jn2w.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1p78ab6p.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp1p78ab6p.__unittest_L90_C1() [0x428589]\n??:? void tmp1p78ab6p.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades) \n    {\n        if(grade >= 4.0) \n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7) \n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3) \n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0) \n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7) \n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3) \n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0) \n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7) \n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3) \n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0) \n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7) \n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0) \n        {\n            letter_grades ~= \"D-\";\n        }\n        else \n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9y0rsgzm.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp9y0rsgzm.__unittest_L90_C1() [0x428799]\n??:? void tmp9y0rsgzm.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades) \n    {\n        if(grade == 4.0)\n            letter_grades ~= \"A+\";\n        else if(grade > 3.7)\n            letter_grades ~= \"A\";\n        else if(grade > 3.3)\n            letter_grades ~= \"A-\";\n        else if(grade > 3.0)\n            letter_grades ~= \"B+\";\n        else if(grade > 2.7)\n            letter_grades ~= \"B\";\n        else if(grade > 2.3)\n            letter_grades ~= \"B-\";\n        else if(grade > 2.0)\n            letter_grades ~= \"C+\";\n        else if(grade > 1.7)\n            letter_grades ~= \"C\";\n        else if(grade > 1.3)\n            letter_grades ~= \"C-\";\n        else if(grade > 1.0)\n            letter_grades ~= \"D+\";\n        else if(grade > 0.7)\n            letter_grades ~= \"D\";\n        else if(grade > 0.0)\n            letter_grades ~= \"D-\";\n        else\n            letter_grades ~= \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwovufvbt.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmpwovufvbt.__unittest_L64_C1() [0x428799]\n??:? void tmpwovufvbt.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, g; grades)\n    {\n        if(g >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(g >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(g >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(g >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(g >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(g >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(g >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(g >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(g >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(g >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(g >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(g >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcastfsw5.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpcastfsw5.__unittest_L64_C1() [0x428589]\n??:? void tmpcastfsw5.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            result ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            result ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            result ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            result ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else\n        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpur3scveo.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmpur3scveo.__unittest_L90_C1() [0x428799]\n??:? void tmpur3scveo.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3x9j1dtp.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmp3x9j1dtp.__unittest_L90_C1() [0x4287a9]\n??:? void tmp3x9j1dtp.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy4rm9deq.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpy4rm9deq.__unittest_L90_C1() [0x428591]\n??:? void tmpy4rm9deq.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_1sj8vzq.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_1sj8vzq.__unittest_L64_C1() [0x428589]\n??:? void tmp_1sj8vzq.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv74pejyi.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpv74pejyi.__unittest_L90_C1() [0x428591]\n??:? void tmpv74pejyi.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv74pejyi.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpv74pejyi.__unittest_L90_C1() [0x428591]\n??:? void tmpv74pejyi.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(float grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpeijiki2n.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmpeijiki2n.__unittest_L90_C1() [0x428799]\n??:? void tmpeijiki2n.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades) \n    {\n        if (grade == 4.0) \n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if (grade > 3.7) \n        {\n            letter_grades[i] = \"A\";\n        }\n        else if (grade > 3.3) \n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if (grade > 3.0) \n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if (grade > 2.7) \n        {\n            letter_grades[i] = \"B\";\n        }\n        else if (grade > 2.3) \n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if (grade > 2.0) \n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if (grade > 1.7) \n        {\n            letter_grades[i] = \"C\";\n        }\n        else if (grade > 1.3) \n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if (grade > 1.0) \n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if (grade > 0.7) \n        {\n            letter_grades[i] = \"D\";\n        }\n        else if (grade > 0.0) \n        {\n            letter_grades[i] = \"D-\";\n        }\n        else \n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpiq1g9q2c.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpiq1g9q2c.__unittest_L90_C1() [0x428589]\n??:? void tmpiq1g9q2c.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpiwey_i_r.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpiwey_i_r.__unittest_L90_C1() [0x428589]\n??:? void tmpiwey_i_r.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4tt2u_0s.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmp4tt2u_0s.__unittest_L90_C1() [0x4287a9]\n??:? void tmp4tt2u_0s.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy4rm9deq.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpy4rm9deq.__unittest_L90_C1() [0x428591]\n??:? void tmpy4rm9deq.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_1sj8vzq.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_1sj8vzq.__unittest_L64_C1() [0x428589]\n??:? void tmp_1sj8vzq.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy4rm9deq.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmpy4rm9deq.__unittest_L90_C1() [0x428591]\n??:? void tmpy4rm9deq.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n            result[i] = \"A+\";\n        else if(grade >= 3.7)\n            result[i] = \"A\";\n        else if(grade >= 3.3)\n            result[i] = \"A-\";\n        else if(grade >= 3.0)\n            result[i] = \"B+\";\n        else if(grade >= 2.7)\n            result[i] = \"B\";\n        else if(grade >= 2.3)\n            result[i] = \"B-\";\n        else if(grade >= 2.0)\n            result[i] = \"C+\";\n        else if(grade >= 1.7)\n            result[i] = \"C\";\n        else if(grade >= 1.3)\n            result[i] = \"C-\";\n        else if(grade >= 1.0)\n            result[i] = \"D+\";\n        else if(grade >= 0.7)\n            result[i] = \"D\";\n        else if(grade >= 0.0)\n            result[i] = \"D-\";\n        else\n            result[i] = \"E\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp605flskq.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp605flskq.__unittest_L64_C1() [0x428589]\n??:? void tmp605flskq.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_1sj8vzq.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_1sj8vzq.__unittest_L64_C1() [0x428589]\n??:? void tmp_1sj8vzq.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\n/*\n    The teacher has also given you a list of students and their grades.\n    You have to write a function that can output a list of letter grades\n    using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpki7mrd1q.d(90): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpki7mrd1q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] result;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            result ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            result ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            result ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            result ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            result ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            result ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            result ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            result ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            result ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            result ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            result ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            result ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            result ~= \"E\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpiia9hqt4.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpiia9hqt4.__unittest_L90_C1() [0x4287a9]\n??:? void tmpiia9hqt4.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_1sj8vzq.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_1sj8vzq.__unittest_L64_C1() [0x428589]\n??:? void tmp_1sj8vzq.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_1sj8vzq.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_1sj8vzq.__unittest_L64_C1() [0x428589]\n??:? void tmp_1sj8vzq.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_1sj8vzq.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_1sj8vzq.__unittest_L64_C1() [0x428589]\n??:? void tmp_1sj8vzq.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(int i, float grade; grades)\n    {\n        if(grade >= 4.0)\n            letter_grades[i] = \"A+\";\n        else if(grade >= 3.7)\n            letter_grades[i] = \"A\";\n        else if(grade >= 3.3)\n            letter_grades[i] = \"A-\";\n        else if(grade >= 3.0)\n            letter_grades[i] = \"B+\";\n        else if(grade >= 2.7)\n            letter_grades[i] = \"B\";\n        else if(grade >= 2.3)\n            letter_grades[i] = \"B-\";\n        else if(grade >= 2.0)\n            letter_grades[i] = \"C+\";\n        else if(grade >= 1.7)\n            letter_grades[i] = \"C\";\n        else if(grade >= 1.3)\n            letter_grades[i] = \"C-\";\n        else if(grade >= 1.0)\n            letter_grades[i] = \"D+\";\n        else if(grade >= 0.7)\n            letter_grades[i] = \"D\";\n        else if(grade >= 0.0)\n            letter_grades[i] = \"D-\";\n        else\n            letter_grades[i] = \"E\";\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_1sj8vzq.d(68): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmp_1sj8vzq.__unittest_L64_C1() [0x428589]\n??:? void tmp_1sj8vzq.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_ogm99ng.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmp_ogm99ng.__unittest_L90_C1() [0x428799]\n??:? void tmp_ogm99ng.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_6og4hir.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429835]\n??:? void tmp_6og4hir.__unittest_L90_C1() [0x428591]\n??:? void tmp_6og4hir.__modtest() [0x428aa0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3b3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42958e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b08d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b11c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b019]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429565]\n??:? runModuleUnitTests [0x42e189]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(grade; grades)\n    {\n        if(grade == 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade > 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade > 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade > 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade > 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade > 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade > 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade > 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade > 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade > 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade > 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade > 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else if(grade == 0.0)\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn2h7jn2w.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a4d]\n??:? void tmpn2h7jn2w.__unittest_L90_C1() [0x4287a9]\n??:? void tmpn2h7jn2w.__modtest() [0x428cb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eee7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4297a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42977d]\n??:? runModuleUnitTests [0x42ecbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades = new string[grades.length];\n    foreach(i, grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsnqdymcg.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x42982d]\n??:? void tmpsnqdymcg.__unittest_L90_C1() [0x428589]\n??:? void tmpsnqdymcg.__modtest() [0x428a98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42e3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429586]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42b085]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42b114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42b011]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42955d]\n??:? runModuleUnitTests [0x42e181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429cf0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[] grades) \n{\n    string[] letter_grades;\n    foreach(float grade; grades)\n    {\n        if(grade >= 4.0)\n        {\n            letter_grades ~= \"A+\";\n        }\n        else if(grade >= 3.7)\n        {\n            letter_grades ~= \"A\";\n        }\n        else if(grade >= 3.3)\n        {\n            letter_grades ~= \"A-\";\n        }\n        else if(grade >= 3.0)\n        {\n            letter_grades ~= \"B+\";\n        }\n        else if(grade >= 2.7)\n        {\n            letter_grades ~= \"B\";\n        }\n        else if(grade >= 2.3)\n        {\n            letter_grades ~= \"B-\";\n        }\n        else if(grade >= 2.0)\n        {\n            letter_grades ~= \"C+\";\n        }\n        else if(grade >= 1.7)\n        {\n            letter_grades ~= \"C\";\n        }\n        else if(grade >= 1.3)\n        {\n            letter_grades ~= \"C-\";\n        }\n        else if(grade >= 1.0)\n        {\n            letter_grades ~= \"D+\";\n        }\n        else if(grade >= 0.7)\n        {\n            letter_grades ~= \"D\";\n        }\n        else if(grade >= 0.0)\n        {\n            letter_grades ~= \"D-\";\n        }\n        else\n        {\n            letter_grades ~= \"E\";\n        }\n    }\n    return letter_grades;\n}\nunittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpeijiki2n.d(94): unittest failure\n----------------\n??:? _d_unittestp [0x429a3d]\n??:? void tmpeijiki2n.__unittest_L90_C1() [0x428799]\n??:? void tmpeijiki2n.__modtest() [0x428ca8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42eed7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x429796]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42bbb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42bc40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42bb3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42976d]\n??:? runModuleUnitTests [0x42ecad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429e8c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164476
    }
  ]
}