language: d
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuy53z08r.d(25): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmpuy53z08r.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmpuy53z08r.__unittest_L29_C1() [0x427ff7]

    ??:? void tmpuy53z08r.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw6qorm_.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw6qorm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw6qorm_.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw6qorm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            if(i == 0)\n            {\n\
    \                result ~= 4;\n            }\n            else\n            {\n\
    \                if(result[$-1] == 4)\n                {\n                   \
    \ result[$-1] = 8;\n                }\n                else\n                {\n\
    \                    result ~= 4;\n                }\n            }\n        }\n\
    \        else if(c == '|')\n        {\n            if(result[$-1] == 4)\n    \
    \        {\n                result[$-1] = 2;\n            }\n            else\n\
    \            {\n                result[$-1] = 1;\n            }\n        }\n \
    \       i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdpt1my6h.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4285e5]

    ??:? void tmpdpt1my6h.__unittest_L56_C1() [0x4280ff]

    ??:? void tmpdpt1my6h.__modtest() [0x428364]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d053]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bee6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430939]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430de8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bebd]

    ??:? runModuleUnitTests [0x42ce29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428aa8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string) \n    {\n\
    \        switch(c) \n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\n/*\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n   \
    \ [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n*/\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfifvnlqm.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpfifvnlqm.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpfifvnlqm.__unittest_L42_C1() [0x427fc2]

    ??:? void tmpfifvnlqm.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid character\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'object.Exception@/tmp/tmpx26_shyy.d(33): Invalid character

    ----------------

    ??:? long[] tmpx26_shyy.parse_music(immutable(char)[]) [0x427f53]

    ??:? void tmpx26_shyy.__unittest_L38_C1() [0x427fe6]

    ??:? void tmpx26_shyy.__modtest() [0x4282ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d337]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430ba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1a1]

    ??:? runModuleUnitTests [0x42d10d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgiuwfd5c.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpgiuwfd5c.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpgiuwfd5c.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpgiuwfd5c.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] ret;\n    foreach(c; music_string)\n    {\n  \
    \      switch(c)\n        {\n            case 'o':\n                ret ~= 4;\n\
    \                break;\n            case '|':\n                ret[$-1] /= 2;\n\
    \                break;\n            case '.':\n                break;\n     \
    \       default:\n                assert(false);\n        }\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoibpxp4h.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpoibpxp4h.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpoibpxp4h.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpoibpxp4h.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            if(i == 0)\n            {\n\
    \                result ~= 4;\n            }\n            else\n            {\n\
    \                if(result[$-1] == 4)\n                {\n                   \
    \ result[$-1] = 8;\n                }\n                else\n                {\n\
    \                    result ~= 4;\n                }\n            }\n        }\n\
    \        else if(c == '|')\n        {\n            if(result[$-1] == 4)\n    \
    \        {\n                result[$-1] = 2;\n            }\n            else\n\
    \            {\n                result[$-1] = 1;\n            }\n        }\n \
    \       i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdpt1my6h.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4285e5]

    ??:? void tmpdpt1my6h.__unittest_L56_C1() [0x4280ff]

    ??:? void tmpdpt1my6h.__modtest() [0x428364]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d053]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bee6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430939]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430de8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bebd]

    ??:? runModuleUnitTests [0x42ce29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428aa8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string) \n    {\n\
    \        switch(c) \n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86qkq7dg.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86qkq7dg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ = 2;\n                break;\n            case '.':\n                result[$-1]\
    \ = 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqolm5bg.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqolm5bg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmphtq1_p1n.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42857e]

    ??:? long[] tmphtq1_p1n.parse_music(immutable(char)[]) [0x427ee2]

    ??:? void tmphtq1_p1n.__unittest_L38_C1() [0x427fff]

    ??:? void tmphtq1_p1n.__modtest() [0x428250]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430821]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bda5]

    ??:? runModuleUnitTests [0x42cd11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpezzn8ywk.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284ed]

    ??:? void tmpezzn8ywk.__unittest_L31_C1() [0x42807e]

    ??:? void tmpezzn8ywk.__modtest() [0x42826c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cee7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430759]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd51]

    ??:? runModuleUnitTests [0x42ccbd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42893c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0uy34mji.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0uy34mji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result ~=\
    \ 2;\n                break;\n            case '.':\n                result ~=\
    \ 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hw9e4hq.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hw9e4hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string) \n    {\n\
    \        switch(c) \n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Unknown character\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'object.Exception@/tmp/tmpiz38rhhw.d(33): Unknown character

    ----------------

    ??:? long[] tmpiz38rhhw.parse_music(immutable(char)[]) [0x427f53]

    ??:? void tmpiz38rhhw.__unittest_L38_C1() [0x427fe6]

    ??:? void tmpiz38rhhw.__modtest() [0x4282ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d337]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430ba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1a1]

    ??:? runModuleUnitTests [0x42d10d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpezzn8ywk.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284ed]

    ??:? void tmpezzn8ywk.__unittest_L31_C1() [0x42807e]

    ??:? void tmpezzn8ywk.__modtest() [0x42826c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cee7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430759]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd51]

    ??:? runModuleUnitTests [0x42ccbd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42893c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid character\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'object.Exception@/tmp/tmpx26_shyy.d(33): Invalid character

    ----------------

    ??:? long[] tmpx26_shyy.parse_music(immutable(char)[]) [0x427f53]

    ??:? void tmpx26_shyy.__unittest_L38_C1() [0x427fe6]

    ??:? void tmpx26_shyy.__modtest() [0x4282ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d337]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430ba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1a1]

    ??:? runModuleUnitTests [0x42d10d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                beats\
    \ ~= 4;\n                break;\n            case '|':\n                beats\
    \ ~= 2;\n                break;\n            case '.':\n                beats\
    \ ~= 1;\n                break;\n        }\n    }\n    return beats;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvoou4hb.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvoou4hb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result ~=\
    \ 2;\n                break;\n            case '.':\n                result ~=\
    \ 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hw9e4hq.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hw9e4hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\
    \ \n    {\n        if(c == 'o') \n        {\n            result ~= 4;\n      \
    \  }\n        else if(c == '|') \n        {\n            result[$-1] /= 2;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp47lwdhcg.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmp47lwdhcg.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmp47lwdhcg.__unittest_L33_C1() [0x427ff7]

    ??:? void tmp47lwdhcg.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                beats\
    \ ~= 4;\n                break;\n            case '|':\n                beats\
    \ ~= 2;\n                break;\n            case '.':\n                beats\
    \ ~= 1;\n                break;\n        }\n    }\n    return beats;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvoou4hb.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvoou4hb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid character\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'object.Exception@/tmp/tmpx26_shyy.d(33): Invalid character

    ----------------

    ??:? long[] tmpx26_shyy.parse_music(immutable(char)[]) [0x427f53]

    ??:? void tmpx26_shyy.__unittest_L38_C1() [0x427fe6]

    ??:? void tmpx26_shyy.__modtest() [0x4282ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d337]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430ba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1a1]

    ??:? runModuleUnitTests [0x42d10d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable note; music_string.split(\"\
    \ \"))\n    {\n        if(note == \"o\")\n            result ~= 4;\n        else\
    \ if(note == \"o|\")\n            result ~= 2;\n        else if(note == \".|\"\
    )\n            result ~= 1;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw01aaoaa.d(20): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw01aaoaa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuy53z08r.d(25): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmpuy53z08r.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmpuy53z08r.__unittest_L29_C1() [0x427ff7]

    ??:? void tmpuy53z08r.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgiuwfd5c.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpgiuwfd5c.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpgiuwfd5c.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpgiuwfd5c.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    auto notes = music_string.split(\" \");\n    long[] result;\n\
    \    foreach(note; notes)\n    {\n        if(note == \"o\")\n            result\
    \ ~= 4;\n        else if(note == \"o|\")\n            result ~= 2;\n        else\
    \ if(note == \".|\")\n            result ~= 1;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnf_hh7ro.d(19): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnf_hh7ro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgiuwfd5c.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpgiuwfd5c.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpgiuwfd5c.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpgiuwfd5c.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    auto notes = music_string.split(\" \");\n    long[] result;\n\
    \    foreach(note; notes)\n    {\n        if(note == \"o\")\n            result\
    \ ~= 4;\n        else if(note == \"o|\")\n            result ~= 2;\n        else\
    \ if(note == \".|\")\n            result ~= 1;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\")\
    \ == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnf_hh7ro.d(19): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnf_hh7ro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikyodh7c.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikyodh7c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpezzn8ywk.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284ed]

    ??:? void tmpezzn8ywk.__unittest_L31_C1() [0x42807e]

    ??:? void tmpezzn8ywk.__modtest() [0x42826c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cee7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430759]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd51]

    ??:? runModuleUnitTests [0x42ccbd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42893c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\
    \ \n    {\n        switch(c) \n        {\n            case 'o':\n            \
    \    result ~= 4;\n                break;\n            case '|':\n           \
    \     result[$-1] /= 2;\n                break;\n            case '.':\n     \
    \           result[$-1] /= 4;\n                break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqb4c5u7l.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqb4c5u7l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid character\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'object.Exception@/tmp/tmpx26_shyy.d(33): Invalid character

    ----------------

    ??:? long[] tmpx26_shyy.parse_music(immutable(char)[]) [0x427f53]

    ??:? void tmpx26_shyy.__unittest_L38_C1() [0x427fe6]

    ??:? void tmpx26_shyy.__modtest() [0x4282ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d337]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430ba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1a1]

    ??:? runModuleUnitTests [0x42d10d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\
    \ \n    {\n        switch(c) \n        {\n            case 'o':\n            \
    \    result ~= 4;\n                break;\n            case '|':\n           \
    \     result[$-1] /= 2;\n                break;\n            case '.':\n     \
    \           break;\n            default:\n                assert(false);\n   \
    \     }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvkfwblfi.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvkfwblfi.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvkfwblfi.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvkfwblfi.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string) \n    {\n\
    \        switch(c) \n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp03m3jf8p.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmp03m3jf8p.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmp03m3jf8p.__unittest_L38_C1() [0x427fc2]

    ??:? void tmp03m3jf8p.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikyodh7c.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikyodh7c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0uy34mji.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0uy34mji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result ~=\
    \ 2;\n                break;\n            case '.':\n                result ~=\
    \ 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hw9e4hq.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hw9e4hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    immutable(char)[] music_chars = music_string.chars;\n\
    \    foreach(immutable(char) c; music_chars)\n    {\n        switch(c)\n     \
    \   {\n            case 'o':\n                result ~= 4;\n                break;\n\
    \            case '|':\n                result[$-1] /= 2;\n                break;\n\
    \            case '.':\n                result[$-1] /= 4;\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyye8i39m.d(20): Error: no property `chars` for type `string`

    /tmp/tmpyye8i39m.d(23): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyye8i39m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikyodh7c.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikyodh7c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw6qorm_.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw6qorm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpezzn8ywk.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284ed]

    ??:? void tmpezzn8ywk.__unittest_L31_C1() [0x42807e]

    ??:? void tmpezzn8ywk.__modtest() [0x42826c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cee7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430759]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd51]

    ??:? runModuleUnitTests [0x42ccbd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42893c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    auto result = appender!(long[])();\n    foreach(c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result.put(4);\n\
    \                break;\n            case '|':\n                result.put(2);\n\
    \                break;\n            case '.':\n                result.put(1);\n\
    \                break;\n        }\n    }\n    return result.data;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptcysgf2m.d(19): Error: template instance `appender!(long[])` template
    `appender` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptcysgf2m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string) \n    {\n\
    \        switch(c) \n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp03m3jf8p.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmp03m3jf8p.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmp03m3jf8p.__unittest_L38_C1() [0x427fc2]

    ??:? void tmp03m3jf8p.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuy53z08r.d(25): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmpuy53z08r.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmpuy53z08r.__unittest_L29_C1() [0x427ff7]

    ??:? void tmpuy53z08r.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    int i = 0;\n    foreach(c; music_string)\n\
    \    {\n        if(c == 'o')\n        {\n            if(i > 0 && result[$-1] ==\
    \ 4)\n            {\n                result[$-1] = 8;\n            }\n       \
    \     else\n            {\n                result ~= 4;\n            }\n     \
    \   }\n        else if(c == '|')\n        {\n            if(i > 0 && result[$-1]\
    \ == 2)\n            {\n                result[$-1] = 4;\n            }\n    \
    \        else\n            {\n                result ~= 2;\n            }\n  \
    \      }\n        else if(c == '.')\n        {\n            result ~= 1;\n   \
    \     }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7jt2ouf0.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x4285ed]

    ??:? void tmp7jt2ouf0.__unittest_L53_C1() [0x428107]

    ??:? void tmp7jt2ouf0.__modtest() [0x42836c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d05b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430941]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430df0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bec5]

    ??:? runModuleUnitTests [0x42ce31]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ab0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmphtq1_p1n.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42857e]

    ??:? long[] tmphtq1_p1n.parse_music(immutable(char)[]) [0x427ee2]

    ??:? void tmphtq1_p1n.__unittest_L38_C1() [0x427fff]

    ??:? void tmphtq1_p1n.__modtest() [0x428250]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf3b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430821]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cd0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bda5]

    ??:? runModuleUnitTests [0x42cd11]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result ~=\
    \ 2;\n                break;\n            case '.':\n                result ~=\
    \ 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hw9e4hq.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hw9e4hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string) \n    {\n\
    \        switch(c) \n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86qkq7dg.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86qkq7dg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuy53z08r.d(25): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmpuy53z08r.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmpuy53z08r.__unittest_L29_C1() [0x427ff7]

    ??:? void tmpuy53z08r.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw6qorm_.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw6qorm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ = 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd602j_br.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd602j_br.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw6qorm_.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw6qorm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpezzn8ywk.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284ed]

    ??:? void tmpezzn8ywk.__unittest_L31_C1() [0x42807e]

    ??:? void tmpezzn8ywk.__modtest() [0x42826c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cee7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430759]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd51]

    ??:? runModuleUnitTests [0x42ccbd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42893c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result ~=\
    \ 2;\n                break;\n            case '.':\n                result ~=\
    \ 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hw9e4hq.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hw9e4hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuy53z08r.d(25): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmpuy53z08r.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmpuy53z08r.__unittest_L29_C1() [0x427ff7]

    ??:? void tmpuy53z08r.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid character\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'object.Exception@/tmp/tmpx26_shyy.d(33): Invalid character

    ----------------

    ??:? long[] tmpx26_shyy.parse_music(immutable(char)[]) [0x427f53]

    ??:? void tmpx26_shyy.__unittest_L38_C1() [0x427fe6]

    ??:? void tmpx26_shyy.__modtest() [0x4282ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d337]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430ba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1a1]

    ??:? runModuleUnitTests [0x42d10d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuy53z08r.d(25): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmpuy53z08r.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmpuy53z08r.__unittest_L29_C1() [0x427ff7]

    ??:? void tmpuy53z08r.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0uy34mji.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0uy34mji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpezzn8ywk.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284ed]

    ??:? void tmpezzn8ywk.__unittest_L31_C1() [0x42807e]

    ??:? void tmpezzn8ywk.__modtest() [0x42826c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cee7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430759]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd51]

    ??:? runModuleUnitTests [0x42ccbd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42893c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuy53z08r.d(25): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmpuy53z08r.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmpuy53z08r.__unittest_L29_C1() [0x427ff7]

    ??:? void tmpuy53z08r.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0uy34mji.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0uy34mji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw6qorm_.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw6qorm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\n/*\n    >>> parse_music(\"o o| .| o| o| .| .| .|\
    \ .| o o\")\n    [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n*/\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpn9ku1x9o.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmpn9ku1x9o.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmpn9ku1x9o.__unittest_L37_C1() [0x427ff7]

    ??:? void tmpn9ku1x9o.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result ~=\
    \ 2;\n                break;\n            case '.':\n                result ~=\
    \ 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hw9e4hq.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hw9e4hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                beats\
    \ ~= 4;\n                break;\n            case '|':\n                beats[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                beats[$-1]\
    \ = 1;\n                break;\n        }\n    }\n    return beats;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmponucxi1a.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmponucxi1a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpln1s1o__.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284ed]

    ??:? void tmpln1s1o__.__unittest_L31_C1() [0x42807e]

    ??:? void tmpln1s1o__.__modtest() [0x42826c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cee7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430759]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd51]

    ??:? runModuleUnitTests [0x42ccbd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42893c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw6qorm_.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw6qorm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result ~=\
    \ 2;\n                break;\n            case '.':\n                result ~=\
    \ 1;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hw9e4hq.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hw9e4hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikyodh7c.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikyodh7c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string) \n    {\n\
    \        switch(c) \n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                throw new Exception(\"Invalid character\"\
    );\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'object.Exception@/tmp/tmpmkxti6ct.d(33): Invalid character

    ----------------

    ??:? long[] tmpmkxti6ct.parse_music(immutable(char)[]) [0x427f53]

    ??:? void tmpmkxti6ct.__unittest_L38_C1() [0x427fe6]

    ??:? void tmpmkxti6ct.__modtest() [0x4282ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d337]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1ca]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310cc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430ba9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c1a1]

    ??:? runModuleUnitTests [0x42d10d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428a'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    return music_string.split(\" \").map!(s => s.length).array;\n\
    }\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\"\
    ) == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5spof6vp.d(19): Error: no property `split` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5spof6vp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    // your code here\n    long[] result = new long[];\n\
    \    foreach(c; music_string)\n    {\n        if(c == 'o')\n        {\n      \
    \      result ~= 4;\n        }\n        else if(c == '|')\n        {\n       \
    \     result[$-1] /= 2;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n  \
    \  assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_nencum.d(20): Error: new can only create structs, dynamic arrays
    or class objects, not `long[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_nencum.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        if(c == 'o')\n        {\n            result ~= 4;\n        }\n      \
    \  else if(c == '|')\n        {\n            result[$-1] /= 2;\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmparci6loy.d(28): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmparci6loy.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmparci6loy.__unittest_L33_C1() [0x427ff7]

    ??:? void tmparci6loy.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                result ~= 0;\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb3k9axni.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284fd]

    ??:? void tmpb3k9axni.__unittest_L39_C1() [0x42801b]

    ??:? void tmpb3k9axni.__modtest() [0x428280]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdfe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430851]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d00]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bdd5]

    ??:? runModuleUnitTests [0x42cd41]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result[$-1] /= 2;\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpuy53z08r.d(25): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428576]

    ??:? long[] tmpuy53z08r.parse_music(immutable(char)[]) [0x427ed9]

    ??:? void tmpuy53z08r.__unittest_L29_C1() [0x427ff7]

    ??:? void tmpuy53z08r.__modtest() [0x428248]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdc6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430819]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cc8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4307a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd9d]

    ??:? runModuleUnitTests [0x42cd09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats = [];\n    foreach(char c; music_string)\n\
    \    {\n        if(c == 'o')\n            beats ~= 4;\n        else if(c == '|')\n\
    \            beats ~= 2;\n        else if(c == '.')\n            beats ~= 1;\n\
    \    }\n    return beats;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkqnn4zf9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284f5]

    ??:? void tmpkqnn4zf9.__unittest_L31_C1() [0x42808a]

    ??:? void tmpkqnn4zf9.__modtest() [0x428278]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ceef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd82]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430761]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd59]

    ??:? runModuleUnitTests [0x42ccc5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428944]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string) \n    {\n\
    \        switch(c) \n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\n/*\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n   \
    \ [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n*/\nunittest\n{\n    alias candidate\
    \ = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"\
    o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L,\
    \ 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L,\
    \ 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L,\
    \ 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfifvnlqm.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpfifvnlqm.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpfifvnlqm.__unittest_L42_C1() [0x427fc2]

    ??:? void tmpfifvnlqm.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(char c; music_string)\n \
    \   {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw6qorm_.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw6qorm_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlilp6hl.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpqlilp6hl.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpqlilp6hl.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpqlilp6hl.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] beats;\n    foreach(char c; music_string)\n  \
    \  {\n        switch(c)\n        {\n            case 'o':\n                beats\
    \ ~= 4;\n                break;\n            case '|':\n                beats[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                beats[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return beats;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgq_uywvo.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgq_uywvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\
    \") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvy4j3daj.d(33): Assertion failure

    ----------------

    ??:? _d_assertp [0x4284d5]

    ??:? long[] tmpvy4j3daj.parse_music(immutable(char)[]) [0x427f35]

    ??:? void tmpvy4j3daj.__unittest_L38_C1() [0x427fc2]

    ??:? void tmpvy4j3daj.__modtest() [0x428288]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d027]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42beba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42be91]

    ??:? runModuleUnitTests [0x42cdfd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikyodh7c.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikyodh7c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable char c; music_string)\n\
    \    {\n        switch(c)\n        {\n            case 'o':\n                result\
    \ ~= 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0uy34mji.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0uy34mji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(immutable c; music_string)\n\
    \    {\n        if(c == 'o')\n            result ~= 4;\n        else if(c == '|')\n\
    \            result ~= 2;\n        else if(c == '.')\n            result ~= 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_music;\n\
    \n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L,\
    \ 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n\
    \    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L,\
    \ 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L,\
    \ 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpezzn8ywk.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284ed]

    ??:? void tmpezzn8ywk.__unittest_L31_C1() [0x42807e]

    ??:? void tmpezzn8ywk.__modtest() [0x42826c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cee7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c7c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430759]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd51]

    ??:? runModuleUnitTests [0x42ccbd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42893c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164290
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n \
    \   [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n    \n*/\nlong[] parse_music(string\
    \ music_string) \n{\n    long[] result;\n    foreach(c; music_string)\n    {\n\
    \        switch(c)\n        {\n            case 'o':\n                result ~=\
    \ 4;\n                break;\n            case '|':\n                result[$-1]\
    \ /= 2;\n                break;\n            case '.':\n                result[$-1]\
    \ /= 4;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n\
    \    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\"\
    .| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o\
    \ o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o|\
    \ .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g73mlu4.d(22): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g73mlu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164290
