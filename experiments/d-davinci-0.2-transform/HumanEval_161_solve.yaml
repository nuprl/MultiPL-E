name: HumanEval_161_solve
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n \
  \   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n\
  \    otherwise keep it as it is.\n    If the string contains no letters, reverse\
  \ the string.\n    The function should return the resulted string.\n    Examples\n\
  \    >>> solve(\"1234\")\n    \"4321\"\n    >>> solve(\"ab\")\n    \"AB\"\n    >>>\
  \ solve(\"#a@C\")\n    \"#A@c\"\n    \n*/\nstring solve(string s) \n"
tests: "unittest\n{\n    alias candidate = solve;\n\n    assert(candidate(\"AsDf\"\
  ) == \"aSdF\");\n    assert(candidate(\"1234\") == \"4321\");\n    assert(candidate(\"\
  ab\") == \"AB\");\n    assert(candidate(\"#a@C\") == \"#A@c\");\n    assert(candidate(\"\
  #AsdfW^45\") == \"#aSDFw^45\");\n    assert(candidate(\"#6@2\") == \"2@6#\");\n\
  \    assert(candidate(\"#$a^D\") == \"#$A^d\");\n    assert(candidate(\"#ccc\")\
  \ == \"#CCC\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n                result ~= toUpper(c);\n\
    \            else\n                result ~= toLower(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isLower(c))\n                result ~= toUpper(c);\n            else\n\
    \                result ~= toLower(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n \
    \               result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result.length == 0 ? s.dup.reverse : result;\n}", "{\n    string result;\n\
    \    if (s.length == 0)\n        return s;\n    foreach(c; s)\n    {\n       \
    \ if (isAlpha(c))\n            result ~= toLower(c);\n        else\n         \
    \   result ~= c;\n    }\n    if (result.length == s.length)\n        return result;\n\
    \    else\n        return s.dup.reverse;\n}", "{\n    string result = \"\";\n\
    \    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    if(result.length == 0)\n    {\n        return s;\n    }\n\
    \    else\n    {\n        return result;\n    }\n}", "{\n    string result = \"\
    \";\n    foreach(i; 0 .. s.length)\n    {\n        if(s[i] >= 'a' && s[i] <= 'z')\n\
    \        {\n            result ~= to!string(s[i]).toUpper();\n        }\n    \
    \    else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            result ~= to!string(s[i]).toLower();\n\
    \        }\n        else\n        {\n            result ~= s[i];\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    if (s.length\
    \ == 0)\n        return result;\n    foreach(i, c; s)\n    {\n        if (isAlpha(c))\n\
    \            result ~= toLower(c) == c ? toUpper(c) : toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n      \
    \      if(c.isUpper)\n                result ~= c.toLower;\n            else\n\
    \                result ~= c.toUpper;\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result.length == 0 ? s : result.reverse;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n                result ~= toUpper(c);\n\
    \            else\n                result ~= toLower(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result.length == 0 ? s.dup.reverse : result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isLower(c))\n                result ~= toUpper(c);\n            else\n\
    \                result ~= toLower(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            result ~= to!string(c).toUpper();\n\
    \        }\n        else\n        {\n            result ~= to!string(c).toLower();\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            result ~= toLower(c)\
    \ ? toUpper(c) : toLower(c);\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result.length ? result : result.dup.reverse;\n\
    }", "{\n    string result = \"\";\n    if (s.length == 0)\n        return result;\n\
    \    foreach(c; s)\n    {\n        if (isAlpha(c))\n        {\n            if\
    \ (isUpper(c))\n                result ~= toLower(c);\n            else\n    \
    \            result ~= toUpper(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    if (s.length\
    \ == 0)\n        return s;\n    foreach(i, c; s)\n    {\n        if (isAlpha(c))\n\
    \            result ~= toLower(c) ? toUpper(c) : toLower(c);\n        else\n \
    \           result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n     \
    \       result ~= c.toUpper;\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    if (s.length == 0)\n        return s;\n    foreach(c; s)\n    {\n\
    \        if (c.isLetter)\n            result ~= c.toUpper.toLower;\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    if (s.length == 0)\n        return result;\n    foreach(i, c; s)\n\
    \    {\n        if (c.isLetter)\n            result ~= c.toUpper.toLower;\n  \
    \      else\n            result ~= c;\n    }\n    return result.length == 0 ?\
    \ s.dup.reverse : result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n\
    \    {\n        if(c.isAlpha)\n        {\n            result ~= c.toUpper.toLower;\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    if(result.length == 0)\n    {\n        return s.dup.reverse;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n  \
    \  {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n        \
    \        result ~= toUpper(c);\n            else\n                result ~= toLower(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    if (s.length == 0)\n        return s;\n    string\
    \ result = \"\";\n    foreach(i, c; s)\n    {\n        if (c.isLetter)\n     \
    \       result ~= c.toUpper.toLower;\n        else\n            result ~= c;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    if (s.length\
    \ == 0)\n        return result;\n    foreach(c; s)\n    {\n        if (isLetter(c))\n\
    \        {\n            if (isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isLower(c))\n                result ~= toUpper(c);\n            else\n\
    \                result ~= toLower(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isLetter(c))\n        {\n            result ~= to!string(c\
    \ ^ ' ');\n        }\n        else\n        {\n            result ~= c;\n    \
    \    }\n    }\n    if(result.length == 0)\n    {\n        return reverse(s);\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    if(s.length\
    \ == 0)\n        return s;\n    foreach(i, c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string res =\
    \ \"\";\n    foreach(i; 0 .. s.length)\n    {\n        if(isAlpha(s[i]))\n   \
    \     {\n            if(isUpper(s[i]))\n                res ~= toLower(s[i]);\n\
    \            else\n                res ~= toUpper(s[i]);\n        }\n        else\n\
    \            res ~= s[i];\n    }\n    return res.length == 0 ? s : res;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            result ~= to!string(toUpper(c));\n        }\n        else\n\
    \        {\n            result ~= to!string(c);\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n     \
    \   if(isLetter(c))\n        {\n            if(isUpper(c))\n                result\
    \ ~= toLower(c);\n            else\n                result ~= toUpper(c);\n  \
    \      }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n \
    \       if(isAlpha(c))\n        {\n            if(isUpper(c))\n              \
    \  result ~= toLower(c);\n            else\n                result ~= toUpper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    string result = \"\";\n    if (s.length == 0)\n\
    \        return result;\n    foreach(i, c; s)\n    {\n        if (isAlpha(c))\n\
    \            result ~= toLower(c) ? toUpper(c) : toLower(c);\n        else\n \
    \           result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    if(s.length == 0)\n        return s;\n    foreach(i, c; s)\n  \
    \  {\n        if(isLetter(c))\n        {\n            if(c.isUpper)\n        \
    \        result ~= c.toLower;\n            else\n                result ~= c.toUpper;\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    if(s.length == 0)\n        return s;\n\
    \    foreach(i, c; s)\n    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n\
    \                result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  return result;\n}", "{\n    string result = \"\";\n    if(s.length == 0)\n\
    \        return s;\n    foreach(c; s)\n    {\n        if(c.isLetter)\n       \
    \ {\n            if(c.isUpper)\n                result ~= c.toLower;\n       \
    \     else\n                result ~= c.toUpper;\n        }\n        else\n  \
    \          result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n     \
    \       result ~= c.toUpper;\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string res =\
    \ \"\";\n    if(s.length == 0) return res;\n    foreach(i, c; s)\n    {\n    \
    \    if(c.isLetter)\n        {\n            if(c.isUpper)\n                res\
    \ ~= c.toLower;\n            else\n                res ~= c.toUpper;\n       \
    \ }\n        else\n            res ~= c;\n    }\n    return res.length == 0 ?\
    \ s.dup.reverse : res;\n}", "{\n    string ret = \"\";\n    foreach(c; s)\n  \
    \  {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n       \
    \         ret ~= toLower(c);\n            else\n                ret ~= toUpper(c);\n\
    \        }\n        else\n            ret ~= c;\n    }\n    return ret;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    if(s.length == 0)\n        return s;\n    foreach(i,\
    \ c; s)\n    {\n        if(isAlpha(c))\n            result ~= toUpper(c);\n  \
    \      else\n            result ~= toLower(c);\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n     \
    \   {\n            if(isUpper(c))\n                result ~= toLower(c);\n   \
    \         else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s : result;\n\
    }", "{\n    string result = \"\";\n    if (s.length == 0)\n        return result;\n\
    \    foreach(c; s)\n    {\n        if (c.isLetter)\n            result ~= c.toUpper.toLower;\n\
    \        else\n            result ~= c;\n    }\n    return result.length == 0\
    \ ? s.dup.reverse : result;\n}", "{\n    string result;\n    foreach(c; s)\n \
    \   {\n        if(isLetter(c))\n        {\n            result ~= to!string(c ^\
    \ ' ');\n        }\n        else\n        {\n            result ~= c;\n      \
    \  }\n    }\n    return result.length == 0 ? s : result;\n}", "{\n    string res;\n\
    \    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            res\
    \ ~= isUpper(c) ? toLower(c) : toUpper(c);\n        }\n        else\n        {\n\
    \            res ~= c;\n        }\n    }\n    return res.length == 0 ? s : res;\n\
    }", "{\n    string result = \"\";\n    if (s.length == 0)\n        return s;\n\
    \    foreach(i, c; s)\n    {\n        if (c.isAlpha)\n            result ~= c.toUpper.toLower;\n\
    \        else\n            result ~= c;\n    }\n    return result;\n}", "{\n \
    \   string result;\n    if(s.length == 0)\n        return s;\n    foreach(c; s)\n\
    \    {\n        if(c.isLetter)\n            result ~= c.toUpper.toLower;\n   \
    \     else\n            result ~= c;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n\
    \            if(isLower(c))\n                result ~= toUpper(c);\n         \
    \   else\n                result ~= toLower(c);\n        }\n        else\n   \
    \         result ~= c;\n    }\n    return result;\n}", "{\n    string result =\
    \ \"\";\n    if(s.length == 0)\n        return result;\n    foreach(i; 0 .. s.length)\n\
    \    {\n        if(s[i] >= 'a' && s[i] <= 'z')\n            result ~= to!string(toUpper(s[i]));\n\
    \        else if(s[i] >= 'A' && s[i] <= 'Z')\n            result ~= to!string(toLower(s[i]));\n\
    \        else\n            result ~= to!string(s[i]);\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(i; 0 .. s.length)\n    {\n    \
    \    if(s[i] >= 'a' && s[i] <= 'z')\n        {\n            result ~= to!string(toUpper(s[i]));\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n         \
    \   result ~= to!string(toLower(s[i]));\n        }\n        else\n        {\n\
    \            result ~= s[i];\n        }\n    }\n    return result;\n}", "{\n \
    \   string result = \"\";\n    foreach(i; 0 .. s.length)\n    {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z')\n        {\n            result ~= s[i].toUpper;\n   \
    \     }\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            result\
    \ ~= s[i].toLower;\n        }\n        else\n        {\n            result ~=\
    \ s[i];\n        }\n    }\n    if(result.length == s.length)\n    {\n        return\
    \ result;\n    }\n    else\n    {\n        return s.reverse;\n    }\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    if(s.length == 0) return s;\n    string result = \"\";\n    foreach(c; s)\n\
    \    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n     \
    \           result ~= toLower(c);\n            else\n                result ~=\
    \ toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            result ~= toUpper(c);\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    foreach(c; s)\n    {\n        if(c.isLetter)\n      \
    \  {\n            result ~= c.toUpper;\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       result ~= isUpper(c) ? toLower(c) : toUpper(c);\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n \
    \   {\n        if(c.isAlpha)\n        {\n            result ~= c.toLower;\n  \
    \      }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result.reverse;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c.isLetter)\n        {\n            result ~= c.toUpper;\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result.length == 0 ? s.dup.reverse : result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(i; 0 .. s.length)\n    {\n        if(s[i] >= 'a'\
    \ && s[i] <= 'z')\n        {\n            result ~= toupper(s[i]);\n        }\n\
    \        else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            result ~=\
    \ tolower(s[i]);\n        }\n        else\n        {\n            result ~= s[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string res = \"\";\n    if(s.length == 0)\n  \
    \      return res;\n    foreach(i, c; s)\n    {\n        if(c.isLetter)\n    \
    \        res ~= c.toLower;\n        else\n            res ~= c;\n    }\n    if(res.length\
    \ == s.length)\n        return res.reverse;\n    else\n        return s.reverse;\n\
    }", "{\n    string result = \"\";\n    if(s.length == 0)\n        return result;\n\
    \    foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n\
    \                result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  return result.length == 0 ? s.dup.reverse : result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isLower(c))\n                result ~= toUpper(c);\n            else\n\
    \                result ~= toLower(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    if(result.length == 0)\n    {\n        return reverse(s);\n    }\n  \
    \  return reverse(result);\n}", "{\n    string result = \"\";\n    if (s.length\
    \ == 0)\n        return s;\n    foreach(i, c; s)\n    {\n        if (c.isLetter)\n\
    \            result ~= c.toUpper.toLower;\n        else\n            result ~=\
    \ c;\n    }\n    return result.length == s.length ? result.dup.reverse : result;\n\
    }", "{\n    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            result ~= toLower(c);\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result.length >\
    \ 0 ? result : s.dup.reverse;\n}", "{\n    string res;\n    foreach(c; s)\n  \
    \  {\n        if(isAlpha(c))\n        {\n            res ~= toLower(c);\n    \
    \    }\n        else\n        {\n            res ~= c;\n        }\n    }\n   \
    \ return res.reverse;\n}", "{\n    string result = \"\";\n    foreach(i; 0 ..\
    \ s.length)\n    {\n        if(isLetter(s[i]))\n        {\n            result\
    \ ~= to!string(s[i]).toUpper();\n        }\n        else\n        {\n        \
    \    result ~= to!string(s[i]).toLower();\n        }\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    if (s.length == 0)\n        return result;\n\
    \    foreach(i, c; s)\n    {\n        if (isAlpha(c))\n            result ~= toLower(c)\
    \ ? toUpper(c) : toLower(c);\n        else\n            result ~= c;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(ch; s)\n \
    \   {\n        if(isAlpha(ch))\n        {\n            if(isUpper(ch))\n     \
    \           result ~= toLower(ch);\n            else\n                result ~=\
    \ toUpper(ch);\n        }\n        else\n            result ~= ch;\n    }\n  \
    \  return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n\
    \        if(isAlpha(c))\n        {\n            result ~= toLower(c) ? toUpper(c)\
    \ : toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result.length == 0 ? s.dup.reverse : result;\n}",
  "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n                result ~= toUpper(c);\n\
    \            else\n                result ~= toLower(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    if (s.length == 0)\n        return result;\n    foreach(i, c; s)\n\
    \    {\n        if (c.isAlpha)\n            result ~= c.toUpper;\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s.dup.reverse\
    \ : result.reverse;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n  \
    \  {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n        \
    \        result ~= toUpper(c);\n            else\n                result ~= toLower(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n \
    \   {\n        if(isAlpha(c))\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    if(result.length == 0)\n    {\n        return s;\n    }\n    else\n \
    \   {\n        return result;\n    }\n}", "{\n    string result = \"\";\n    if\
    \ (s.length == 0)\n        return s;\n    foreach(c; s)\n    {\n        if (c.isAlpha)\n\
    \            result ~= c.toLower.toUpper;\n        else\n            result ~=\
    \ c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    if (s.length\
    \ == 0)\n        return result;\n    foreach(i, c; s)\n    {\n        if (c.isLetter)\n\
    \            result ~= c.toUpper;\n        else\n            result ~= c;\n  \
    \  }\n    if (result.length == s.length)\n        return result.reverse;\n   \
    \ return s.reverse;\n}", "{\n    string res = \"\";\n    if (s.length == 0)\n\
    \        return s;\n    foreach(i, c; s)\n    {\n        if (isAlpha(c))\n   \
    \         res ~= toLower(c) ? toUpper(c) : toLower(c);\n        else\n       \
    \     res ~= c;\n    }\n    return res;\n}", "{\n    string result = \"\";\n \
    \   foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n            result\
    \ ~= c.toUpper;\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(c.isLetter)\n        {\n            result ~= c.isUpper\
    \ ? c.toLower : c.toUpper;\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result.length == 0 ? s.dup.reverse : result;\n\
    }", "{\n    string result;\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s.dup.reverse\
    \ : result;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s : result;\n\
    }", "{\n    string result;\n    foreach(c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            result ~= toUpper(c);\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s.dup.reverse\
    \ : result;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isUpper(c))\n                result ~= toLower(c);\n\
    \            else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s : result;\n\
    }", "{\n    string result = \"\";\n    if(s.length == 0) return result;\n    foreach(i,\
    \ c; s)\n    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n\
    \                result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  return result.length == 0 ? s : result;\n}", "{\n    string result = \"\";\n\
    \    foreach(i; 0 .. s.length)\n    {\n        if(s[i] >= 'a' && s[i] <= 'z')\n\
    \        {\n            result ~= toupper(s[i]);\n        }\n        else if(s[i]\
    \ >= 'A' && s[i] <= 'Z')\n        {\n            result ~= tolower(s[i]);\n  \
    \      }\n        else\n        {\n            result ~= s[i];\n        }\n  \
    \  }\n    return result;\n}", "{\n    string result = \"\";\n    if(s.length ==\
    \ 0)\n        return result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n                result ~= toUpper(c);\n\
    \            else\n                result ~= toLower(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    if (s.length\
    \ == 0)\n        return s;\n    string result;\n    foreach (c; s)\n    {\n  \
    \      if (c.isAlpha)\n            result ~= c.toUpper;\n        else\n      \
    \      result ~= c;\n    }\n    return result;\n}", "{\n    string res;\n    if(s.length\
    \ == 0) return res;\n    foreach(c; s)\n    {\n        if(c.isLetter)\n      \
    \  {\n            if(c.isUpper)\n                res ~= c.toLower;\n         \
    \   else\n                res ~= c.toUpper;\n        }\n        else\n       \
    \     res ~= c;\n    }\n    return res;\n}", "{\n    string result = \"\";\n \
    \   foreach(i; 0 .. s.length)\n    {\n        if(s[i] >= 'a' && s[i] <= 'z')\n\
    \        {\n            result ~= to!string(toUpper(s[i]));\n        }\n     \
    \   else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            result ~= to!string(toLower(s[i]));\n\
    \        }\n        else\n        {\n            result ~= s[i];\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    if(s.length\
    \ == 0) return s;\n    foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n\
    \            if(c.isUpper)\n                result ~= c.toLower;\n           \
    \ else\n                result ~= c.toUpper;\n        }\n        else\n      \
    \      result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n \
    \   foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            result\
    \ ~= toUpper(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result.length == 0 ? reverse(s) : result;\n}", "{\n\
    \    if (s.length == 0)\n        return s;\n    string res = \"\";\n    foreach(i;\
    \ 0 .. s.length)\n    {\n        if (s[i] >= 'a' && s[i] <= 'z')\n           \
    \ res ~= to!string(s[i]).toUpper();\n        else if (s[i] >= 'A' && s[i] <= 'Z')\n\
    \            res ~= to!string(s[i]).toLower();\n        else\n            res\
    \ ~= to!string(s[i]);\n    }\n    return res;\n}", "{\n    string res = \"\";\n\
    \    if(s.length == 0)\n        return res;\n    foreach(c; s)\n    {\n      \
    \  if(c.isLetter)\n            res ~= c.toUpper;\n        else\n            res\
    \ ~= c;\n    }\n    if(res.length == s.length)\n        return res.reverse;\n\
    \    else\n        return s.reverse;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n \
    \               result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n   \
    \ {\n        if(isalpha(c))\n        {\n            if(isupper(c))\n         \
    \       result ~= tolower(c);\n            else\n                result ~= toupper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    string result = \"\";\n    foreach(i; 0 .. s.length)\n\
    \    {\n        if(isAlpha(s[i]))\n        {\n            if(isUpper(s[i]))\n\
    \            {\n                result ~= toLower(s[i]);\n            }\n    \
    \        else\n            {\n                result ~= toUpper(s[i]);\n     \
    \       }\n        }\n        else\n        {\n            result ~= s[i];\n \
    \       }\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            result ~= toLower(c)\
    \ ? toUpper(c) : toLower(c);\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result.length == 0 ? s : result;\n\
    }", "{\n    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            result ~= toLower(c);\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result.reverse();\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n                result ~= toUpper(c);\n\
    \            else\n                result ~= toLower(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    if(s.length\
    \ == 0) return s;\n    string result = \"\";\n    foreach(c; s)\n    {\n     \
    \   if(c.isLetter)\n        {\n            result ~= c.isUpper ? c.toLower : c.toUpper;\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result.length == 0 ? s.dup.reverse : result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n\
    \            if(isUpper(c))\n                result ~= toLower(c);\n         \
    \   else\n                result ~= toUpper(c);\n        }\n        else\n   \
    \         result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result.length == 0 ? s.dup.reverse : result;\n}", "{\n    if (s.length\
    \ == 0)\n        return s;\n    string result = \"\";\n    foreach(c; s)\n   \
    \ {\n        if (c.isLetter)\n            result ~= c.toUpper.toLower;\n     \
    \   else\n            result ~= c;\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    if(s.length == 0) return s;\n    foreach(i, c; s)\n    {\n    \
    \    if(isAlpha(c))\n        {\n            if(isUpper(c))\n                result\
    \ ~= toLower(c);\n            else\n                result ~= toUpper(c);\n  \
    \      }\n        else\n            result ~= c;\n    }\n    return result;\n}",
  "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            result ~= c.toLower.toUpper;\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result.length\
    \ == 0 ? s.dup.reverse : result;\n}", "{\n    string res = \"\";\n    if(s.length\
    \ == 0)\n        return res;\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(c.isUpper)\n                res ~= c.toLower;\n   \
    \         else\n                res ~= c.toUpper;\n        }\n        else\n \
    \           res ~= c;\n    }\n    return res;\n}", "{\n    string result = \"\"\
    ;\n    if (s.length == 0)\n        return s;\n    foreach(c; s)\n    {\n     \
    \   if (c.isLetter)\n            result ~= c.toUpper;\n        else\n        \
    \    result ~= c;\n    }\n    if (result.length == s.length)\n        return result.reverse;\n\
    \    else\n        return s.reverse;\n}", "{\n    string result = \"\";\n    if\
    \ (s.length == 0) return s;\n    foreach(c; s)\n    {\n        if (c.isLetter)\n\
    \        {\n            if (c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result.length == 0 ? s : result;\n}", "{\n    string\
    \ res;\n    if(s.length == 0)\n        return res;\n    foreach(c; s)\n    {\n\
    \        if(isAlpha(c))\n        {\n            if(isUpper(c))\n             \
    \   res ~= toLower(c);\n            else\n                res ~= toUpper(c);\n\
    \        }\n        else\n            res ~= c;\n    }\n    return res;\n}", "{\n\
    \    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n      \
    \  {\n            if(isUpper(c))\n                result ~= toLower(c);\n    \
    \        else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s : result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    if (s.length == 0)\n        return s;\n    foreach(c;\
    \ s)\n    {\n        if (isAlpha(c))\n            result ~= toLower(c);\n    \
    \    else\n            result ~= c;\n    }\n    if (result.length == s.length)\n\
    \        return result;\n    else\n        return s.reverse;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n\
    \            if(isLower(c))\n                result ~= toUpper(c);\n         \
    \   else\n                result ~= toLower(c);\n        }\n        else\n   \
    \         result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result.length == 0 ? s : result;\n}", "{\n    string res = \"\";\n\
    \    foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n            res\
    \ ~= to!char(to!int(c) ^ 32);\n        }\n        else\n        {\n          \
    \  res ~= c;\n        }\n    }\n    return res.length == 0 ? s.dup.reverse : res;\n\
    }", "{\n    string result = \"\";\n    if(s.length == 0)\n        return s;\n\
    \    foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n\
    \                result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  return result;\n}", "{\n    string res = \"\";\n    foreach(c; s)\n    {\n\
    \        if(isAlpha(c))\n        {\n            res ~= toLower(c);\n        }\n\
    \        else\n        {\n            res ~= c;\n        }\n    }\n    if(res.length\
    \ == 0)\n    {\n        return reverse(s);\n    }\n    else\n    {\n        return\
    \ reverse(res);\n    }\n}", "{\n    string result = \"\";\n    foreach(c; s)\n\
    \    {\n        if(isAlpha(c))\n        {\n            result ~= toUpper(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n\
    \    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n      \
    \          result ~= toUpper(c);\n            else\n                result ~=\
    \ toLower(c);\n        }\n        else\n            result ~= c;\n    }\n    return\
    \ result;\n}", "{\n    string result;\n    if(s.length == 0)\n        return s;\n\
    \    foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n            if(c.isUpper)\n\
    \                result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  return result;\n}", "{\n    string r;\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \            r ~= c.toUpper;\n        else\n            r ~= c;\n    }\n    return\
    \ r.reverse;\n}", "{\n    string result;\n    if(s.length == 0)\n        return\
    \ s;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n            result ~=\
    \ toLower(c) ? toUpper(c) : toLower(c);\n        else\n            result ~= c;\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c.isLetter)\n        {\n            result ~= c.toUpper;\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result.length == 0 ? s.dup.reverse : result;\n}", "{\n    string\
    \ result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n\
    \            result ~= to!string(c).toUpper();\n        }\n        else\n    \
    \    {\n            result ~= to!string(c).toLower();\n        }\n    }\n    return\
    \ result;\n}", "{\n    string result = \"\";\n    if (s.length == 0)\n       \
    \ return result;\n    foreach(c; s)\n    {\n        if (c.isLetter)\n        \
    \    result ~= c.toUpper;\n        else\n            result ~= c;\n    }\n   \
    \ if (result.length == s.length)\n        return result.reverse;\n    else\n \
    \       return s.reverse;\n}", "{\n    string result = \"\";\n    foreach(i; 0\
    \ .. s.length)\n    {\n        if(s[i] >= 'a' && s[i] <= 'z')\n        {\n   \
    \         result ~= to!string(s[i]).toUpper();\n        }\n        else if(s[i]\
    \ >= 'A' && s[i] <= 'Z')\n        {\n            result ~= to!string(s[i]).toLower();\n\
    \        }\n        else\n        {\n            result ~= s[i];\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    if(s.length\
    \ == 0)\n        return s;\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \            result ~= c.toLower.toUpper;\n        else\n            result ~=\
    \ c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n \
    \               result ~= toUpper(c);\n            else\n                result\
    \ ~= toLower(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n   \
    \ {\n        if(c.isLetter)\n        {\n            result ~= c.toUpper;\n   \
    \     }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n  \
    \  {\n        if(isAlpha(c))\n        {\n            result ~= c.isUpper ? toLower(c)\
    \ : toUpper(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result.length == 0 ? s.dup.reverse : result;\n}",
  "{\n    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n     \
    \   {\n            result ~= c.isUpper ? toLower(c) : toUpper(c);\n        }\n\
    \        else\n        {\n            result ~= c;\n        }\n    }\n    return\
    \ result.length == 0 ? s.dup.reverse : result;\n}", "{\n    string result = \"\
    \";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n           \
    \ if(c.isUpper)\n                result ~= c.toLower;\n            else\n    \
    \            result ~= c.toUpper;\n        }\n        else\n            result\
    \ ~= c;\n    }\n    if(result.length == 0)\n        return s.dup.reverse;\n  \
    \  return result;\n}", "{\n    string result;\n    if(s.length == 0)\n       \
    \ return s;\n    foreach(i, c; s)\n    {\n        if(c.isAlpha)\n            result\
    \ ~= c.toUpper;\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == s.length ? result : result.reverse;\n}", "{\n    string res = \"\";\n   \
    \ if(s.length == 0)\n        return res;\n    if(s.length == 1)\n        return\
    \ s.toupper();\n    foreach(c; s)\n    {\n        if(c.isLetter)\n           \
    \ res ~= c.toupper;\n        else\n            res ~= c;\n    }\n    return res.toupper;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result;\n    foreach(i; 0 .. s.length)\n    {\n        if(isAlpha(s[i]))\n\
    \        {\n            result ~= toLower(s[i]);\n        }\n        else\n  \
    \      {\n            result ~= s[i];\n        }\n    }\n    if(result.length\
    \ == 0)\n    {\n        return s;\n    }\n    else\n    {\n        return result;\n\
    \    }\n}", "{\n    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            result ~= toUpper(c);\n        }\n        else\n     \
    \   {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n                result ~= toUpper(c);\n\
    \            else\n                result ~= toLower(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    if(s.length == 0)\n        return s;\n    foreach(i, c; s)\n  \
    \  {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n       \
    \         result ~= toLower(c);\n            else\n                result ~= toUpper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    if (s.length == 0)\n        return s;\n\
    \    foreach(i, c; s)\n    {\n        if (c.isLetter)\n            result ~= c.toUpper;\n\
    \        else\n            result ~= c;\n    }\n    if (result.length == s.length)\n\
    \        return result.reverse;\n    else\n        return s.reverse;\n}", "{\n\
    \    string res = \"\";\n    if(s.length == 0)\n        return res;\n    foreach(c;\
    \ s)\n    {\n        if(c.isAlpha)\n            res ~= c.toUpper;\n        else\n\
    \            res ~= c;\n    }\n    if(res.length == s.length)\n        return\
    \ res.reverse;\n    else\n        return s.reverse;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       result ~= toLower(c);\n        }\n        else\n        {\n          \
    \  result ~= c;\n        }\n    }\n    if(result == \"\")\n    {\n        return\
    \ s;\n    }\n    else\n    {\n        return result;\n    }\n}", "{\n    string\
    \ result = \"\";\n    foreach(i; 0 .. s.length)\n    {\n        if(s[i] >= 'a'\
    \ && s[i] <= 'z')\n        {\n            result ~= s[i].toUpper();\n        }\n\
    \        else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            result ~=\
    \ s[i].toLower();\n        }\n        else\n        {\n            result ~= s[i];\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            result\
    \ ~= to!string(c ^ ' ');\n        }\n        else\n        {\n            result\
    \ ~= c;\n        }\n    }\n    return result.length == 0 ? s : result;\n}", "{\n\
    \    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n      \
    \  {\n            result ~= toUpper(c);\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ result;\n    foreach(ch; s)\n    {\n        if(isAlpha(ch))\n        {\n   \
    \         result ~= toUpper(ch);\n        }\n        else\n        {\n       \
    \     result ~= ch;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ res = \"\";\n    if(s.length == 0) return res;\n    foreach(c; s)\n    {\n \
    \       if(c.isLetter)\n        {\n            if(c.isUpper)\n               \
    \ res ~= c.toLower;\n            else\n                res ~= c.toUpper;\n   \
    \     }\n        else\n            res ~= c;\n    }\n    return res;\n}", "{\n\
    \    string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n      \
    \  {\n            result ~= toUpper(c);\n        }\n        else\n        {\n\
    \            result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ res = \"\";\n    if(s.length == 0) return res;\n    foreach(i, c; s)\n    {\n\
    \        if(c.isLetter)\n        {\n            if(c.isUpper) res ~= c.toLower;\n\
    \            else res ~= c.toUpper;\n        }\n        else res ~= c;\n    }\n\
    \    return res;\n}", "{\n    string result;\n    foreach(c; s)\n    {\n     \
    \   if(isAlpha(c))\n        {\n            if(isUpper(c))\n                result\
    \ ~= toLower(c);\n            else\n                result ~= toUpper(c);\n  \
    \      }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    string res = \"\";\n    if (s.length == 0)\n\
    \        return s;\n    foreach(c; s)\n    {\n        if (c.isLetter)\n      \
    \      res ~= c.toUpper;\n        else\n            res ~= c;\n    }\n    if (res\
    \ == s)\n        return s.reverse;\n    else\n        return res;\n}", "{\n  \
    \  string res;\n    foreach(c; s)\n    {\n        if(isLetter(c))\n        {\n\
    \            if(isUpper(c))\n                res ~= toLower(c);\n            else\n\
    \                res ~= toUpper(c);\n        }\n        else\n            res\
    \ ~= c;\n    }\n    return res;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n \
    \               result ~= toUpper(c);\n            else\n                result\
    \ ~= toLower(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n   \
    \ {\n        if(c.isLetter)\n        {\n            result ~= c.toUpper;\n   \
    \     }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n  \
    \  {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n        \
    \        result ~= toUpper(c);\n            else\n                result ~= toLower(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(i; 0 .. s.length)\n    {\n    \
    \    if(s[i] >= 'a' && s[i] <= 'z')\n        {\n            result ~= to!string(toUpper(s[i]));\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n         \
    \   result ~= to!string(toLower(s[i]));\n        }\n        else\n        {\n\
    \            result ~= s[i];\n        }\n    }\n    return result;\n}", "{\n \
    \   string result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n       \
    \ {\n            if(isUpper(c))\n                result ~= toLower(c);\n     \
    \       else\n                result ~= toUpper(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s : result;\n\
    }", "{\n    string ret = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n\
    \        {\n            ret ~= c.toUpper;\n        }\n        else\n        {\n\
    \            ret ~= c;\n        }\n    }\n    return ret;\n}", "{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       result ~= toLower(c) ? toUpper(c) : toLower(c);\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result.length\
    \ == 0 ? s.dup.reverse : result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n  \
    \              result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  if(result.length == 0)\n        return s.dup.reverse;\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s.dup.reverse\
    \ : result;\n}", "{\n    if (s.length == 0)\n        return s;\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if (isLetter(c))\n            result\
    \ ~= to!string(c ^ ' ');\n        else\n            result ~= to!string(c);\n\
    \    }\n    return result;\n}", "{\n    string result;\n    foreach(c; s)\n  \
    \  {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n        \
    \        result ~= toLower(c);\n            else\n                result ~= toUpper(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n \
    \   {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n        \
    \        result ~= c.toLower;\n            else\n                result ~= c.toUpper;\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s.dup.reverse : result;\n}", "{\n    string result = \"\";\n    if (s.length\
    \ == 0)\n        return s;\n    foreach(i, c; s)\n    {\n        if (isAlpha(c))\n\
    \            result ~= toUpper(c);\n        else\n            result ~= c;\n \
    \   }\n    return result;\n}", "{\n    string res = \"\";\n    if(s.length ==\
    \ 0)\n        return res;\n    foreach(i, c; s)\n    {\n        if(isLetter(c))\n\
    \        {\n            if(isUpper(c))\n                res ~= toLower(c);\n \
    \           else\n                res ~= toUpper(c);\n        }\n        else\n\
    \            res ~= c;\n    }\n    return res;\n}", "{\n    string result = \"\
    \";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n           \
    \ if(isLower(c))\n                result ~= toUpper(c);\n            else\n  \
    \              result ~= toLower(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            result ~= toLower(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    if(result.length == 0)\n    {\n        return s.dup.reverse;\n    }\n\
    \    return result.dup.reverse;\n}", "{\n    string result;\n    foreach(c; s)\n\
    \    {\n        if(isAlpha(c))\n        {\n            result ~= toUpper(c);\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    return result.length == 0 ? s : result;\n}", "{\n    string result =\
    \ \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n       \
    \     result ~= toLower(c) ? toUpper(c) : toLower(c);\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result.length\
    \ ? result : s.dup.reverse;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isLetter(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result;\n}", "{\n    string res;\n    foreach(c; s)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            res ~= isUpper(c) ? toLower(c) : toUpper(c);\n\
    \        }\n        else\n        {\n            res ~= c;\n        }\n    }\n\
    \    return res.length == 0 ? s.dup.reverse : res;\n}", "{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result.length == 0 ? s : result;\n}", "{\n    string result = \"\"\
    ;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result.length == 0 ? s : result.reverse;\n}", "{\n\
    \    string res = \"\";\n    if(s.length == 0) return res;\n    foreach(c; s)\n\
    \    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n       \
    \         res ~= c.toLower;\n            else\n                res ~= c.toUpper;\n\
    \        }\n        else\n            res ~= c;\n    }\n    return res;\n}", "{\n\
    \    string result = \"\";\n    if(s.length == 0)\n        return result;\n  \
    \  foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n\
    \                result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  if(result.length == 0)\n        return s.dup.reverse;\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(i; 0 .. s.length)\n    {\n    \
    \    if(s[i] >= 'a' && s[i] <= 'z')\n        {\n            result ~= to!string(s[i]).toUpper;\n\
    \        }\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n         \
    \   result ~= to!string(s[i]).toLower;\n        }\n        else\n        {\n \
    \           result ~= s[i];\n        }\n    }\n    return result;\n}", "{\n  \
    \  string res = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n    \
    \    {\n            res ~= toLower(c) ? toUpper(c) : toLower(c);\n        }\n\
    \        else\n        {\n            res ~= c;\n        }\n    }\n    return\
    \ res.length == 0 ? s : res;\n}", "{\n    string result;\n    foreach(c; s)\n\
    \    {\n        if(c.isAlpha)\n        {\n            if(c.isUpper)\n        \
    \        result ~= c.toLower;\n            else\n                result ~= c.toUpper;\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result.reverse;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            result ~= c.toUpper;\n        }\n        else\n      \
    \  {\n            result ~= c;\n        }\n    }\n    return result;\n}", "{\n\
    \    string res = \"\";\n    foreach(i; 0 .. s.length)\n    {\n        if(s[i]\
    \ >= 'a' && s[i] <= 'z')\n        {\n            res ~= toupper(s[i]);\n     \
    \   }\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            res\
    \ ~= tolower(s[i]);\n        }\n        else\n        {\n            res ~= s[i];\n\
    \        }\n    }\n    if(res.length == s.length)\n    {\n        return res;\n\
    \    }\n    else\n    {\n        return reverse(res);\n    }\n}", "{\n    string\
    \ result;\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       result ~= c.isUpper ? toLower(c) : toUpper(c);\n        }\n        else\n\
    \        {\n            result ~= c;\n        }\n    }\n    return result.length\
    \ == 0 ? s.dup.reverse : result;\n}", "{\n    string result = \"\";\n    foreach(c;\
    \ s)\n    {\n        if(isLetter(c))\n        {\n            result ~= toLower(c)\
    \ ? toUpper(c) : toLower(c);\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result.length == 0 ? s : result;\n\
    }", "{\n    string res = \"\";\n    if(s.length == 0)\n        return res;\n \
    \   if(s.length == 1)\n        return s.toupper();\n    foreach(c; s)\n    {\n\
    \        if(c.isLetter)\n            res ~= c.toupper;\n        else\n       \
    \     res ~= c;\n    }\n    return res;\n}", "{\n    string result = \"\";\n \
    \   foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n            result\
    \ ~= c.toUpper;\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    return result;\n}", "{\n    string result = \"\";\n   \
    \ if(s.length == 0)\n        return result;\n    foreach(c; s)\n    {\n      \
    \  if(c.isLetter)\n        {\n            if(c.isUpper)\n                result\
    \ ~= c.toLower;\n            else\n                result ~= c.toUpper;\n    \
    \    }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s : result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n \
    \   {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n       \
    \         result ~= toUpper(c);\n            else\n                result ~= toLower(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    if (s.length == 0)\n        return result;\n\
    \    foreach(c; s)\n    {\n        if (c.isLetter)\n            result ~= c.toUpper;\n\
    \        else\n            result ~= c;\n    }\n    if (result.length == s.length)\n\
    \        return result.reverse;\n    else\n        return s.reverse;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n                result ~= toUpper(c);\n\
    \            else\n                result ~= toLower(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isLower(c))\n                result ~= toUpper(c);\n            else\n\
    \                result ~= toLower(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result.length == 0 ? s : result;\n}", "{\n    string\
    \ result;\n    if(s.length == 0)\n        return s;\n    foreach(i, c; s)\n  \
    \  {\n        if(c.isLetter)\n            result ~= c.toUpper.toLower;\n     \
    \   else\n            result ~= c;\n    }\n    return result;\n}", "{\n    string\
    \ result = \"\";\n    if(s.length == 0) return result;\n    foreach(i, c; s)\n\
    \    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n       \
    \         result ~= c.toLower;\n            else\n                result ~= c.toUpper;\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result;\n\
    }", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            result ~= toLower(c) ? toUpper(c) : toLower(c);\n    \
    \    }\n        else\n        {\n            result ~= c;\n        }\n    }\n\
    \    return result.length == 0 ? s : result;\n}", "{\n    string res = \"\";\n\
    \    if(s.length == 0)\n        return res;\n    foreach(c; s)\n    {\n      \
    \  if(isAlpha(c))\n        {\n            if(isUpper(c))\n                res\
    \ ~= toLower(c);\n            else\n                res ~= toUpper(c);\n     \
    \   }\n        else\n            res ~= c;\n    }\n    return res;\n}", "{\n \
    \   string result = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s : result;\n\
    }", "{\n    string result;\n    foreach(c; s)\n    {\n        if(c.isLetter)\n\
    \        {\n            if(c.isUpper)\n                result ~= c.toLower;\n\
    \            else\n                result ~= c.toUpper;\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result.length == 0 ? s.dup.reverse\
    \ : result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n    {\n   \
    \     if(isAlpha(c))\n        {\n            if(isLower(c))\n                result\
    \ ~= toUpper(c);\n            else\n                result ~= toLower(c);\n  \
    \      }\n        else\n            result ~= c;\n    }\n    return result;\n}",
  "{\n    string result;\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n      \
    \  {\n            result ~= c.toLower;\n        }\n        else\n        {\n \
    \           result ~= c;\n        }\n    }\n    return result.reverse;\n}", "{\n\
    \    string result = \"\";\n    if(s.length == 0) return result;\n    foreach(i,\
    \ c; s)\n    {\n        if(c.isLetter)\n        {\n            if(c.isUpper)\n\
    \                result ~= c.toLower;\n            else\n                result\
    \ ~= c.toUpper;\n        }\n        else\n            result ~= c;\n    }\n  \
    \  if(result.length == 0)\n        return s.reverse;\n    return result;\n}",
  "{\n    string result = \"\";\n    if(s.length == 0)\n        return s;\n    foreach(c;\
    \ s)\n    {\n        if(c.isAlpha)\n            result ~= c.toUpper;\n       \
    \ else\n            result ~= c;\n    }\n    return result.length == s.length\
    \ ? result : result.reverse;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
