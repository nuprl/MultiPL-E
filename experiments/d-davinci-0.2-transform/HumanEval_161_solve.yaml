name: HumanEval_161_solve
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n \
  \   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n\
  \    otherwise keep it as it is.\n    If the string contains no letters, reverse\
  \ the string.\n    The function should return the resulted string.\n    Examples\n\
  \    >>> solve(\"1234\")\n    \"4321\"\n    >>> solve(\"ab\")\n    \"AB\"\n    >>>\
  \ solve(\"#a@C\")\n    \"#A@c\"\n    \n*/\nstring solve(string s) \n"
tests: "unittest\n{\n    alias candidate = solve;\n\n    assert(candidate(\"AsDf\"\
  ) == \"aSdF\");\n    assert(candidate(\"1234\") == \"4321\");\n    assert(candidate(\"\
  ab\") == \"AB\");\n    assert(candidate(\"#a@C\") == \"#A@c\");\n    assert(candidate(\"\
  #AsdfW^45\") == \"#aSDFw^45\");\n    assert(candidate(\"#6@2\") == \"2@6#\");\n\
  \    assert(candidate(\"#$a^D\") == \"#$A^d\");\n    assert(candidate(\"#ccc\")\
  \ == \"#CCC\");\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n                result ~= toUpper(c);\n\
    \            else\n                result ~= toLower(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isLower(c))\n                result ~= toUpper(c);\n            else\n\
    \                result ~= toLower(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n \
    \               result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result.length == 0 ? s.dup.reverse : result;\n}", "{\n    string result;\n\
    \    if (s.length == 0)\n        return s;\n    foreach(c; s)\n    {\n       \
    \ if (isAlpha(c))\n            result ~= toLower(c);\n        else\n         \
    \   result ~= c;\n    }\n    if (result.length == s.length)\n        return result;\n\
    \    else\n        return s.dup.reverse;\n}", "{\n    string result = \"\";\n\
    \    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            result\
    \ ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n\
    \        }\n    }\n    if(result.length == 0)\n    {\n        return s;\n    }\n\
    \    else\n    {\n        return result;\n    }\n}", "{\n    string result = \"\
    \";\n    foreach(i; 0 .. s.length)\n    {\n        if(s[i] >= 'a' && s[i] <= 'z')\n\
    \        {\n            result ~= to!string(s[i]).toUpper();\n        }\n    \
    \    else if(s[i] >= 'A' && s[i] <= 'Z')\n        {\n            result ~= to!string(s[i]).toLower();\n\
    \        }\n        else\n        {\n            result ~= s[i];\n        }\n\
    \    }\n    return result;\n}", "{\n    string result = \"\";\n    if (s.length\
    \ == 0)\n        return result;\n    foreach(i, c; s)\n    {\n        if (isAlpha(c))\n\
    \            result ~= toLower(c) == c ? toUpper(c) : toLower(c);\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c.isAlpha)\n        {\n      \
    \      if(c.isUpper)\n                result ~= c.toLower;\n            else\n\
    \                result ~= c.toUpper;\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result.length == 0 ? s : result.reverse;\n}", "{\n\
    \    string result = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n\
    \        {\n            if(isLower(c))\n                result ~= toUpper(c);\n\
    \            else\n                result ~= toLower(c);\n        }\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result;\n\
    \    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n            if(isUpper(c))\n\
    \                result ~= toLower(c);\n            else\n                result\
    \ ~= toUpper(c);\n        }\n        else\n            result ~= c;\n    }\n \
    \   return result.length == 0 ? s.dup.reverse : result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(isAlpha(c))\n        {\n     \
    \       if(isLower(c))\n                result ~= toUpper(c);\n            else\n\
    \                result ~= toLower(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            result ~= to!string(c).toUpper();\n\
    \        }\n        else\n        {\n            result ~= to!string(c).toLower();\n\
    \        }\n    }\n    return result;\n}", "{\n    string result;\n    foreach(c;\
    \ s)\n    {\n        if(isAlpha(c))\n        {\n            result ~= toLower(c)\
    \ ? toUpper(c) : toLower(c);\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result.length ? result : result.dup.reverse;\n\
    }", "{\n    string result = \"\";\n    if (s.length == 0)\n        return result;\n\
    \    foreach(c; s)\n    {\n        if (isAlpha(c))\n        {\n            if\
    \ (isUpper(c))\n                result ~= toLower(c);\n            else\n    \
    \            result ~= toUpper(c);\n        }\n        else\n            result\
    \ ~= c;\n    }\n    return result;\n}", "{\n    string result;\n    if (s.length\
    \ == 0)\n        return s;\n    foreach(i, c; s)\n    {\n        if (isAlpha(c))\n\
    \            result ~= toLower(c) ? toUpper(c) : toLower(c);\n        else\n \
    \           result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    foreach(c; s)\n    {\n        if(c.isLetter)\n        {\n     \
    \       result ~= c.toUpper;\n        }\n        else\n        {\n           \
    \ result ~= c;\n        }\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    if (s.length == 0)\n        return s;\n    foreach(c; s)\n    {\n\
    \        if (c.isLetter)\n            result ~= c.toUpper.toLower;\n        else\n\
    \            result ~= c;\n    }\n    return result;\n}", "{\n    string result\
    \ = \"\";\n    if (s.length == 0)\n        return result;\n    foreach(i, c; s)\n\
    \    {\n        if (c.isLetter)\n            result ~= c.toUpper.toLower;\n  \
    \      else\n            result ~= c;\n    }\n    return result.length == 0 ?\
    \ s.dup.reverse : result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n\
    \    {\n        if(c.isAlpha)\n        {\n            result ~= c.toUpper.toLower;\n\
    \        }\n        else\n        {\n            result ~= c;\n        }\n   \
    \ }\n    if(result.length == 0)\n    {\n        return s.dup.reverse;\n    }\n\
    \    return result;\n}", "{\n    string result = \"\";\n    foreach(c; s)\n  \
    \  {\n        if(isAlpha(c))\n        {\n            if(isLower(c))\n        \
    \        result ~= toUpper(c);\n            else\n                result ~= toLower(c);\n\
    \        }\n        else\n            result ~= c;\n    }\n    return result.length\
    \ == 0 ? s : result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
