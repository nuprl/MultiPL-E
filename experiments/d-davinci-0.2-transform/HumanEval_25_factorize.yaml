name: HumanEval_25_factorize
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Return list of prime factors\
  \ of given integer in the order from smallest to largest.\n    Each of the factors\
  \ should be listed number of times corresponding to how many times it appeares in\
  \ factorization.\n    Input number should be equal to the product of all factors\n\
  \    >>> factorize(8L)\n    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n\
  \    >>> factorize(70L)\n    [2L, 5L, 7L]\n    \n*/\nlong[] factorize(long n) \n"
tests: "unittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L)\
  \ == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) ==\
  \ [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L)\
  \ == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L,\
  \ 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L)\
  \ == [2L, 3L, 3L]);\n}\nvoid main(){}"
completions: ["{\n    long[] factors;\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L,\
    \ 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L,\
    \ 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L,", "{\n    long[] res = new long[];\n   \
    \ long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n\
    \            res ~= i;\n            n /= i;\n        } \n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return res;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            result ~= d;\n          \
    \  n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n  \
    \  long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while\
    \ (n % d == 0) \n        {\n            result ~= d;\n            n /= d;\n  \
    \      }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0)\
    \ \n        {\n            result ~= d;\n            n /= d;\n        }\n    \
    \    d += 1;\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n\
    \    long[] primes = new long[0];\n    long[] powers = new long[0];\n    long[]\
    \ factors = new long[0];\n    long[] factors_powers = new long[0];\n    long[]\
    \ factors_powers_sorted = new long[0];\n    long[] factors_sorted = new long[0];\n\
    \    long[] factors_powers_sorted_unique = new long[0];\n    long[] factors_sorted_unique\
    \ = new long[0];\n    long[] factors_sorted_unique_powers = new long[0];\n   \
    \ long[] factors_sorted_unique_powers_sorted = new long[0];\n    long[] factors_sorted_unique_powers_sorted_unique\
    \ = new long[0];\n    long[] factors_sorted_unique_powers_sorted_unique_powers\
    \ = new long[0];\n    long[] factors_sorted_unique_powers_sorted_unique_powers_sorted\
    \ = new long[0];\n    long[] factors_sorted_unique_powers_sorted_unique_powers_sorted_unique\
    \ = new long[0];\n    long[] factors_sorted_unique_powers_sorted_unique_powers_sorted_unique_powers\
    \ = new long[0];\n    long[] factors_sorted_unique_powers_sorted_unique_powers_sorted_unique_powers_sorted\
    \ = new long[0];\n    long[] factors_sorted_unique_powers_sorted_unique_powers_sorted_unique_powers_sorted_unique\
    \ = new long[0];\n    long[] factors_sorted_unique_powers_sorted_unique_powers_sorted_unique_powers_sorted_unique_powers\
    \ = new long[0];\n    long[] factors_sorted_unique_powers_sorted_unique_powers_sorted_unique_powers_sorted_unique_powers_sorted\
    \ = new long[0];\n    long[] factors_sorted_unique_powers_sorted_unique_powers_sorted_unique_powers_sorted_unique_powers_sorted_unique\
    \ = new long[0];\n    long[] factors_sorted_unique_powers_s", "{\n    long[] result\
    \ = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L,\
    \ 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L,\
    \ 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L,\
    \ 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L,\
    \ 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L,\
    \ 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L,\
    \ 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L,\
    \ 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L,\
    \ 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L,\
    \ 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L,\
    \ 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L,\
    \ 827L, 829L, 839L", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            factors ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] factors = new long[];\n\
    \    long[] primes = getPrimes(n);\n    foreach(prime; primes)\n    {\n      \
    \  while(n % prime == 0)\n        {\n            n /= prime;\n            factors\
    \ ~= prime;\n        }\n    }\n    return factors;\n}", "{\n    long[] result\
    \ = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            result ~= i;\n            n /= i;\n        }\n       \
    \ else \n        {\n            i++;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = [];\n    long i = 2;\n    while (n > 1) \n    {\n      \
    \  if (n % i == 0) \n        {\n            result ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] result = new long[];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n            result\
    \ ~= i;\n            n /= i;\n        } \n        else \n        {\n         \
    \   i++;\n        }\n    }\n    return result;\n}", "{\n    long[] factors = new\
    \ long[];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            factors ~= i;\n            n /= i;\n        } \n  \
    \      else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        while (n % i == 0) \n        {\n            factors ~= i;\n         \
    \   n /= i;\n        }\n        i++;\n    }\n    return factors;\n}", "{\n   \
    \ long[] result = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while\
    \ (n % i == 0) \n        {\n            result ~= i;\n            n /= i;\n  \
    \      }\n        i++;\n    }\n    return result;\n}", "{\n    long[] factors\
    \ = new long[];\n    long[] primes = primes(n);\n    foreach(prime; primes)\n\
    \    {\n        while(n % prime == 0)\n        {\n            n /= prime;\n  \
    \          factors ~= prime;\n        }\n    }\n    return factors;\n}", "{\n\
    \    long[] ret = new long[];\n    long i = 2;\n    while (n > 1) \n    {\n  \
    \      if (n % i == 0) \n        {\n            ret ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return ret;\n}", "{\n    long[] factors = [];\n    long[] primes = [2L, 3L,\
    \ 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L,\
    \ 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L,\
    \ 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L,\
    \ 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L,\
    \ 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L,\
    \ 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L,\
    \ 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L,\
    \ 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L,\
    \ 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L,\
    \ 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L,\
    \ 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ res = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            res ~= i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i++;\n        }\n    }\n    return res;\n}",
  "{\n    long[] res = new long[];\n    if (n <= 1) return res;\n    long i = 2;\n\
    \    while (n > 1)\n    {\n        if (n % i == 0)\n        {\n            res\
    \ ~= i;\n            n /= i;\n        }\n        else\n        {\n           \
    \ i++;\n        }\n    }\n    return res;\n}", "{\n    long[] factors = new long[];\n\
    \    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n      \
    \  {\n            factors ~= i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n\
    \    long[] result = new long[];\n    long[] primes = new long[];\n    long[]\
    \ prime_powers = new long[];\n    long[] prime_powers_count = new long[];\n  \
    \  long[] prime_powers_count_result = new long[];\n    long[] prime_powers_result\
    \ = new long[];\n    long[] prime_powers_result_temp = new long[];\n    long[]\
    \ prime_powers_result_temp_2 = new long[];\n    long[] prime_powers_result_temp_3\
    \ = new long[];\n    long[] prime_powers_result_temp_4 = new long[];\n    long[]\
    \ prime_powers_result_temp_5 = new long[];\n    long[] prime_powers_result_temp_6\
    \ = new long[];\n    long[] prime_powers_result_temp_7 = new long[];\n    long[]\
    \ prime_powers_result_temp_8 = new long[];\n    long[] prime_powers_result_temp_9\
    \ = new long[];\n    long[] prime_powers_result_temp_10 = new long[];\n    long[]\
    \ prime_powers_result_temp_11 = new long[];\n    long[] prime_powers_result_temp_12\
    \ = new long[];\n    long[] prime_powers_result_temp_13 = new long[];\n    long[]\
    \ prime_powers_result_temp_14 = new long[];\n    long[] prime_powers_result_temp_15\
    \ = new long[];\n    long[] prime_powers_result_temp_16 = new long[];\n    long[]\
    \ prime_powers_result_temp_17 = new long[];\n    long[] prime_powers_result_temp_18\
    \ = new long[];\n    long[] prime_powers_result_temp_19 = new long[];\n    long[]\
    \ prime_powers_result_temp_20 = new long[];\n    long[] prime_powers_result_temp_21\
    \ = new long[];\n    long[] prime_powers_result_temp_22 = new long[];\n    long[]\
    \ prime_powers_result_temp_23 = new long[];\n    long[] prime_powers_result_temp_24\
    \ = new long[];\n    long", "{\n    long[] result = new long[];\n    long divisor\
    \ = 2L;\n    while (n > 1L) \n    {\n        if (n % divisor == 0L) \n       \
    \ {\n            result ~= divisor;\n            n /= divisor;\n        } \n \
    \       else \n        {\n            divisor++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\n\
    \        else\n            i++;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    long i = 2;\n    while (n > 1) \n    {\n        while\
    \ (n % i == 0) \n        {\n            n /= i;\n            result ~= i;\n  \
    \      }\n        i++;\n    }\n    return result;\n}", "{\n    long[] result =\
    \ [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n\
    \        {\n            result ~= i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i++;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1)\n    {\n       \
    \ while (n % d == 0)\n        {\n            result ~= d;\n            n /= d;\n\
    \        }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[];\n    long i = 2;\n    while (i <= n)\n    {\n        if (n % i\
    \ == 0)\n        {\n            result ~= i;\n            n /= i;\n        }\n\
    \        else\n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            result ~= d;\n          \
    \  n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n  \
    \  long[] result = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while\
    \ (n % i == 0) \n        {\n            result ~= i;\n            n /= i;\n  \
    \      }\n        i++;\n    }\n    return result;\n}", "{\n    long[] result =\
    \ [];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0)\
    \ \n        {\n            result ~= i;\n            n /= i;\n        }\n    \
    \    i++;\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long\
    \ d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n\
    \            result ~= d;\n            n /= d;\n        }\n        d += 1;\n \
    \   }\n    return result;\n}", "{\n    long[] result = [];\n    foreach(i; 2..n)\n\
    \    {\n        while(n % i == 0)\n        {\n            result ~= i;\n     \
    \       n /= i;\n        }\n    }\n    return result;\n}", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            factors ~= i;\n            n /= i;\n        } \n  \
    \      else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[];\n    long i\
    \ = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        }\n        i++;\n    }\n\
    \    return result;\n}", "{\n    long[] result = [];\n    foreach(i; 2..n)\n \
    \   {\n        while(n % i == 0)\n        {\n            result ~= i;\n      \
    \      n /= i;\n        }\n    }\n    return result;\n}", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            factors ~= i;\n            n /= i;\n        } \n  \
    \      else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            result ~= d;\n          \
    \  n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n  \
    \  long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while\
    \ (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n \
    \       }\n        i++;\n    }\n    return factors;\n}", "{\n    long[] result;\n\
    \    long[] factors;\n    long[] exponents;\n    long i;\n    long j;\n    long\
    \ k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long\
    \ q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long\
    \ w;\n    long x;\n    long y;\n    long z;\n    long aa;\n    long ab;\n    long\
    \ ac;\n    long ad;\n    long ae;\n    long af;\n    long ag;\n    long ah;\n\
    \    long ai;\n    long aj;\n    long ak;\n    long al;\n    long am;\n    long\
    \ an;\n    long ao;\n    long ap;\n    long aq;\n    long ar;\n    long as;\n\
    \    long at;\n    long au;\n    long av;\n    long aw;\n    long ax;\n    long\
    \ ay;\n    long az;\n    long ba;\n    long bb;\n    long bc;\n    long bd;\n\
    \    long be;\n    long bf;\n    long bg;\n    long bh;\n    long bi;\n    long\
    \ bj;\n    long bk;\n    long bl;\n    long bm;\n    long bn;\n    long bo;\n\
    \    long bp;\n    long bq;\n    long br;\n    long bs;\n    long bt;\n    long\
    \ bu;\n    long bv;\n    long bw;\n    long bx;\n    long by;\n    long bz;\n\
    \    long ca;\n    long cb;\n    long cc;\n    long cd;\n    long ce;\n    long\
    \ cf;\n    long cg;\n    long ch;\n    long ci;\n    long cj;\n    long ck;\n\
    \    long cl;\n    long cm;\n    long cn;\n    long co;\n    long cp;\n    long\
    \ cq;\n    long cr;\n    long cs;\n    long ct;\n    long cu;\n    long cv", "{\n\
    \    long[] result = [];\n    foreach(i; 2..n)\n    {\n        if(n % i == 0)\n\
    \        {\n            result ~= i;\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[];\n\
    \    long[] primes = primesTill(n);\n    foreach(prime; primes)\n    {\n     \
    \   while(n % prime == 0)\n        {\n            result ~= prime;\n         \
    \   n /= prime;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L,\
    \ 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L,\
    \ 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L,\
    \ 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L,\
    \ 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L,\
    \ 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L,\
    \ 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L,\
    \ 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L,\
    \ 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L,\
    \ 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L,\
    \ 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L,\
    \ 827L, 829L, 839L", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (i <= n)\n    {\n        if (n % i == 0)\n        {\n            factors ~=\
    \ i;\n            n /= i;\n        }\n        else\n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while (n %\
    \ d == 0) \n        {\n            result ~= d;\n            n /= d;\n       \
    \ }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[] result = [];\n\
    \    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n     \
    \   {\n            result ~= i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[0];\n    long[] primes = new long[0];\n    long[]\
    \ powers = new long[0];\n    long[] factors = new long[0];\n    long[] factors_powers\
    \ = new long[0];\n    long[] factors_powers_copy = new long[0];\n    long[] factors_powers_copy_copy\
    \ = new long[0];\n    long[] factors_powers_copy_copy_copy = new long[0];\n  \
    \  long[] factors_powers_copy_copy_copy_copy = new long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy\
    \ = new long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy_copy = new\
    \ long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy_copy_copy = new\
    \ long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new long[0];\n    long[] factors_powers_copy_copy_copy_copy_copy", "{\n  \
    \  long[] result = [];\n    foreach(i; 2 .. n)\n    {\n        while(n % i ==\
    \ 0)\n        {\n            result ~= i;\n            n /= i;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ factors ~= i;\n            n /= i;\n        }\n        else\n            i++;\n\
    \    }\n    return factors;\n}", "{\n    long[] res = [];\n    long i = 2;\n \
    \   while (n > 1) \n    {\n        while (n % i == 0) \n        {\n          \
    \  res ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return\
    \ res;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while (n > 1) \n\
    \    {\n        if (n % i == 0) \n        {\n            result ~= i;\n      \
    \      n /= i;\n        } \n        else \n        {\n            i++;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] factors = new long[];\n \
    \   long[] primes = new long[];\n    long[] primeFactors = new long[];\n    long[]\
    \ primeFactorsCount = new long[];\n    long i = 2L;\n    long j = 0L;\n    long\
    \ k = 0L;\n    long l = 0L;\n    long m = 0L;\n    long nn = n;\n    while (i\
    \ <= n)\n    {\n        if (n % i == 0L)\n        {\n            primes ~= i;\n\
    \            n /= i;\n        }\n        else\n        {\n            i++;\n \
    \       }\n    }\n    while (j < primes.length)\n    {\n        if (primes[j]\
    \ == primes[j + 1L])\n        {\n            primeFactors ~= primes[j];\n    \
    \        primeFactorsCount ~= 1L;\n            j++;\n        }\n        else\n\
    \        {\n            primeFactors ~= primes[j];\n            primeFactorsCount\
    \ ~= 1L;\n            j++;\n        }\n    }\n    while (k < primeFactors.length)\n\
    \    {\n        if (nn % primeFactors[k] == 0L)\n        {\n            primeFactorsCount[k]++;\n\
    \            nn /= primeFactors[k];\n        }\n        else\n        {\n    \
    \        k++;\n        }\n    }\n    while (l < primeFactors.length)\n    {\n\
    \        while (m < primeFactorsCount[l])\n        {\n            factors ~= primeFactors[l];\n\
    \            m++;\n        }\n        m = 0L;\n        l++;\n    }\n    return\
    \ factors;\n}\n/*\n Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8L)\n\
    \    [2L, 2L, 2L]\n    >>> factorize(25L)\n    [5L, 5L]\n    >>> factorize(70L)\n\
    \    [2", "{\n    long[] factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L,\
    \ 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L,\
    \ 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L,\
    \ 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L,\
    \ 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L,\
    \ 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L,\
    \ 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L,\
    \ 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L,\
    \ 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L,\
    \ 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L,\
    \ 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L,\
    \ 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] result = [];\n   \
    \ long d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n      \
    \  {\n            result ~= d;\n            n /= d;\n        }\n        d += 1;\n\
    \    }\n    return result;\n}", "{\n    long[] factors = [];\n    long divisor\
    \ = 2L;\n    while (n > 1L) \n    {\n        while (n % divisor == 0L) \n    \
    \    {\n            factors ~= divisor;\n            n /= divisor;\n        }\n\
    \        divisor += 1L;\n    }\n    return factors;\n}", "{\n    long[] result\
    \ = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0)\
    \ \n        {\n            result ~= d;\n            n /= d;\n        }\n    \
    \    d += 1;\n    }\n    return result;\n}", "{\n    long[] result = [];\n   \
    \ long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n\
    \            result ~= i;\n            n /= i;\n        } \n        else \n  \
    \      {\n            i++;\n        }\n    }\n    return result;\n}", "{\n   \
    \ long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n \
    \       } \n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return factors;\n}", "{\n    long[] result = new long[];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ result ~= i;\n            n /= i;\n        } \n        else \n        {\n  \
    \          i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[];\n    long[] primes = primes(n);\n    foreach(prime; primes)\n\
    \    {\n        while(n % prime == 0)\n        {\n            result ~= prime;\n\
    \            n /= prime;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while (n %\
    \ d == 0) \n        {\n            result ~= d;\n            n /= d;\n       \
    \ }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[] factors =\
    \ [];\n    long[] primes = sieve(n);\n    foreach(prime; primes)\n    {\n    \
    \    while(n % prime == 0)\n        {\n            n /= prime;\n            factors\
    \ ~= prime;\n        }\n    }\n    return factors;\n}", "{\n    long[] factors\
    \ = new long[];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0) \n        {\n            factors ~= i;\n            n /= i;\n      \
    \  }\n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}", "{\n    long[] result = new long[];\n    long[] primes = [2L,\
    \ 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L,\
    \ 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L,", "{\n    long[]\
    \ result = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L,\
    \ 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L,\
    \ 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L,\
    \ 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L,\
    \ 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L,\
    \ 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L,\
    \ 823L, 827L, 829L, 839L", "{\n    long[] result = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % i == 0) \n        {\n            result\
    \ ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[0];\n    long[] primes = new long[0];\n \
    \   long[] powers = new long[0];\n    long[] prime_powers = new long[0];\n   \
    \ long[] prime_powers_copy = new long[0];\n    long[] prime_powers_copy2 = new\
    \ long[0];\n    long[] prime_powers_copy3 = new long[0];\n    long[] prime_powers_copy4\
    \ = new long[0];\n    long[] prime_powers_copy5 = new long[0];\n    long[] prime_powers_copy6\
    \ = new long[0];\n    long[] prime_powers_copy7 = new long[0];\n    long[] prime_powers_copy8\
    \ = new long[0];\n    long[] prime_powers_copy9 = new long[0];\n    long[] prime_powers_copy10\
    \ = new long[0];\n    long[] prime_powers_copy11 = new long[0];\n    long[] prime_powers_copy12\
    \ = new long[0];\n    long[] prime_powers_copy13 = new long[0];\n    long[] prime_powers_copy14\
    \ = new long[0];\n    long[] prime_powers_copy15 = new long[0];\n    long[] prime_powers_copy16\
    \ = new long[0];\n    long[] prime_powers_copy17 = new long[0];\n    long[] prime_powers_copy18\
    \ = new long[0];\n    long[] prime_powers_copy19 = new long[0];\n    long[] prime_powers_copy20\
    \ = new long[0];\n    long[] prime_powers_copy21 = new long[0];\n    long[] prime_powers_copy22\
    \ = new long[0];\n    long[] prime_powers_copy23 = new long[0];\n    long[] prime_powers_copy24\
    \ = new long[0];\n    long[] prime_powers_copy25 = new long[0];\n    long[] prime_powers_copy26\
    \ = new long[0];\n    long[] prime_powers_copy27 = new long[0];\n    long[] prime_powers_copy28\
    \ = new long[0];\n    long[] prime_powers_copy29 = new long[0];", "{\n    long[]\
    \ result = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L,\
    \ 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L,\
    \ 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L,\
    \ 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L,\
    \ 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L,\
    \ 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L,\
    \ 823L, 827L, 829L, 839L", "{\n    long[] result = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] res = [];\n    long\
    \ d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n\
    \            res ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n\
    \    return res;\n}", "{\n    long[] result = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            result\
    \ ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = [];\n    long d = 2;\n \
    \   while (n > 1) \n    {\n        while (n % d == 0) \n        {\n          \
    \  result ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return\
    \ result;\n}", "{\n    long[] factors = new long[];\n    long i = 2;\n    while\
    \ (n > 1)\n    {\n        while (n % i == 0)\n        {\n            factors ~=\
    \ i;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n\
    }", "{\n    long[] result = new long[];\n    long i = 2;\n    while (n > 1) \n\
    \    {\n        if (n % i == 0) \n        {\n            result ~= i;\n      \
    \      n /= i;\n        } \n        else \n        {\n            i++;\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] factors = [];\n    long d\
    \ = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n  \
    \          factors ~= d;\n            n /= d;\n        }\n        d += 1;\n  \
    \  }\n    return factors;\n}", "{\n    long[] result = [];\n    long d = 2;\n\
    \    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n         \
    \   result ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n   \
    \ return result;\n}", "{\n    long[] result = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            result\
    \ ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L,\
    \ 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L,\
    \ 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] factors = [];\n    long\
    \ d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n\
    \            factors ~= d;\n            n /= d;\n        }\n        d += 1;\n\
    \    }\n    return factors;\n}", "{\n    long[] res = new long[];\n    long i\
    \ = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n  \
    \          res ~= i;\n            n /= i;\n        }\n        i++;\n    }\n  \
    \  return res;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while (n\
    \ > 1) \n    {\n        if (n % i == 0) \n        {\n            factors ~= i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ factors = [];\n    while (n % 2 == 0) \n    {\n        factors ~= 2;\n     \
    \   n /= 2;\n    }\n    long i = 3;\n    while (i <= sqrt(n)) \n    {\n      \
    \  while (n % i == 0) \n        {\n            factors ~= i;\n            n /=\
    \ i;\n        }\n        i += 2;\n    }\n    if (n > 2) \n    {\n        factors\
    \ ~= n;\n    }\n    return factors;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ factors = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L,\
    \ 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L,\
    \ 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L,\
    \ 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L,\
    \ 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L,\
    \ 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L,\
    \ 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L,\
    \ 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L,\
    \ 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L,\
    \ 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L,\
    \ 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L,\
    \ 823L, 827L, 829L, 839L", "{\n    long[] factors = [];\n    long i = 2;\n   \
    \ while (i <= n)\n    {\n        if (n % i == 0)\n        {\n            factors\
    \ ~= i;\n            n /= i;\n        }\n        else\n        {\n           \
    \ i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] result = [];\n\
    \    long d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n   \
    \     {\n            result ~= d;\n            n /= d;\n        }\n        d +=\
    \ 1;\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long i =\
    \ 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n       \
    \     result ~= i;\n            n /= i;\n        } \n        else \n        {\n\
    \            i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0) \n        {\n            result ~= i;\n            n /= i;\n       \
    \ }\n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0) \n        {\n            result ~= i;\n   \
    \         n /= i;\n        } \n        else \n        {\n            i++;\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = new long[];\n\
    \    long d = 2L;\n    while (n > 1L) \n    {\n        while (n % d == 0L) \n\
    \        {\n            result ~= d;\n            n /= d;\n        }\n       \
    \ d += 1L;\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long[]\
    \ primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L,\
    \ 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L,\
    \ 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L,\
    \ 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L,\
    \ 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L,\
    \ 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L,\
    \ 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L,\
    \ 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L,\
    \ 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L,\
    \ 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L,\
    \ 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L",
  "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n      \
    \  while (n % d == 0) \n        {\n            result ~= d;\n            n /=\
    \ d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[];\n    long[] primes = primesTill(n);\n    foreach(prime;\
    \ primes)\n    {\n        while(n % prime == 0)\n        {\n            result\
    \ ~= prime;\n            n /= prime;\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L,\
    \ 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L,\
    \ 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] result = new long[];\n \
    \   long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n       \
    \ {\n            result ~= i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i++;\n        }\n    }\n    return result;\n}", "{\n \
    \   long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n      \
    \  if (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return factors;\n}", "{\n    long[] result = new long[0];\n    long[] primes\
    \ = new long[0];\n    long[] powers = new long[0];\n    long[] factors = new long[0];\n\
    \    long[] powers_factors = new long[0];\n    long[] powers_factors_result =\
    \ new long[0];\n    long[] powers_factors_result_final = new long[0];\n    long[]\
    \ powers_factors_result_final_final = new long[0];\n    long[] powers_factors_result_final_final_final\
    \ = new long[0];\n    long[] powers_factors_result_final_final_final_final = new\
    \ long[0];\n    long[] powers_factors_result_final_final_final_final_final = new\
    \ long[0];\n    long[] powers_factors_result_final_final_final_final_final_final\
    \ = new long[0];\n    long[] powers_factors_result_final_final_final_final_final_final_final\
    \ = new long[0];\n    long[] powers_factors_result_final_final_final_final_final_final_final_final\
    \ = new long[0];\n    long[] powers_factors_result_final_final_final_final_final_final_final_final_final\
    \ = new long[0];\n    long[] powers_factors_result_final_final_final_final_final_final_final_final_final_final\
    \ = new long[0];\n    long[] powers_factors_result_final_final_final_final_final_final_final_final_final_final_final\
    \ = new long[0];\n    long[] powers_factors_result_final_final_final_final_final_final_final_final_final_final_final_final\
    \ = new long[0];\n    long[] powers_factors_result_final_final_final_final_final_final_final_final_final_final_final_final_final\
    \ = new long[0];\n    long[] powers_factors_result_final_final_final_final_final_final_final_final_final_final_final_final_final_final\
    \ = new long[0];\n", "{\n    long[] factors = [];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % i == 0) \n        {\n            factors\
    \ ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    foreach(i; 2 .. sqrt(n) + 1)\n    {\n   \
    \     while(n % i == 0)\n        {\n            result ~= i;\n            n /=\
    \ i;\n        }\n    }\n    if(n > 1)\n        result ~= n;\n    return result;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n)\n    {\n\
    \        if (n % i == 0)\n        {\n            result ~= i;\n            n /=\
    \ i;\n        }\n        else\n        {\n            i++;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ result ~= i;\n            n /= i;\n        } \n        else \n        {\n  \
    \          i++;\n        }\n    }\n    return result;\n}", "{\n    long[] res\
    \ = new long[];\n    long i = 2;\n    while (n > 1)\n    {\n        if (n % i\
    \ == 0)\n        {\n            res ~= i;\n            n /= i;\n        }\n  \
    \      else\n        {\n            i++;\n        }\n    }\n    return res;\n}",
  "{\n    long[] factors = new long[];\n    long i = 2;\n    while (n > 1)\n    {\n\
    \        if (n % i == 0)\n        {\n            factors ~= i;\n            n\
    \ /= i;\n        }\n        else\n        {\n            i++;\n        }\n   \
    \ }\n    return factors;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n         \
    \   factors ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return\
    \ factors;\n}", "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1)\
    \ \n    {\n        while (n % d == 0) \n        {\n            result ~= d;\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}",
  "{\n    long[] result = new long[];\n    foreach(i; 2 .. n)\n    {\n        while(n\
    \ % i == 0)\n        {\n            result ~= i;\n            n /= i;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] factors = [];\n    long i\
    \ = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n    \
    \        factors ~= i;\n            n /= i;\n        } \n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n    long[]\
    \ result = new long[];\n    long[] primes = new long[];\n    long i = 2L;\n  \
    \  while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            result\
    \ ~= i;\n            n /= i;\n        } \n        else \n        {\n         \
    \   i++;\n        }\n    }\n    return result;\n}", "{\n    long[] primes = new\
    \ long[(int)sqrt(n)];\n    long[] factors = new long[(int)sqrt(n)];\n    long[]\
    \ result = new long[(int)sqrt(n)];\n    int i = 0;\n    int j = 0;\n    int k\
    \ = 0;\n    int count = 0;\n    foreach(long p; primes(n))\n    {\n        primes[i]\
    \ = p;\n        i++;\n    }\n    foreach(long f; factors(n))\n    {\n        factors[j]\
    \ = f;\n        j++;\n    }\n    foreach(long p; primes)\n    {\n        foreach(long\
    \ f; factors)\n        {\n            if(p == f)\n            {\n            \
    \    result[k] = p;\n                k++;\n                count++;\n        \
    \    }\n        }\n    }\n    return result[0..count];\n}", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n\
    \        {\n            factors ~= i;\n            n /= i;\n        } \n     \
    \   else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = new long[];\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            result ~= i;\n      \
    \      n /= i;\n        }\n        else \n        {\n            i++;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long d =\
    \ 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n    \
    \        result ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n\
    \    return result;\n}", "{\n    long[] res = new long[];\n    long i = 2;\n \
    \   while (n > 1) \n    {\n        while (n % i == 0) \n        {\n          \
    \  res ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return\
    \ res;\n}", "{\n    long[] result = [];\n    long divisor = 2L;\n    while (n\
    \ > 1L) \n    {\n        while (n % divisor == 0L) \n        {\n            result\
    \ ~= divisor;\n            n /= divisor;\n        }\n        divisor += 1L;\n\
    \    }\n    return result;\n}", "{\n    long[] factors = [];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ factors ~= i;\n            n /= i;\n        } \n        else \n        {\n \
    \           i++;\n        }\n    }\n    return factors;\n}", "{\n    long[] factors\
    \ = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0)\
    \ \n        {\n            factors ~= d;\n            n /= d;\n        }\n   \
    \     d += 1;\n    }\n    return factors;\n}", "{\n    long[] result = [];\n \
    \   long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L,\
    \ 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L,\
    \ 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L,\
    \ 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L,\
    \ 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L,\
    \ 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L,\
    \ 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L,\
    \ 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L,\
    \ 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L,\
    \ 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L,\
    \ 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L,\
    \ 839L", "{\n    long[] result = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L,\
    \ 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L,\
    \ 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L,\
    \ 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L,\
    \ 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L,\
    \ 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L,\
    \ 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L,\
    \ 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L,\
    \ 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L,\
    \ 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L,\
    \ 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L,\
    \ 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] factors = [];\n  \
    \  long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n\
    \            factors ~= i;\n            n /= i;\n        } \n        else \n \
    \       {\n            i++;\n        }\n    }\n    return factors;\n}", "{\n \
    \   long[] factors = [];\n    long i = 2;\n    while (i <= n) \n    {\n      \
    \  if (n % i == 0) \n        {\n            factors ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return factors;\n}", "{\n    long[] result = [];\n    long[] primes = [2L,\
    \ 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L,\
    \ 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L,\
    \ 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L,\
    \ 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L,\
    \ 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L,\
    \ 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L,\
    \ 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L,\
    \ 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L,\
    \ 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L,\
    \ 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L,\
    \ 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            result ~= d;\n          \
    \  n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n  \
    \  long[] result = new long[];\n    long i = 2;\n    while (n > 1) \n    {\n \
    \       if (n % i == 0) \n        {\n            result ~= i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] res = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            res ~= i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return res;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[0];\n    long[] primes = new long[0];\n    long[] powers =\
    \ new long[0];\n    long[] factors = new long[0];\n    long[] factors_powers =\
    \ new long[0];\n    long[] factors_powers_sorted = new long[0];\n    long[] factors_powers_sorted_unique\
    \ = new long[0];\n    long[] factors_powers_sorted_unique_count = new long[0];\n\
    \    long[] factors_powers_sorted_unique_count_sorted = new long[0];\n    long[]\
    \ factors_powers_sorted_unique_count_sorted_unique = new long[0];\n    long[]\
    \ factors_powers_sorted_unique_count_sorted_unique_count = new long[0];\n    long[]\
    \ factors_powers_sorted_unique_count_sorted_unique_count_sorted = new long[0];\n\
    \    long[] factors_powers_sorted_unique_count_sorted_unique_count_sorted_unique\
    \ = new long[0];\n    long[] factors_powers_sorted_unique_count_sorted_unique_count_sorted_unique_count\
    \ = new long[0];\n    long[] factors_powers_sorted_unique_count_sorted_unique_count_sorted_unique_count_sorted\
    \ = new long[0];\n    long[] factors_powers_sorted_unique_count_sorted_unique_count_sorted_unique_count_sorted_unique\
    \ = new long[0];\n    long[] factors_powers_sorted_unique_count_sorted_unique_count_sorted_unique_count_sorted_unique_count\
    \ = new long[0];\n    long[] factors_powers_sorted_unique_count_sorted_unique_count_sorted_unique_count_sorted_unique_count_sorted\
    \ = new long[0];\n    long[] factors_powers_sorted_unique_count_sorted_unique_count_sorted_unique_count_sorted_unique_count_sorted_unique\
    \ = new long[0];\n    long[] factors_powers_sorted_unique_count_sorted_unique_",
  "{\n    long[] result = new long[];\n    long[] primes = new long[];\n    long i\
    \ = 2L;\n    while (i <= n)\n    {\n        if (n % i == 0L)\n        {\n    \
    \        result ~= i;\n            n /= i;\n        }\n        else\n        {\n\
    \            i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0) \n        {\n            result ~= i;\n            n /= i;\n       \
    \ } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while (i * i\
    \ <= n) \n    {\n        if (n % i == 0) \n        {\n            result ~= i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    if (n > 1) \n    {\n        result ~= n;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[0];\n    long[] primes = primesUpTo(n);\n\
    \    foreach(prime; primes)\n    {\n        while(n % prime == 0)\n        {\n\
    \            n /= prime;\n            result ~= prime;\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] factors = [];\n    long d = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % d == 0) \n        {\n            factors\
    \ ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n\
    \        while (n % d == 0) \n        {\n            result ~= d;\n          \
    \  n /= d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n  \
    \  long[] factors = new long[];\n    long[] primes = new long[];\n    long[] exponents\
    \ = new long[];\n    long i = 2;\n    long j = 0;\n    while (i <= n)\n    {\n\
    \        if (n % i == 0)\n        {\n            n /= i;\n            if (primes.length\
    \ == 0 || primes[$-1] != i)\n            {\n                primes ~= i;\n   \
    \             exponents ~= 1;\n            }\n            else\n            {\n\
    \                exponents[$-1]++;\n            }\n        }\n        else\n \
    \       {\n            i++;\n        }\n    }\n    foreach (e; exponents)\n  \
    \  {\n        for (long k = 0; k < e; k++)\n        {\n            factors ~=\
    \ primes[j];\n        }\n        j++;\n    }\n    return factors;\n}", "{\n  \
    \  long[] result = new long[];\n    long i = 2;\n    while (n > 1) \n    {\n \
    \       if (n % i == 0) \n        {\n            result ~= i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i++;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while\
    \ (n > 1)\n    {\n        if (n % i == 0)\n        {\n            result ~= i;\n\
    \            n /= i;\n        }\n        else\n        {\n            i++;\n \
    \       }\n    }\n    return result;\n}", "{\n    long[] result = new long[0];\n\
    \    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n   \
    \     {\n            result ~= i;\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[];\n    long[]\
    \ primes = getPrimes(n);\n    foreach(prime; primes)\n    {\n        while(n %\
    \ prime == 0)\n        {\n            result ~= prime;\n            n /= prime;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\n\
    \        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L,\
    \ 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L,\
    \ 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] factors = [];\n    long[]\
    \ primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L,\
    \ 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L, 107L, 109L,\
    \ 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L, 179L, 181L,\
    \ 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L, 251L, 257L,\
    \ 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L, 331L, 337L,\
    \ 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L, 409L, 419L,\
    \ 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L, 487L, 491L,\
    \ 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L, 577L, 587L,\
    \ 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L, 653L, 659L,\
    \ 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L, 743L, 751L,\
    \ 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L, 829L, 839L",
  "{\n    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n      \
    \  while (n % d == 0) \n        {\n            result ~= d;\n            n /=\
    \ d;\n        }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[]\
    \ factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n        if (n % i\
    \ == 0) \n        {\n            factors ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L,\
    \ 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L,\
    \ 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] result = [];\n    long i\
    \ = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n  \
    \          result ~= i;\n            n /= i;\n        }\n        i++;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ result ~= i;\n            n /= i;\n        } \n        else \n        {\n  \
    \          i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    foreach(i; 2..n)\n    {\n        if(n % i == 0)\n        {\n    \
    \        result ~= i;\n            n /= i;\n            i = 1;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = [];\n    long i = 2;\n \
    \   while (n > 1) \n    {\n        if (n % i == 0) \n        {\n            result\
    \ ~= i;\n            n /= i;\n        } \n        else \n        {\n         \
    \   i++;\n        }\n    }\n    return result;\n}", "{\n    long[] factors = [];\n\
    \    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L,\
    \ 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L, 103L,\
    \ 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L, 173L,\
    \ 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L, 241L,\
    \ 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L, 317L,\
    \ 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L, 401L,\
    \ 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L, 479L,\
    \ 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L, 571L,\
    \ 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L, 647L,\
    \ 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L, 739L,\
    \ 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L, 827L,\
    \ 829L, 839L", "{\n    long[] factors = [];\n    long d = 2;\n    while (n > 1)\
    \ \n    {\n        while (n % d == 0) \n        {\n            factors ~= d;\n\
    \            n /= d;\n        }\n        d += 1;\n    }\n    return factors;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] result = new long[];\n    long d\
    \ = 2L;\n    while (n > 1L) \n    {\n        while (n % d == 0L) \n        {\n\
    \            result ~= d;\n            n /= d;\n        }\n        d += 1L;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[];\n    long\
    \ i = 2;\n    while (n > 1)\n    {\n        if (n % i == 0)\n        {\n     \
    \       result ~= i;\n            n /= i;\n        }\n        else\n        {\n\
    \            i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L,\
    \ 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L, 101L,\
    \ 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L, 157L, 163L, 167L,\
    \ 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L, 229L, 233L, 239L,\
    \ 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L, 307L, 311L, 313L,\
    \ 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L, 383L, 389L, 397L,\
    \ 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L, 461L, 463L, 467L,\
    \ 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L, 557L, 563L, 569L,\
    \ 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L, 631L, 641L, 643L,\
    \ 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L, 719L, 727L, 733L,\
    \ 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L, 811L, 821L, 823L,\
    \ 827L, 829L, 839L", "{\n    long[] result = [];\n    long d = 2;\n    while (n\
    \ > 1) \n    {\n        while (n % d == 0) \n        {\n            result ~=\
    \ d;\n            n /= d;\n        }\n        d += 1;\n    }\n    return result;\n\
    }", "{\n    long[] res = new long[];\n    foreach(i; 2 .. n + 1)\n    {\n    \
    \    while(n % i == 0)\n        {\n            res ~= i;\n            n /= i;\n\
    \        }\n    }\n    return res;\n}", "{\n    long[] factors = new long[];\n\
    \    long[] primes = getPrimes(n);\n    foreach(prime; primes)\n    {\n      \
    \  while(n % prime == 0)\n        {\n            n /= prime;\n            factors\
    \ ~= prime;\n        }\n    }\n    return factors;\n}", "{\n    long[] result\
    \ = [];\n    long d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0)\
    \ \n        {\n            result ~= d;\n            n /= d;\n        }\n    \
    \    d += 1;\n    }\n    return result;\n}", "{\n    long[] result = [];\n   \
    \ long i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n\
    \            result ~= i;\n            n /= i;\n        }\n        else \n   \
    \     {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = [];\n    long d = 2;\n\
    \    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n         \
    \   result ~= d;\n            n /= d;\n        }\n        d += 1;\n    }\n   \
    \ return result;\n}", "{\n    long[] result = [];\n    while (n % 2 == 0) \n \
    \   {\n        result ~= 2;\n        n /= 2;\n    }\n    long i = 3;\n    while\
    \ (i <= sqrt(n)) \n    {\n        while (n % i == 0) \n        {\n           \
    \ result ~= i;\n            n /= i;\n        }\n        i += 2;\n    }\n    if\
    \ (n > 2) \n    {\n        result ~= n;\n    }\n    return result;\n}", "{\n \
    \   long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n       \
    \ if (n % i == 0) \n        {\n            result ~= i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while\
    \ (i <= n)\n    {\n        if (n % i == 0)\n        {\n            result ~= i;\n\
    \            n /= i;\n        }\n        else\n        {\n            i++;\n \
    \       }\n    }\n    return result;\n}", "{\n    long[] res = [];\n    long d\
    \ = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n  \
    \          res ~= d;\n            n /= d;\n        }\n        d++;\n    }\n  \
    \  return res;\n}", "{\n    long[] factors = [];\n    long i = 2;\n    while (n\
    \ != 1)\n    {\n        if (n % i == 0)\n        {\n            factors ~= i;\n\
    \            n /= i;\n        }\n        else\n        {\n            i++;\n \
    \       }\n    }\n    return factors;\n}", "{\n    long[] result = new long[];\n\
    \    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n   \
    \     {\n            result ~= i;\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[];\n    long\
    \ i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n   \
    \         result ~= i;\n            n /= i;\n        } \n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ res = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            res ~= i;\n            n /= i;\n        }\n    \
    \    else \n        {\n            i++;\n        }\n    }\n    return res;\n}",
  "{\n    long[] result = new long[];\n    long d = 2L;\n    while (n > 1L) \n   \
    \ {\n        while (n % d == 0L) \n        {\n            result ~= d;\n     \
    \       n /= d;\n        }\n        d += 1L;\n    }\n    return result;\n}", "{\n\
    \    long[] result = [];\n    long d = 2;\n    while (n > 1) \n    {\n       \
    \ while (n % d == 0) \n        {\n            result ~= d;\n            n /= d;\n\
    \        }\n        d += 1;\n    }\n    return result;\n}", "{\n    long[] factors\
    \ = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            factors ~= i;\n            n /= i;\n        } \n  \
    \      else \n        {\n            i++;\n        }\n    }\n    return factors;\n\
    }", "{\n    long[] factors = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        while (n % i == 0) \n        {\n            factors ~= i;\n         \
    \   n /= i;\n        }\n        i++;\n    }\n    return factors;\n}", "{\n   \
    \ long[] result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            result ~= i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[0];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] res = [];\n    long\
    \ i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n\
    \            res ~= i;\n            n /= i;\n        }\n        i++;\n    }\n\
    \    return res;\n}", "{\n    long[] result = new long[0];\n    long[] primes\
    \ = new long[0];\n    long[] powers = new long[0];\n    long i = 2;\n    while\
    \ (n > 1)\n    {\n        if (n % i == 0)\n        {\n            n /= i;\n  \
    \          if (primes.length == 0 || primes[$-1] != i)\n            {\n      \
    \          primes ~= i;\n                powers ~= 1;\n            }\n       \
    \     else\n            {\n                powers[$-1]++;\n            }\n   \
    \     }\n        else\n        {\n            i++;\n        }\n    }\n    foreach\
    \ (i, p; zip(primes, powers))\n    {\n        result ~= repeat(i, p);\n    }\n\
    \    return result;\n}", "{\n    long[] result = [];\n    long i = 2;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long\
    \ d = 2;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n\
    \            result ~= d;\n            n /= d;\n        }\n        d += 1;\n \
    \   }\n    return result;\n}", "{\n    long[] result = [];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ result ~= i;\n            n /= i;\n        } \n        else \n        {\n  \
    \          i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    long i = 2;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            result ~= i;\n            n /= i;\n        } \n\
    \        else \n        {\n            i++;\n        }\n    }\n    if (n > 1)\
    \ \n    {\n        result ~= n;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i\
    \ == 0) \n        {\n            result ~= i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long[] primes = [2L, 3L, 5L, 7L, 11L, 13L,\
    \ 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L,\
    \ 83L, 89L, 97L, 101L, 103L, 107L, 109L, 113L, 127L, 131L, 137L, 139L, 149L, 151L,\
    \ 157L, 163L, 167L, 173L, 179L, 181L, 191L, 193L, 197L, 199L, 211L, 223L, 227L,\
    \ 229L, 233L, 239L, 241L, 251L, 257L, 263L, 269L, 271L, 277L, 281L, 283L, 293L,\
    \ 307L, 311L, 313L, 317L, 331L, 337L, 347L, 349L, 353L, 359L, 367L, 373L, 379L,\
    \ 383L, 389L, 397L, 401L, 409L, 419L, 421L, 431L, 433L, 439L, 443L, 449L, 457L,\
    \ 461L, 463L, 467L, 479L, 487L, 491L, 499L, 503L, 509L, 521L, 523L, 541L, 547L,\
    \ 557L, 563L, 569L, 571L, 577L, 587L, 593L, 599L, 601L, 607L, 613L, 617L, 619L,\
    \ 631L, 641L, 643L, 647L, 653L, 659L, 661L, 673L, 677L, 683L, 691L, 701L, 709L,\
    \ 719L, 727L, 733L, 739L, 743L, 751L, 757L, 761L, 769L, 773L, 787L, 797L, 809L,\
    \ 811L, 821L, 823L, 827L, 829L, 839L", "{\n    long[] result = new long[];\n \
    \   long i = 2;\n    while (n > 1)\n    {\n        while (n % i == 0)\n      \
    \  {\n            result ~= i;\n            n /= i;\n        }\n        i++;\n\
    \    }\n    return result;\n}", "{\n    long[] result = [];\n    long i = 2;\n\
    \    while (n > 1) \n    {\n        while (n % i == 0) \n        {\n         \
    \   result ~= i;\n            n /= i;\n        }\n        i++;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[];\n    long i = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % i == 0) \n        {\n            result ~=\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = [];\n    long\
    \ i = 2;\n    while (n > 1) \n    {\n        if (n % i == 0) \n        {\n   \
    \         result ~= i;\n            n /= i;\n        } \n        else \n     \
    \   {\n            i++;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = [];\n    long i = 2;\n    while (i <= n)\n    {\n        if (n % i\
    \ == 0)\n        {\n            result ~= i;\n            n /= i;\n        }\n\
    \        else\n        {\n            i++;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = [];\n    long i = 2;\n    while (n > 1) \n    {\n\
    \        if (n % i == 0) \n        {\n            result ~= i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = [];\n    long i = 2;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0) \n        {\n           \
    \ result ~= i;\n            n /= i;\n        } \n        else \n        {\n  \
    \          i++;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = [];\n    long i = 2;\n    while (n > 1) \n    {\n        while (n % i == 0)\
    \ \n        {\n            result ~= i;\n            n /= i;\n        }\n    \
    \    i++;\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
