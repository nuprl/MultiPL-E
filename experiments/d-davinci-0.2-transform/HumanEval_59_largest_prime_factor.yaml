name: HumanEval_59_largest_prime_factor
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
  \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
  \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
  \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
  \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\n\
  void main(){}"
completions: ["{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i ==\
    \ 0L) {\n            largest = i;\n            n /= i;\n        } else {\n   \
    \         i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long factor = 2L;\n    while (n > 1L) \n    {\n        if (n % factor\
    \ == 0L) \n        {\n            largest_prime_factor = factor;\n           \
    \ n /= factor;\n            while (n % factor == 0L) \n            {\n       \
    \         n /= factor;\n            }\n        }\n        factor += 1L;\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime_factor = 0L;\n\
    \    foreach (i; 2L .. n)\n    {\n        if (n % i == 0L)\n        {\n      \
    \      if (isPrime(i))\n            {\n                largest_prime_factor =\
    \ i;\n            }\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest_prime = 2L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest_prime = i;\n      \
    \      n /= i;\n        } \n        else \n        {\n            i += 1L;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      }\n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long max_prime = 1L;\n    long i = 2L;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n          \
    \  max_prime = i;\n            n /= i;\n        } \n        else \n        {\n\
    \            i += 1L;\n        }\n    }\n    return max_prime;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            n /= i;\n        }\n        else \n        {\n    \
    \        i += 1L;\n        }\n    }\n    return i;\n}", "{\n    long largest =\
    \ 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n  \
    \          largest = i;\n            n /= i;\n        } else {\n            i\
    \ += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long i = 2L;\n  \
    \  while (i <= n) {\n        if (n % i == 0L) {\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return i;\n}\n/*\nReturn the\
    \ largest palindrome made from the product of two 3-digit numbers.\n    >>> largest_palindrome(2)\n\
    \    9009\n    >>> largest_palindrome(3)\n    906609\n*/", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest = 0L;\n    long factor = 2L;\n\
    \    while (n > 1L) \n    {\n        if (n % factor == 0L) \n        {\n     \
    \       largest = factor;\n            n /= factor;\n            while (n % factor\
    \ == 0L) \n            {\n                n /= factor;\n            }\n      \
    \  }\n        factor = factor + 1L;\n    }\n    return largest;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i ==\
    \ 0L) {\n            largest = i;\n            n /= i;\n        } else {\n   \
    \         i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long factor = 2L;\n    while (n > 1L) \n    {\n        if (n % factor\
    \ == 0L) \n        {\n            largest_prime_factor = factor;\n           \
    \ n /= factor;\n            while (n % factor == 0L) \n            {\n       \
    \         n /= factor;\n            }\n        }\n        factor = factor + 1L;\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime = 0L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n        \
    \    largest_prime = i;\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n        \
    \    n /= i;\n            largest = i;\n        } else {\n            i += 1L;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest = i;\n            n /= i;\n        } \n        else \n  \
    \      {\n            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n\
    \ % i == 0L) {\n            largest = i;\n            n /= i;\n        } else\
    \ {\n            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n   \
    \ long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0L) \n        {\n            largest_prime = i;\n         \
    \   n /= i;\n        } \n        else \n        {\n            i += 1L;\n    \
    \    }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime_factor = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest_prime_factor = i;\n            n /= i;\n        }\n\
    \        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        }\n     \
    \   else \n        {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}", "{\n    long largest_prime_factor = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest_prime = i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i ==\
    \ 0L) {\n            largest = i;\n            n /= i;\n        } else {\n   \
    \         i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime;\n}", "{\n    long largest_prime = 1L;\n    long i = 2L;\n   \
    \ while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest = i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest = 0L;\n    foreach (i; 2 .. sqrt(n) + 1) \n    {\n  \
    \      if (n % i == 0) \n        {\n            if (isPrime(i)) \n           \
    \ {\n                largest = i;\n            }\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n  \
    \  while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime = 2L;\n    long largest_factor = n;\n    while\
    \ (largest_factor > 1) \n    {\n        if (largest_factor % largest_prime ==\
    \ 0) \n        {\n            largest_factor /= largest_prime;\n        } \n \
    \       else \n        {\n            largest_prime = next_prime(largest_prime);\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (n > 1L) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \          while (n % i == 0L) \n            {\n                n /= i;\n    \
    \        }\n        }\n        i++;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long max_prime_factor = (long)sqrt(n);\n\
    \    foreach (i; 2L .. max_prime_factor) \n    {\n        if (n % i == 0L) \n\
    \        {\n            largest_prime_factor = i;\n            while (n % i ==\
    \ 0L) \n            {\n                n /= i;\n            }\n            max_prime_factor\
    \ = (long)sqrt(n);\n        }\n    }\n    if (n > 1L) \n    {\n        largest_prime_factor\
    \ = n;\n    }\n    return largest_prime_factor;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i += 1L;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long factor = 2L;\n    while (n > 1) \n    {\n\
    \        while (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor += 1L;\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1L;\n\
    \    long factor = 2L;\n    while (n > 1) \n    {\n        while (n % factor ==\
    \ 0) \n        {\n            largest_prime_factor = factor;\n            n /=\
    \ factor;\n        }\n        factor += 1L;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long\
    \ i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest = 0L;\n    foreach (i; 2 .. n) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            if (isPrime(i)) \n            {\n              \
    \  largest = i;\n            }\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) {\n      \
    \  if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n  \
    \      } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n     \
    \   if (n % i == 0L) {\n            largest = i;\n            n /= i;\n      \
    \  } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        }\n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;\n}", "{\n    long largest = 1L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest = i;\n            n /= i;\n        } \n        else \n  \
    \      {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n  \
    \  long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n  \
    \      if (n % i == 0L) \n        {\n            largest_prime = i;\n        \
    \    n /= i;\n        } \n        else \n        {\n            i++;\n       \
    \ }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime = 2L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest_prime = i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest_factor = 1L;\n    long d\
    \ = 2L;\n    while (n > 1) \n    {\n        while (n % d == 0) \n        {\n \
    \           largest_factor = d;\n            n /= d;\n        }\n        d = d\
    \ + 1;\n        if (d*d > n) \n        {\n            if (n > 1) \n          \
    \  {\n                largest_factor = n;\n            }\n            break;\n\
    \        }\n    }\n    return largest_factor;\n}", "{\n    long largest_factor\
    \ = 0L;\n    long d = 2L;\n    while (n > 1L) \n    {\n        while (n % d ==\
    \ 0L) \n        {\n            largest_factor = d;\n            n /= d;\n    \
    \    }\n        d += 1L;\n        if (d * d > n) \n        {\n            if (n\
    \ > 1L) \n            {\n                largest_factor = n;\n            }\n\
    \            break;\n        }\n    }\n    return largest_factor;\n}", "{\n  \
    \  long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0L) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime = i;\n            n /= i;\n        }\n\
    \        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      }\n        else \n        {\n            i += 1L;\n        }\n    }\n \
    \   return largest_prime_factor;\n}", "{\n    long i = 2L;\n    while (i <= n)\
    \ {\n        if (n % i == 0L) {\n            n /= i;\n        } else {\n     \
    \       i++;\n        }\n    }\n    return i;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n      \
    \  if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        }\n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long factor\
    \ = 2L;\n    while (n > 1) \n    {\n        if (n % factor == 0) \n        {\n\
    \            largest_prime_factor = factor;\n            n /= factor;\n      \
    \      while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor += 1;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            n /= i;\n            largest\
    \ = i;\n        }\n        else \n        {\n            i++;\n        }\n   \
    \ }\n    return largest;\n}", "{\n    long largest_prime = 1L;\n    long i = 2L;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime =\
    \ i;\n            n /= i;\n        } else {\n            i++;\n        }\n   \
    \ }\n    return largest_prime;\n}", "{\n    long largest_prime_factor = 1L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n         \
    \   largest_prime_factor = i;\n            n /= i;\n        } else {\n       \
    \     i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest = i;\n            n /= i;\n        }\n    \
    \    else \n        {\n            i += 1L;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_factor = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_factor;\n}", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n          \
    \  largest_prime_factor = i;\n            n /= i;\n        } \n        else \n\
    \        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest = 1L;\n    long i\
    \ = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n\
    \    while (i <= n) {\n        if (n % i == 0L) {\n            largest = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n        \
    \    largest = i;\n            n /= i;\n        } else {\n            i += 1L;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest = 1L;\n    long\
    \ i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest_prime = 1L;\n    foreach\
    \ (i; 2L .. n) \n    {\n        if (n % i == 0L) \n        {\n            if (isPrime(i))\
    \ \n            {\n                largest_prime = i;\n            }\n       \
    \ }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest_prime = i;\n            n /= i;\n        }\n    \
    \    else \n        {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest = i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while (n > 1)\
    \ \n    {\n        while (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor += 1L;\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime = 1L;\n    long\
    \ i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n    foreach\
    \ (i; 2 .. n) \n    {\n        if (n % i == 0) \n        {\n            if (isPrime(i))\
    \ \n            {\n                largest = i;\n            }\n        }\n  \
    \  }\n    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n          \
    \  largest = i;\n            n /= i;\n        }\n        else \n        {\n  \
    \          i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime = i;\n            n /= i;\n        }\n\
    \        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime;\n}", "{\n    long largest_prime = 0L;\n    long divisor = 2L;\n\
    \    while (n > 1L) \n    {\n        if (n % divisor == 0L) \n        {\n    \
    \        largest_prime = divisor;\n            n /= divisor;\n            while\
    \ (n % divisor == 0L) \n            {\n                n /= divisor;\n       \
    \     }\n        }\n        divisor += 1L;\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <=\
    \ n) {\n        if (n % i == 0L) {\n            largest_prime_factor = i;\n  \
    \          n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest = 0L;\n    long i\
    \ = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n            largest\
    \ = i;\n            n /= i;\n        }\n        else {\n            i++;\n   \
    \     }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest_prime_factor = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1L;\n    long\
    \ factor = 2L;\n    while (n > 1) \n    {\n        if (n % factor == 0) \n   \
    \     {\n            largest_prime_factor = factor;\n            n /= factor;\n\
    \            while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor = factor + 1L;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest = 0L;\n    long i\
    \ = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n  \
    \          largest = i;\n            n /= i;\n        } \n        else \n    \
    \    {\n            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n\
    \ % i == 0L) {\n            if (isPrime(i)) {\n                largest = i;\n\
    \            }\n            n /= i;\n        } else {\n            i++;\n    \
    \    }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor = 0L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n        \
    \    largest_prime_factor = i;\n            n /= i;\n        } else {\n      \
    \      i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime_factor = i;\n          \
    \  n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n  \
    \  while (i <= n) {\n        if (n % i == 0L) {\n            largest = i;\n  \
    \          n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest =\
    \ 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n  \
    \          largest = i;\n            n /= i;\n        } else {\n            i\
    \ += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      }\n        else \n        {\n            i += 1L;\n        }\n    }\n \
    \   return largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest_prime_factor = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } \n    \
    \    else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }\n/*\nReturn the sum of all the primes below n.\n    >>> sum_of_primes(10)\n\
    \    17\n    >>> sum_of_primes(100)\n    1060\n*/\nlong sum_of_primes(long n)\
    \ \n{\n    long sum = 0L;\n    long i = 2L;\n    while (i < n) \n    {\n     \
    \   if (is_prime(i)) \n        {\n            sum += i;\n        }\n        i++;\n\
    \    }\n    return sum;\n}\n/*\nReturn the nth prime number.\n    >>> nth_prime(1)\n\
    \    2\n    >>> nth_prime(2)\n    3\n    >>> nth_prime(3)\n    5\n    >>> nth_prime(4)\n\
    \    7\n    >>> nth_prime(5)\n    11\n*/\nlong nth_prime(long n) \n{\n    long\
    \ i = 2L;\n    long count = 0L;\n    while (count < n) \n    {\n        if (is_prime(i))\
    \ \n        {\n            count++;\n        }\n        i++;\n    }\n    return\
    \ i - 1L;\n}\n/*\nReturn the nth fibonacci number.\n    >>> nth_fibonacci(1)\n\
    \    1\n    >>> nth_fibonacci(2)\n    1\n    >>> nth_fibonacci(3)\n    2\n   \
    \ >>> nth_fibonacci(4)\n    3\n    >>> nth_fibonacci(5)\n    5\n    >>> nth_fibonacci(6)\n\
    \    8\n*/\nlong nth_fibonacci(long n) \n{\n    long a =", "{\n    long largest_prime_factor\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest = 0L;\n    long i\
    \ = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n            largest\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n\
    \    while (i < n) \n    {\n        if (n % i == 0L) \n        {\n           \
    \ if (isPrime(i)) \n            {\n                largest = i;\n            }\n\
    \            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1L;\n    long\
    \ factor = 2L;\n    while (n > 1) \n    {\n        if (n % factor == 0) \n   \
    \     {\n            largest_prime_factor = factor;\n            n /= factor;\n\
    \            while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor += 1;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <= n) {\n       \
    \ if (n % i == 0L) {\n            largest_prime_factor = i;\n            n /=\
    \ i;\n        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        }\n     \
    \   else \n        {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}", "{\n    long largest_factor = 1L;\n    long i\
    \ = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_factor;\n}", "{\n    long largest = 1L;\n    long i\
    \ = 2L;\n    while (i < n) \n    {\n        if (n % i == 0) \n        {\n    \
    \        largest = i;\n            n /= i;\n        }\n        else \n       \
    \ {\n            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n   \
    \ long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n %\
    \ i == 0L) {\n            largest = i;\n            n /= i;\n        } else {\n\
    \            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i < n) {\n        if (n % i == 0L)\
    \ {\n            largest = i;\n            n /= i;\n        } else {\n       \
    \     i++;\n        }\n    }\n    return max(largest, n);\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long factor = 2L;\n    while (n > 1) \n    {\n        if (n % factor\
    \ == 0) \n        {\n            largest_prime_factor = factor;\n            n\
    \ /= factor;\n            while (n % factor == 0) \n            {\n          \
    \      n /= factor;\n            }\n        }\n        factor = factor + 1L;\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest = 0L;\n   \
    \ long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n      \
    \  {\n            largest = i;\n            n /= i;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n      \
    \  if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return largest;\n}", "{\n    long largest_prime_factor = 1L;\n    foreach (i;\
    \ 2L .. sqrt(n) + 1L) \n    {\n        if (n % i == 0L) \n        {\n        \
    \    if (isPrime(i)) \n            {\n                largest_prime_factor = i;\n\
    \            }\n        }\n    }\n    return largest_prime_factor;\n}", "{\n \
    \   long largest = 0L;\n    long i = 2L;\n    while (i < n) \n    {\n        if\
    \ (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n \
    \       } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return max(largest, n);\n}", "{\n    long largest = 0L;\n    long i = 2L;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n          \
    \  largest = i;\n            n /= i;\n        }\n        else \n        {\n  \
    \          i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long max\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            max = i;\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return max;\n}", "{\n    long largest_prime = 1L;\n   \
    \ long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n      \
    \  {\n            largest_prime = i;\n            n /= i;\n        } \n      \
    \  else \n        {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0L) {\n            largest_prime = i;\n            n /=\
    \ i;\n        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n          \
    \  largest = i;\n            n /= i;\n        } \n        else \n        {\n \
    \           i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i ==\
    \ 0L) {\n            largest = i;\n            n /= i;\n        } else {\n   \
    \         i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            n /= i;\n            largest = i;\n        } else {\n           \
    \ i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest =\
    \ 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest = i;\n            n /= i;\n        } \n   \
    \     else \n        {\n            i++;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if\
    \ (n % i == 0L) \n        {\n            largest_prime = i;\n            n /=\
    \ i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n    long i\
    \ = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n            n /= i;\n\
    \            largest = i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n   \
    \ long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long factor = 2L;\n    while (n > 1) \n    {\n        if (n % factor\
    \ == 0) \n        {\n            largest_prime_factor = factor;\n            n\
    \ /= factor;\n            while (n % factor == 0) \n            {\n          \
    \      n /= factor;\n            }\n        }\n        factor = factor + 1L;\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        }\n     \
    \   else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime = 2L;\n    long\
    \ factor = 2L;\n    while (n > 1) \n    {\n        if (n % factor == 0) \n   \
    \     {\n            largest_prime = factor;\n            n /= factor;\n     \
    \       while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor += 1;\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0L;\n    foreach (i; 2 .. n) {\n        if (n % i == 0) {\n      \
    \      if (isPrime(i)) {\n                largest = i;\n            }\n      \
    \  }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n         \
    \   largest_prime_factor = i;\n            n /= i;\n        } else {\n       \
    \     i++;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (n > 1L) {\n     \
    \   if (n % i == 0L) {\n            largest = i;\n            n /= i;\n      \
    \  } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest_prime_factor = 0L;\n    long factor = 2L;\n    while (n > 1L)\
    \ \n    {\n        if (n % factor == 0L) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0L) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor += 1L;\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            largest_prime = i;\n            n /= i;\n        }\n        else\
    \ {\n            i++;\n        }\n    }\n    return largest_prime;\n}", "{\n \
    \   long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n\
    \ % i == 0L) {\n            largest = i;\n            n /= i;\n        } else\
    \ {\n            i += 1L;\n        }\n    }\n    return largest;\n}", "{\n   \
    \ long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n   \
    \ {\n        if (n % i == 0L) \n        {\n            largest_prime_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i\
    \ += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0L) \n        {\n            largest = i;\n            n /= i;\n      \
    \  } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest_prime = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest_prime_factor = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n  \
    \  while (i <= n) {\n        if (n % i == 0L) {\n            largest = i;\n  \
    \          n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long factor\
    \ = 2L;\n    while (n > 1) \n    {\n        if (n % factor == 0) \n        {\n\
    \            largest_prime_factor = factor;\n            n /= factor;\n      \
    \      while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor = factor + 1L;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n    long\
    \ i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      }\n        else \n        {\n            i += 1L;\n        }\n    }\n \
    \   return largest_prime_factor;\n}", "{\n    long largest_prime_factor = 0L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest_prime_factor = i;\n            n /= i;\n        }\
    \ \n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } \n    \
    \    else \n        {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n     \
    \   if (n % i == 0L) {\n            n /= i;\n            largest = i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return largest;\n}", "{\n\
    \    long largest = 0L;\n    long i = 2L;\n    while (i < n) \n    {\n       \
    \ if (n % i == 0L) \n        {\n            n /= i;\n            largest = i;\n\
    \        }\n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return largest;\n}", "{\n    long largest = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest;\n}", "{\n    long largest = 0L;\n\
    \    long factor = 2L;\n    while (n > 1L) \n    {\n        if (n % factor ==\
    \ 0L) \n        {\n            largest = factor;\n            n /= factor;\n \
    \           while (n % factor == 0L) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor += 1L;\n    }\n    return largest;\n\
    }", "{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime_factor = 1L;\n\
    \    long factor = 2L;\n    while (n > 1) \n    {\n        if (n % factor == 0)\
    \ \n        {\n            largest_prime_factor = factor;\n            n /= factor;\n\
    \            while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor = factor + 1L;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n     \
    \   if (n % i == 0L) {\n            largest = i;\n            n /= i;\n      \
    \  } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest_prime = 0L;\n    long factor = 2L;\n    while (n > 1L) \n \
    \   {\n        if (n % factor == 0L) \n        {\n            largest_prime =\
    \ factor;\n            n /= factor;\n            while (n % factor == 0L) \n \
    \           {\n                n /= factor;\n            }\n        }\n      \
    \  factor = factor + 1L;\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n     \
    \   if (n % i == 0L) \n        {\n            largest = i;\n            n /= i;\n\
    \        }\n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return largest;\n}", "{\n    long largest = 0L;\n    long factor = 2L;\n   \
    \ while (factor <= n) \n    {\n        if (n % factor == 0L) \n        {\n   \
    \         largest = factor;\n            n /= factor;\n        } \n        else\
    \ \n        {\n            factor += 1L;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n     \
    \   if (n % i == 0L) {\n            largest = i;\n            n /= i;\n      \
    \  } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}",
  "{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0L) \n        {\n            largest = i;\n            n /= i;\n      \
    \  } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest;\n}", "{\n    long largest_factor = 1L;\n    long i = 2L;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            largest_factor = i;\n   \
    \         n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_factor;\n}", "{\n    long largest_prime = 0L;\n    long i\
    \ = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n            largest_prime\
    \ = i;\n            n /= i;\n        } else {\n            i += 1L;\n        }\n\
    \    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor = 1L;\n\
    \    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n   \
    \     {\n            largest_prime_factor = i;\n            n /= i;\n        }\n\
    \        else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 0L;\n    long factor = 2L;\n    while (n > 1L) \n   \
    \ {\n        if (n % factor == 0L) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0L) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor += 1L;\n    }\n    return largest_prime_factor;\n}", "{\n    long largest\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest = i;\n            n /= i;\n        }\n    \
    \    else \n        {\n            i += 1L;\n        }\n    }\n    return largest;\n\
    }", "{\n    long largest = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}", "{\n    long largest_prime_factor = 0L;\n    long\
    \ i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } \n    \
    \    else \n        {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_factor = 1L;\n   \
    \ long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L) \n      \
    \  {\n            largest_factor = i;\n            n /= i;\n        } \n     \
    \   else \n        {\n            i += 1L;\n        }\n    }\n    return largest_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}", "{\n    long largest_prime_factor = 1L;\n   \
    \ long factor = 2L;\n    while (n > 1) \n    {\n        if (n % factor == 0) \n\
    \        {\n            largest_prime_factor = factor;\n            n /= factor;\n\
    \            while (n % factor == 0) \n            {\n                n /= factor;\n\
    \            }\n        }\n        factor = factor + 1L;\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}", "{\n    long largest = 1L;\n    foreach (i; 2 ..\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            n /= i;\n     \
    \       largest = i;\n        }\n    }\n    return largest;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n %\
    \ i == 0L) \n        {\n            largest = i;\n            n /= i;\n      \
    \  } \n        else \n        {\n            i += 1L;\n        }\n    }\n    return\
    \ largest;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
