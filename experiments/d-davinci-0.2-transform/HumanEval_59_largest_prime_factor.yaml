name: HumanEval_59_largest_prime_factor
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
  \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
  \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
  \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
  \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\n\
  void main(){}"
completions: ["{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while\
    \ (i <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i ==\
    \ 0L) {\n            largest = i;\n            n /= i;\n        } else {\n   \
    \         i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long factor = 2L;\n    while (n > 1L) \n    {\n        if (n % factor\
    \ == 0L) \n        {\n            largest_prime_factor = factor;\n           \
    \ n /= factor;\n            while (n % factor == 0L) \n            {\n       \
    \         n /= factor;\n            }\n        }\n        factor += 1L;\n    }\n\
    \    return largest_prime_factor;\n}", "{\n    long largest_prime_factor = 0L;\n\
    \    foreach (i; 2L .. n)\n    {\n        if (n % i == 0L)\n        {\n      \
    \      if (isPrime(i))\n            {\n                largest_prime_factor =\
    \ i;\n            }\n        }\n    }\n    return largest_prime_factor;\n}", "{\n\
    \    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n \
    \       if (n % i == 0L) \n        {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}",
  "{\n    long largest_prime = 2L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest_prime = i;\n      \
    \      n /= i;\n        } \n        else \n        {\n            i += 1L;\n \
    \       }\n    }\n    return largest_prime;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      }\n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long max_prime = 1L;\n    long i = 2L;\n\
    \    while (i <= n) \n    {\n        if (n % i == 0L) \n        {\n          \
    \  max_prime = i;\n            n /= i;\n        } \n        else \n        {\n\
    \            i += 1L;\n        }\n    }\n    return max_prime;\n}", "{\n    long\
    \ largest_prime_factor = 1L;\n    long i = 2L;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime_factor;\n\
    }", "{\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            n /= i;\n        }\n        else \n        {\n    \
    \        i += 1L;\n        }\n    }\n    return i;\n}", "{\n    long largest =\
    \ 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n  \
    \          largest = i;\n            n /= i;\n        } else {\n            i\
    \ += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long i = 2L;\n  \
    \  while (i <= n) {\n        if (n % i == 0L) {\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return i;\n}\n/*\nReturn the\
    \ largest palindrome made from the product of two 3-digit numbers.\n    >>> largest_palindrome(2)\n\
    \    9009\n    >>> largest_palindrome(3)\n    906609\n*/", "{\n    long largest_prime_factor\
    \ = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            largest_prime_factor = i;\n            n /= i;\n  \
    \      } \n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}", "{\n    long largest = 0L;\n    long factor = 2L;\n\
    \    while (n > 1L) \n    {\n        if (n % factor == 0L) \n        {\n     \
    \       largest = factor;\n            n /= factor;\n            while (n % factor\
    \ == 0L) \n            {\n                n /= factor;\n            }\n      \
    \  }\n        factor = factor + 1L;\n    }\n    return largest;\n}", "{\n    long\
    \ largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n        if (n % i ==\
    \ 0L) {\n            largest = i;\n            n /= i;\n        } else {\n   \
    \         i += 1L;\n        }\n    }\n    return largest;\n}", "{\n    long largest_prime_factor\
    \ = 0L;\n    long factor = 2L;\n    while (n > 1L) \n    {\n        if (n % factor\
    \ == 0L) \n        {\n            largest_prime_factor = factor;\n           \
    \ n /= factor;\n            while (n % factor == 0L) \n            {\n       \
    \         n /= factor;\n            }\n        }\n        factor = factor + 1L;\n\
    \    }\n    return largest_prime_factor;\n}", "{\n    long largest_prime = 0L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n        \
    \    largest_prime = i;\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}", "{\n    long largest = 0L;\n\
    \    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n        \
    \    n /= i;\n            largest = i;\n        } else {\n            i += 1L;\n\
    \        }\n    }\n    return largest;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
