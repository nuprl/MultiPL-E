language: d
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        if(c == b[i])\n            result ~= \"0\";\n        else\n  \
    \          result ~= \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"\
    010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(char c;\
    \ zip(a, b))\n        result ~= (c[0] ^ c[1]);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphnxt5pot.d(12): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphnxt5pot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n \
    \           result += \"0\";\n        }\n        else \n        {\n          \
    \  result += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fpd971d.d(16): Error: slice `result` is not mutable

    /tmp/tmp9fpd971d.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fpd971d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(int i, char\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp569ocn6k.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp569ocn6k.__unittest_L18_C1() [0x427b95]

    ??:? void tmp569ocn6k.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string c;\n    foreach(i, e; a)\n  \
    \  {\n        c ~= (e ^ b[i]);\n    }\n    return c;\n}\nunittest\n{\n    alias\
    \ candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"\
    010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpipy_c072.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmpipy_c072.__unittest_L18_C1() [0x427ba1]

    ??:? void tmpipy_c072.__modtest() [0x427d14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428458]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        if(c == b[i])\n            result ~= \"0\";\n        else\n\
    \            result ~= \"1\";\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0k390xpn.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmp0k390xpn.__unittest_L18_C1() [0x427ba1]

    ??:? void tmp0k390xpn.__modtest() [0x427d14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428458]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]) ? \"1\" : \"0\";\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]) ? \"1\" : \"0\";\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    for (int i = 0;\
    \ i < a.length; i++)\n    {\n        result ~= (a[i] ^ b[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp59pfs3i4.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmp59pfs3i4.__unittest_L18_C1() [0x427ba5]

    ??:? void tmp59pfs3i4.__modtest() [0x427d18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428458]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    for (int i = 0;\
    \ i < a.length; i++)\n    {\n        result ~= (a[i] ^ b[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp59pfs3i4.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmp59pfs3i4.__unittest_L18_C1() [0x427ba5]

    ??:? void tmp59pfs3i4.__modtest() [0x427d18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428458]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]) ? \"1\" : \"0\";\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            res +=\
    \ \"0\";\n        else\n            res += \"1\";\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i3mbt86.d(15): Error: slice `res` is not mutable

    /tmp/tmp7i3mbt86.d(17): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i3mbt86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, char;\
    \ a)\n    {\n        result ~= (a[i] ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15wf5pw6.d(12): Error: no identifier for declarator `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15wf5pw6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result ~= ((a[i] == '1') ^ (b[i] ==\
    \ '1')) ? '1' : '0';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result += (a[i] == b[i]) ? \"0\" :\
    \ \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7h5ayfcs.d(14): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h5ayfcs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    int len = a.length;\n    string res\
    \ = \"\";\n    for (int i = 0; i < len; i++)\n    {\n        if (a[i] == b[i])\n\
    \            res += \"0\";\n        else\n            res += \"1\";\n    }\n \
    \   return res;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwrjuwk5t.d(11): Error: cannot implicitly convert expression `a.length`
    of type `ulong` to `int`

    /tmp/tmpwrjuwk5t.d(16): Error: slice `res` is not mutable

    /tmp/tmpwrjuwk5t.d(18): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwrjuwk5t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            res +=\
    \ \"0\";\n        else\n            res += \"1\";\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i3mbt86.d(15): Error: slice `res` is not mutable

    /tmp/tmp7i3mbt86.d(17): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i3mbt86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(int\
    \ i, char c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpafbz3tid.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f9d]

    ??:? void tmpafbz3tid.__unittest_L18_C1() [0x427ba9]

    ??:? void tmpafbz3tid.__modtest() [0x427d1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43043c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b58d]

    ??:? runModuleUnitTests [0x42c47d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428460]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        res += (a[i] == b[i]) ? \"0\" : \"1\"\
    ;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpddy3wtuy.d(14): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpddy3wtuy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result ~= \"0\";\n        }\n        else\n        {\n            result\
    \ ~= \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i])\n            result\
    \ += \"0\";\n        else\n            result += \"1\";\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb64q4ztj.d(15): Error: slice `result` is not mutable

    /tmp/tmpb64q4ztj.d(17): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb64q4ztj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            res +=\
    \ \"0\";\n        else\n            res += \"1\";\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i3mbt86.d(15): Error: slice `res` is not mutable

    /tmp/tmp7i3mbt86.d(17): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i3mbt86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n \
    \           result += \"0\";\n        } \n        else \n        {\n         \
    \   result += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkfxsx53.d(16): Error: slice `result` is not mutable

    /tmp/tmpzkfxsx53.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkfxsx53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(int\
    \ i, char c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpafbz3tid.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f9d]

    ??:? void tmpafbz3tid.__unittest_L18_C1() [0x427ba9]

    ??:? void tmpafbz3tid.__modtest() [0x427d1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43043c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b58d]

    ??:? runModuleUnitTests [0x42c47d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428460]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n \
    \           result += \"0\";\n        } \n        else \n        {\n         \
    \   result += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkfxsx53.d(16): Error: slice `result` is not mutable

    /tmp/tmpzkfxsx53.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkfxsx53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0k390xpn.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmp0k390xpn.__unittest_L18_C1() [0x427ba1]

    ??:? void tmp0k390xpn.__modtest() [0x427d14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428458]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    for (int i = 0;\
    \ i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            result ~=\
    \ \"0\";\n        else\n            result ~= \"1\";\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(int\
    \ i; 0 .. a.length)\n    {\n        result ~= (a[i] ^ b[i]);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphuex6kaf.d(12): Error: cannot implicitly convert expression `a.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphuex6kaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i])\n            result\
    \ += \"0\";\n        else\n            result += \"1\";\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb64q4ztj.d(15): Error: slice `result` is not mutable

    /tmp/tmpb64q4ztj.d(17): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb64q4ztj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c == b[i]) ? '0' : '1';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result ~= (a[i] ^ b[i]);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n   \
    \ assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6kw93rhc.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f8d]

    ??:? void tmp6kw93rhc.__unittest_L18_C1() [0x427b99]

    ??:? void tmp6kw93rhc.__modtest() [0x427d0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c697]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43042c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b57d]

    ??:? runModuleUnitTests [0x42c46d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428450]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result += (a[i] == b[i]) ? \"0\" :\
    \ \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7h5ayfcs.d(14): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h5ayfcs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= c ^ b[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo7ca4gub.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmpo7ca4gub.__unittest_L18_C1() [0x427b95]

    ??:? void tmpo7ca4gub.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result ~= (a[i] ^ b[i]);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n   \
    \ assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6kw93rhc.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f8d]

    ??:? void tmp6kw93rhc.__unittest_L18_C1() [0x427b99]

    ??:? void tmp6kw93rhc.__modtest() [0x427d0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c697]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43042c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b57d]

    ??:? runModuleUnitTests [0x42c46d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428450]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        res += (a[i] ^ b[i]) ? \"1\" : \"0\";\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n\
    \    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7xcu770f.d(14): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7xcu770f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result += (a[i] == b[i]) ? \"0\" :\
    \ \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7h5ayfcs.d(14): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h5ayfcs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    foreach(i, c;\
    \ a)\n    {\n        res ~= (c ^ b[i]);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmlv_cdt3.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmpmlv_cdt3.__unittest_L18_C1() [0x427b95]

    ??:? void tmpmlv_cdt3.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(int\
    \ i, char c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpafbz3tid.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f9d]

    ??:? void tmpafbz3tid.__unittest_L18_C1() [0x427ba9]

    ??:? void tmpafbz3tid.__modtest() [0x427d1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43043c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b58d]

    ??:? runModuleUnitTests [0x42c47d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428460]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n \
    \           result += \"0\";\n        } \n        else \n        {\n         \
    \   result += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkfxsx53.d(16): Error: slice `result` is not mutable

    /tmp/tmpzkfxsx53.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkfxsx53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]) ? \"1\" : \"0\";\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    int i;\n    foreach(i,\
    \ a)\n    {\n        result ~= (a[i] ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvg297pcw.d(13): Error: no identifier for declarator `a`

    /tmp/tmpvg297pcw.d(13): Error: found `)` when expecting `;`

    /tmp/tmpvg297pcw.d(17): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvg297pcw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i])\n            result\
    \ += \"0\";\n        else\n            result += \"1\";\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb64q4ztj.d(15): Error: slice `result` is not mutable

    /tmp/tmpb64q4ztj.d(17): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb64q4ztj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        result += (a[i] == b[i]) ? \"0\"\
    \ : \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3vn5w1rk.d(14): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vn5w1rk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0k390xpn.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmp0k390xpn.__unittest_L18_C1() [0x427ba1]

    ??:? void tmp0k390xpn.__modtest() [0x427d14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428458]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c == b[i]) ? '0' : '1';\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    foreach(i, c;\
    \ a)\n    {\n        res ~= (c ^ b[i]);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmlv_cdt3.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmpmlv_cdt3.__unittest_L18_C1() [0x427b95]

    ??:? void tmpmlv_cdt3.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    for (int i = 0;\
    \ i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            result ~=\
    \ \"0\";\n        else\n            result ~= \"1\";\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            res +=\
    \ \"0\";\n        else\n            res += \"1\";\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i3mbt86.d(15): Error: slice `res` is not mutable

    /tmp/tmp7i3mbt86.d(17): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i3mbt86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ aa; a)\n    {\n        result ~= (aa ^ b[i]).to!string;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphjw0ny5c.d(14): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphjw0ny5c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n \
    \           result += \"0\";\n        } \n        else \n        {\n         \
    \   result += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkfxsx53.d(16): Error: slice `result` is not mutable

    /tmp/tmpzkfxsx53.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkfxsx53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n \
    \           result += \"0\";\n        } \n        else \n        {\n         \
    \   result += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkfxsx53.d(16): Error: slice `result` is not mutable

    /tmp/tmpzkfxsx53.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkfxsx53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        res += a[i] ^ b[i];\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe75_7cr3.d(14): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe75_7cr3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0k390xpn.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmp0k390xpn.__unittest_L18_C1() [0x427ba1]

    ??:? void tmp0k390xpn.__modtest() [0x427d14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428458]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]) ? \"1\" : \"0\";\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    foreach(i, c;\
    \ a)\n    {\n        res ~= (c == b[i]) ? '0' : '1';\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (size_t\
    \ i = 0; i < a.length; i++)\n    {\n        result += (a[i] ^ b[i]) + '0';\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqi5sxloo.d(14): Error: incompatible types for `(result) += ((cast(int)a[i]
    ^ cast(int)b[i]) + 48)`: `string` and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqi5sxloo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result ~= (a[i] == b[i]) ? \"0\" :\
    \ \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if ((a[i] == '0' && b[i] == '1')\
    \ || (a[i] == '1' && b[i] == '0')) \n        {\n            result += \"1\";\n\
    \        }\n        else \n        {\n            result += \"0\";\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjitfax0r.d(16): Error: slice `result` is not mutable

    /tmp/tmpjitfax0r.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjitfax0r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result += (a[i] == b[i]) ? \"0\" :\
    \ \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7h5ayfcs.d(14): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h5ayfcs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result ~= (a[i] ^ b[i]).to!string;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyje4c19m.d(14): Error: no property `to` for type `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyje4c19m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, aa; a)\n\
    \    {\n        if(aa == b[i])\n            result ~= \"0\";\n        else\n \
    \           result ~= \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"\
    010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(int\
    \ i, char c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpafbz3tid.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f9d]

    ??:? void tmpafbz3tid.__unittest_L18_C1() [0x427ba9]

    ??:? void tmpafbz3tid.__modtest() [0x427d1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43043c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b58d]

    ??:? runModuleUnitTests [0x42c47d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428460]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result ~= (a[i] ^ b[i]);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n   \
    \ assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6kw93rhc.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f8d]

    ??:? void tmp6kw93rhc.__unittest_L18_C1() [0x427b99]

    ??:? void tmp6kw93rhc.__modtest() [0x427d0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c697]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43042c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b57d]

    ??:? runModuleUnitTests [0x42c46d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428450]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ char; a) \n    {\n        result ~= (a[i] ^ b[i]).to!string;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2xfa4ks0.d(12): Error: no identifier for declarator `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2xfa4ks0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            res +=\
    \ \"0\";\n        else\n            res += \"1\";\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i3mbt86.d(15): Error: slice `res` is not mutable

    /tmp/tmp7i3mbt86.d(17): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i3mbt86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res;\n    foreach(i, c; a)\n\
    \    {\n        res ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0k390xpn.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmp0k390xpn.__unittest_L18_C1() [0x427ba1]

    ??:? void tmp0k390xpn.__modtest() [0x427d14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428458]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c == b[i]) ? '0' : '1';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    for (int i = 0;\
    \ i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            result ~=\
    \ \"0\";\n        else\n            result ~= \"1\";\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result ~= (a[i] == b[i]) ? \"0\" :\
    \ \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            res +=\
    \ \"0\";\n        else\n            res += \"1\";\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i3mbt86.d(15): Error: slice `res` is not mutable

    /tmp/tmp7i3mbt86.d(17): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i3mbt86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            res +=\
    \ \"0\";\n        else\n            res += \"1\";\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i3mbt86.d(15): Error: slice `res` is not mutable

    /tmp/tmp7i3mbt86.d(17): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i3mbt86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (a[i] ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        if(a[i] != b[i])\n            result ~= \"1\";\n     \
    \   else\n            result ~= \"0\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0k390xpn.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmp0k390xpn.__unittest_L18_C1() [0x427ba1]

    ??:? void tmp0k390xpn.__modtest() [0x427d14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428458]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n \
    \           result += \"0\";\n        } \n        else \n        {\n         \
    \   result += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkfxsx53.d(16): Error: slice `result` is not mutable

    /tmp/tmpzkfxsx53.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkfxsx53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        if(c == b[i])\n            result ~= \"0\";\n        else\n  \
    \          result ~= \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"\
    010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0k390xpn.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmp0k390xpn.__unittest_L18_C1() [0x427ba1]

    ??:? void tmp0k390xpn.__modtest() [0x427d14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428458]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n \
    \           result += \"0\";\n        }\n        else \n        {\n          \
    \  result += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fpd971d.d(16): Error: slice `result` is not mutable

    /tmp/tmp9fpd971d.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fpd971d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            res +=\
    \ \"0\";\n        else\n            res += \"1\";\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i3mbt86.d(15): Error: slice `res` is not mutable

    /tmp/tmp7i3mbt86.d(17): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i3mbt86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]) ? \"1\" : \"0\";\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ char; a)\n    {\n        result ~= (char == b[i]) ? '0' : '1';\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpevkagj92.d(12): Error: no identifier for declarator `char`

    /tmp/tmpevkagj92.d(14): Error: found `==` when expecting `.` following char

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpevkagj92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            res +=\
    \ \"0\";\n        else\n            res += \"1\";\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i3mbt86.d(15): Error: slice `res` is not mutable

    /tmp/tmp7i3mbt86.d(17): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i3mbt86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            res +=\
    \ \"0\";\n        else\n            res += \"1\";\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i3mbt86.d(15): Error: slice `res` is not mutable

    /tmp/tmp7i3mbt86.d(17): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i3mbt86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]) ? \"1\" : \"0\";\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ char; a)\n    {\n        result ~= (a[i] ^ b[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdtmq3vp7.d(12): Error: no identifier for declarator `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtmq3vp7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9b31qxqx.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f85]

    ??:? void tmp9b31qxqx.__unittest_L18_C1() [0x427b95]

    ??:? void tmp9b31qxqx.__modtest() [0x427d08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c68f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b59e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff75]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430424]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff01]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b575]

    ??:? runModuleUnitTests [0x42c465]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428448]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]) ? \"1\" : \"0\";\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        if(c == b[i])\n            result ~= \"0\";\n        else\n  \
    \          result ~= \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"\
    010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0k390xpn.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmp0k390xpn.__unittest_L18_C1() [0x427ba1]

    ??:? void tmp0k390xpn.__modtest() [0x427d14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c69f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff85]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430434]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff11]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]

    ??:? runModuleUnitTests [0x42c475]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428458]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result += (a[i] == b[i]) ? \"0\" :\
    \ \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7h5ayfcs.d(14): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h5ayfcs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res;\n    foreach(i, c; a)\n\
    \    {\n        res ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n            res +=\
    \ \"0\";\n        else\n            res += \"1\";\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7i3mbt86.d(15): Error: slice `res` is not mutable

    /tmp/tmp7i3mbt86.d(17): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7i3mbt86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n \
    \           result += \"0\";\n        }\n        else \n        {\n          \
    \  result += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fpd971d.d(16): Error: slice `result` is not mutable

    /tmp/tmp9fpd971d.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fpd971d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]) ? \"1\" : \"0\";\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        if(c == b[i])\n            result ~= \"0\";\n        else\n  \
    \          result ~= \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"\
    010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(int\
    \ i, char c; a)\n    {\n        result ~= (c ^ b[i]);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpafbz3tid.d(22): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f9d]

    ??:? void tmpafbz3tid.__unittest_L18_C1() [0x427ba9]

    ??:? void tmpafbz3tid.__modtest() [0x427d1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5b6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff8d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43043c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ff19]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b58d]

    ??:? runModuleUnitTests [0x42c47d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428460]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        result ~= (c ^ b[i]) ? '1' : '0';\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\"\
    , \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n\
    \    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    int i;\n    foreach(i,\
    \ char c; a)\n    {\n        if(c == '0')\n        {\n            if(b[i] == '0')\n\
    \                result ~= '0';\n            else\n                result ~= '1';\n\
    \        }\n        else\n        {\n            if(b[i] == '0')\n           \
    \     result ~= '1';\n            else\n                result ~= '0';\n     \
    \   }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa71azn6e.d(13): Error: variable `i` is shadowing variable `tmpa71azn6e.string_xor.i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa71azn6e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result;\n    foreach(i, c; a)\n\
    \    {\n        if(c == b[i])\n            result ~= \"0\";\n        else\n  \
    \          result ~= \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"\
    010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    int len =\
    \ max(a.length, b.length);\n    for (int i = 0; i < len; i++)\n    {\n       \
    \ if (a[i] == b[i])\n            result += \"0\";\n        else\n            result\
    \ += \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n\
    \    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpawu7wjo6.d(12): Error: undefined identifier `max`, did you mean
    function `fmax`?

    /tmp/tmpawu7wjo6.d(16): Error: slice `result` is not mutable

    /tmp/tmpawu7wjo6.d(18): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawu7wjo6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    int n = a.length;\n    string res =\
    \ \"\";\n    for (int i = 0; i < n; i++)\n    {\n        if (a[i] == b[i])\n \
    \           res += \"0\";\n        else\n            res += \"1\";\n    }\n  \
    \  return res;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx53q3ttv.d(11): Error: cannot implicitly convert expression `a.length`
    of type `ulong` to `int`

    /tmp/tmpx53q3ttv.d(16): Error: slice `res` is not mutable

    /tmp/tmpx53q3ttv.d(18): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx53q3ttv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ c; a)\n    {\n        result ~= (c ^ b[i]) ? \"1\" : \"0\";\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"\
    111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"\
    0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string res = \"\";\n    for (int i =\
    \ 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n     \
    \       res += \"0\";\n        } \n        else \n        {\n            res +=\
    \ \"1\";\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpart0so_i.d(16): Error: slice `res` is not mutable

    /tmp/tmpart0so_i.d(20): Error: slice `res` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpart0so_i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 0
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    foreach(i,\
    \ aa; a)\n    {\n        if(aa == b[i])\n            result ~= \"0\";\n      \
    \  else\n            result ~= \"1\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n \
    \           result += \"0\";\n        } \n        else \n        {\n         \
    \   result += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkfxsx53.d(16): Error: slice `result` is not mutable

    /tmp/tmpzkfxsx53.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkfxsx53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        if (a[i] == b[i]) \n        {\n \
    \           result += \"0\";\n        } \n        else \n        {\n         \
    \   result += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\"\
    ) == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"\
    0101\", \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkfxsx53.d(16): Error: slice `result` is not mutable

    /tmp/tmpzkfxsx53.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkfxsx53.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        result += (a[i] == b[i]) ? \"0\" :\
    \ \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7h5ayfcs.d(14): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h5ayfcs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++)\n    {\n        if (a[i] == b[i])\n        {\n   \
    \         result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rq53mku.d(16): Error: slice `result` is not mutable

    /tmp/tmp8rq53mku.d(20): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rq53mku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    int len =\
    \ a.length;\n    for (int i = 0; i < len; i++) \n    {\n        result += (a[i]\
    \ ^ b[i]) + '0';\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\"\
    );\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\"\
    , \"0000\") == \"0101\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprh8s2g8b.d(12): Error: cannot implicitly convert expression `a.length`
    of type `ulong` to `int`

    /tmp/tmprh8s2g8b.d(15): Error: incompatible types for `(result) += ((cast(int)a[cast(ulong)i]
    ^ cast(int)b[cast(ulong)i]) + 48)`: `string` and `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprh8s2g8b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163029
- exit_code: 1
  program: "import std.math;\n/*\n Input are two strings a and b consisting only of\
    \ 1s and 0s.\n    Perform binary XOR on these inputs and return result also as\
    \ a string.\n    >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \n*/\nstring\
    \ string_xor(string a, string b) \n{\n    string result = \"\";\n    for (int\
    \ i = 0; i < a.length; i++) \n    {\n        result += (a[i] == b[i]) ? \"0\"\
    \ : \"1\";\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_xor;\n\
    \n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"\
    1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3vn5w1rk.d(14): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vn5w1rk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163028
