language: d
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    auto sum = array[0] + array[$-1];\n    auto\
    \ isOdd = sum % 2 == 1;\n    return isOdd ? array.sort() : array.sort!((a, b)\
    \ => a > b);\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvq2bika5.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmpvq2bika5.d(29): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvq2bika5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.math.greater);\n\
    \    else\n        return array.sort();\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcioqcw28.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpcioqcw28.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcioqcw28.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwpwywck5.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpwpwywck5.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpwywck5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \        result.sort!((a, b) => b - a);\n    else\n        result.sort!((a, b)\
    \ => a - b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuw5yy18w.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpuw5yy18w.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuw5yy18w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    auto result\
    \ = array.dup;\n    if (array.length > 1)\n    {\n        auto is_even = (array[0]\
    \ + array[$ - 1]) % 2 == 0;\n        auto comparer = is_even ? (a, b) => a > b\
    \ : (a, b) => a < b;\n        result.sort!comparer;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ffnlrre.d(29): Error: variable `tmp_ffnlrre.sort_array.comparer`
    type `void` is inferred from initializer `is_even ? (a, b) => a > b : (a, b) =>
    a < b`, and variables cannot be of type `void`

    /tmp/tmp_ffnlrre.d(29): Error: expression `is_even ? (a, b) => a > b : (a, b)
    => a < b` is `void` and has no value

    /tmp/tmp_ffnlrre.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ffnlrre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else if (array.length == 2)\n    {\n        if (array[0] > array[1])\n\
    \        {\n            long temp = array[0];\n            array[0] = array[1];\n\
    \            array[1] = temp;\n        }\n        return array;\n    }\n    else\n\
    \    {\n        if ((array[0] + array[array.length - 1]) % 2 == 0)\n        {\n\
    \            array.sort!((a, b) => a > b);\n            return array;\n      \
    \  }\n        else\n        {\n            array.sort!((a, b) => a < b);\n   \
    \         return array;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9r53ormi.d(43): Error: no property `sort` for type `long[]`

    /tmp/tmp9r53ormi.d(48): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9r53ormi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwpwywck5.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpwpwywck5.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpwywck5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if(array.length == 0 || array.length == 1)\n        return\
    \ result;\n    if((array[0] + array[$-1]) % 2 == 0)\n        sort!((a, b) => b\
    \ - a)(result);\n    else\n        sort!((a, b) => a - b)(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppc1pgvd0.d(29): Error: template instance `sort!((a, b) => b - a)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmppc1pgvd0.d(31): Error: template instance `sort!((a, b) => a - b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppc1pgvd0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    auto sum = array[0] + array[$-1];\n    if (sum % 2 == 0)\n        return\
    \ sort(array, (a, b) => b - a);\n    else\n        return sort(array, (a, b) =>\
    \ a - b);\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd37ngkre.d(31): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpd37ngkre.d(33): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd37ngkre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwpwywck5.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpwpwywck5.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpwywck5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = new long[array.length];\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n        foreach\
    \ (i, v; array)\n            result[i] = v;\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a - b);\n        foreach (i, v; array)\n            result[i] = v;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ubjkc9c.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmp_ubjkc9c.d(38): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ubjkc9c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp);\n\
    \    else\n        return array.sort(std.numeric.cmp).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj5rvrceu.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpj5rvrceu.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj5rvrceu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (result.length == 0)\n        return result;\n    if (result.length\
    \ == 1)\n        return result;\n    if (result[0] + result[result.length - 1]\
    \ % 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr2_9993j.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpr2_9993j.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2_9993j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.math.cmp.descending);\n\
    \    else\n        return array.sort(std.math.cmp.ascending);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvdc_91k5.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpvdc_91k5.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvdc_91k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = new long[array.length];\n \
    \       if ((array[0] + array[array.length - 1]) % 2 == 0)\n        {\n      \
    \      // descending order\n            for (int i = 0; i < array.length; i++)\n\
    \            {\n                result[i] = array[array.length - 1 - i];\n   \
    \         }\n        }\n        else\n        {\n            // ascending order\n\
    \            for (int i = 0; i < array.length; i++)\n            {\n         \
    \       result[i] = array[i];\n            }\n        }\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7152i9_8.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp7152i9_8.__unittest_L51_C1() [0x42814e]

    ??:? void tmp7152i9_8.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    long[] result\
    \ = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwl3t3s3.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmptwl3t3s3.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwl3t3s3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = new long[array.length];\n \
    \       if (array[0] + array[array.length - 1] % 2 == 0)\n        {\n        \
    \    result = array.dup;\n            result.sort!((a, b) => a > b);\n       \
    \ }\n        else\n        {\n            result = array.dup;\n            result.sort!((a,\
    \ b) => a < b);\n        }\n        return result;\n    }\n}\nunittest\n{\n  \
    \  alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk9e32z3f.d(35): Error: no property `sort` for type `long[]`

    /tmp/tmpk9e32z3f.d(40): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk9e32z3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort();\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnd5lig7_.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpnd5lig7_.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnd5lig7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n    {\n        return array.sort(std.math.greater);\n\
    \    }\n    else\n    {\n        return array.sort();\n    }\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7_82eygb.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmp7_82eygb.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_82eygb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    auto result\
    \ = array.dup;\n    if (result.length == 0)\n        return result;\n    if (result.length\
    \ == 1)\n        return result;\n    auto sum = result[0] + result[result.length\
    \ - 1];\n    if (sum % 2 == 0)\n        result.sort!((a, b) => b - a);\n    else\n\
    \        result.sort!((a, b) => a - b);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3iy4lsw.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmpa3iy4lsw.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3iy4lsw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwpwywck5.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpwpwywck5.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpwywck5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \        sort(result, (a, b) => b - a);\n    else\n        sort(result);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0cy625sb.d(31): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp0cy625sb.d(33): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0cy625sb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long first = array[0];\n        long last =\
    \ array[array.length - 1];\n        long sum = first + last;\n        if (sum\
    \ % 2 == 0)\n        {\n            array.sort!((a, b) => b - a);\n          \
    \  return array;\n        }\n        else\n        {\n            array.sort!((a,\
    \ b) => a - b);\n            return array;\n        }\n    }\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvsy6am17.d(36): Error: no property `sort` for type `long[]`

    /tmp/tmpvsy6am17.d(41): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvsy6am17.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => b - a);\n    else\n        return sort(array, (a, b) => a - b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpousk8387.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpousk8387.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpousk8387.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else if (array[0] + array[$-1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => b - a);\n    else\n        return sort(array, (a, b) => a - b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyn7x5ulw.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpyn7x5ulw.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyn7x5ulw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if(array.length > 0)\n    {\n        if((array[0] + array[$-1])\
    \ % 2 == 0)\n        {\n            result.sort!((a, b) => a > b);\n        }\n\
    \        else\n        {\n            result.sort!((a, b) => a < b);\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1kdm9tgn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmp1kdm9tgn.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1kdm9tgn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        bool isOdd\
    \ = (array[0] + array[$ - 1]) % 2 == 1;\n        if (isOdd)\n            sort(result);\n\
    \        else\n            sort(result, (a, b) => b - a);\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptv5mlxce.d(34): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmptv5mlxce.d(36): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptv5mlxce.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (result.length == 0)\n        return result;\n    if (result.length\
    \ == 1)\n        return result;\n    if (result[0] + result[$ - 1] % 2 == 0)\n\
    \        result.sort!((a, b) => b - a);\n    else\n        result.sort!((a, b)\
    \ => a - b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphr1unnr6.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmphr1unnr6.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphr1unnr6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        auto result = array.dup;\n        auto first\
    \ = result[0];\n        auto last = result[$ - 1];\n        auto sum = first +\
    \ last;\n        if (sum % 2 == 0)\n            std.algorithm.sort(result, (a,\
    \ b) => b - a);\n        else\n            std.algorithm.sort(result, (a, b) =>\
    \ a - b);\n        return result;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw82_mxvv.d(36): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpw82_mxvv.d(38): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw82_mxvv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    long[] copy = array.dup;\n    if ((array[0]\
    \ + array[$ - 1]) % 2 == 0)\n        copy.sort!((a, b) => b - a);\n    else\n\
    \        copy.sort!((a, b) => a - b);\n    return copy;\n}\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9qee3ipc.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmp9qee3ipc.d(31): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9qee3ipc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        if ((array[0]\
    \ + array[$ - 1]) % 2 == 0)\n            result.sort!((a, b) => b - a);\n    \
    \    else\n            result.sort!((a, b) => a - b);\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghbkxdmp.d(33): Error: no property `sort` for type `long[]`

    /tmp/tmpghbkxdmp.d(35): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghbkxdmp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => b - a);\n    else\n        return array.sort!((a, b) => a - b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz2ywvfav.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpz2ywvfav.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz2ywvfav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ std.numeric.comparison.greater);\n    else\n        return sort(array, std.numeric.comparison.less);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg2as1y5n.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpg2as1y5n.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2as1y5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    long[] result = array.dup;\n    if ((array[0]\
    \ + array[$ - 1]) % 2 == 0)\n        result.sort!((a, b) => b - a);\n    else\n\
    \        result.sort!((a, b) => a - b);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwiqn3zoh.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmpwiqn3zoh.d(31): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwiqn3zoh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = new long[array.length];\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        result = array.dup;\n        result.sort(std.math.comparator!(\"\
    a > b\"));\n    }\n    else\n    {\n        result = array.dup;\n        result.sort(std.math.comparator!(\"\
    a < b\"));\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp50tmwrxx.d(33): Error: no property `sort` for type `long[]`

    /tmp/tmp50tmwrxx.d(38): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp50tmwrxx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (result.length == 0)\n        return result;\n    else\
    \ if (result.length == 1)\n        return result;\n    else\n    {\n        if\
    \ ((result[0] + result[$-1]) % 2 == 0)\n            result.sort!((a, b) => b -\
    \ a);\n        else\n            result.sort!((a, b) => a - b);\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp26d637bx.d(33): Error: no property `sort` for type `long[]`

    /tmp/tmp26d637bx.d(35): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp26d637bx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => b - a);\n    else\n        return sort(array, (a, b) => a - b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpousk8387.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpousk8387.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpousk8387.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => b - a);\n    else\n        return array.sort!((a, b) => a - b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz2ywvfav.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpz2ywvfav.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz2ywvfav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort!((a, b) =>\
    \ a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpveodo3du.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpveodo3du.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpveodo3du.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return sort(array, (a, b) =>\
    \ a < b);\n    else\n        return sort(array, (a, b) => a > b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjxd0af0m.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpjxd0af0m.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjxd0af0m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (array.length > 0)\n    {\n        long first = array[0];\n\
    \        long last = array[$ - 1];\n        if ((first + last) % 2 == 0)\n   \
    \     {\n            result.sort!((a, b) => b - a);\n        }\n        else\n\
    \        {\n            result.sort!((a, b) => a - b);\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphk_yt7v6.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmphk_yt7v6.d(36): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphk_yt7v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    auto result\
    \ = array.dup;\n    if ((array[0] + array[$-1]) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv7uyiy04.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpv7uyiy04.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7uyiy04.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else if (array.length == 2)\n    {\n        if (array[0] > array[1])\n\
    \        {\n            long temp = array[0];\n            array[0] = array[1];\n\
    \            array[1] = temp;\n        }\n        return array;\n    }\n    else\n\
    \    {\n        long[] result = new long[array.length];\n        if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n        {\n            // descending\n\
    \            long[] temp = array.dup;\n            temp.sort!((a, b) => b - a);\n\
    \            result = temp;\n        }\n        else\n        {\n            //\
    \ ascending\n            long[] temp = array.dup;\n            temp.sort!((a,\
    \ b) => a - b);\n            result = temp;\n        }\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtbvevuk.d(46): Error: no property `sort` for type `long[]`

    /tmp/tmpwtbvevuk.d(53): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtbvevuk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = new long[array.length];\n    if(array.length == 0)\n        return result;\n\
    \    if(array.length == 1)\n        return array;\n    long sum = array[0] + array[array.length\
    \ - 1];\n    if(sum % 2 == 0)\n    {\n        sort(array, (a, b) => b - a);\n\
    \        return array;\n    }\n    else\n    {\n        sort(array);\n       \
    \ return array;\n    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L,\
    \ 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpauonxwxf.d(33): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpauonxwxf.d(38): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpauonxwxf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    long[] ret = array.dup;\n    if ((ret[0] +\
    \ ret[$ - 1]) % 2 == 0)\n        ret.sort!((a, b) => b - a);\n    else\n     \
    \   ret.sort!((a, b) => a - b);\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjbq0ho4m.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmpjbq0ho4m.d(31): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjbq0ho4m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return sort(array, std.math.greater);\n\
    \    else\n        return sort(array, std.math.less);\n}\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5urubv8w.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp5urubv8w.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5urubv8w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        long first\
    \ = result[0];\n        long last = result[$ - 1];\n        if ((first + last)\
    \ % 2 == 0)\n            result.sort!((a, b) => a > b);\n        else\n      \
    \      result.sort!((a, b) => a < b);\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9dfepdzf.d(35): Error: no property `sort` for type `long[]`

    /tmp/tmp9dfepdzf.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9dfepdzf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        auto first\
    \ = result[0];\n        auto last = result[$ - 1];\n        if ((first + last)\
    \ % 2 == 0)\n            sort!((a, b) => b < a)(result);\n        else\n     \
    \       sort!((a, b) => a < b)(result);\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5dtm1zi7.d(35): Error: template instance `sort!((a, b) => b < a)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmp5dtm1zi7.d(37): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5dtm1zi7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n    {\n        return array.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        return array.sort!((a, b) => a < b);\n    }\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1rd_jok_.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmp1rd_jok_.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rd_jok_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n\
    \        return array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a,\
    \ b) => a < b);\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwlo0r4xl.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpwlo0r4xl.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwlo0r4xl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n    {\n        return array.sort!((a, b)\
    \ => b - a);\n    }\n    else\n    {\n        return array.sort!((a, b) => a -\
    \ b);\n    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpacikchpz.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmpacikchpz.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpacikchpz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if(array.length == 0)\n        return result;\n    if(array.length\
    \ == 1)\n        return result;\n    if(array[0] + array[$-1] % 2 == 0)\n    \
    \    return result.sort!((a, b) => b - a);\n    else\n        return result.sort!((a,\
    \ b) => a - b);\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7drmfx6.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpw7drmfx6.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7drmfx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (result.length == 0)\n        return result;\n    if (result.length\
    \ == 1)\n        return result;\n    if (result[0] + result[$ - 1] % 2 == 0)\n\
    \        result.sort!((a, b) => b - a);\n    else\n        result.sort!((a, b)\
    \ => a - b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphr1unnr6.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmphr1unnr6.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphr1unnr6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n    {\n        return array.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        return array.sort!((a, b) => a < b);\n    }\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1rd_jok_.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmp1rd_jok_.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rd_jok_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort!((a, b) =>\
    \ a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpveodo3du.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpveodo3du.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpveodo3du.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    if (array[0]\
    \ + array[$-1] % 2 == 0)\n    {\n        return array.sort!((a, b) => a > b);\n\
    \    }\n    else\n    {\n        return array.sort!((a, b) => a < b);\n    }\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1rd_jok_.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmp1rd_jok_.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1rd_jok_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort!((a, b) =>\
    \ a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpveodo3du.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpveodo3du.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpveodo3du.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    \n    if (array.length == 1)\n        return\
    \ array;\n    \n    if ((array[0] + array[array.length - 1]) % 2 == 0)\n    {\n\
    \        array.sort!((a, b) => b - a);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a - b);\n    }\n    \n    return array;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0q9zjnd.d(33): Error: no property `sort` for type `long[]`

    /tmp/tmpy0q9zjnd.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0q9zjnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return sort(array, (a, b) =>\
    \ a > b);\n    else\n        return sort(array, (a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvx9c4uy9.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpvx9c4uy9.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvx9c4uy9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    long[] result\
    \ = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwl3t3s3.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmptwl3t3s3.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwl3t3s3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if(array.length == 0)\n        return result;\n    if(array.length\
    \ == 1)\n        return result;\n    if(array[0] + array[array.length - 1] % 2\
    \ == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5fq3bzu.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpe5fq3bzu.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5fq3bzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return sort(array, (a, b) =>\
    \ a > b);\n    else\n        return sort(array, (a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvx9c4uy9.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpvx9c4uy9.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvx9c4uy9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort(std.math.greater);\n\
    \    else\n        return array.sort();\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpprbg5a83.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpprbg5a83.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprbg5a83.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    long[] result\
    \ = new long[array.length];\n    int i = 0;\n    foreach(elem; array)\n    {\n\
    \        result[i] = elem;\n        i++;\n    }\n    if ((result[0] + result[result.length\
    \ - 1]) % 2 == 0)\n    {\n        sort(result, (a, b) => a > b);\n    }\n    else\n\
    \    {\n        sort(result, (a, b) => a < b);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
    \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe29s24or.d(36): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpe29s24or.d(40): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe29s24or.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (result.length == 0)\n        return result;\n    if (result.length\
    \ == 1)\n        return result;\n    if (result[0] + result[$ - 1] % 2 == 0)\n\
    \        result.sort!((a, b) => b - a);\n    else\n        result.sort!((a, b)\
    \ => a - b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphr1unnr6.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmphr1unnr6.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphr1unnr6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        if ((array[0] + array[$ - 1]) % 2 == 0)\n \
    \           return array.sort!((a, b) => b - a);\n        else\n            return\
    \ array.sort!((a, b) => a - b);\n    }\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8dwobtwb.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmp8dwobtwb.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dwobtwb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        if ((result[0]\
    \ + result[$ - 1]) % 2 == 0)\n            sort!((a, b) => a > b)(result);\n  \
    \      else\n            sort!((a, b) => a < b)(result);\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppckp3qsj.d(33): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmppckp3qsj.d(35): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppckp3qsj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return sort(array, (a, b) =>\
    \ a > b);\n    else\n        return sort(array, (a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvx9c4uy9.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpvx9c4uy9.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvx9c4uy9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort!((a, b) =>\
    \ b - a);\n    return array.sort!((a, b) => a - b);\n}\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpysaels9w.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpysaels9w.d(31): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysaels9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[$-1] % 2 == 0)\n        return array.sort!((a, b) =>\
    \ a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpveodo3du.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpveodo3du.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpveodo3du.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (array.length > 0)\n    {\n        if ((array[0] + array[$\
    \ - 1]) % 2 == 0)\n        {\n            result.sort!((a, b) => b - a);\n   \
    \     }\n        else\n        {\n            result.sort!((a, b) => a - b);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1grkmx9.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpn1grkmx9.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1grkmx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = new long[array.length];\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        sort(array);\n        reverse(array);\n    \
    \    return array;\n    }\n    else\n    {\n        sort(array);\n        return\
    \ array;\n    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9irnj9gq.d(32): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp9irnj9gq.d(33): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp9irnj9gq.d(38): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9irnj9gq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        if (array[0]\
    \ + array[$ - 1] % 2 == 0)\n            sort(result);\n        else\n        \
    \    sort(result, (a, b) => b - a);\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnscr7pzy.d(33): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpnscr7pzy.d(35): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnscr7pzy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.less);\n\
    \    else\n        return array.sort(std.numeric.greater);\n}\nunittest\n{\n \
    \   alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpphe2bmme.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpphe2bmme.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphe2bmme.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \        sort(result, (a, b) => b - a);\n    else\n        sort(result);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0cy625sb.d(31): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp0cy625sb.d(33): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0cy625sb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if(array.length > 0)\n    {\n        if((array[0] + array[$-1])\
    \ % 2 == 0)\n        {\n            sort(result, (a, b) => b - a);\n        }\n\
    \        else\n        {\n            sort(result);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9xpvkuzu.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp9xpvkuzu.d(34): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xpvkuzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        if ((result[0]\
    \ + result[$ - 1]) % 2 == 0)\n            result.sort!((a, b) => b - a);\n   \
    \     else\n            result.sort!((a, b) => a - b);\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjoj__cug.d(33): Error: no property `sort` for type `long[]`

    /tmp/tmpjoj__cug.d(35): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjoj__cug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (array.length == 0)\n        return result;\n    if (array.length\
    \ == 1)\n        return result;\n    bool is_odd = (array[0] + array[$ - 1]) %\
    \ 2 == 1;\n    if (is_odd)\n        result.sort!((a, b) => a < b);\n    else\n\
    \        result.sort!((a, b) => a > b);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpufwi8eg5.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmpufwi8eg5.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpufwi8eg5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.math.greater);\n\
    \    else\n        return array.sort(std.math.less);\n}\nunittest\n{\n    alias\
    \ candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuwtpvik4.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpuwtpvik4.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuwtpvik4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = new long[array.length];\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => b < a);\n        result\
    \ = array;\n    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n  \
    \      result = array;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu_sat4i8.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmpu_sat4i8.d(37): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_sat4i8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwpwywck5.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpwpwywck5.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpwywck5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (result.length == 0)\n        return result;\n    if (result.length\
    \ == 1)\n        return result;\n    if (result[0] + result[result.length - 1]\
    \ % 2 == 0)\n        result.sort!((a, b) => b - a);\n    else\n        result.sort!((a,\
    \ b) => a - b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpid_olmkg.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpid_olmkg.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpid_olmkg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    auto result = array.dup;\n    if ((array[0]\
    \ + array[$ - 1]) % 2 == 0)\n        sort!((a, b) => a > b)(result);\n    else\n\
    \        sort!((a, b) => a < b)(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp11zyaw7i.d(29): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmp11zyaw7i.d(31): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11zyaw7i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (array.length == 0)\n        return result;\n    if (array.length\
    \ == 1)\n        return result;\n    if (array[0] + array[$ - 1] % 2 == 0)\n \
    \       result.sort!((a, b) => a > b);\n    else\n        result.sort!((a, b)\
    \ => a < b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf9wsmrzs.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpf9wsmrzs.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf9wsmrzs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \        sort!((a, b) => a > b)(result);\n    else\n        sort!((a, b) => a\
    \ < b)(result);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkz7bxzh4.d(31): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpkz7bxzh4.d(33): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkz7bxzh4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \        result.sort!((a, b) => b - a);\n    else\n        result.sort!((a, b)\
    \ => a - b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuw5yy18w.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpuw5yy18w.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuw5yy18w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = new long[array.length];\n    if (array.length == 0)\n        return result;\n\
    \    if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n    {\n        sort(array);\n        return array;\n    }\n\
    \    else\n    {\n        sort(array);\n        reverse(array);\n        return\
    \ array;\n    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkuy8268h.d(32): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpkuy8268h.d(37): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpkuy8268h.d(38): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkuy8268h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = new long[array.length];\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array = array.sort(std.numeric.comparison);\n\
    \        foreach (i, v; array)\n            result[i] = v;\n    }\n    else\n\
    \    {\n        array = array.sort(std.numeric.comparison);\n        foreach (i,\
    \ v; array)\n            result[array.length - 1 - i] = v;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdkw5ypje.d(32): Error: no property `sort` for type `long[]`

    /tmp/tmpdkw5ypje.d(38): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdkw5ypje.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    long[] result = array.dup;\n    if ((result[0]\
    \ + result[$ - 1]) % 2 == 0)\n        sort(result, (a, b) => b - a);\n    else\n\
    \        sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3jpre6mp.d(29): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp3jpre6mp.d(31): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3jpre6mp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a < b);\n    else\n        return sort(array, (a, b) => a > b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp11pgn12o.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp11pgn12o.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11pgn12o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => b - a);\n    else\n        return sort(array, (a, b) => a - b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpousk8387.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpousk8387.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpousk8387.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => b - a);\n    else\n        return sort(array, (a, b) => a - b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpousk8387.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpousk8387.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpousk8387.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[array.length - 1])\
    \ % 2 == 0)\n        result.sort!((a, b) => b - a);\n    else\n        result.sort!((a,\
    \ b) => a - b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpafuiv9qh.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpafuiv9qh.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpafuiv9qh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    bool isOdd\
    \ = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n    {\n  \
    \      array.sort!((a, b) => a < b);\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a > b);\n    }\n    return array;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu83g_n5h.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpu83g_n5h.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu83g_n5h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \        sort(result, (a, b) => a > b);\n    else\n        sort(result, (a, b)\
    \ => a < b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoe3bvu_0.d(31): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpoe3bvu_0.d(33): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoe3bvu_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (result.length == 0)\n        return result;\n    if (result.length\
    \ == 1)\n        return result;\n    if (result[0] + result[result.length - 1]\
    \ % 2 == 0)\n        sort(result, (a, b) => a > b);\n    else\n        sort(result,\
    \ (a, b) => a < b);\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzpocyy2j.d(31): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpzpocyy2j.d(33): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpocyy2j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if(array.length == 0)\n        return result;\n    if(array.length\
    \ == 1)\n        return result;\n    if(array[0] + array[array.length - 1] % 2\
    \ == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5fq3bzu.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpe5fq3bzu.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5fq3bzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = new long[array.length];\n \
    \       long[] temp = new long[array.length];\n        temp = array.dup;\n   \
    \     temp.sort;\n        if ((array[0] + array[array.length - 1]) % 2 == 0)\n\
    \        {\n            for (int i = 0; i < array.length; i++)\n            {\n\
    \                result[i] = temp[array.length - 1 - i];\n            }\n    \
    \    }\n        else\n        {\n            for (int i = 0; i < array.length;\
    \ i++)\n            {\n                result[i] = temp[i];\n            }\n \
    \       }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpju9f6b0a.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpju9f6b0a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        if ((result[0]\
    \ + result[$ - 1]) % 2 == 0)\n            result.sort!((a, b) => b - a);\n   \
    \     else\n            result.sort!((a, b) => a - b);\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjoj__cug.d(33): Error: no property `sort` for type `long[]`

    /tmp/tmpjoj__cug.d(35): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjoj__cug.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else if (array.length == 2)\n    {\n        if (array[0] > array[1])\n\
    \        {\n            long temp = array[0];\n            array[0] = array[1];\n\
    \            array[1] = temp;\n        }\n        return array;\n    }\n    else\n\
    \    {\n        long[] sorted_array = new long[array.length];\n        if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n        {\n            for (int i = 0;\
    \ i < array.length; i++)\n            {\n                sorted_array[i] = array[array.length\
    \ - 1 - i];\n            }\n        }\n        else\n        {\n            for\
    \ (int i = 0; i < array.length; i++)\n            {\n                sorted_array[i]\
    \ = array[i];\n            }\n        }\n        return sorted_array;\n    }\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp17l2hqh_.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x428835]

    ??:? void tmp17l2hqh_.__unittest_L59_C1() [0x428236]

    ??:? void tmp17l2hqh_.__modtest() [0x4285b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c8ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b782]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ebc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430999]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b759]

    ??:? runModuleUnitTests [0x42c6c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428cf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (array.length == 0)\n        return result;\n    if (array.length\
    \ == 1)\n        return result;\n    if (array[0] + array[$ - 1] % 2 == 0)\n \
    \       result.sort!((a, b) => a > b);\n    else\n        result.sort!((a, b)\
    \ => a < b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf9wsmrzs.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpf9wsmrzs.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf9wsmrzs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    auto sum = array[0] + array[$-1];\n    auto\
    \ isOdd = sum % 2 == 1;\n    auto result = array.dup;\n    result.sort!((a, b)\
    \ => isOdd ? a > b : a < b);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphcixn6cm.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphcixn6cm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    auto result = array.dup;\n    if ((array[0]\
    \ + array[$ - 1]) % 2 == 0)\n        result.sort!((a, b) => b - a);\n    else\n\
    \        result.sort!((a, b) => a - b);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdbg1fkcb.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmpdbg1fkcb.d(31): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdbg1fkcb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else\n    {\n        long[] result = array.dup;\n\
    \        if ((array[0] + array[$ - 1]) % 2 == 0)\n            std.algorithm.sort(result,\
    \ (a, b) => b - a);\n        else\n            std.algorithm.sort(result);\n \
    \       return result;\n    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqh57dz8_.d(31): Error: undefined identifier `algorithm` in package
    `std`

    /tmp/tmpqh57dz8_.d(33): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqh57dz8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (array.length == 0)\n        return result;\n    if (array.length\
    \ == 1)\n        return result;\n    if (array[0] + array[$ - 1] % 2 == 0)\n \
    \       sort!((a, b) => a > b)(result);\n    else\n        sort!((a, b) => a <\
    \ b)(result);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy48izzys.d(31): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmpy48izzys.d(33): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy48izzys.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwpwywck5.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpwpwywck5.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpwywck5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        if ((array[0]\
    \ + array[$ - 1]) % 2 == 0)\n            result.sort!((a, b) => b - a);\n    \
    \    else\n            result.sort!((a, b) => a - b);\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghbkxdmp.d(33): Error: no property `sort` for type `long[]`

    /tmp/tmpghbkxdmp.d(35): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghbkxdmp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = new long[array.length];\n    if(array.length == 0)\n        return result;\n\
    \    else if(array.length == 1)\n        return array;\n    else\n    {\n    \
    \    if((array[0] + array[array.length - 1]) % 2 == 0)\n        {\n          \
    \  result = array.sort!((a, b) => a > b);\n        }\n        else\n        {\n\
    \            result = array.sort!((a, b) => a < b);\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnyn35ei8.d(34): Error: no property `sort` for type `long[]`

    /tmp/tmpnyn35ei8.d(38): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnyn35ei8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \        result.sort!((a, b) => b - a);\n    else\n        result.sort!((a, b)\
    \ => a - b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuw5yy18w.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpuw5yy18w.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuw5yy18w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwpwywck5.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpwpwywck5.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpwywck5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    long[] result\
    \ = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwl3t3s3.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmptwl3t3s3.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwl3t3s3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    auto sum = array[0] + array[$-1];\n    auto\
    \ result = array.dup;\n    if (sum % 2 == 0)\n        result.sort!((a, b) => b\
    \ - a);\n    else\n        result.sort!((a, b) => a - b);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9_jcruvq.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmp9_jcruvq.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_jcruvq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    long[] result\
    \ = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n    {\n        result.sort!((a,\
    \ b) => b - a);\n    }\n    else\n    {\n        result.sort!((a, b) => a - b);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwl3t3s3.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmptwl3t3s3.d(34): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwl3t3s3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    bool isOdd = (array[0] + array[array.length - 1]) % 2 == 1;\n    if (isOdd)\n\
    \        return array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a,\
    \ b) => a < b);\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwlo0r4xl.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpwlo0r4xl.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwlo0r4xl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = new long[array.length];\n \
    \       if ((array[0] + array[array.length - 1]) % 2 == 0)\n        {\n      \
    \      array.sort!((a, b) => b - a);\n            result = array;\n        }\n\
    \        else\n        {\n            array.sort!((a, b) => a - b);\n        \
    \    result = array;\n        }\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0n1492gc.d(34): Error: no property `sort` for type `long[]`

    /tmp/tmp0n1492gc.d(39): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0n1492gc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        if ((array[0]\
    \ + array[$ - 1]) % 2 == 0)\n            sort(result, (a, b) => b - a);\n    \
    \    else\n            sort(result);\n        return result;\n    }\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu56vos7d.d(33): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpu56vos7d.d(35): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu56vos7d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a < b);\n    else\n        return sort(array, (a, b) => a > b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp11pgn12o.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp11pgn12o.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11pgn12o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => b - a);\n    else\n        return sort(array, (a, b) => a - b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpousk8387.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpousk8387.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpousk8387.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.reverseComparison);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5fr1nmjp.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmp5fr1nmjp.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fr1nmjp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => b - a);\n    else\n        return array.sort!((a, b) => a - b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz2ywvfav.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpz2ywvfav.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz2ywvfav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n    {\n        return array.sort!((a, b)\
    \ => a > b);\n    }\n    else\n    {\n        return array.sort!((a, b) => a <\
    \ b);\n    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_kwutik.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmpo_kwutik.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_kwutik.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else if (array.length == 2)\n    {\n        if (array[0] > array[1])\n\
    \        {\n            long temp = array[0];\n            array[0] = array[1];\n\
    \            array[1] = temp;\n        }\n        return array;\n    }\n    else\n\
    \    {\n        long[] result = new long[array.length];\n        if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n        {\n            array.sort!((a,\
    \ b) => b - a);\n            result = array;\n        }\n        else\n      \
    \  {\n            array.sort!((a, b) => a - b);\n            result = array;\n\
    \        }\n        return result;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu_m1t94s.d(44): Error: no property `sort` for type `long[]`

    /tmp/tmpu_m1t94s.d(49): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_m1t94s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] new_array = array.dup;\n        if ((new_array[0]\
    \ + new_array[$ - 1]) % 2 == 0)\n            new_array.sort!((a, b) => b - a);\n\
    \        else\n            new_array.sort!((a, b) => a - b);\n        return new_array;\n\
    \    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_04nav5f.d(33): Error: no property `sort` for type `long[]`

    /tmp/tmp_04nav5f.d(35): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_04nav5f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a, b)\
    \ => a < b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_k9ilkb.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpx_k9ilkb.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_k9ilkb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = array.dup;\n        if ((array[0]\
    \ + array[$ - 1]) % 2 == 0)\n            result.sort!((a, b) => b - a);\n    \
    \    else\n            result.sort!((a, b) => a - b);\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpghbkxdmp.d(33): Error: no property `sort` for type `long[]`

    /tmp/tmpghbkxdmp.d(35): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpghbkxdmp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (array.length == 0) return result;\n    if (array.length\
    \ == 1) return result;\n    if (array[0] + array[$ - 1] % 2 == 0)\n    {\n   \
    \     sort(result, (a, b) => b - a);\n    }\n    else\n    {\n        sort(result);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp527rhy7b.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmp527rhy7b.d(34): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp527rhy7b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    \n    auto result = array.dup;\n    if ((array[0]\
    \ + array[$-1]) % 2 == 0)\n        result.sort!((a, b) => b - a);\n    else\n\
    \        result.sort!((a, b) => a - b);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnvi4pvr3.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpnvi4pvr3.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnvi4pvr3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n    {\n        return array.sort!((a, b)\
    \ => a > b);\n    }\n    else\n    {\n        return array.sort!((a, b) => a <\
    \ b);\n    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_kwutik.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmpo_kwutik.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_kwutik.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if(result.length == 0)\n        return result;\n    if(result.length\
    \ == 1)\n        return result;\n    if(result[0] + result[$-1] % 2 == 0)\n  \
    \      result.sort!((a, b) => b - a);\n    else\n        result.sort!((a, b) =>\
    \ a - b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv0zbfzco.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpv0zbfzco.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv0zbfzco.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpct4kfokn.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpct4kfokn.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct4kfokn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (array.length > 0)\n    {\n        bool isOdd = (array[0]\
    \ + array[$ - 1]) % 2 == 1;\n        if (isOdd)\n        {\n            sort(result);\n\
    \        }\n        else\n        {\n            sort(result, std.numeric.comparisonFunctor!(\"\
    a > b\"));\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgiw7jyg7.d(31): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpgiw7jyg7.d(35): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgiw7jyg7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwpwywck5.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpwpwywck5.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwpwywck5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if(result.length == 0)\n        return result;\n    if(result.length\
    \ == 1)\n        return result;\n    if(result[0] + result[$-1] % 2 == 0)\n  \
    \      sort!((a, b) => a > b)(result);\n    else\n        sort!((a, b) => a <\
    \ b)(result);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3r41tzb3.d(31): Error: template instance `sort!((a, b) => a > b)`
    template `sort` is not defined, did you mean sqrt?

    /tmp/tmp3r41tzb3.d(33): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3r41tzb3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    bool is_odd = (array[0] + array[$-1]) % 2 == 1;\n    if (is_odd)\n      \
    \  return array.sort!((a, b) => a > b);\n    else\n        return array.sort!((a,\
    \ b) => a < b);\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf37a4gxo.d(31): Error: no property `sort` for type `long[]`

    /tmp/tmpf37a4gxo.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf37a4gxo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1t9fhnd.d(30): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpa1t9fhnd.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1t9fhnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1kwdfc6.d(30): Error: no property `sort` for type `long[]`

    /tmp/tmpp1kwdfc6.d(32): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1kwdfc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164353
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0) return array;\n    if (array.length == 1) return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n    {\n        array.sort!((a, b) => a\
    \ > b);\n    }\n    else\n    {\n        array.sort!((a, b) => a < b);\n    }\n\
    \    return array;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2kr9ng2.d(29): Error: no property `sort` for type `long[]`

    /tmp/tmpw2kr9ng2.d(33): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2kr9ng2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164354
