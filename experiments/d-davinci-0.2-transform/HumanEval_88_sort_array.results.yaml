language: d
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    auto sum = array[0] + array[$-1];\n    auto\
    \ isOdd = sum % 2 == 1;\n    return isOdd ? array.sort() : array.sort!((a, b)\
    \ => a > b);\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppo89puvt.d(29): Error: no property `sort` for type `long[]`\n/tmp/tmppo89puvt.d(29):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmppo89puvt.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.math.greater);\n\
    \    else\n        return array.sort();\n}\nunittest\n{\n    alias candidate =\
    \ sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ygice7t.d(30): Error: no property `sort` for type `long[]`\n/tmp/tmp6ygice7t.d(32):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp6ygice7t.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_8hwkv27.d(30): Error: no property `sort` for type `long[]`\n/tmp/tmp_8hwkv27.d(32):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_8hwkv27.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \        result.sort!((a, b) => b - a);\n    else\n        result.sort!((a, b)\
    \ => a - b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvamaa8yn.d(31): Error: no property `sort` for type `long[]`\n/tmp/tmpvamaa8yn.d(33):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvamaa8yn.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr_gkpm3l.d(30): Error: no property `sort` for type `long[]`\n/tmp/tmpr_gkpm3l.d(32):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr_gkpm3l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    auto result\
    \ = array.dup;\n    if (array.length > 1)\n    {\n        auto is_even = (array[0]\
    \ + array[$ - 1]) % 2 == 0;\n        auto comparer = is_even ? (a, b) => a > b\
    \ : (a, b) => a < b;\n        result.sort!comparer;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq4hiwye9.d(29): Error: variable `tmpq4hiwye9.sort_array.comparer`
    type `void` is inferred from initializer `is_even ? (a, b) => a > b : (a, b) =>
    a < b`, and variables cannot be of type `void`\n/tmp/tmpq4hiwye9.d(29): Error:
    expression `is_even ? (a, b) => a > b : (a, b) => a < b` is `void` and has no
    value\n/tmp/tmpq4hiwye9.d(30): Error: no property `sort` for type `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq4hiwye9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else if (array.length == 2)\n    {\n        if (array[0] > array[1])\n\
    \        {\n            long temp = array[0];\n            array[0] = array[1];\n\
    \            array[1] = temp;\n        }\n        return array;\n    }\n    else\n\
    \    {\n        if ((array[0] + array[array.length - 1]) % 2 == 0)\n        {\n\
    \            array.sort!((a, b) => a > b);\n            return array;\n      \
    \  }\n        else\n        {\n            array.sort!((a, b) => a < b);\n   \
    \         return array;\n        }\n    }\n}\nunittest\n{\n    alias candidate\
    \ = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9r4lv70d.d(43): Error: no property `sort` for type `long[]`\n/tmp/tmp9r4lv70d.d(48):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp9r4lv70d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_8hwkv27.d(30): Error: no property `sort` for type `long[]`\n/tmp/tmp_8hwkv27.d(32):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_8hwkv27.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if(array.length == 0 || array.length == 1)\n        return\
    \ result;\n    if((array[0] + array[$-1]) % 2 == 0)\n        sort!((a, b) => b\
    \ - a)(result);\n    else\n        sort!((a, b) => a - b)(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf2g01t7h.d(29): Error: template instance `sort!((a, b) => b
    - a)` template `sort` is not defined, did you mean sqrt?\n/tmp/tmpf2g01t7h.d(31):
    Error: template instance `sort!((a, b) => a - b)` template `sort` is not defined,
    did you mean sqrt?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf2g01t7h.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr_gkpm3l.d(30): Error: no property `sort` for type `long[]`\n/tmp/tmpr_gkpm3l.d(32):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpr_gkpm3l.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    auto sum = array[0] + array[$-1];\n    if (sum % 2 == 0)\n        return\
    \ sort(array, (a, b) => b - a);\n    else\n        return sort(array, (a, b) =>\
    \ a - b);\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpd0fr2msu.d(31): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpd0fr2msu.d(33): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd0fr2msu.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcwthl00a.d(30): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpcwthl00a.d(32): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwthl00a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_8hwkv27.d(30): Error: no property `sort` for type `long[]`\n/tmp/tmp_8hwkv27.d(32):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_8hwkv27.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = new long[array.length];\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n        foreach\
    \ (i, v; array)\n            result[i] = v;\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a - b);\n        foreach (i, v; array)\n            result[i] = v;\n \
    \   }\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzp45wwa1.d(32): Error: no property `sort` for type `long[]`\n/tmp/tmpzp45wwa1.d(38):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzp45wwa1.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp);\n\
    \    else\n        return array.sort(std.numeric.cmp).reverse();\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbp6zxrst.d(30): Error: no property `sort` for type `long[]`\n/tmp/tmpbp6zxrst.d(32):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpbp6zxrst.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return sort(array,\
    \ (a, b) => a > b);\n    else\n        return sort(array, (a, b) => a < b);\n\
    }\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcwthl00a.d(30): Error: undefined identifier `sort`, did you
    mean function `sqrt`?\n/tmp/tmpcwthl00a.d(32): Error: undefined identifier `sort`,
    did you mean function `sqrt`?\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwthl00a.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort!((a,\
    \ b) => a > b);\n    else\n        return array.sort!((a, b) => a < b);\n}\nunittest\n\
    {\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n   \
    \ assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L,\
    \ 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) ==\
    \ [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L,\
    \ 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L,\
    \ 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuy42v21r.d(30): Error: no property `sort` for type `long[]`\n/tmp/tmpuy42v21r.d(32):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpuy42v21r.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    long[] result\
    \ = array.dup;\n    if (result.length == 0)\n        return result;\n    if (result.length\
    \ == 1)\n        return result;\n    if (result[0] + result[result.length - 1]\
    \ % 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}\nunittest\n{\n    alias candidate = sort_array;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n   \
    \ assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n \
    \   assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L,\
    \ 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp46r73y5d.d(31): Error: no property `sort` for type `long[]`\n/tmp/tmp46r73y5d.d(33):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp46r73y5d.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.math.cmp.descending);\n\
    \    else\n        return array.sort(std.math.cmp.ascending);\n}\nunittest\n{\n\
    \    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L])\
    \ == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L,\
    \ 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L,\
    \ 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L,\
    \ 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L,\
    \ 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl4li1x8i.d(30): Error: no property `sort` for type `long[]`\n/tmp/tmpl4li1x8i.d(32):
    Error: no property `sort` for type `long[]`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpl4li1x8i.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n    you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n    or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n\n    Note:\n    * don't change the given array.\n\
    \n    Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n  \
    \  [5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L,\
    \ 5L]\n    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L,\
    \ 2L, 1L, 0L]\n    \n*/\nlong[] sort_array(long[] array) \n{\n    if (array.length\
    \ == 0)\n        return array;\n    else if (array.length == 1)\n        return\
    \ array;\n    else\n    {\n        long[] result = new long[array.length];\n \
    \       if ((array[0] + array[array.length - 1]) % 2 == 0)\n        {\n      \
    \      // descending order\n            for (int i = 0; i < array.length; i++)\n\
    \            {\n                result[i] = array[array.length - 1 - i];\n   \
    \         }\n        }\n        else\n        {\n            // ascending order\n\
    \            for (int i = 0; i < array.length; i++)\n            {\n         \
    \       result[i] = array[i];\n            }\n        }\n        return result;\n\
    \    }\n}\nunittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L,\
    \ 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
    \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
    \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
    \ 21L, 14L, 11L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpla55g01d.d(57): unittest failure\n----------------\n??:?
    _d_unittestp [0x42874d]\n??:? void tmpla55g01d.__unittest_L51_C1() [0x42814e]\n??:?
    void tmpla55g01d.__modtest() [0x4284cc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b97]\n??:? _d_run_main [0x428b02]\n??:? main [0x4284df]\n??:?
    __libc_start_main [0x68796554]\n1/1 unittests FAILED\n'''
  stdout: b''
