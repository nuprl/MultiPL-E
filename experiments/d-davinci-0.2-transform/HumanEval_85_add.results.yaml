language: d
name: HumanEval_85_add
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(index, element; lst)\n    {\n        if(index\
    \ % 2 == 1 && element % 2 == 0)\n        {\n            result += element;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i % 2 == 1 && e\
    \ % 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, x; lst)\n    {\n        if (i % 2 == 1 && x\
    \ % 2 == 0)\n            sum += x;\n    }\n    return sum;\n}\nunittest\n{\n \
    \   alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8d8lf65b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(idx, val; lst)\n    {\n        if(idx % 2 == 1\
    \ && val % 2 == 0)\n        {\n            sum += val;\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwi56rmjk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 1 && e\
    \ % 2 == 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjyhc9380.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 &&\
    \ e % 2 == 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa9o_jtw2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2 == 1 && e%2 ==\
    \ 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n\
    /*\nGiven a list of integers lst, return the sum of the first and last elements.\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkv33wfr2.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpkv33wfr2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 &&\
    \ e % 2 == 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa9o_jtw2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(idx, element; lst)\n    {\n        if(idx % 2 ==\
    \ 1 && element % 2 == 0)\n        {\n            sum += element;\n        }\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_e59m79.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a list of integers lst, return the sum of the first and last elements\
    \ of the list.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3wpbuttb.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3wpbuttb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(idx, val; lst)\n    {\n        if(idx % 2 == 1\
    \ && val % 2 == 0)\n        {\n            sum += val;\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwi56rmjk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 &&\
    \ e % 2 == 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\n/*\nGiven a list of integers lst, return a list of integers where\
    \ each element is multiplied by 2.\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdkec1uyc.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpdkec1uyc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 &&\
    \ v % 2 == 0)\n        {\n            result += v;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqar128it.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2==1 && e%2==0)\n\
    \        {\n            sum+=e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpixmtks1y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2==1 && e%2==0)\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfqon9vxl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 &&\
    \ e % 2 == 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxxpowng_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a list of integers lst, return the sum of the first and last elements.\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmn5mmd5b.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmn5mmd5b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a list of integers lst, return a list of integers with the same length,\
    \ where each element is the product of all the elements in lst except for the\
    \ element at that index.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpowa416qm.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpowa416qm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(idx, val; lst)\n    {\n        if(idx % 2 == 1\
    \ && val % 2 == 0)\n        {\n            sum += val;\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwi56rmjk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a list of integers lst, return the sum of the first and last elements.\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmn5mmd5b.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmn5mmd5b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2ulmcsj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(i,e; lst)\n    {\n        if(i%2==1 && e%2==0)\n\
    \        {\n            result+=e;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpettcrxzp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 &&\
    \ e % 2 == 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxxpowng_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2ulmcsj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a list of integers lst, return the sum of the first and last elements.\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4tygzdvm.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4tygzdvm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a list of integers lst, return the sum of the first and last elements.\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4tygzdvm.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp4tygzdvm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(e % 2 == 0 && i %\
    \ 2 != 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiob45sdy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 &&\
    \ e % 2 == 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa9o_jtw2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2ulmcsj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 &&\
    \ e % 2 == 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxxpowng_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long res = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            res += e;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu367malv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long res = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            res += e;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu367malv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2==1 && e%2==0)\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfqon9vxl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2ulmcsj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(idx, elem; lst)\n    {\n        if(idx % 2 == 1\
    \ && elem % 2 == 0)\n        {\n            sum += elem;\n        }\n    }\n \
    \   return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsak6lwu1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2==1 && e%2==0)\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfqon9vxl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a list of integers lst, return the sum of the elements that are at\
    \ even indices.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprqqbqh8q.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmprqqbqh8q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a list of integers lst, return the sum of the first two elements\
    \ that are even.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptrv65ngd.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmptrv65ngd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2 == 1 && e%2 ==\
    \ 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqspdnwf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2ulmcsj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i % 2 == 1 && e\
    \ % 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnk_1s_nj.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnk_1s_nj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2ulmcsj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnk_1s_nj.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpnk_1s_nj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i % 2 == 1 && e\
    \ % 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsid12d6_.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsid12d6_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long res = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            res += e;\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu367malv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2 == 1 && e%2 ==\
    \ 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqspdnwf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i % 2 == 1 && e\
    \ % 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2ulmcsj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0;\n    foreach(i,e; lst)\n    {\n        if(i%2!=0 && e%2==0)\n\
    \        {\n            result += e;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpccqrzagu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 &&\
    \ e % 2 == 0)\n        {\n            result += e;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxxpowng_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2ulmcsj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a list of integers lst, return the sum of the first and last elements.\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmn5mmd5b.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmn5mmd5b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\nGiven a list of integers lst, return a list of integers where each element\
    \ is multiplied by 2.\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqeieqr2w.d(24): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpqeieqr2w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800029
