language: d
name: HumanEval_85_add
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long result = 0L;\n    foreach(index, element; lst)\n    {\n        if(index\
    \ % 2 == 1 && element % 2 == 0)\n        {\n            result += element;\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    for (int i = 0; i < lst.length; i++)\n    {\n        if\
    \ (i % 2 == 1 && lst[i] % 2 == 0)\n        {\n            sum += lst[i];\n   \
    \     }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 2 == 1 && v %\
    \ 2 == 0)\n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i % 2 == 1 && e\
    \ % 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \    >>> add([4L, 2L, 6L, 7L])\n    2L\n    \n*/\nlong add(long[] lst) \n{\n \
    \   long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 2 == 1 && e %\
    \ 2 == 0)\n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
