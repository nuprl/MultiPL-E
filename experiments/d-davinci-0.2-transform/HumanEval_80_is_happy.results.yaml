language: d
name: HumanEval_80_is_happy
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    int len = s.length;\n    if (len < 3)\n        return false;\n \
    \   for (int i = 0; i < len - 2; i++)\n    {\n        if (s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9p8gp7bl.d(24): Error: cannot implicitly convert expression
    `s.length` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9p8gp7bl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n    \
    \    for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return\
    \ false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n \
    \   assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    bool result = true;\n    if (s.length < 3)\n        return false;\n\
    \    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            result = false;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    bool result = true;\n    if (s.length < 3)\n        return false;\n\
    \    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            result = false;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) \n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2]) \n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxhyfv9b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpguyymdz8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5o_6axy8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    // your code goes here\n    if(s.length < 3)\n        return false;\n\
    \    for(int i = 0; i < s.length - 2; i++)\n    {\n        if(s[i] == s[i+1] ||\
    \ s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2k216n0g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n    \
    \    foreach(i; 0 .. s.length - 2)\n        {\n            if (s[i] == s[i + 1]\
    \ || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n\
    \        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate =\
    \ is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsomkgyan.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    auto a = s[0];\n \
    \   auto b = s[1];\n    auto c = s[2];\n    for (size_t i = 3; i < s.length; i++)\n\
    \    {\n        if (a == b || b == c || a == c)\n            return false;\n \
    \       a = b;\n        b = c;\n        c = s[i];\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") ==\
    \ false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\"\
    ) == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo6x2c0h3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n    \
    \    for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return\
    \ false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5o_6axy8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    auto a = s[0..3];\n    auto\
    \ b = s[1..4];\n    auto c = s[2..5];\n    if (a[0] == a[1] || a[0] == a[2] ||\
    \ a[1] == a[2]) return false;\n    if (b[0] == b[1] || b[0] == b[2] || b[1] ==\
    \ b[2]) return false;\n    if (c[0] == c[1] || c[0] == c[2] || c[1] == c[2]) return\
    \ false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvez4zt75.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length -\
    \ 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i\
    \ + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ap4n81a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) \n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2]) \n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxhyfv9b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    auto it = s.walkLength(3);\n\
    \    while (it.empty is false)\n    {\n        if (it[0] == it[1] || it[0] ==\
    \ it[2] || it[1] == it[2]) return false;\n        it.popFrontN(1);\n    }\n  \
    \  return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1q7qiv1i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpguyymdz8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    return s.length == 3 && s[0]\
    \ != s[1] && s[1] != s[2] && s[0] != s[2];\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4j3uxeo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpguyymdz8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n    \
    \    for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return\
    \ false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length -\
    \ 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i\
    \ + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n \
    \   assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uo1owyi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\n/*\nYou are given a string s.\n    Your task is to check if the string is happy\
    \ or not.\n    A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n   \
    \ >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n\
    \    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n\
    \    \n*/\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltrgc6d9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    auto n = s.length;\n\
    \    for (int i = 0; i < n - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i]\
    \ == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n   \
    \ return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgp_aa1a_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    auto it = s.front;\n    for\
    \ (int i = 0; i < s.length - 2; i++)\n    {\n        if (it == it.next.next) return\
    \ false;\n        it = it.next;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg88se0i0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpguyymdz8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5o_6axy8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\n/*\nYou are given a string s.\n    Your task is to check if the string is happy\
    \ or not.\n    A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n   \
    \ >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n\
    \    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n\
    \    \n*/\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltrgc6d9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    auto length = s.length;\n\
    \    auto i = 0;\n    while (i < length - 2)\n    {\n        if (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n\
    \        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate =\
    \ is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5m175tn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    auto len = s.length;\n    if (len < 3) return false;\n    for (int\
    \ i = 0; i < len - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i\
    \ + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8pmm4pv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkt_qe2y0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    int len = s.length;\n    if (len < 3)\n        return false;\n \
    \   for (int i = 0; i < len - 2; i++)\n    {\n        if (s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9p8gp7bl.d(24): Error: cannot implicitly convert expression
    `s.length` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp9p8gp7bl.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length\
    \ - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] ==\
    \ s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5o_6axy8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    bool result = true;\n    if (s.length < 3)\n        return false;\n\
    \    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            result = false;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    return s.length >= 3 && s.length % 3 == 0 && s.length == s.unique.length;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_vruu6f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (size_t i = 0;\
    \ i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6rlz758c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (size_t i = 0;\
    \ i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6rlz758c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    bool result = true;\n    if (s.length < 3)\n        return false;\n\
    \    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            result = false;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    return s.length >= 3 && s.length % 3 == 0 && s.length.iota.map!(i\
    \ => s[i..i+3]).all!(x => x[0] != x[1] && x[1] != x[2] && x[0] != x[2]);\n}\n\
    unittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") ==\
    \ false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\"\
    ) == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwaibpti.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (size_t i = 0;\
    \ i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6rlz758c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n    \
    \    for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return\
    \ false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkt_qe2y0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length -\
    \ 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i\
    \ + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ap4n81a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\n/*\nYou are given a string s.\n    Your task is to check if the string is happy\
    \ or not.\n    A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n   \
    \ >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n\
    \    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n\
    \    \n*/\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"\
    a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpltrgc6d9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    bool happy = true;\n    if (s.length < 3)\n        return false;\n\
    \    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i +\
    \ 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            happy = false;\n\
    \    }\n    return happy;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n\
    \    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n\
    \    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n\
    \    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n\
    \    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\"\
    ) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxnajzie2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (size_t i = 0;\
    \ i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6rlz758c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpguyymdz8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n    \
    \    for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return\
    \ false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8s5la95.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n\
    \    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n\
    \    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n\
    \    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\")\
    \ == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpguyymdz8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n    \
    \    for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return\
    \ false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n    \
    \    for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return\
    \ false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    auto it = s.front;\n    while\
    \ (it != s.back)\n    {\n        if (it.front == it.back) return false;\n    \
    \    it.popFront();\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9lspuker.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i\
    \ < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2]\
    \ || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\"\
    ) == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"\
    abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"\
    adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"\
    iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n    \
    \    for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return\
    \ false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length\
    \ - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i +\
    \ 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n   \
    \ alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr98fpv1_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n    \
    \    for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] ==\
    \ s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return\
    \ false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n\
    \    Your task is to check if the string is happy or not.\n    A string is happy\
    \ if its length is at least 3 and every 3 consecutive letters are distinct\n \
    \   For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n\
    \    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>>\
    \ is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string\
    \ s) \n{\n    if (s.length < 3) return false;\n    auto r = s.length % 3;\n  \
    \  if (r != 0) return false;\n    auto n = s.length / 3;\n    for (size_t i =\
    \ 0; i < n; i++)\n    {\n        auto a = s[i * 3];\n        auto b = s[i * 3\
    \ + 1];\n        auto c = s[i * 3 + 2];\n        if (a == b || a == c || b ==\
    \ c) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"\
    aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"\
    aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"\
    xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"\
    iopaxioi\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfijzitk6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659800331
