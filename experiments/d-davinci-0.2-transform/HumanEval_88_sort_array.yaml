name: HumanEval_88_sort_array
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
  \ integers, return a copy of the given array after sorting,\n    you will sort the\
  \ given array in ascending order if the sum( first index value, last index value)\
  \ is odd,\n    or sort it in descending order if the sum( first index value, last\
  \ index value) is even.\n\n    Note:\n    * don't change the given array.\n\n  \
  \  Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n    [5L]\n\
  \    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L, 5L]\n  \
  \  >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L, 2L, 1L, 0L]\n\
  \    \n*/\nlong[] sort_array(long[] array) \n"
tests: "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
  \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
  \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
  \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
  \ 21L, 14L, 11L]);\n}\nvoid main(){}"
completions: ["{\n    if (array.length == 0)\n        return array;\n    auto sum\
    \ = array[0] + array[$-1];\n    auto isOdd = sum % 2 == 1;\n    return isOdd ?\
    \ array.sort() : array.sort!((a, b) => a > b);\n}", "{\n    if (array.length ==\
    \ 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.math.greater);\n\
    \    else\n        return array.sort();\n}", "{\n    if (array.length == 0)\n\
    \        return array;\n    if (array.length == 1)\n        return array;\n  \
    \  if (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = array.dup;\n    if ((array[0] + array[$ - 1]) % 2 == 0)\n\
    \        result.sort!((a, b) => b - a);\n    else\n        result.sort!((a, b)\
    \ => a - b);\n    return result;\n}", "{\n    if (array.length == 0)\n       \
    \ return array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.comparison);\n\
    \    else\n        return array.sort(std.numeric.comparison).reverse();\n}", "{\n\
    \    auto result = array.dup;\n    if (array.length > 1)\n    {\n        auto\
    \ is_even = (array[0] + array[$ - 1]) % 2 == 0;\n        auto comparer = is_even\
    \ ? (a, b) => a > b : (a, b) => a < b;\n        result.sort!comparer;\n    }\n\
    \    return result;\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    else if (array.length == 1)\n        return array;\n    else if (array.length\
    \ == 2)\n    {\n        if (array[0] > array[1])\n        {\n            long\
    \ temp = array[0];\n            array[0] = array[1];\n            array[1] = temp;\n\
    \        }\n        return array;\n    }\n    else\n    {\n        if ((array[0]\
    \ + array[array.length - 1]) % 2 == 0)\n        {\n            array.sort!((a,\
    \ b) => a > b);\n            return array;\n        }\n        else\n        {\n\
    \            array.sort!((a, b) => a < b);\n            return array;\n      \
    \  }\n    }\n}", "{\n    if (array.length == 0)\n        return array;\n    if\
    \ (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n    else\n\
    \        return array.sort(std.numeric.cmp.less);\n}", "{\n    long[] result =\
    \ array.dup;\n    if(array.length == 0 || array.length == 1)\n        return result;\n\
    \    if((array[0] + array[$-1]) % 2 == 0)\n        sort!((a, b) => b - a)(result);\n\
    \    else\n        sort!((a, b) => a - b)(result);\n    return result;\n}", "{\n\
    \    if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return array.sort(std.numeric.comparison);\n    else\n        return\
    \ array.sort(std.numeric.comparison).reverse();\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    auto sum = array[0] + array[$-1];\n    if (sum % 2 == 0)\n        return\
    \ sort(array, (a, b) => b - a);\n    else\n        return sort(array, (a, b) =>\
    \ a - b);\n}", "{\n    if (array.length == 0)\n        return array;\n    if (array.length\
    \ == 1)\n        return array;\n    if (array[0] + array[array.length - 1] % 2\
    \ == 0)\n        return sort(array, (a, b) => a > b);\n    else\n        return\
    \ sort(array, (a, b) => a < b);\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp.greater);\n\
    \    else\n        return array.sort(std.numeric.cmp.less);\n}", "{\n    if (array.length\
    \ == 0)\n        return array;\n    if (array.length == 1)\n        return array;\n\
    \    long[] result = new long[array.length];\n    if ((array[0] + array[array.length\
    \ - 1]) % 2 == 0)\n    {\n        array.sort!((a, b) => b - a);\n        foreach\
    \ (i, v; array)\n            result[i] = v;\n    }\n    else\n    {\n        array.sort!((a,\
    \ b) => a - b);\n        foreach (i, v; array)\n            result[i] = v;\n \
    \   }\n    return result;\n}", "{\n    if (array.length == 0)\n        return\
    \ array;\n    if (array.length == 1)\n        return array;\n    if (array[0]\
    \ + array[array.length - 1] % 2 == 0)\n        return array.sort(std.numeric.cmp);\n\
    \    else\n        return array.sort(std.numeric.cmp).reverse();\n}", "{\n   \
    \ if (array.length == 0)\n        return array;\n    if (array.length == 1)\n\
    \        return array;\n    if (array[0] + array[array.length - 1] % 2 == 0)\n\
    \        return sort(array, (a, b) => a > b);\n    else\n        return sort(array,\
    \ (a, b) => a < b);\n}", "{\n    if (array.length == 0)\n        return array;\n\
    \    if (array.length == 1)\n        return array;\n    if (array[0] + array[array.length\
    \ - 1] % 2 == 0)\n        return array.sort!((a, b) => a > b);\n    else\n   \
    \     return array.sort!((a, b) => a < b);\n}", "{\n    long[] result = array.dup;\n\
    \    if (result.length == 0)\n        return result;\n    if (result.length ==\
    \ 1)\n        return result;\n    if (result[0] + result[result.length - 1] %\
    \ 2 == 0)\n        result.sort!((a, b) => a > b);\n    else\n        result.sort!((a,\
    \ b) => a < b);\n    return result;\n}", "{\n    if (array.length == 0)\n    \
    \    return array;\n    if (array.length == 1)\n        return array;\n    if\
    \ (array[0] + array[array.length - 1] % 2 == 0)\n        return array.sort(std.math.cmp.descending);\n\
    \    else\n        return array.sort(std.math.cmp.ascending);\n}", "{\n    if\
    \ (array.length == 0)\n        return array;\n    else if (array.length == 1)\n\
    \        return array;\n    else\n    {\n        long[] result = new long[array.length];\n\
    \        if ((array[0] + array[array.length - 1]) % 2 == 0)\n        {\n     \
    \       // descending order\n            for (int i = 0; i < array.length; i++)\n\
    \            {\n                result[i] = array[array.length - 1 - i];\n   \
    \         }\n        }\n        else\n        {\n            // ascending order\n\
    \            for (int i = 0; i < array.length; i++)\n            {\n         \
    \       result[i] = array[i];\n            }\n        }\n        return result;\n\
    \    }\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
