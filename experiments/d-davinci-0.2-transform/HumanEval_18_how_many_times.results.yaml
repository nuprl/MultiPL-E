language: d
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long string_length = string.length;\n    long substring_length = substring.length;\n\
    \    if (substring_length == 0)\n        return 0;\n    for (long i = 0; i < string_length;\
    \ i++)\n    {\n        if (string[i..i+substring_length] == substring)\n     \
    \       result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpkah0c5i0.d(22): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428016]\n??:? long tmpkah0c5i0.how_many_times(immutable(char)[],
    immutable(char)[]) [0x427acf]\n??:? void tmpkah0c5i0.__unittest_L27_C1() [0x427bda]\n??:?
    void tmpkah0c5i0.__modtest() [0x427ce4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430158]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fc35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42ab69]\n??:? runModuleUnitTests [0x42ba59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428428]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4283af]\n??:? _d_run_main [0x42831a]\n??:? main [0x427cf7]\n??:?
    __libc_start_main [0x94ac1554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\n/*\n    >>> how_many_times_kmp(\"\
    \", \"a\")\n    0L\n    >>> how_many_times_kmp(\"aaa\", \"a\")\n    3L\n    >>>\
    \ how_many_times_kmp(\"aaaa\", \"aa\")\n    3L\n*/\nlong how_many_times_kmp(string\
    \ string, string substring) \n{\n    auto table = kmp_table(substring);\n    long\
    \ count = 0;\n    long index = 0;\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < string.length)\n    {\n        if (string[i] == substring[j])\n       \
    \ {\n            if (j == substring.length - 1)\n            {\n             \
    \   count++;\n                j = table[j];\n            }\n            else\n\
    \            {\n                i++;\n                j++;\n            }\n  \
    \      }\n        else if (j > 0)\n        {\n            j = table[j - 1];\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n    >>> kmp_table(\"a\")\n    [0L]\n    >>> kmp_table(\"aa\"\
    )\n    [0L, 1L]\n    >>> kmp_table(\"ab\")\n    [0L, 0L]\n    >>> kmp_table(\"\
    aba\")\n    [0L, 0L, 1L]\n    >>> kmp_table(\"abab\")\n    [0L, 0L, 1L, 2L]\n\
    \    >>> kmp_table(\"ababa\")\n    [0L, 0L, 1L, 2L, 3L]\n    >>> kmp_table(\"\
    ababab\")\n    [0L, 0L, 1L, 2L, 3L, 4L]\n    >>> kmp_table(\"abababa\")\n    [0L,\
    \ 0L\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5u8nhoak.d(68): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp5u8nhoak.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvqa4fgxd.d(17): Error: no property `find` for type `string`\n/tmp/tmpvqa4fgxd.d(17):
    Error: no property `npos` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpvqa4fgxd.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp30yakr5a.d(19): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30yakr5a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index != -1) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index != -1) \n        {\n            count++;\n      \
    \      index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp00fy5_og.d(19): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00fy5_og.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp30yakr5a.d(19): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30yakr5a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr5vvdnjz.d(19): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5vvdnjz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\n/*\n Find the\
    \ longest substring of a given string that is a palindrome.\n    >>> longest_palindrome(\"\
    \")\n    \"\"\n    >>> longest_palindrome(\"a\")\n    \"a\"\n    >>> longest_palindrome(\"\
    aa\")\n    \"aa\"\n    >>> longest_palindrome(\"baa\")\n    \"aa\"\n    >>> longest_palindrome(\"\
    aab\")\n    \"aa\"\n    >>> longest_palindrome(\"baabcd\")\n    \"baab\"\n   \
    \ >>> longest_palindrome(\"baablkj12345432133d\")\n    \"123454321\"\n*/\nstring\
    \ longest_palindrome(string string) \n{\n    string longest = \"\";\n    for (long\
    \ i = 0; i < string.length; i++) \n    {\n        for (long j = i + 1; j <= string.length;\
    \ j++) \n        {\n            string substring = string[i..j];\n           \
    \ if (substring.length > longest.length && is_palindrome(substring)) \n      \
    \      {\n                longest = substring;\n            }\n        }\n   \
    \ }\n    return longest;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp22tw3_bz.d(19): Error: no property `find` for type `string`\n/tmp/tmp22tw3_bz.d(48):
    Error: `string` is used as a type\n/tmp/tmp22tw3_bz.d(53): Error: `string` is
    used as a type\n/tmp/tmp22tw3_bz.d(54): Error: undefined identifier `is_palindrome`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22tw3_bz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index != -1) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index != -1) \n        {\n            count++;\n      \
    \      index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp00fy5_og.d(19): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00fy5_og.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ \n    {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7l2r969_.d(17): Error: no property `find` for type `string`\n/tmp/tmp7l2r969_.d(17):
    Error: no property `npos` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp7l2r969_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        result++;\n \
    \       index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaw4ubrxv.d(19): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaw4ubrxv.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long sub_len = substring.length;\n    long str_len = string.length;\n    if\
    \ (sub_len > str_len)\n        return 0;\n    for (long i = 0; i < str_len; i++)\n\
    \    {\n        if (string[i..i+sub_len] == substring)\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpf5gb0d1i.d(22): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x428016]\n??:? long tmpf5gb0d1i.how_many_times(immutable(char)[],
    immutable(char)[]) [0x427acf]\n??:? void tmpf5gb0d1i.__unittest_L27_C1() [0x427bda]\n??:?
    void tmpf5gb0d1i.__modtest() [0x427ce4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430158]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fc35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42ab69]\n??:? runModuleUnitTests [0x42ba59]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428428]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x4283af]\n??:? _d_run_main [0x42831a]\n??:? main [0x427cf7]\n??:?
    __libc_start_main [0xbc45b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while(i < string.length)\n    {\n        if(string[i..$]\
    \ == substring)\n        {\n            count++;\n            i += substring.length;\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp1ph38qlx.d(36): unittest failure\n----------------\n??:?
    _d_unittestp [0x427f45]\n??:? void tmp1ph38qlx.__unittest_L31_C1() [0x427b93]\n??:?
    void tmp1ph38qlx.__modtest() [0x427cc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430138]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fc15]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42ab49]\n??:? runModuleUnitTests [0x42ba39]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428408]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42838f]\n??:? _d_run_main [0x4282fa]\n??:? main [0x427cdb]\n??:?
    __libc_start_main [0x1622d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr5vvdnjz.d(19): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5vvdnjz.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for (size_t i = 0; i < string.length; i++)\n    {\n        if (string[i..$]\
    \ == substring)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpwlsqur6z.d(30): unittest failure\n----------------\n??:?
    _d_unittestp [0x427f45]\n??:? void tmpwlsqur6z.__unittest_L25_C1() [0x427b8f]\n??:?
    void tmpwlsqur6z.__modtest() [0x427cc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430138]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fc15]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42ab49]\n??:? runModuleUnitTests [0x42ba39]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428408]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42838f]\n??:? _d_run_main [0x4282fa]\n??:? main [0x427cd7]\n??:?
    __libc_start_main [0xfba9e554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index != -1)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index != -1)\n        {\n            count++;\n       \
    \     index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt8m__0tk.d(19): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt8m__0tk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp30yakr5a.d(19): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30yakr5a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyuetu8a.d(17): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyuetu8a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp30yakr5a.d(19): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30yakr5a.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxyuetu8a.d(17): Error: no property `find` for type `string`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxyuetu8a.d", "-I/tmp"]\n'''
  stdout: b''
