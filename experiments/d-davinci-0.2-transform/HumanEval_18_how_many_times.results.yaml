language: d
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long string_length = string.length;\n    long substring_length = substring.length;\n\
    \    if (substring_length == 0)\n        return 0;\n    for (long i = 0; i < string_length;\
    \ i++)\n    {\n        if (string[i..i+substring_length] == substring)\n     \
    \       result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpwli20osf.d(22): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428016]

    ??:? long tmpwli20osf.how_many_times(immutable(char)[], immutable(char)[]) [0x427acf]

    ??:? void tmpwli20osf.__unittest_L27_C1() [0x427bda]

    ??:? void tmpwli20osf.__modtest() [0x427ce4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab69]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\n/*\n    >>> how_many_times_kmp(\"\
    \", \"a\")\n    0L\n    >>> how_many_times_kmp(\"aaa\", \"a\")\n    3L\n    >>>\
    \ how_many_times_kmp(\"aaaa\", \"aa\")\n    3L\n*/\nlong how_many_times_kmp(string\
    \ string, string substring) \n{\n    auto table = kmp_table(substring);\n    long\
    \ count = 0;\n    long index = 0;\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < string.length)\n    {\n        if (string[i] == substring[j])\n       \
    \ {\n            if (j == substring.length - 1)\n            {\n             \
    \   count++;\n                j = table[j];\n            }\n            else\n\
    \            {\n                i++;\n                j++;\n            }\n  \
    \      }\n        else if (j > 0)\n        {\n            j = table[j - 1];\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ count;\n}\n/*\n    >>> kmp_table(\"a\")\n    [0L]\n    >>> kmp_table(\"aa\"\
    )\n    [0L, 1L]\n    >>> kmp_table(\"ab\")\n    [0L, 0L]\n    >>> kmp_table(\"\
    aba\")\n    [0L, 0L, 1L]\n    >>> kmp_table(\"abab\")\n    [0L, 0L, 1L, 2L]\n\
    \    >>> kmp_table(\"ababa\")\n    [0L, 0L, 1L, 2L, 3L]\n    >>> kmp_table(\"\
    ababab\")\n    [0L, 0L, 1L, 2L, 3L, 4L]\n    >>> kmp_table(\"abababa\")\n    [0L,\
    \ 0L\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0vgc2gd_.d(68): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vgc2gd_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagzdgb67.d(17): Error: no property `find` for type `string`

    /tmp/tmpagzdgb67.d(17): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagzdgb67.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index != -1) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index != -1) \n        {\n            count++;\n      \
    \      index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyztznrxd.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyztznrxd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\n/*\n Find the\
    \ longest substring of a given string that is a palindrome.\n    >>> longest_palindrome(\"\
    \")\n    \"\"\n    >>> longest_palindrome(\"a\")\n    \"a\"\n    >>> longest_palindrome(\"\
    aa\")\n    \"aa\"\n    >>> longest_palindrome(\"baa\")\n    \"aa\"\n    >>> longest_palindrome(\"\
    aab\")\n    \"aa\"\n    >>> longest_palindrome(\"baabcd\")\n    \"baab\"\n   \
    \ >>> longest_palindrome(\"baablkj12345432133d\")\n    \"123454321\"\n*/\nstring\
    \ longest_palindrome(string string) \n{\n    string longest = \"\";\n    for (long\
    \ i = 0; i < string.length; i++) \n    {\n        for (long j = i + 1; j <= string.length;\
    \ j++) \n        {\n            string substring = string[i..j];\n           \
    \ if (substring.length > longest.length && is_palindrome(substring)) \n      \
    \      {\n                longest = substring;\n            }\n        }\n   \
    \ }\n    return longest;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0lmob0om.d(19): Error: no property `find` for type `string`

    /tmp/tmp0lmob0om.d(48): Error: `string` is used as a type

    /tmp/tmp0lmob0om.d(53): Error: `string` is used as a type

    /tmp/tmp0lmob0om.d(54): Error: undefined identifier `is_palindrome`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0lmob0om.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index != -1) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index != -1) \n        {\n            count++;\n      \
    \      index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyztznrxd.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyztznrxd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ \n    {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcy_pvpnr.d(17): Error: no property `find` for type `string`

    /tmp/tmpcy_pvpnr.d(17): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcy_pvpnr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        result++;\n \
    \       index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpllfesjx1.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllfesjx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long sub_len = substring.length;\n    long str_len = string.length;\n    if\
    \ (sub_len > str_len)\n        return 0;\n    for (long i = 0; i < str_len; i++)\n\
    \    {\n        if (string[i..i+sub_len] == substring)\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp5dc0rh3x.d(22): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428016]

    ??:? long tmp5dc0rh3x.how_many_times(immutable(char)[], immutable(char)[]) [0x427acf]

    ??:? void tmp5dc0rh3x.__unittest_L27_C1() [0x427bda]

    ??:? void tmp5dc0rh3x.__modtest() [0x427ce4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab69]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, c'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while(i < string.length)\n    {\n        if(string[i..$]\
    \ == substring)\n        {\n            count++;\n            i += substring.length;\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp9vtenjf.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f45]

    ??:? void tmpp9vtenjf.__unittest_L31_C1() [0x427b93]

    ??:? void tmpp9vtenjf.__modtest() [0x427cc8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab49]

    ??:? runModuleUnitTests [0x42ba39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428408]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for (size_t i = 0; i < string.length; i++)\n    {\n        if (string[i..$]\
    \ == substring)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp90bplevf.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f45]

    ??:? void tmp90bplevf.__unittest_L25_C1() [0x427b8f]

    ??:? void tmp90bplevf.__modtest() [0x427cc4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab49]

    ??:? runModuleUnitTests [0x42ba39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428408]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index != -1)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index != -1)\n        {\n            count++;\n       \
    \     index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb90cpi3z.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb90cpi3z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiekcswby.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiekcswby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiekcswby.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiekcswby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3k1gozu.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3k1gozu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ \n    {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp3l8gjfw.d(17): Error: no property `find` for type `string`

    /tmp/tmpp3l8gjfw.d(17): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp3l8gjfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index != -1) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index != -1) \n        {\n            count++;\n      \
    \      index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyztznrxd.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyztznrxd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string.npos)\n            break;\n        count++;\n\
    \        pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgn8a9zny.d(19): Error: no property `find` for type `string`

    /tmp/tmpgn8a9zny.d(20): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgn8a9zny.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\n/*\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n*/\n\
    long how_many_times2(string string, string substring) \n{\n    long count = 0;\n\
    \    long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n \
    \   {\n        count++;\n        pos++;\n    }\n    return count;\n}\n/*\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n*/\nlong how_many_times3(string\
    \ string, string substring) \n{\n    long count = 0;\n    long pos = 0;\n    while\
    \ ((pos = string.find(substring, pos)) != -1) \n    {\n        count++;\n    \
    \    pos += substring.length - 1;\n    }\n    return count;\n}\n/*\n    >>> how_many_times(\"\
    \", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3L\n*/\nlong how_many_times4(string string, string substring)\
    \ \n{\n    long count = 0;\n    long pos = 0;\n    while ((pos = string.find(substring,\
    \ pos)) != -1) \n    {\n        count++;\n        pos += substring.length + 1;\n\
    \    }\n    return count;\n}\n/*\n    >>> how_many_times(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3L\n    >>> how_many\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz0nossf8.d(81): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0nossf8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\n/*\n    >>> how_many_times_2(\"\"\
    , \"a\")\n    0L\n    >>> how_many_times_2(\"aaa\", \"a\")\n    3L\n    >>> how_many_times_2(\"\
    aaaa\", \"aa\")\n    3L\n*/\nlong how_many_times_2(string string, string substring)\
    \ \n{\n    long count = 0;\n    long index = 0;\n    while (true)\n    {\n   \
    \     index = string.find(substring, index);\n        if (index == -1)\n     \
    \       break;\n        count++;\n        index += substring.length;\n    }\n\
    \    return count;\n}\n/*\n    >>> how_many_times_3(\"\", \"a\")\n    0L\n   \
    \ >>> how_many_times_3(\"aaa\", \"a\")\n    3L\n    >>> how_many_times_3(\"aaaa\"\
    , \"aa\")\n    3L\n*/\nlong how_many_times_3(string string, string substring)\
    \ \n{\n    long count = 0;\n    long index = 0;\n    while (true)\n    {\n   \
    \     index = string.find(substring, index);\n        if (index == -1)\n     \
    \       break;\n        count++;\n        index += substring.length - 1;\n   \
    \ }\n    return count;\n}\n/*\n    >>> how_many_times_4(\"\", \"a\")\n    0L\n\
    \    >>> how_many_times_4(\"aaa\", \"a\")\n    3L\n    >>> how_many_times_4(\"\
    aaaa\", \"aa\")\n    3L\n*/\nlong how_many_times_4(string string, string substring)\
    \ \n{\n    long count = 0;\n    long index = 0;\n    while (true)\n    {\n   \
    \     index = string.find(substring, index);\n        if (index == -1)\n     \
    \       break\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1shicprl.d(88): Error: found `unittest` when expecting `;` following
    `break` statement

    /tmp/tmp1shicprl.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp1shicprl.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1shicprl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (i < string.length)\n    {\n        long index = string.indexOf(substring,\
    \ i);\n        if (index == -1)\n            break;\n        count++;\n      \
    \  i = index + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfa0aqn4p.d(19): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa0aqn4p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   foreach(i; 0 .. string.length - substring.length + 1)\n    {\n        if(string[i\
    \ .. i + substring.length - 1] == substring)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5a6b4qnf.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f65]

    ??:? void tmp5a6b4qnf.__unittest_L25_C1() [0x427baf]

    ??:? void tmp5a6b4qnf.__modtest() [0x427ce4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab69]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428428]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagzdgb67.d(17): Error: no property `find` for type `string`

    /tmp/tmpagzdgb67.d(17): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagzdgb67.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagzdgb67.d(17): Error: no property `find` for type `string`

    /tmp/tmpagzdgb67.d(17): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagzdgb67.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    if (substring.length\
    \ == 0)\n        return 0;\n    long count = 0;\n    long index = 0;\n    while\
    \ (true)\n    {\n        index = string.find(substring, index);\n        if (index\
    \ == -1)\n            break;\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ppu34uc.d(21): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ppu34uc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (i < string.length - substring.length + 1) \n    {\n\
    \        if (string[i..i + substring.length] == substring) \n        {\n     \
    \       count++;\n            i += substring.length;\n        } \n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkt444efx.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f6d]

    ??:? void tmpkt444efx.__unittest_L31_C1() [0x427bf8]

    ??:? void tmpkt444efx.__modtest() [0x427cec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab9a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcb1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430160]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab71]

    ??:? runModuleUnitTests [0x42ba61]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428430]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        index += substring.length;\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2nwak3_.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2nwak3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\n/*\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"a\")\n \
    \   true\n    >>> is_palindrome(\"aa\")\n    true\n    >>> is_palindrome(\"aba\"\
    )\n    true\n    >>> is_palindrome(\"abba\")\n    true\n    >>> is_palindrome(\"\
    abcd\")\n    false\n    >>> is_palindrome(\"abcdcba\")\n    true\n    >>> is_palindrome(\"\
    abcdcbab\")\n    false\n*/\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpca0kuovf.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpca0kuovf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        result++;\n \
    \       index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpllfesjx1.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllfesjx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(index != -1)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index != -1)\n        {\n            count++;\n        \
    \    index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptmwtfiin.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptmwtfiin.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        result++;\n \
    \       index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpllfesjx1.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllfesjx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1)\n   \
    \ {\n        count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpip5my4e5.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpip5my4e5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt64eyoj3.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt64eyoj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while(true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if(pos == -1)\n            break;\n        count++;\n       \
    \ pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpomv_0mx2.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpomv_0mx2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt64eyoj3.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt64eyoj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (true)\n    {\n        i = string.find(substring, i);\n\
    \        if (i == -1)\n            break;\n        count++;\n        i++;\n  \
    \  }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp20ddp83m.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20ddp83m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3k1gozu.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3k1gozu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagzdgb67.d(17): Error: no property `find` for type `string`

    /tmp/tmpagzdgb67.d(17): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagzdgb67.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (i < string.length)\n    {\n        if (string[i..$].startsWith(substring))\n\
    \        {\n            count++;\n            i += substring.length;\n       \
    \ }\n        else\n        {\n            i++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkarm3skd.d(19): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkarm3skd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long sub_len = substring.length;\n    long str_len = string.length;\n    if\
    \ (sub_len == 0)\n        return 0;\n    for (long i = 0; i < str_len; i++)\n\
    \    {\n        if (string[i..$] == substring)\n            count++;\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n\
    \    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\",\
    \ \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprmwuhmsw.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f55]

    ??:? void tmprmwuhmsw.__unittest_L27_C1() [0x427b9f]

    ??:? void tmprmwuhmsw.__modtest() [0x427cd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab82]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430148]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab59]

    ??:? runModuleUnitTests [0x42ba49]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428418]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while(true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if(pos == -1)\n            break;\n        count++;\n       \
    \ pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpomv_0mx2.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpomv_0mx2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1c5njv3.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1c5njv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        result++;\n \
    \       index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpllfesjx1.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllfesjx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    long index = 0;\n    while(start < string.length)\n \
    \   {\n        index = string.find(substring, start);\n        if(index == -1)\n\
    \            break;\n        count++;\n        start = index + 1;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n   \
    \ assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"\
    x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgdvne7v0.d(20): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgdvne7v0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1c5njv3.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1c5njv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1c5njv3.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1c5njv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while(true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if(pos == -1)\n            break;\n        count++;\n       \
    \ pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpomv_0mx2.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpomv_0mx2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt64eyoj3.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt64eyoj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index != -1)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index != -1)\n        {\n            count++;\n       \
    \     index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb90cpi3z.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb90cpi3z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        result++;\n \
    \       index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpllfesjx1.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllfesjx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1)\n   \
    \ {\n        ++count;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2oir51ps.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2oir51ps.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiekcswby.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiekcswby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long start = 0;\n    while (true)\n    {\n        start = string.find(substring,\
    \ start);\n        if (start == -1)\n            break;\n        count++;\n  \
    \      start++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprzc4mwg8.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprzc4mwg8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphkz9tf5y.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphkz9tf5y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (i < string.length) \n    {\n        auto pos = string.find(substring,\
    \ i);\n        if (pos == string.npos)\n            break;\n        count++;\n\
    \        i = pos + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08_dbqnp.d(19): Error: no property `find` for type `string`

    /tmp/tmp08_dbqnp.d(20): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08_dbqnp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiekcswby.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiekcswby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ \n    {\n        count++;\n        pos += substring.length();\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqm8y7c0v.d(17): Error: no property `find` for type `string`

    /tmp/tmpqm8y7c0v.d(17): Error: no property `npos` for type `string`

    /tmp/tmpqm8y7c0v.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqm8y7c0v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1c5njv3.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1c5njv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt64eyoj3.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt64eyoj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        result++;\n        index++;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr1ek8gw.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr1ek8gw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   for (size_t i = 0; i < string.length; i++)\n    {\n        if (string[i..$]\
    \ == substring)\n        {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp90bplevf.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f45]

    ??:? void tmp90bplevf.__unittest_L25_C1() [0x427b8f]

    ??:? void tmp90bplevf.__modtest() [0x427cc4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab49]

    ??:? runModuleUnitTests [0x42ba39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428408]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ \n    {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp3l8gjfw.d(17): Error: no property `find` for type `string`

    /tmp/tmpp3l8gjfw.d(17): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp3l8gjfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3k1gozu.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3k1gozu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiekcswby.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiekcswby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (i < string.length) \n    {\n        long index = string.indexOf(substring,\
    \ i);\n        if (index == -1)\n            break;\n        count++;\n      \
    \  i = index + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcb88x_ap.d(19): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcb88x_ap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    if (string.length <\
    \ substring.length) \n    {\n        return 0L;\n    }\n    long count = 0L;\n\
    \    long i = 0L;\n    while (i < string.length) \n    {\n        if (string[i..$]\
    \ == substring) \n        {\n            count++;\n            i += substring.length;\n\
    \        }\n        else \n        {\n            i++;\n        }\n    }\n   \
    \ return count;\n}\n/*\n    >>> how_many_times_2(\"\", \"a\")\n    0L\n    >>>\
    \ how_many_times_2(\"aaa\", \"a\")\n    3L\n    >>> how_many_times_2(\"aaaa\"\
    , \"aa\")\n    3L\n*/\nlong how_many_times_2(string string, string substring)\
    \ \n{\n    if (string.length < substring.length) \n    {\n        return 0L;\n\
    \    }\n    long count = 0L;\n    long i = 0L;\n    while (i < string.length)\
    \ \n    {\n        if (string[i..$].startsWith(substring)) \n        {\n     \
    \       count++;\n            i += substring.length;\n        }\n        else\
    \ \n        {\n            i++;\n        }\n    }\n    return count;\n}\n/*\n\
    \    >>> how_many_times_3(\"\", \"a\")\n    0L\n    >>> how_many_times_3(\"aaa\"\
    , \"a\")\n    3L\n    >>> how_many_times_3(\"aaaa\", \"aa\")\n    3L\n*/\nlong\
    \ how_many_times_3(string string, string substring) \n{\n    if (string.length\
    \ < substring.length) \n    {\n        return 0L;\n    }\n    long count = 0L;\n\
    \    long i = 0L;\n    while (i < string.length) \n    {\n        if (string[i..$].startsWith(substring))\
    \ \n        {\n            count++;\n            i += substring.length;\n    \
    \    }\n        else \n        {\n            i++;\n        }\n    }\n    return\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxo_iaeq3.d(94): Error: expression expected, not `unittest`

    /tmp/tmpxo_iaeq3.d(95): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo_iaeq3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index < string.length)\n    {\n        index =\
    \ string.find(substring, index);\n        if (index == -1)\n            break;\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplxdvo5af.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplxdvo5af.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index < string.length) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppzw7_lff.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppzw7_lff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3k1gozu.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3k1gozu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt64eyoj3.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt64eyoj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long index = 0;\n    while (index != -1) {\n        index = string.find(substring,\
    \ index);\n        if (index != -1) {\n            result++;\n            index++;\n\
    \        }\n    }\n    return result;\n}\n/*\n Find the longest palindrome in\
    \ a given string.\n    >>> longest_palindrome(\"\")\n    \"\"\n    >>> longest_palindrome(\"\
    a\")\n    \"a\"\n    >>> longest_palindrome(\"aa\")\n    \"aa\"\n    >>> longest_palindrome(\"\
    baa\")\n    \"aa\"\n    >>> longest_palindrome(\"aab\")\n    \"aa\"\n    >>> longest_palindrome(\"\
    baabcd\")\n    \"baab\"\n    >>> longest_palindrome(\"baablkj12345432133d\")\n\
    \    \"123454321\"\n*/\nstring longest_palindrome(string string) \n{\n    string\
    \ result = \"\";\n    foreach (index; 0 .. string.length) {\n        foreach (length;\
    \ 1 .. string.length - index + 1) {\n            string substring = string[index\
    \ .. index + length - 1];\n            if (substring == substring.reverse && substring.length\
    \ > result.length) {\n                result = substring;\n            }\n   \
    \     }\n    }\n    return result;\n}\n/*\n Given a string, find the length of\
    \ the longest substring without repeating characters.\n    >>> length_of_longest_substring(\"\
    \")\n    0\n    >>> length_of_longest_substring(\" \")\n    1\n    >>> length_of_longest_substring(\"\
    au\")\n    2\n    >>> length_of_longest_substring(\"aab\")\n    2\n    >>> length_of_longest_substring(\"\
    dvdf\")\n    3\n*/\nlong length_of_longest_substring(string string) \n{\n    long\
    \ result = 0;\n    long index = 0;\n    while (index != string.length) {\n   \
    \     long length = 1;\n        while (index + length != string.length && string[index\
    \ .. index + length] == string[index ..\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzphi9y93.d(76): Error: expression expected, not `unittest`

    /tmp/tmpzphi9y93.d(77): Error: found `{` when expecting `,`

    /tmp/tmpzphi9y93.d(78): Error: expression expected, not `alias`

    /tmp/tmpzphi9y93.d(78): Error: found `candidate` when expecting `,`

    /tmp/tmpzphi9y93.d(78): Error: expression expected, not `=`

    /tmp/tmpzphi9y93.d(78): Error: found `how_many_times` when expecting `,`

    /tmp/tmpzphi9y93.d(78): Error: expression expected, not `;`

    /tmp/tmpzphi9y93.d(80): Error: found `assert` when expecting `,`

    /tmp/tmpzphi9y93.d(80): Error: found `;` when expecting `,`

    /tmp/tmpzphi9y93.d(81): Error: found `;` when expecting `,`

    /tmp/tmpzphi9y93.d(82): Error: found `;` when expecting `,`

    /tmp/tmpzphi9y93.d(83): Error: found `;` when expecting `,`

    /tmp/tmpzphi9y93.d(84): Error: expression expected, not `}`

    /tmp/tmpzphi9y93.d(85): Error: found `void` when expecting `,`

    /tmp/tmpzphi9y93.d(85): Error: found `{` when expecting `,`

    /tmp/tmpzphi9y93.d(85): Error: expression expected, not `}`

    /tmp/tmpzphi9y93.d(85): '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        result++;\n \
    \       index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpllfesjx1.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllfesjx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    size_t pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string.npos)\n            break;\n        result++;\n\
    \        pos++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqcu44nrj.d(19): Error: no property `find` for type `string`

    /tmp/tmpqcu44nrj.d(20): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqcu44nrj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\n/*\n    >>> is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"\
    a\")\n    true\n    >>> is_palindrome(\"aa\")\n    true\n    >>> is_palindrome(\"\
    aba\")\n    true\n    >>> is_palindrome(\"abba\")\n    true\n    >>> is_palindrome(\"\
    abcd\")\n    false\n    >>> is_palindrome(\"abcba\")\n    true\n*/\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_f5juq5u.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_f5juq5u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1c5njv3.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1c5njv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (i < string.length)\n    {\n        if (string[i..$].startsWith(substring))\n\
    \        {\n            count++;\n            i += substring.length;\n       \
    \ }\n        else\n        {\n            i++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkarm3skd.d(19): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkarm3skd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index < string.length) \n    {\n        index\
    \ = string.find(substring, index);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        count++;\n        index++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppzw7_lff.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppzw7_lff.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index != -1) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index != -1) \n        {\n            count++;\n      \
    \      index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyztznrxd.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyztznrxd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt64eyoj3.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt64eyoj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index != -1)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index != -1)\n        {\n            count++;\n       \
    \     index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb90cpi3z.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb90cpi3z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (i < string.length) \n    {\n        auto found = string.find(substring,\
    \ i);\n        if (found == string.npos)\n            break;\n        count++;\n\
    \        i = found + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1k3ze95.d(19): Error: no property `find` for type `string`

    /tmp/tmpe1k3ze95.d(20): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1k3ze95.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1c5njv3.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1c5njv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1c5njv3.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1c5njv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\n/*\n    >>>\
    \ is_palindrome(\"\")\n    true\n    >>> is_palindrome(\"a\")\n    true\n    >>>\
    \ is_palindrome(\"aa\")\n    true\n    >>> is_palindrome(\"aba\")\n    true\n\
    \    >>> is_palindrome(\"abba\")\n    true\n    >>> is_palindrome(\"abca\")\n\
    \    false\n    >>> is_palindrome(\"abcba\")\n    true\n*/\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9on1_c44.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9on1_c44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3k1gozu.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3k1gozu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times2(string string, string substring) \n{\n    long count = 0;\n\
    \    long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index += substring.length;\n    }\n    return count;\n}\n/*\n Find how\
    \ many times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times3(string string, string substring) \n{\n    long count\
    \ = 0;\n    long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index += substring.length;\n    }\n    return count;\n}\n/*\n Find how\
    \ many times a given substring can be found in the original string. Count overlaping\
    \ cases.\n    >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n\
    */\nlong how_many_times4(string string, string substring) \n\nunittest\n{\n  \
    \  alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n\
    \    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd_9fva26.d(87): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd_9fva26.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1)\n   \
    \ {\n        count++;\n        pos++;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpip5my4e5.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpip5my4e5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiekcswby.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiekcswby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1c5njv3.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1c5njv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiekcswby.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiekcswby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   foreach(size_t i; 0 .. string.length)\n    {\n        if(string[i .. $] ==\
    \ substring)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n    >>> how_many_times_v2(\"\", \"a\")\n    0L\n    >>> how_many_times_v2(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times_v2(\"aaaa\", \"aa\")\n    3L\n*/\n\
    long how_many_times_v2(string string, string substring) \n{\n    long count =\
    \ 0;\n    foreach(size_t i; 0 .. string.length)\n    {\n        if(string[i ..\
    \ $].startsWith(substring))\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n/*\n    >>> how_many_times_v3(\"\", \"a\")\n    0L\n  \
    \  >>> how_many_times_v3(\"aaa\", \"a\")\n    3L\n    >>> how_many_times_v3(\"\
    aaaa\", \"aa\")\n    3L\n*/\nlong how_many_times_v3(string string, string substring)\
    \ \n{\n    long count = 0;\n    foreach(size_t i; 0 .. string.length)\n    {\n\
    \        if(string[i .. $].startsWith(substring))\n        {\n            count++;\n\
    \            i += substring.length;\n        }\n    }\n    return count;\n}\n\
    /*\n    >>> how_many_times_v4(\"\", \"a\")\n    0L\n    >>> how_many_times_v4(\"\
    aaa\", \"a\")\n    3L\n    >>> how_many_times_v4(\"aaaa\", \"aa\")\n    3L\n*/\n\
    long how_many_times_v4(string string, string substring) \n{\n    long count =\
    \ 0;\n    foreach(size_t i; 0 .. string.length)\n    {\n        if(string[i ..\
    \ $].startsWith(substring))\n        {\n            count++;\n            i +=\n\
    unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\"\
    , \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivy2eysu.d(83): Error: expression expected, not `unittest`

    /tmp/tmpivy2eysu.d(84): Error: found `{` when expecting `;` following statement

    /tmp/tmpivy2eysu.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpivy2eysu.d(92): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivy2eysu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiekcswby.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiekcswby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiekcswby.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiekcswby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt64eyoj3.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt64eyoj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\n/*\n    >>> is_palindrome(\"\")\n\
    \    true\n    >>> is_palindrome(\"a\")\n    true\n    >>> is_palindrome(\"aa\"\
    )\n    true\n    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"\
    abba\")\n    true\n    >>> is_palindrome(\"abcd\")\n    false\n    >>> is_palindrome(\"\
    abcdcba\")\n    true\n    >>> is_palindrome(\"abcdcbab\")\n    false\n*/\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb4us_l6z.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4us_l6z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (index != -1)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index != -1)\n        {\n            count++;\n       \
    \     index++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb90cpi3z.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb90cpi3z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3k1gozu.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3k1gozu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1c5njv3.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1c5njv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (i < string.length)\n    {\n        long pos = string.find(substring,\
    \ i);\n        if (pos == -1)\n            break;\n        count++;\n        i\
    \ = pos + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate =\
    \ how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd785gjby.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd785gjby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (i < string.length) \n    {\n        long pos = string.find(substring,\
    \ i);\n        if (pos == -1)\n            break;\n        count++;\n        i\
    \ = pos + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate =\
    \ how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn_66w2bl.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_66w2bl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3k1gozu.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3k1gozu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\n/*\n Find the first index of a given\
    \ substring in the original string.\n    >>> find_first_index(\"\", \"a\")\n \
    \   -1L\n    >>> find_first_index(\"aaa\", \"a\")\n    0L\n    >>> find_first_index(\"\
    aaa\", \"b\")\n    -1L\n    >>> find_first_index(\"aaa\", \"aa\")\n    0L\n  \
    \  >>> find_first_index(\"aaa\", \"aaa\")\n    0L\n    >>> find_first_index(\"\
    aaa\", \"aaaa\")\n    -1L\n    >>> find_first_index(\"aaa\", \"\")\n    0L\n \
    \   >>> find_first_index(\"aaa\", \"aaaaa\")\n    -1L\n    >>> find_first_index(\"\
    aaa\", \"aaaaaa\")\n    -1L\n    >>> find_first_index(\"aaa\", \"aaaaaaa\")\n\
    \    -1L\n    >>> find_first_index(\"aaa\", \"aaaaaaaa\")\n    -1L\n    >>> find_first_index(\"\
    aaaaaaaa\", \"aaaa\")\n    0L\n    >>> find_first_index(\"aaaaaaaa\", \"aaa\"\
    )\n    0L\n    >>> find_first_index(\"aaaaaaaa\", \"aaaaaaaa\")\n    0L\n    >>>\
    \ find_first_index(\"aaaaaaaa\", \"aaaaaaa\")\n    0L\n    >>> find_first_index(\"\
    aaaaaaaa\", \"aaaaaaaaa\")\n    -1L\n    >>> find_first_index(\"aaaaaaaa\", \"\
    aaaaaaaaaa\")\n    -1L\n    >>> find_first_index(\"aaaaaaaa\", \"aaaaaaaaaaa\"\
    )\n    -1L\n    >>> find_first_index(\"aaaaaaaa\", \"aaaaaaaaaaaa\")\n    -1L\n\
    \    >>> find_first_index(\"aaaaaaaa\", \"aaaaaaaaaaaaa\")\n    -1L\n    >>> find_first_index(\"\
    aaaaaaaa\", \"aaaaaaaaaaaaaa\")\n    -1L\n    >>> find_first_\nunittest\n{\n \
    \   alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") ==\
    \ 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqi76edel.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqi76edel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long start = 0;\n    long index = 0;\n    while (true) \n    {\n        index\
    \ = string.find(substring, start);\n        if (index == -1) \n        {\n   \
    \         break;\n        }\n        result += 1;\n        start = index + 1;\n\
    \    }\n    return result;\n}\n/*\n    >>> is_palindrome(\"\")\n    true\n   \
    \ >>> is_palindrome(\"a\")\n    true\n    >>> is_palindrome(\"aa\")\n    true\n\
    \    >>> is_palindrome(\"aba\")\n    true\n    >>> is_palindrome(\"abba\")\n \
    \   true\n    >>> is_palindrome(\"abca\")\n    false\n*/\nunittest\n{\n    alias\
    \ candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n \
    \   assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\"\
    , \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg95pqw5_.d(20): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg95pqw5_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt64eyoj3.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt64eyoj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ \n    {\n        count++;\n        pos += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2w5y61a3.d(17): Error: no property `find` for type `string`

    /tmp/tmp2w5y61a3.d(17): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2w5y61a3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiekcswby.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiekcswby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (i < string.length)\n    {\n        if (string[i..$].startsWith(substring))\n\
    \        {\n            count++;\n            i += substring.length;\n       \
    \ }\n        else\n        {\n            i++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkarm3skd.d(19): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkarm3skd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt64eyoj3.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt64eyoj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1) \n  \
    \  {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt64eyoj3.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt64eyoj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagzdgb67.d(17): Error: no property `find` for type `string`

    /tmp/tmpagzdgb67.d(17): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagzdgb67.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   foreach(i; 0 .. string.length - substring.length + 1)\n    {\n        if(string[i\
    \ .. i + substring.length - 1] == substring)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5a6b4qnf.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f65]

    ??:? void tmp5a6b4qnf.__unittest_L25_C1() [0x427baf]

    ??:? void tmp5a6b4qnf.__modtest() [0x427ce4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab92]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430158]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab69]

    ??:? runModuleUnitTests [0x42ba59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428428]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == string.npos)\n            break;\n        count++;\n\
    \        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqtqbnnwt.d(19): Error: no property `find` for type `string`

    /tmp/tmpqtqbnnwt.d(20): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqtqbnnwt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (true)\n    {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == -1)\n            break;\n        count++;\n      \
    \  pos++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdemvhdt4.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdemvhdt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ \n    {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp3l8gjfw.d(17): Error: no property `find` for type `string`

    /tmp/tmpp3l8gjfw.d(17): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp3l8gjfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphkz9tf5y.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphkz9tf5y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true) \n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1) \n        {\n            break;\n        }\n\
    \        count++;\n        index++;\n    }\n    return count;\n}\n/*\n Find the\
    \ first index of a given substring in the original string.\n    >>> find_first_index(\"\
    \", \"a\")\n    -1L\n    >>> find_first_index(\"a\", \"a\")\n    0L\n    >>> find_first_index(\"\
    a\", \"b\")\n    -1L\n    >>> find_first_index(\"ab\", \"a\")\n    0L\n    >>>\
    \ find_first_index(\"ab\", \"b\")\n    1L\n    >>> find_first_index(\"abc\", \"\
    a\")\n    0L\n    >>> find_first_index(\"abc\", \"b\")\n    1L\n    >>> find_first_index(\"\
    abc\", \"c\")\n    2L\n    >>> find_first_index(\"abc\", \"d\")\n    -1L\n   \
    \ >>> find_first_index(\"abc\", \"ab\")\n    0L\n    >>> find_first_index(\"abc\"\
    , \"bc\")\n    1L\n    >>> find_first_index(\"abc\", \"abc\")\n    0L\n    >>>\
    \ find_first_index(\"abc\", \"bcd\")\n    -1L\n    >>> find_first_index(\"abc\"\
    , \"abcd\")\n    -1L\n    >>> find_first_index(\"abc\", \"bcde\")\n    -1L\n \
    \   >>> find_first_index(\"abc\", \"\")\n    0L\n    >>> find_first_index(\"abc\"\
    , \"abcde\")\n    -1L\n    >>> find_first_index(\"abcabc\", \"abc\")\n    0L\n\
    \    >>> find_first_index(\"abcabc\", \"bc\")\n    1L\n    >>> find_first_index(\"\
    abcabc\", \"c\")\n    2L\n    >>> find_first_index(\"abcabc\", \"d\")\n    -1L\n\
    \    >>> find_first_index(\"abcabc\", \"abcd\")\n    -1L\n    >>> find_\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxcbb8hav.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcbb8hav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while ((pos = string.find(substring, pos)) != -1)\n   \
    \ {\n        count++;\n        pos += substring.length;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcas0j8ii.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcas0j8ii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1c5njv3.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1c5njv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long result = 0;\n\
    \    long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        result++;\n \
    \       index++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpllfesjx1.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpllfesjx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   size_t pos = 0;\n    while ((pos = string.find(substring, pos)) != string.npos)\
    \ {\n        ++count;\n        ++pos;\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\")\
    \ == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpagzdgb67.d(17): Error: no property `find` for type `string`

    /tmp/tmpagzdgb67.d(17): Error: no property `npos` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpagzdgb67.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while(true)\n    {\n        index = string.find(substring,\
    \ index);\n        if(index == -1)\n            break;\n        count++;\n   \
    \     index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn1c5njv3.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn1c5njv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        count++;\n        index += substring.length;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiekcswby.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiekcswby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long pos = 0;\n    while (pos != -1) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos != -1) {\n            count++;\n            pos++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = how_many_times;\n\
    \n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\"\
    , \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"\
    john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsdqduwuk.d(18): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsdqduwuk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while (true)\n    {\n        index = string.find(substring,\
    \ index);\n        if (index == -1)\n            break;\n        count++;\n  \
    \      index++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"\
    xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n\
    \    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v0qx37j.d(19): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v0qx37j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long index = 0;\n    while ((index = string.find(substring, index)) != -1)\
    \ \n    {\n        index += 1;\n        count += 1;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpes1nkt2h.d(17): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpes1nkt2h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Find how many times a given\
    \ substring can be found in the original string. Count overlaping cases.\n   \
    \ >>> how_many_times(\"\", \"a\")\n    0L\n    >>> how_many_times(\"aaa\", \"\
    a\")\n    3L\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3L\n    \n*/\nlong\
    \ how_many_times(string string, string substring) \n{\n    long count = 0;\n \
    \   long i = 0;\n    while (i < string.length)\n    {\n        if (string[i..$].startsWith(substring))\n\
    \        {\n            count++;\n            i += substring.length;\n       \
    \ }\n        else\n        {\n            i++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\
    \", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"\
    cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkarm3skd.d(19): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkarm3skd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
