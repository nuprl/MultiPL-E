name: HumanEval_100_make_a_pile
language: d
prompt: "import std.math;\n/*\n\n    Given a positive integer n, you have to make\
  \ a pile of n levels of stones.\n    The first level has n stones.\n    The number\
  \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
  \        - the next even number if n is even.\n    Return the number of stones in\
  \ each level in a list, where element at index\n    i represents the number of stones\
  \ in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3L)\n    [3L, 5L, 7L]\n\
  \    \n*/\nlong[] make_a_pile(long n) \n"
tests: "unittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L)\
  \ == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L)\
  \ == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L,\
  \ 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n\
  }\nvoid main(){}"
completions: ["{\n    long[] result = new long[n];\n    for (int i = 0; i < n; i++)\n\
    \    {\n        result[i] = n + 2 * i;\n    }\n    return result;\n}", "{\n  \
    \  long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n   \
    \     result[i] = n + 2 * i;\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n\
    \        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1] + 2;\n\
    \        else\n            result[i] = result[i-1] + 1;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    long count = n;\n    for (int i\
    \ = 0; i < n; i++)\n    {\n        result[i] = count;\n        if (count % 2 ==\
    \ 0)\n            count++;\n        else\n            count += 2;\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[n];\n    result[0] = n;\n\
    \    for (int i = 1; i < n; i++)\n    {\n        if (result[i-1] % 2 == 0)\n \
    \           result[i] = result[i-1] + 2;\n        else\n            result[i]\
    \ = result[i-1] + 1;\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n     \
    \   result[i] = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    long count = n;\n   \
    \ for (long i = 0; i < n; i++)\n    {\n        result[i] = count;\n        if\
    \ (count % 2 == 0)\n            count++;\n        else\n            count += 2;\n\
    \    }\n    return result;\n}", "{\n    long[] res = new long[n];\n    res[0]\
    \ = n;\n    for (int i = 1; i < n; i++)\n    {\n        res[i] = res[i-1] + (res[i-1]\
    \ % 2 == 0 ? 2 : 1);\n    }\n    return res;\n}", "{\n    long[] result = new\
    \ long[n];\n    long level = n;\n    for (int i = 0; i < n; i++)\n    {\n    \
    \    result[i] = level;\n        level = (level % 2 == 0) ? level + 2 : level\
    \ + 1;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n        result[i]\
    \ = result[i-1] + (result[i-1] % 2 == 0 ? 2 : 1);\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    result[0] = n;\n    for (int i =\
    \ 1; i < n; i++) {\n        result[i] = result[i-1] + (result[i-1] % 2 == 0 ?\
    \ 2 : 1);\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    result[0] = n;\n    for (long i = 1; i < n; i++) {\n        result[i] = result[i-1]\
    \ + (n % 2 == 0 ? 2 : 1);\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    result[0] = n;\n    for (long i = 1; i < n; i++)\n    {\n\
    \        if (n % 2 == 0)\n        {\n            result[i] = result[i-1] + 2;\n\
    \        }\n        else\n        {\n            result[i] = result[i-1] + 1;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n        if (result[i-1]\
    \ % 2 == 0)\n            result[i] = result[i-1] + 2;\n        else\n        \
    \    result[i] = result[i-1] + 1;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (int i = 0; i < n; i++)\n    {\n        result[i]\
    \ = n + 2 * i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        result[i] = n + 2*i;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    for (int i\
    \ = 0; i < n; i++)\n    {\n        result[i] = n + 2 * i;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    result[0] = n;\n    for (int i =\
    \ 1; i < n; i++)\n    {\n        result[i] = result[i-1] + (result[i-1] % 2 ==\
    \ 0 ? 2 : 1);\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    result[0] = n;\n    for (int i = 1; i < n; i++)\n    {\n        if (result[i-1]\
    \ % 2 == 0)\n            result[i] = result[i-1] + 2;\n        else\n        \
    \    result[i] = result[i-1] + 1;\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    result[0] = n;\n    for (int i = 1; i < n; i++)\n\
    \    {\n        if (result[i-1] % 2 == 0)\n            result[i] = result[i-1]\
    \ + 2;\n        else\n            result[i] = result[i-1] + 1;\n    }\n    return\
    \ result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
