name: HumanEval_112_reverse_delete
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nTask\n    We are given two strings\
  \ s and c, you have to deleted all the characters in s that are equal to any character\
  \ in c\n    then check if the result string is palindrome.\n    A string is called\
  \ palindrome if it reads the same backward as forward.\n    You should return a\
  \ tuple containing the result string and True/False for the check.\n    Example\n\
  \    >>> reverse_delete(\"abcde\", \"ae\")\n    tuple(\"bcd\", false)\n    >>> reverse_delete(\"\
  abcdef\", \"b\")\n    tuple(\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\"\
  , \"ab\")\n    tuple(\"cdedc\", true)\n    \n*/\nTuple!(string, bool) reverse_delete(string\
  \ s, string c) \n"
tests: "unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"\
  abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\", \"\
  b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"ab\") ==\
  \ tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"dik\"\
  , false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"\
  abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\"\
  , \"v\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\"\
  ) == tuple(\"abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\
  \", true));\n}\nvoid main(){}"
completions: ["{\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n      \
    \  if(c.find(ch) == -1)\n            result ~= ch;\n    }\n    return tuple(result,\
    \ result == result.dup.reverse);\n}", "{\n    string result;\n    foreach(i, ch;\
    \ s)\n    {\n        if(c.find(ch) == -1)\n            result ~= ch;\n    }\n\
    \    return tuple(result, result == result.dup.reverse);\n}", "{\n    string result\
    \ = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) == -1)\n      \
    \      result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }", "{\n    string result = \"\";\n    foreach(i, e; s)\n    {\n        if(c.find(e)\
    \ == -1)\n        {\n            result ~= e;\n        }\n    }\n    return tuple(result,\
    \ result == result.dup.reverse);\n}", "{\n    foreach(i, ch; c)\n    {\n     \
    \   s = s.replace(ch, \"\");\n    }\n    return tuple(s, s.equal(s.dup.reverse));\n\
    }", "{\n    string result;\n    bool is_palindrome = true;\n    foreach(i, ch;\
    \ s)\n    {\n        if(c.find(ch) == -1)\n        {\n            result ~= ch;\n\
    \        }\n    }\n    foreach(i, ch; result)\n    {\n        if(ch != result[$\
    \ - i - 1])\n        {\n            is_palindrome = false;\n            break;\n\
    \        }\n    }\n    return tuple(result, is_palindrome);\n}", "{\n    string\
    \ result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) == -1)\n\
    \            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }", "{\n    string result = \"\";\n    foreach(ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n        {\n            result ~= ch;\n        }\n    }\n    return tuple(result,\
    \ result == result.dup.reverse);\n}", "{\n    string result = \"\";\n    foreach(i,\
    \ ch; s)\n    {\n        if(c.find(ch) == -1)\n            result ~= ch;\n   \
    \ }\n    return tuple(result, result == result.dup.reverse);\n}", "{\n    string\
    \ result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) == -1)\n\
    \            result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }", "{\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }", "{\n    auto result = s;\n    foreach(i, c)\n    {\n        result = result.replace(c[i],\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}",
  "{\n    auto result = s;\n    foreach(ch; c)\n    {\n        result = result.replace(ch,\
    \ \"\");\n    }\n    return tuple(result, result == result.dup.reverse);\n}",
  "{\n    auto res = s;\n    foreach(i, c)\n    {\n        res = res.replace(c[i],\
    \ \"\");\n    }\n    return tuple(res, res == res.dup.reverse);\n}", "{\n    string\
    \ result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) == -1)\n\
    \            result ~= ch;\n    }\n    return tuple(result, isPalindrome(result));\n\
    }", "{\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}", "{\n    string result = \"\";\n    foreach(i, ch;\
    \ s)\n    {\n        if(c.find(ch) == -1)\n            result ~= ch;\n    }\n\
    \    return tuple(result, isPalindrome(result));\n}", "{\n    string result =\
    \ \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch) == -1)\n        \
    \    result ~= ch;\n    }\n    return tuple(result, result == result.dup.reverse);\n\
    }", "{\n    string result = \"\";\n    foreach(i, ch; s)\n    {\n        if(c.find(ch)\
    \ == -1)\n            result ~= ch;\n    }\n    return tuple(result, result ==\
    \ result.dup.reverse);\n}", "{\n    string result = \"\";\n    foreach(i, ch;\
    \ s)\n    {\n        if(c.find(ch) == -1)\n            result ~= ch;\n    }\n\
    \    return tuple(result, isPalindrome(result));\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
