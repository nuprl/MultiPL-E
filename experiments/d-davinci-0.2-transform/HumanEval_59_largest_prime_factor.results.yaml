language: d
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long factor = 2L;\n    while\
    \ (n > 1L) \n    {\n        if (n % factor == 0L) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0L) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor += 1L;\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n \
    \   alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    foreach (i; 2L .. n)\n    {\n\
    \        if (n % i == 0L)\n        {\n            if (isPrime(i))\n          \
    \  {\n                largest_prime_factor = i;\n            }\n        }\n  \
    \  }\n    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate =\
    \ largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpocdswwci.d(18): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpocdswwci.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 2L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n \
    \   alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long max_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n  \
    \  {\n        if (n % i == 0L) \n        {\n            max_prime = i;\n     \
    \       n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return max_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long i = 2L;\n    while (i <= n) \n    {\n        if (n % i == 0L)\
    \ \n        {\n            n /= i;\n        }\n        else \n        {\n    \
    \        i += 1L;\n        }\n    }\n    return i;\n}\nunittest\n{\n    alias\
    \ candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n   \
    \ assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n/*\nReturn the largest palindrome made from the product of two\
    \ 3-digit numbers.\n    >>> largest_palindrome(2)\n    9009\n    >>> largest_palindrome(3)\n\
    \    906609\n*/\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n\
    \    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long factor = 2L;\n    while (n > 1L) \n\
    \    {\n        if (n % factor == 0L) \n        {\n            largest = factor;\n\
    \            n /= factor;\n            while (n % factor == 0L) \n           \
    \ {\n                n /= factor;\n            }\n        }\n        factor =\
    \ factor + 1L;\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long factor = 2L;\n    while\
    \ (n > 1L) \n    {\n        if (n % factor == 0L) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0L) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1L;\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0L) {\n            largest_prime = i;\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            n /= i;\n            largest = i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0L) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    foreach (i; 2 .. sqrt(n) + 1) \n    {\n\
    \        if (n % i == 0) \n        {\n            if (isPrime(i)) \n         \
    \   {\n                largest = i;\n            }\n        }\n    }\n    return\
    \ largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n  \
    \  assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyil1lwwm.d(14): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyil1lwwm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 2L;\n    long largest_factor = n;\n    while\
    \ (largest_factor > 1) \n    {\n        if (largest_factor % largest_prime ==\
    \ 0) \n        {\n            largest_factor /= largest_prime;\n        } \n \
    \       else \n        {\n            largest_prime = next_prime(largest_prime);\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw13g4lkz.d(23): Error: undefined identifier `next_prime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw13g4lkz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (n\
    \ > 1L) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n            while (n % i == 0L) \n            {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long max_prime_factor = (long)sqrt(n);\n\
    \    foreach (i; 2L .. max_prime_factor) \n    {\n        if (n % i == 0L) \n\
    \        {\n            largest_prime_factor = i;\n            while (n % i ==\
    \ 0L) \n            {\n                n /= i;\n            }\n            max_prime_factor\
    \ = (long)sqrt(n);\n        }\n    }\n    if (n > 1L) \n    {\n        largest_prime_factor\
    \ = n;\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7sh2i87.d(14): Error: C style cast illegal, use `cast(long)sqrt(n)`

    /tmp/tmpf7sh2i87.d(24): Error: C style cast illegal, use `cast(long)sqrt(n)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7sh2i87.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        while (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor += 1L;\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        while (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor += 1L;\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    foreach (i; 2 .. n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            if (isPrime(i)) \n            {\n    \
    \            largest = i;\n            }\n        }\n    }\n    return largest;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz8fkloap.d(18): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8fkloap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 2L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1L;\n    long d = 2L;\n    while (n > 1) \n\
    \    {\n        while (n % d == 0) \n        {\n            largest_factor = d;\n\
    \            n /= d;\n        }\n        d = d + 1;\n        if (d*d > n) \n \
    \       {\n            if (n > 1) \n            {\n                largest_factor\
    \ = n;\n            }\n            break;\n        }\n    }\n    return largest_factor;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 0L;\n    long d = 2L;\n    while (n > 1L)\
    \ \n    {\n        while (n % d == 0L) \n        {\n            largest_factor\
    \ = d;\n            n /= d;\n        }\n        d += 1L;\n        if (d * d >\
    \ n) \n        {\n            if (n > 1L) \n            {\n                largest_factor\
    \ = n;\n            }\n            break;\n        }\n    }\n    return largest_factor;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n \
    \   alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long i = 2L;\n    while (i <= n) {\n        if (n % i == 0L) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n\
    \    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0L) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor += 1;\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n  \
    \  alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            n /= i;\n            largest\
    \ = i;\n        }\n        else \n        {\n            i++;\n        }\n   \
    \ }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1L;\n    long i = 2L;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0L) \n        {\n            largest_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i\
    \ += 1L;\n        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n   \
    \ assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0) {\n            largest = i;\n            n /= i;\n     \
    \   } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0) {\n            largest = i;\n            n /= i;\n     \
    \   } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    foreach (i; 2L .. n) \n    {\n   \
    \     if (n % i == 0L) \n        {\n            if (isPrime(i)) \n           \
    \ {\n                largest_prime = i;\n            }\n        }\n    }\n   \
    \ return largest_prime;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvynympmp.d(18): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvynympmp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        while (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor += 1L;\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    foreach (i; 2 .. n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            if (isPrime(i)) \n            {\n    \
    \            largest = i;\n            }\n        }\n    }\n    return largest;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz8fkloap.d(18): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8fkloap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long divisor = 2L;\n    while (n >\
    \ 1L) \n    {\n        if (n % divisor == 0L) \n        {\n            largest_prime\
    \ = divisor;\n            n /= divisor;\n            while (n % divisor == 0L)\
    \ \n            {\n                n /= divisor;\n            }\n        }\n \
    \       divisor += 1L;\n    }\n    return largest_prime;\n}\nunittest\n{\n   \
    \ alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0L) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    }\n        else {\n            i++;\n        }\n    }\n    return largest;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1L;\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            if (isPrime(i)) {\n                largest\
    \ = i;\n            }\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate =\
    \ largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2g99066x.d(17): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2g99066x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0L) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\n/*\nReturn the\
    \ sum of all the primes below n.\n    >>> sum_of_primes(10)\n    17\n    >>> sum_of_primes(100)\n\
    \    1060\n*/\nlong sum_of_primes(long n) \n{\n    long sum = 0L;\n    long i\
    \ = 2L;\n    while (i < n) \n    {\n        if (is_prime(i)) \n        {\n   \
    \         sum += i;\n        }\n        i++;\n    }\n    return sum;\n}\n/*\n\
    Return the nth prime number.\n    >>> nth_prime(1)\n    2\n    >>> nth_prime(2)\n\
    \    3\n    >>> nth_prime(3)\n    5\n    >>> nth_prime(4)\n    7\n    >>> nth_prime(5)\n\
    \    11\n*/\nlong nth_prime(long n) \n{\n    long i = 2L;\n    long count = 0L;\n\
    \    while (count < n) \n    {\n        if (is_prime(i)) \n        {\n       \
    \     count++;\n        }\n        i++;\n    }\n    return i - 1L;\n}\n/*\nReturn\
    \ the nth fibonacci number.\n    >>> nth_fibonacci(1)\n    1\n    >>> nth_fibonacci(2)\n\
    \    1\n    >>> nth_fibonacci(3)\n    2\n    >>> nth_fibonacci(4)\n    3\n   \
    \ >>> nth_fibonacci(5)\n    5\n    >>> nth_fibonacci(6)\n    8\n*/\nlong nth_fibonacci(long\
    \ n) \n{\n    long a =\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpptkzj52b.d(95): Error: expression expected, not `unittest`

    /tmp/tmpptkzj52b.d(96): Error: semicolon expected, not `{`

    /tmp/tmpptkzj52b.d(105): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpptkzj52b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i < n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            if (isPrime(i)) \n        \
    \    {\n                largest = i;\n            }\n            n /= i;\n   \
    \     }\n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n  \
    \  assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqa0ka3k5.d(19): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqa0ka3k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor += 1;\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n  \
    \  alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0L) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1L;\n    long i = 2L;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_factor = i;\n            n\
    \ /= i;\n        } else {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1L;\n    long i = 2L;\n    while (i < n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp70pc6dvr.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmp70pc6dvr.__unittest_L29_C1() [0x427a7c]

    ??:? void tmp70pc6dvr.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i < n) {\n    \
    \    if (n % i == 0L) {\n            largest = i;\n            n /= i;\n     \
    \   } else {\n            i++;\n        }\n    }\n    return max(largest, n);\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp63nhmwia.d(23): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp63nhmwia.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1L;\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    foreach (i; 2L .. sqrt(n) +\
    \ 1L) \n    {\n        if (n % i == 0L) \n        {\n            if (isPrime(i))\
    \ \n            {\n                largest_prime_factor = i;\n            }\n\
    \        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n   \
    \ assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtqzg8qm.d(14): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtqzg8qm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164540
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i < n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return max(largest, n);\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp75weshet.d(27): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp75weshet.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long max = 0L;\n    long i = 2L;\n    while (i <= n) {\n       \
    \ if (n % i == 0L) {\n            max = i;\n            n /= i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return max;\n}\nunittest\n{\n   \
    \ alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0L) {\n            largest_prime = i;\n            n /=\
    \ i;\n        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            n /= i;\n            largest = i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            n /= i;\n            largest = i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1L;\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n \
    \   alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 2L;\n    long factor = 2L;\n    while (n >\
    \ 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor += 1;\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias\
    \ candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n   \
    \ assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    foreach (i; 2 .. n) {\n        if (n % i\
    \ == 0) {\n            if (isPrime(i)) {\n                largest = i;\n     \
    \       }\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwshqeti.d(16): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwshqeti.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (n > 1L) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long factor = 2L;\n    while\
    \ (n > 1L) \n    {\n        if (n % factor == 0L) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0L) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor += 1L;\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n \
    \   alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0L) {\n            largest_prime = i;\n            n /=\
    \ i;\n        }\n        else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0L) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1L;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1L;\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0L) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            n /= i;\n            largest = i;\n    \
    \    } else {\n            i++;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i < n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            n /= i;\n            largest\
    \ = i;\n        }\n        else \n        {\n            i++;\n        }\n   \
    \ }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz5cin7go.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d95]

    ??:? void tmpz5cin7go.__unittest_L29_C1() [0x427a7c]

    ??:? void tmpz5cin7go.__modtest() [0x427b14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42babb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a94e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff90]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]

    ??:? runModuleUnitTests [0x42b891]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long factor = 2L;\n    while (n > 1L) \n\
    \    {\n        if (n % factor == 0L) \n        {\n            largest = factor;\n\
    \            n /= factor;\n            while (n % factor == 0L) \n           \
    \ {\n                n /= factor;\n            }\n        }\n        factor +=\
    \ 1L;\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1L;\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long factor = 2L;\n    while (n >\
    \ 1L) \n    {\n        if (n % factor == 0L) \n        {\n            largest_prime\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0L) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1L;\n    }\n    return largest_prime;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long factor = 2L;\n    while (factor <=\
    \ n) \n    {\n        if (n % factor == 0L) \n        {\n            largest =\
    \ factor;\n            n /= factor;\n        } \n        else \n        {\n  \
    \          factor += 1L;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) {\n   \
    \     if (n % i == 0L) {\n            largest = i;\n            n /= i;\n    \
    \    } else {\n            i += 1L;\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1L;\n    long i = 2L;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            largest_factor = i;\n            n\
    \ /= i;\n        } else {\n            i += 1L;\n        }\n    }\n    return\
    \ largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0L;\n    long i = 2L;\n    while (i <= n) {\n\
    \        if (n % i == 0L) {\n            largest_prime = i;\n            n /=\
    \ i;\n        } else {\n            i += 1L;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n \
    \   alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1L;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long factor = 2L;\n    while\
    \ (n > 1L) \n    {\n        if (n % factor == 0L) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0L) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor += 1L;\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n \
    \   alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0L;\n    long i = 2L;\n    while (i\
    \ <= n) \n    {\n        if (n % i == 0L) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long i = 2L;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n\
    \            n /= i;\n        } else {\n            i += 1L;\n        }\n    }\n\
    \    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1L;\n    long i = 2L;\n    while (i <= n)\
    \ \n    {\n        if (n % i == 0L) \n        {\n            largest_factor =\
    \ i;\n            n /= i;\n        } \n        else \n        {\n            i\
    \ += 1L;\n        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n   \
    \ assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1L;\n    long factor = 2L;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1L;\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164540
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1L;\n    foreach (i; 2 .. n) \n    {\n        if\
    \ (n % i == 0) \n        {\n            n /= i;\n            largest = i;\n  \
    \      }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkel7daqy.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpkel7daqy.__unittest_L24_C1() [0x427aa9]

    ??:? void tmpkel7daqy.__modtest() [0x427b20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164540
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195L)\n\
    \    29L\n    >>> largest_prime_factor(2048L)\n    2L\n    \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0L;\n    long i = 2L;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0L) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i += 1L;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164539
