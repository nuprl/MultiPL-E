language: d
name: HumanEval_54_same_chars
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx8pbeh02.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpx8pbeh02.d(23):
    Error: no property `countMap` for type `string`\n/tmp/tmpx8pbeh02.d(24): Error:
    template instance `all!((a) => c0[a] == c1[a])` template `all` is not defined\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8pbeh02.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0)\n        c0[c]++;\n    foreach\
    \ (c; s1)\n        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa0oepas9.d(22): Error: need size of rightmost array, not type
    `char`\n/tmp/tmpa0oepas9.d(23): Error: need size of rightmost array, not type
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0oepas9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(ch; c0.keys)\n    {\n        if(c0[ch] != c1[ch])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4twr5cdm.d(22): Error: no property `countMap` for type `string`\n/tmp/tmp4twr5cdm.d(23):
    Error: no property `countMap` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4twr5cdm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n\
    }\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppgrkokf5.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppgrkokf5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpekh25z6g.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpekh25z6g.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1)\n        return false;\n    auto c = c0;\n    auto\
    \ i = 0;\n    while (i < c)\n    {\n        if (s0[i] != s1[i])\n            return\
    \ false;\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz02pu357.d(22): Error: no property `count` for type `string`\n/tmp/tmpz02pu357.d(23):
    Error: no property `count` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpz02pu357.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n\
    \    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n\
    \    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpba1uzq_t.d(39): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282d5]\n??:? void tmpba1uzq_t.__unittest_L35_C1() [0x427ec5]\n??:?
    void tmpba1uzq_t.__modtest() [0x428058]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b142]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43087c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430359]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b119]\n??:? runModuleUnitTests [0x42c085]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428798]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42871f]\n??:? _d_run_main [0x42868a]\n??:? main [0x42806b]\n??:?
    __libc_start_main [0x25b2a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1)\n        return false;\n    foreach (i; 0 .. c0)\n\
    \    {\n        if (s0[i] != s1[i])\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4hf3fk2q.d(22): Error: no property `count` for type `string`\n/tmp/tmp4hf3fk2q.d(23):
    Error: no property `count` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4hf3fk2q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto c = c0.dup;\n    foreach\
    \ (i, ch; s0) {\n        if (c[ch] == 0) return false;\n        c[ch]--;\n   \
    \ }\n    foreach (i, ch; s1) {\n        if (c[ch] == 0) return false;\n      \
    \  c[ch]--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyv5icma_.d(22): Error: no property `count` for type `string`\n/tmp/tmpyv5icma_.d(23):
    Error: no property `count` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpyv5icma_.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptqpsb4q5.d(28): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmptqpsb4q5.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkblkiji.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpbkblkiji.d(23):
    Error: no property `countMap` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbkblkiji.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    foreach (c; s0) {\n        if\
    \ (c0[c] != c1[c]) return false;\n    }\n    return true;\n}\nunittest\n{\n  \
    \  alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm2412w_3.d(22): Error: no property `count` for type `string`\n/tmp/tmpm2412w_3.d(23):
    Error: no property `count` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpm2412w_3.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0)\n        c0[c]++;\n    foreach\
    \ (c; s1)\n        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa0oepas9.d(22): Error: need size of rightmost array, not type
    `char`\n/tmp/tmpa0oepas9.d(23): Error: need size of rightmost array, not type
    `char`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0oepas9.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach\
    \ (c; c0)\n    {\n        if (c0[c] != c1[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphrt8s3sx.d(24): Error: no property `count` for type `string`\n/tmp/tmphrt8s3sx.d(25):
    Error: no property `count` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphrt8s3sx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // Count the number of occurrences\
    \ of each character in s0.\n    int[char] count0;\n    foreach (c; s0)\n     \
    \   count0[c]++;\n    // Count the number of occurrences of each character in\
    \ s1.\n    int[char] count1;\n    foreach (c; s1)\n        count1[c]++;\n    //\
    \ Compare the two maps.\n    return count0 == count1;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_2jnl0eo.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4288a9]\n??:? void tmp_2jnl0eo.__unittest_L33_C1() [0x427bb1]\n??:?
    void tmp_2jnl0eo.__modtest() [0x427d44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d767]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428706]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a631]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42a6c0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42a5bd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x4286dd]\n??:? runModuleUnitTests [0x42d53d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4292dc]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x429263]\n??:? _d_run_main [0x4291ce]\n??:? main [0x427d57]\n??:?
    __libc_start_main [0xec270554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkblkiji.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpbkblkiji.d(23):
    Error: no property `countMap` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbkblkiji.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    int[] a0 = new int[256];\n    int[] a1 = new int[256];\n\
    \    foreach (c; s0)\n        a0[c]++;\n    foreach (c; s1)\n        a1[c]++;\n\
    \    foreach (i; 0 .. 256)\n        if (a0[i] != a1[i])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0id72_y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) \n    {\n        c0[c]++;\n    }\n \
    \   foreach (c; s1) \n    {\n        c1[c]++;\n    }\n    foreach (i; 0 .. 256)\
    \ \n    {\n        if (c0[i] != c1[i]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5cb_397s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto m0 = s0.countMap;\n   \
    \ auto m1 = s1.countMap;\n    foreach (c; m0.keys) {\n        if (m0[c] != m1[c])\
    \ return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphbtnifao.d(32): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphbtnifao.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    int[] cnt = new int[256];\n    foreach (c; s0) cnt[c]++;\n    foreach\
    \ (c; s1) cnt[c]--;\n    foreach (c; cnt) if (c != 0) return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi12va1pn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto d0 = s0.dup;\n    auto\
    \ d1 = s1.dup;\n    d0.sort;\n    d1.sort;\n    return d0 == d1;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7dsxp3lp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c0[c] != c1[c])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdrg4321j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) \n        return false;\n    foreach (i; 0 .. c0)\
    \ \n    {\n        if (s0[i] != s1[i]) \n            return false;\n    }\n  \
    \  return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpotsnfl5f.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpotsnfl5f.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = count_chars(s0);\n    auto c1 = count_chars(s1);\n   \
    \ return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeo2ssuwk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(c => c1.count(c.key)\
    \ == c.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogz89166.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkblkiji.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpbkblkiji.d(23):
    Error: no property `countMap` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbkblkiji.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto m0 = s0.countMap;\n   \
    \ auto m1 = s1.countMap;\n    foreach (k; m0.keys)\n    {\n        if (m0[k] !=\
    \ m1[k]) return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptuau28_1.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmptuau28_1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] cnt0 = new int[256];\n    int[]\
    \ cnt1 = new int[256];\n    foreach (c; s0)\n        cnt0[c]++;\n    foreach (c;\
    \ s1)\n        cnt1[c]++;\n    return cnt0 == cnt1;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpek5bwfop.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach (c; s0)\
    \ {\n        if (c0[c] != c1[c]) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwayj59lf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0)\n        c0[c]++;\n    foreach\
    \ (c; s1)\n        c1[c]++;\n    foreach (c; c0.keys)\n        if (c0[c] != c1[c])\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjizc1z_x.d(22): Error: need size of rightmost array, not type
    char\n/tmp/tmpjizc1z_x.d(23): Error: need size of rightmost array, not type char\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjizc1z_x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] counts0 = new int[256];\n  \
    \  int[] counts1 = new int[256];\n    foreach (c; s0) {\n        counts0[c]++;\n\
    \    }\n    foreach (c; s1) {\n        counts1[c]++;\n    }\n    foreach (i; 0\
    \ .. 256) {\n        if (counts0[i] != counts1[i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3emlopfq.d(37): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp3emlopfq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx8pbeh02.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpx8pbeh02.d(23):
    Error: no property `countMap` for type `string`\n/tmp/tmpx8pbeh02.d(24): Error:
    template instance `all!((a) => c0[a] == c1[a])` template `all` is not defined\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8pbeh02.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach\
    \ (c; c0.keys)\n    {\n        if (c0[c] != c1[c]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjp_u5658.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(c => c1.count(c.key)\
    \ == c.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogz89166.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto s0_sorted = s0.dup.sort;\n\
    \    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpshwla71y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7o36yzrl.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7o36yzrl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) \n    {\n        c0[c]++;\n    }\n \
    \   foreach (c; s1) \n    {\n        c1[c]++;\n    }\n    return c0 == c1;\n}\n\
    unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3vwria4_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkvv0u4z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // \n    // Count the number of times\
    \ each character appears in the string.\n    //\n    auto count = new int[256];\n\
    \    foreach (c; s0)\n        count[c]++;\n    foreach (c; s1)\n        count[c]--;\n\
    \    //\n    // Check if the count is zero for each character.\n    //\n    foreach\
    \ (c; count)\n        if (c != 0)\n            return false;\n    return true;\n\
    }\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr54lm5if.d(38): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpr54lm5if.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => a[0] in c1 &&\
    \ a[1] == c1[a[0]])(c0);\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe51mrqsp.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpe51mrqsp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkvv0u4z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // Count the number of each character\
    \ in s0\n    int[char] char_counts;\n    foreach (c; s0)\n        char_counts[c]++;\n\
    \    // Check that s1 has the same number of each character\n    foreach (c; s1)\n\
    \        if (char_counts[c]-- == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmzg8edxb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => a[0] in c1 &&\
    \ a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpez93958f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkblkiji.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpbkblkiji.d(23):
    Error: no property `countMap` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbkblkiji.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n \
    \   return c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp678r4frb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkblkiji.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpbkblkiji.d(23):
    Error: no property `countMap` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbkblkiji.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto m0 = s0.countMap;\n   \
    \ auto m1 = s1.countMap;\n    foreach (c; m0.keys) {\n        if (m0[c] != m1[c])\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8q4t0_k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1)\n        return false;\n    auto c = s0.count;\n\
    \    for (size_t i = 0; i < c; i++)\n    {\n        if (s0[i] != s1[i])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe2y61kfy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0) \n    {\n        c0[c]++;\n\
    \    }\n    foreach (c; s1) \n    {\n        c1[c]++;\n    }\n    return c0 ==\
    \ c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpur48uy2o.d(22): Error: need size of rightmost array, not type
    char\n/tmp/tmpur48uy2o.d(23): Error: need size of rightmost array, not type char\n/tmp/tmpur48uy2o.d(34):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpur48uy2o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n \
    \   foreach (c; c0.keys)\n    {\n        if (c0[c] != c1[c])\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8psdafee.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxsrh1mnm.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpxsrh1mnm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprxkxp2hw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4dw8fzc.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpo4dw8fzc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.countOf(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmply9le4_v.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkvv0u4z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] count0 = new int[256];\n   \
    \ int[] count1 = new int[256];\n    foreach (c; s0)\n        count0[c]++;\n  \
    \  foreach (c; s1)\n        count1[c]++;\n    foreach (i; 0 .. 256)\n        if\
    \ (count0[i] != count1[i])\n            return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8py1suw1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkvv0u4z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkblkiji.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpbkblkiji.d(23):
    Error: no property `countMap` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbkblkiji.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto m0 = new int[256];\n    auto\
    \ m1 = new int[256];\n    foreach (c; s0)\n        m0[c]++;\n    foreach (c; s1)\n\
    \        m1[c]++;\n    foreach (i; 0 .. 256)\n        if (m0[i] != m1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphc0v0you.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1)\n        return false;\n    auto m0 = s0.countMap;\n\
    \    auto m1 = s1.countMap;\n    foreach (c; m0.keys)\n    {\n        if (m0[c]\
    \ != m1[c])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptjy7zp22.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.chars;\n    auto c1 =\
    \ s1.chars;\n    auto c0_len = c0.length;\n    auto c1_len = c1.length;\n    if\
    \ (c0_len != c1_len) return false;\n    auto c0_counts = array(int).init;\n  \
    \  auto c1_counts = array(int).init;\n    foreach (c; c0) c0_counts[c]++;\n  \
    \  foreach (c; c1) c1_counts[c]++;\n    foreach (i; 0 .. 256) if (c0_counts[i]\
    \ != c1_counts[i]) return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp55w90qb5.d(27): Error: found \'')\'' when expecting \''.\''
    following int\n/tmp/tmp55w90qb5.d(27): Error: found \''.\'' when expecting identifier
    following \''int.\''\n/tmp/tmp55w90qb5.d(27): Error: found \''init\'' when expecting
    \'',\''\n/tmp/tmp55w90qb5.d(27): Error: expression expected, not \'';\''\n/tmp/tmp55w90qb5.d(28):
    Error: found \''auto\'' when expecting \'',\''\n/tmp/tmp55w90qb5.d(28): Error:
    found \'')\'' when expecting \''.\'' following int\n/tmp/tmp55w90qb5.d(28): Error:
    found \''.\'' when expecting identifier following \''int.\''\n/tmp/tmp55w90qb5.d(28):
    Error: found \''init\'' when expecting \'',\''\n/tmp/tmp55w90qb5.d(28): Error:
    expression expected, not \'';\''\n/tmp/tmp55w90qb5.d(29): Error: found \''foreach\''
    when expecting \'',\''\n/tmp/tmp55w90qb5.d(29): Error: found \'';\'' when expecting
    \'')\''\n/tmp/tmp55w90qb5.d(29): Error: found \''c0\'' when expecting \'',\''\n/tmp/tmp55w90qb5.d(29):
    Error: found \''c0_counts\'' when expecting \'',\''\n/tmp/tmp55w90qb5.d(29): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmp55w90qb5.d(30): Error: expression
    expected, not \''foreach\''\n/tmp/tmp55w90qb5.d(30): Error: found \'';\'' when
    expecting \'',\''\n/tmp/tmp55w90qb5.d(30): Error: found \''c1_counts\'' when expecting
    \'',\''\n/tmp/tmp55w90qb5.d(30): Error: found \'';\'' when expecting \'',\''\n/tmp/tmp55w90qb5.d(31):
    Error: expression expected, not \''foreach\''\n/tmp/tmp55w90qb5.d(31): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmp55w90qb5.d(31): Error: found \''..\''
    when expecting \'',\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp55w90qb5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n \
    \   foreach (c; c0.keys)\n    {\n        if (c0[c] != c1[c])\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8psdafee.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx8pbeh02.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpx8pbeh02.d(23):
    Error: no property `countMap` for type `string`\n/tmp/tmpx8pbeh02.d(24): Error:
    template instance `all!((a) => c0[a] == c1[a])` template `all` is not defined\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8pbeh02.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap();\n    auto\
    \ c1 = s1.countMap();\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfu43u10.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7o36yzrl.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7o36yzrl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprxkxp2hw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto l0 = s0.length;\n    auto l1\
    \ = s1.length;\n    if (l0 != l1) return false;\n    auto c0 = s0.count;\n   \
    \ auto c1 = s1.count;\n    foreach (c; c0) {\n        if (c0[c] != c1[c]) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6og6uzmy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach\
    \ (c; c0.keys)\n    {\n        if (c0[c] != c1[c]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjp_u5658.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] char_counts = new int[256];\n\
    \    foreach (c; s0)\n        char_counts[c]++;\n    foreach (c; s1)\n       \
    \ char_counts[c]--;\n    foreach (c; char_counts)\n        if (c != 0)\n     \
    \       return false;\n    return true;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4k_47d6y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0) \n    {\n        c0[c]++;\n\
    \    }\n    foreach (c; s1) \n    {\n        c1[c]++;\n    }\n    foreach (c;\
    \ c0.keys) \n    {\n        if (c0[c] != c1[c]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5t4xg3wj.d(22): Error: need size of rightmost array, not type
    char\n/tmp/tmp5t4xg3wj.d(23): Error: need size of rightmost array, not type char\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5t4xg3wj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] cnt0 = new int[256];\n    int[]\
    \ cnt1 = new int[256];\n    foreach (c; s0) cnt0[c]++;\n    foreach (c; s1) cnt1[c]++;\n\
    \    return cnt0 == cnt1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tabfb9o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // count the number of each character\
    \ in s0\n    int[char] count0;\n    foreach (c; s0)\n        count0[c]++;\n  \
    \  // count the number of each character in s1\n    int[char] count1;\n    foreach\
    \ (c; s1)\n        count1[c]++;\n    // check if the two maps are equal\n    return\
    \ count0 == count1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7pbn_nqv.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7pbn_nqv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c0[c] != c1[c])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdrg4321j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach\
    \ (c; c0)\n    {\n        if (c0[c] != c1[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphrt8s3sx.d(24): Error: no property `count` for type `string`\n/tmp/tmphrt8s3sx.d(25):
    Error: no property `count` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphrt8s3sx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0)\n        c0[c]++;\n    foreach\
    \ (c; s1)\n        c1[c]++;\n    foreach (c; c0.keys)\n        if (c0[c] != c1[c])\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjizc1z_x.d(22): Error: need size of rightmost array, not type
    char\n/tmp/tmpjizc1z_x.d(23): Error: need size of rightmost array, not type char\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjizc1z_x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkvv0u4z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto m0 = s0.countMap;\n   \
    \ auto m1 = s1.countMap;\n    foreach (c; m0.keys) {\n        if (m0[c] != m1[c])\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8q4t0_k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7o36yzrl.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7o36yzrl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach\
    \ (k; c0.keys)\n    {\n        if (c0[k] != c1[k]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcx1_i_37.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    foreach (i; 0 .. 256) if (c0[i] != c1[i]) return false;\n    return true;\n\
    }\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaf9zo3lz.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpaf9zo3lz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0)\n        c0[c]++;\n    foreach\
    \ (c; s1)\n        c1[c]++;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp349rlyja.d(22): Error: need size of rightmost array, not type
    char\n/tmp/tmp349rlyja.d(23): Error: need size of rightmost array, not type char\n/tmp/tmp349rlyja.d(30):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp349rlyja.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkblkiji.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpbkblkiji.d(23):
    Error: no property `countMap` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbkblkiji.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyiu3o29w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2zeuhj1o.d(26): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp2zeuhj1o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach\
    \ (c; c0)\n    {\n        if (c0[c] != c1[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphrt8s3sx.d(24): Error: no property `count` for type `string`\n/tmp/tmphrt8s3sx.d(25):
    Error: no property `count` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmphrt8s3sx.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i]) return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg8gohi90.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach\
    \ (c; s0)\n    {\n        if (c0[c] != c1[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4z78d_64.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkvv0u4z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx8pbeh02.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpx8pbeh02.d(23):
    Error: no property `countMap` for type `string`\n/tmp/tmpx8pbeh02.d(24): Error:
    template instance `all!((a) => c0[a] == c1[a])` template `all` is not defined\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8pbeh02.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // TODO: implement this function\n\
    \    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach(c; s0)\n\
    \        c0[c]++;\n    foreach(c; s1)\n        c1[c]++;\n    return c0 == c1;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpev61lpgh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach (c; c0)\
    \ {\n        if (c0[c] != c1[c]) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6yqtaetd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c1.count(c) != c0.count(c))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ztgcmh_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach\
    \ (c; c0)\n    {\n        if (c1[c] != c0[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt3jgki0_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1)\n        return false;\n    foreach (i; 0 .. c0)\n\
    \    {\n        if (s0[i] != s1[i])\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4hf3fk2q.d(22): Error: no property `count` for type `string`\n/tmp/tmp4hf3fk2q.d(23):
    Error: no property `count` for type `string`\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp4hf3fk2q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkvv0u4z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    foreach (i; 0 .. c0) {\n   \
    \     if (s0[i] != s1[i]) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0myydxbu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    foreach (i; 0 .. c0)\n    {\n\
    \        if (s0[i] != s1[i]) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpru5bwzt8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdvy6dqy7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach\
    \ (c; c0.keys)\n    {\n        if (c0[c] != c1[c]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjp_u5658.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c1.count(c) != c0.count(c))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ztgcmh_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbkblkiji.d(22): Error: no property `countMap` for type `string`\n/tmp/tmpbkblkiji.d(23):
    Error: no property `countMap` for type `string`\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbkblkiji.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprxkxp2hw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] counter0;\n    int[char]\
    \ counter1;\n    foreach(c; s0)\n        counter0[c]++;\n    foreach(c; s1)\n\
    \        counter1[c]++;\n    return counter0 == counter1;\n}\nunittest\n{\n  \
    \  alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3virkivp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto m0 = s0.countMap;\n   \
    \ auto m1 = s1.countMap;\n    foreach (k; m0.keys) {\n        if (m0[k] != m1[k])\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuwc5fosw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkvv0u4z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyiu3o29w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n   \
    \ {\n        return false;\n    }\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n\
    \    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qo7ruq6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    return c0 == c1;\n}\n/*\n\
    unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwn7df6wh.d(29): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpwn7df6wh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c0[c] != c1[c])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdrg4321j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkvv0u4z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp5fl6rdz1.d(32): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmp5fl6rdz1.__unittest_L28_C1() [0x427f5d]\n??:?
    void tmp5fl6rdz1.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0xab0ff554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7o36yzrl.d(30): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp7o36yzrl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto m0 = new Map!(char, int)();\n\
    \    auto m1 = new Map!(char, int)();\n    foreach (c; s0)\n        m0[c]++;\n\
    \    foreach (c; s1)\n        m1[c]++;\n    return m0 == m1;\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_m4ftp9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n \
    \   foreach (c; c0.keys)\n    {\n        if (c0[c] != c1[c])\n            return\
    \ false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphupn96fu.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphupn96fu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c0[c] != c1[c])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdrg4321j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnj2n8rks.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x428405]\n??:? void tmpnj2n8rks.__unittest_L30_C1() [0x427f5d]\n??:?
    void tmpnj2n8rks.__modtest() [0x428188]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x4309ac]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430489]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b249]\n??:? runModuleUnitTests [0x42c1b5]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42884f]\n??:? _d_run_main [0x4287ba]\n??:? main [0x42819b]\n??:?
    __libc_start_main [0x83a41554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(k => c1.count(k)\
    \ == c0.count(k));\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_gyt_eh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp65ssk6m_.d(37): unittest failure\n----------------\n??:?
    _d_unittestp [0x4282c5]\n??:? void tmp65ssk6m_.__unittest_L33_C1() [0x427eb5]\n??:?
    void tmp65ssk6m_.__modtest() [0x428048]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x43086c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430349]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b109]\n??:? runModuleUnitTests [0x42c075]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42870f]\n??:? _d_run_main [0x42867a]\n??:? main [0x42805b]\n??:?
    __libc_start_main [0xf06d8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_sutd39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659804859
