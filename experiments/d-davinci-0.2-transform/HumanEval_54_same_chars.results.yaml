language: d
name: HumanEval_54_same_chars
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtkblfxp.d(22): Error: no property `countMap` for type `string`

    /tmp/tmprtkblfxp.d(23): Error: no property `countMap` for type `string`

    /tmp/tmprtkblfxp.d(24): Error: template instance `all!((a) => c0[a] == c1[a])`
    template `all` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtkblfxp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0)\n        c0[c]++;\n    foreach\
    \ (c; s1)\n        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppso1_2mz.d(22): Error: need size of rightmost array, not type `char`

    /tmp/tmppso1_2mz.d(23): Error: need size of rightmost array, not type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppso1_2mz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(ch; c0.keys)\n    {\n        if(c0[ch] != c1[ch])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6m7f5uam.d(22): Error: no property `countMap` for type `string`

    /tmp/tmp6m7f5uam.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6m7f5uam.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n\
    }\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu1y88euy.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu1y88euy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp582bkhn5.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp582bkhn5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1)\n        return false;\n    auto c = c0;\n    auto\
    \ i = 0;\n    while (i < c)\n    {\n        if (s0[i] != s1[i])\n            return\
    \ false;\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxazjo8e8.d(22): Error: no property `count` for type `string`

    /tmp/tmpxazjo8e8.d(23): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxazjo8e8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n\
    \    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n        c1[c]++;\n\
    \    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps65uo1mu.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282d5]

    ??:? void tmps65uo1mu.__unittest_L35_C1() [0x427ec5]

    ??:? void tmps65uo1mu.__modtest() [0x428058]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b142]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]

    ??:? runModuleUnitTests [0x42c085]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428798]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1)\n        return false;\n    foreach (i; 0 .. c0)\n\
    \    {\n        if (s0[i] != s1[i])\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeafua_go.d(22): Error: no property `count` for type `string`

    /tmp/tmpeafua_go.d(23): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeafua_go.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto c = c0.dup;\n    foreach\
    \ (i, ch; s0) {\n        if (c[ch] == 0) return false;\n        c[ch]--;\n   \
    \ }\n    foreach (i, ch; s1) {\n        if (c[ch] == 0) return false;\n      \
    \  c[ch]--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqxw6u57i.d(22): Error: no property `count` for type `string`

    /tmp/tmpqxw6u57i.d(23): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqxw6u57i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx__fu5ix.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx__fu5ix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp3cnql4.d(22): Error: no property `countMap` for type `string`

    /tmp/tmppp3cnql4.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp3cnql4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    foreach (c; s0) {\n        if\
    \ (c0[c] != c1[c]) return false;\n    }\n    return true;\n}\nunittest\n{\n  \
    \  alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkjx3zpzj.d(22): Error: no property `count` for type `string`

    /tmp/tmpkjx3zpzj.d(23): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkjx3zpzj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0)\n        c0[c]++;\n    foreach\
    \ (c; s1)\n        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppso1_2mz.d(22): Error: need size of rightmost array, not type `char`

    /tmp/tmppso1_2mz.d(23): Error: need size of rightmost array, not type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppso1_2mz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach\
    \ (c; c0)\n    {\n        if (c0[c] != c1[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpszyi3frn.d(24): Error: no property `count` for type `string`

    /tmp/tmpszyi3frn.d(25): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpszyi3frn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // Count the number of occurrences\
    \ of each character in s0.\n    int[char] count0;\n    foreach (c; s0)\n     \
    \   count0[c]++;\n    // Count the number of occurrences of each character in\
    \ s1.\n    int[char] count1;\n    foreach (c; s1)\n        count1[c]++;\n    //\
    \ Compare the two maps.\n    return count0 == count1;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkbz3l0wr.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288a9]

    ??:? void tmpkbz3l0wr.__unittest_L33_C1() [0x427bb1]

    ??:? void tmpkbz3l0wr.__modtest() [0x427d44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d767]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428706]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a631]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a6c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a5bd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4286dd]

    ??:? runModuleUnitTests [0x42d53d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4292dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp3cnql4.d(22): Error: no property `countMap` for type `string`

    /tmp/tmppp3cnql4.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp3cnql4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    int[] a0 = new int[256];\n    int[] a1 = new int[256];\n\
    \    foreach (c; s0)\n        a0[c]++;\n    foreach (c; s1)\n        a1[c]++;\n\
    \    foreach (i; 0 .. 256)\n        if (a0[i] != a1[i])\n            return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpiz_yf35_.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282d5]

    ??:? void tmpiz_yf35_.__unittest_L35_C1() [0x427ec5]

    ??:? void tmpiz_yf35_.__modtest() [0x428058]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c2af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b142]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303cd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43087c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430359]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b119]

    ??:? runModuleUnitTests [0x42c085]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428798]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) \n    {\n        c0[c]++;\n    }\n \
    \   foreach (c; s1) \n    {\n        c1[c]++;\n    }\n    foreach (i; 0 .. 256)\
    \ \n    {\n        if (c0[i] != c1[i]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcj1dacc6.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmpcj1dacc6.__unittest_L41_C1() [0x427eb5]

    ??:? void tmpcj1dacc6.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto m0 = s0.countMap;\n   \
    \ auto m1 = s1.countMap;\n    foreach (c; m0.keys) {\n        if (m0[c] != m1[c])\
    \ return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmivy8omw.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmivy8omw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    int[] cnt = new int[256];\n    foreach (c; s0) cnt[c]++;\n    foreach\
    \ (c; s1) cnt[c]--;\n    foreach (c; cnt) if (c != 0) return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7_i4tynl.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428295]

    ??:? void tmp7_i4tynl.__unittest_L29_C1() [0x427e81]

    ??:? void tmp7_i4tynl.__modtest() [0x428014]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c26f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b102]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43038d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43083c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430319]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]

    ??:? runModuleUnitTests [0x42c045]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428758]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto d0 = s0.dup;\n    auto\
    \ d1 = s1.dup;\n    d0.sort;\n    d1.sort;\n    return d0 == d1;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc98gzbce.d(22): Error: no property `count` for type `string`

    /tmp/tmpc98gzbce.d(23): Error: no property `count` for type `string`

    /tmp/tmpc98gzbce.d(27): Error: no property `sort` for type `char[]`

    /tmp/tmpc98gzbce.d(28): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc98gzbce.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c0[c] != c1[c])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwglo49z0.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpwglo49z0.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwglo49z0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) \n        return false;\n    foreach (i; 0 .. c0)\
    \ \n    {\n        if (s0[i] != s1[i]) \n            return false;\n    }\n  \
    \  return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukfk8tq5.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukfk8tq5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = count_chars(s0);\n    auto c1 = count_chars(s1);\n   \
    \ return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcd1a0cnw.d(23): Error: undefined identifier `count_chars`

    /tmp/tmpcd1a0cnw.d(24): Error: undefined identifier `count_chars`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcd1a0cnw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(c => c1.count(c.key)\
    \ == c.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3mi9mhf7.d(22): Error: no property `countMap` for type `string`

    /tmp/tmp3mi9mhf7.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3mi9mhf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp3cnql4.d(22): Error: no property `countMap` for type `string`

    /tmp/tmppp3cnql4.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp3cnql4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto m0 = s0.countMap;\n   \
    \ auto m1 = s1.countMap;\n    foreach (k; m0.keys)\n    {\n        if (m0[k] !=\
    \ m1[k]) return false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdqyh2xal.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqyh2xal.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] cnt0 = new int[256];\n    int[]\
    \ cnt1 = new int[256];\n    foreach (c; s0)\n        cnt0[c]++;\n    foreach (c;\
    \ s1)\n        cnt1[c]++;\n    return cnt0 == cnt1;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3cpsg376.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp3cpsg376.__unittest_L30_C1() [0x427f5d]

    ??:? void tmp3cpsg376.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach (c; s0)\
    \ {\n        if (c0[c] != c1[c]) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4iahxfsp.d(23): Error: no property `count` for type `string`

    /tmp/tmp4iahxfsp.d(24): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4iahxfsp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0)\n        c0[c]++;\n    foreach\
    \ (c; s1)\n        c1[c]++;\n    foreach (c; c0.keys)\n        if (c0[c] != c1[c])\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0fatbl5.d(22): Error: need size of rightmost array, not type `char`

    /tmp/tmpn0fatbl5.d(23): Error: need size of rightmost array, not type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0fatbl5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] counts0 = new int[256];\n  \
    \  int[] counts1 = new int[256];\n    foreach (c; s0) {\n        counts0[c]++;\n\
    \    }\n    foreach (c; s1) {\n        counts1[c]++;\n    }\n    foreach (i; 0\
    \ .. 256) {\n        if (counts0[i] != counts1[i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeun1wz9a.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeun1wz9a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtkblfxp.d(22): Error: no property `countMap` for type `string`

    /tmp/tmprtkblfxp.d(23): Error: no property `countMap` for type `string`

    /tmp/tmprtkblfxp.d(24): Error: template instance `all!((a) => c0[a] == c1[a])`
    template `all` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtkblfxp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach\
    \ (c; c0.keys)\n    {\n        if (c0[c] != c1[c]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4idcdjy0.d(23): Error: no property `countMap` for type `string`

    /tmp/tmp4idcdjy0.d(24): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4idcdjy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(c => c1.count(c.key)\
    \ == c.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3mi9mhf7.d(22): Error: no property `countMap` for type `string`

    /tmp/tmp3mi9mhf7.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3mi9mhf7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto s0_sorted = s0.dup.sort;\n\
    \    auto s1_sorted = s1.dup.sort;\n    return s0_sorted == s1_sorted;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4n39b4rf.d(22): Error: no property `count` for type `string`

    /tmp/tmp4n39b4rf.d(23): Error: no property `count` for type `string`

    /tmp/tmp4n39b4rf.d(25): Error: no property `sort` for type `char[]`

    /tmp/tmp4n39b4rf.d(26): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4n39b4rf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxdxd1ath.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdxd1ath.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) \n    {\n        c0[c]++;\n    }\n \
    \   foreach (c; s1) \n    {\n        c1[c]++;\n    }\n    return c0 == c1;\n}\n\
    unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpobnfyr2l.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpobnfyr2l.__unittest_L34_C1() [0x427f5d]

    ??:? void tmpobnfyr2l.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz4kq287.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpoz4kq287.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz4kq287.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // \n    // Count the number of times\
    \ each character appears in the string.\n    //\n    auto count = new int[256];\n\
    \    foreach (c; s0)\n        count[c]++;\n    foreach (c; s1)\n        count[c]--;\n\
    \    //\n    // Check if the count is zero for each character.\n    //\n    foreach\
    \ (c; count)\n        if (c != 0)\n            return false;\n    return true;\n\
    }\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5wa6916l.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5wa6916l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => a[0] in c1 &&\
    \ a[1] == c1[a[0]])(c0);\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldklo47i.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldklo47i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz4kq287.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpoz4kq287.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz4kq287.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // Count the number of each character\
    \ in s0\n    int[char] char_counts;\n    foreach (c; s0)\n        char_counts[c]++;\n\
    \    // Check that s1 has the same number of each character\n    foreach (c; s1)\n\
    \        if (char_counts[c]-- == 0)\n            return false;\n    return true;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmog71gyc.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428891]

    ??:? void tmpmog71gyc.__unittest_L32_C1() [0x427b9d]

    ??:? void tmpmog71gyc.__modtest() [0x427d30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d74f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4286ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a619]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a6a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a5a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4286c5]

    ??:? runModuleUnitTests [0x42d525]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4292c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => a[0] in c1 &&\
    \ a[1] == c1[a[0]])(c0);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyegxaowv.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpyegxaowv.d(23): Error: no property `countMap` for type `string`

    /tmp/tmpyegxaowv.d(24): Error: template instance `all!((a) => a[0] in c1 && (a[1]
    == c1[a[0]]))` template `all` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyegxaowv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp3cnql4.d(22): Error: no property `countMap` for type `string`

    /tmp/tmppp3cnql4.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp3cnql4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n \
    \   return c0.equal(c1);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcfxsry3h.d(24): Error: no property `countMap` for type `string`

    /tmp/tmpcfxsry3h.d(25): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcfxsry3h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp3cnql4.d(22): Error: no property `countMap` for type `string`

    /tmp/tmppp3cnql4.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp3cnql4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto m0 = s0.countMap;\n   \
    \ auto m1 = s1.countMap;\n    foreach (c; m0.keys) {\n        if (m0[c] != m1[c])\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgjvs11ol.d(22): Error: no property `count` for type `string`

    /tmp/tmpgjvs11ol.d(23): Error: no property `count` for type `string`

    /tmp/tmpgjvs11ol.d(25): Error: no property `countMap` for type `string`

    /tmp/tmpgjvs11ol.d(26): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjvs11ol.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1)\n        return false;\n    auto c = s0.count;\n\
    \    for (size_t i = 0; i < c; i++)\n    {\n        if (s0[i] != s1[i])\n    \
    \        return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphphs2umo.d(22): Error: no property `count` for type `string`

    /tmp/tmphphs2umo.d(23): Error: no property `count` for type `string`

    /tmp/tmphphs2umo.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphphs2umo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0) \n    {\n        c0[c]++;\n\
    \    }\n    foreach (c; s1) \n    {\n        c1[c]++;\n    }\n    return c0 ==\
    \ c1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi9qzqvpc.d(22): Error: need size of rightmost array, not type `char`

    /tmp/tmpi9qzqvpc.d(23): Error: need size of rightmost array, not type `char`

    /tmp/tmpi9qzqvpc.d(34): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9qzqvpc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n \
    \   foreach (c; c0.keys)\n    {\n        if (c0[c] != c1[c])\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpogvup5yl.d(24): Error: no property `countMap` for type `string`

    /tmp/tmpogvup5yl.d(25): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogvup5yl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpptlu660x.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpptlu660x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvc1bg_c4.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpvc1bg_c4.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvc1bg_c4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp70hpuzzv.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp70hpuzzv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.countOf(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_7nf46_.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpo_7nf46_.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_7nf46_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz4kq287.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpoz4kq287.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz4kq287.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] count0 = new int[256];\n   \
    \ int[] count1 = new int[256];\n    foreach (c; s0)\n        count0[c]++;\n  \
    \  foreach (c; s1)\n        count1[c]++;\n    foreach (i; 0 .. 256)\n        if\
    \ (count0[i] != count1[i])\n            return false;\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy2em_xgx.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmpy2em_xgx.__unittest_L33_C1() [0x427eb5]

    ??:? void tmpy2em_xgx.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz4kq287.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpoz4kq287.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz4kq287.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp3cnql4.d(22): Error: no property `countMap` for type `string`

    /tmp/tmppp3cnql4.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp3cnql4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto m0 = new int[256];\n    auto\
    \ m1 = new int[256];\n    foreach (c; s0)\n        m0[c]++;\n    foreach (c; s1)\n\
    \        m1[c]++;\n    foreach (i; 0 .. 256)\n        if (m0[i] != m1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc5vio2tr.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmpc5vio2tr.__unittest_L33_C1() [0x427eb5]

    ??:? void tmpc5vio2tr.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1)\n        return false;\n    auto m0 = s0.countMap;\n\
    \    auto m1 = s1.countMap;\n    foreach (c; m0.keys)\n    {\n        if (m0[c]\
    \ != m1[c])\n            return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgdpoqfux.d(22): Error: no property `count` for type `string`

    /tmp/tmpgdpoqfux.d(23): Error: no property `count` for type `string`

    /tmp/tmpgdpoqfux.d(26): Error: no property `countMap` for type `string`

    /tmp/tmpgdpoqfux.d(27): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgdpoqfux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.chars;\n    auto c1 =\
    \ s1.chars;\n    auto c0_len = c0.length;\n    auto c1_len = c1.length;\n    if\
    \ (c0_len != c1_len) return false;\n    auto c0_counts = array(int).init;\n  \
    \  auto c1_counts = array(int).init;\n    foreach (c; c0) c0_counts[c]++;\n  \
    \  foreach (c; c1) c1_counts[c]++;\n    foreach (i; 0 .. 256) if (c0_counts[i]\
    \ != c1_counts[i]) return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz5xk3cgk.d(27): Error: found `)` when expecting `.` following int

    /tmp/tmpz5xk3cgk.d(27): Error: found `.` when expecting identifier following `int`.

    /tmp/tmpz5xk3cgk.d(27): Error: found `init` when expecting `,`

    /tmp/tmpz5xk3cgk.d(27): Error: expression expected, not `;`

    /tmp/tmpz5xk3cgk.d(28): Error: found `auto` when expecting `,`

    /tmp/tmpz5xk3cgk.d(28): Error: found `)` when expecting `.` following int

    /tmp/tmpz5xk3cgk.d(28): Error: found `.` when expecting identifier following `int`.

    /tmp/tmpz5xk3cgk.d(28): Error: found `init` when expecting `,`

    /tmp/tmpz5xk3cgk.d(28): Error: expression expected, not `;`

    /tmp/tmpz5xk3cgk.d(29): Error: found `foreach` when expecting `,`

    /tmp/tmpz5xk3cgk.d(29): Error: found `;` when expecting `)`

    /tmp/tmpz5xk3cgk.d(29): Error: found `c0` when expecting `,`

    /tmp/tmpz5xk3cgk.d(29): Error: found `c0_counts` when expecting `,`

    /tmp/tmpz5xk3cgk.d(29): Error: found `;` when expecting `,`

    /tmp/tmpz5xk3cgk.d(30): Error: expression expected, not `foreach`

    /tmp/tmpz5xk3cgk.d'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n \
    \   foreach (c; c0.keys)\n    {\n        if (c0[c] != c1[c])\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpogvup5yl.d(24): Error: no property `countMap` for type `string`

    /tmp/tmpogvup5yl.d(25): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogvup5yl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtkblfxp.d(22): Error: no property `countMap` for type `string`

    /tmp/tmprtkblfxp.d(23): Error: no property `countMap` for type `string`

    /tmp/tmprtkblfxp.d(24): Error: template instance `all!((a) => c0[a] == c1[a])`
    template `all` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtkblfxp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap();\n    auto\
    \ c1 = s1.countMap();\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcg78ouw0.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpcg78ouw0.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcg78ouw0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxdxd1ath.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdxd1ath.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvc1bg_c4.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpvc1bg_c4.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvc1bg_c4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto l0 = s0.length;\n    auto l1\
    \ = s1.length;\n    if (l0 != l1) return false;\n    auto c0 = s0.count;\n   \
    \ auto c1 = s1.count;\n    foreach (c; c0) {\n        if (c0[c] != c1[c]) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4rz7l59g.d(25): Error: no property `count` for type `string`

    /tmp/tmp4rz7l59g.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rz7l59g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach\
    \ (c; c0.keys)\n    {\n        if (c0[c] != c1[c]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4idcdjy0.d(23): Error: no property `countMap` for type `string`

    /tmp/tmp4idcdjy0.d(24): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4idcdjy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] char_counts = new int[256];\n\
    \    foreach (c; s0)\n        char_counts[c]++;\n    foreach (c; s1)\n       \
    \ char_counts[c]--;\n    foreach (c; char_counts)\n        if (c != 0)\n     \
    \       return false;\n    return true;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp29r1q0il.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428285]

    ??:? void tmp29r1q0il.__unittest_L32_C1() [0x427e71]

    ??:? void tmp29r1q0il.__modtest() [0x428004]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b0f2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43037d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43082c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430309]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]

    ??:? runModuleUnitTests [0x42c035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428748]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0) \n    {\n        c0[c]++;\n\
    \    }\n    foreach (c; s1) \n    {\n        c1[c]++;\n    }\n    foreach (c;\
    \ c0.keys) \n    {\n        if (c0[c] != c1[c]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpspw6p4t_.d(22): Error: need size of rightmost array, not type `char`

    /tmp/tmpspw6p4t_.d(23): Error: need size of rightmost array, not type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpspw6p4t_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] cnt0 = new int[256];\n    int[]\
    \ cnt1 = new int[256];\n    foreach (c; s0) cnt0[c]++;\n    foreach (c; s1) cnt1[c]++;\n\
    \    return cnt0 == cnt1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppb30gvi8.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmppb30gvi8.__unittest_L28_C1() [0x427f5d]

    ??:? void tmppb30gvi8.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // count the number of each character\
    \ in s0\n    int[char] count0;\n    foreach (c; s0)\n        count0[c]++;\n  \
    \  // count the number of each character in s1\n    int[char] count1;\n    foreach\
    \ (c; s1)\n        count1[c]++;\n    // check if the two maps are equal\n    return\
    \ count0 == count1;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n\
    \    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpggiabtu4.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggiabtu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c0[c] != c1[c])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwglo49z0.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpwglo49z0.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwglo49z0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach\
    \ (c; c0)\n    {\n        if (c0[c] != c1[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpszyi3frn.d(24): Error: no property `count` for type `string`

    /tmp/tmpszyi3frn.d(25): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpszyi3frn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0)\n        c0[c]++;\n    foreach\
    \ (c; s1)\n        c1[c]++;\n    foreach (c; c0.keys)\n        if (c0[c] != c1[c])\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0fatbl5.d(22): Error: need size of rightmost array, not type `char`

    /tmp/tmpn0fatbl5.d(23): Error: need size of rightmost array, not type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0fatbl5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz4kq287.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpoz4kq287.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz4kq287.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto m0 = s0.countMap;\n   \
    \ auto m1 = s1.countMap;\n    foreach (c; m0.keys) {\n        if (m0[c] != m1[c])\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgjvs11ol.d(22): Error: no property `count` for type `string`

    /tmp/tmpgjvs11ol.d(23): Error: no property `count` for type `string`

    /tmp/tmpgjvs11ol.d(25): Error: no property `countMap` for type `string`

    /tmp/tmpgjvs11ol.d(26): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjvs11ol.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxdxd1ath.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdxd1ath.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach\
    \ (k; c0.keys)\n    {\n        if (c0[k] != c1[k]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvmywzt9l.d(23): Error: no property `countMap` for type `string`

    /tmp/tmpvmywzt9l.d(24): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmywzt9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    foreach (i; 0 .. 256) if (c0[i] != c1[i]) return false;\n    return true;\n\
    }\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpluipfvgt.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpluipfvgt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] c0 = new int[char];\n  \
    \  int[char] c1 = new int[char];\n    foreach (c; s0)\n        c0[c]++;\n    foreach\
    \ (c; s1)\n        c1[c]++;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt_6bj0wu.d(22): Error: need size of rightmost array, not type `char`

    /tmp/tmpt_6bj0wu.d(23): Error: need size of rightmost array, not type `char`

    /tmp/tmpt_6bj0wu.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_6bj0wu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp3cnql4.d(22): Error: no property `countMap` for type `string`

    /tmp/tmppp3cnql4.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp3cnql4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5mbgnggs.d(22): Error: no property `countMap` for type `string`

    /tmp/tmp5mbgnggs.d(23): Error: no property `countMap` for type `string`

    /tmp/tmp5mbgnggs.d(24): Error: template instance `all!((a) => a[1] == c1[a[0]])`
    template `all` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5mbgnggs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprfxqu_9_.d(26): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprfxqu_9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach\
    \ (c; c0)\n    {\n        if (c0[c] != c1[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpszyi3frn.d(24): Error: no property `count` for type `string`

    /tmp/tmpszyi3frn.d(25): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpszyi3frn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i]) return false;\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcubuh0ph.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmpcubuh0ph.__unittest_L30_C1() [0x427eb5]

    ??:? void tmpcubuh0ph.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach\
    \ (c; s0)\n    {\n        if (c0[c] != c1[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsz6m6adz.d(24): Error: no property `count` for type `string`

    /tmp/tmpsz6m6adz.d(25): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsz6m6adz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz4kq287.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpoz4kq287.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz4kq287.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => c0[a] == c1[a])(c0.keys);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtkblfxp.d(22): Error: no property `countMap` for type `string`

    /tmp/tmprtkblfxp.d(23): Error: no property `countMap` for type `string`

    /tmp/tmprtkblfxp.d(24): Error: template instance `all!((a) => c0[a] == c1[a])`
    template `all` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtkblfxp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    // TODO: implement this function\n\
    \    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach(c; s0)\n\
    \        c0[c]++;\n    foreach(c; s1)\n        c1[c]++;\n    return c0 == c1;\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphuxpfxue.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmphuxpfxue.__unittest_L31_C1() [0x427f5d]

    ??:? void tmphuxpfxue.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach (c; c0)\
    \ {\n        if (c0[c] != c1[c]) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsl15ftnh.d(23): Error: no property `count` for type `string`

    /tmp/tmpsl15ftnh.d(24): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsl15ftnh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c1.count(c) != c0.count(c))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp77r_13jx.d(22): Error: no property `countMap` for type `string`

    /tmp/tmp77r_13jx.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77r_13jx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.count;\n    auto c1 = s1.count;\n    foreach\
    \ (c; c0)\n    {\n        if (c1[c] != c0[c])\n            return false;\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7c0fulte.d(24): Error: no property `count` for type `string`

    /tmp/tmp7c0fulte.d(25): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c0fulte.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1)\n        return false;\n    foreach (i; 0 .. c0)\n\
    \    {\n        if (s0[i] != s1[i])\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeafua_go.d(22): Error: no property `count` for type `string`

    /tmp/tmpeafua_go.d(23): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeafua_go.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz4kq287.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpoz4kq287.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz4kq287.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    foreach (i; 0 .. c0) {\n   \
    \     if (s0[i] != s1[i]) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfd24tcr2.d(22): Error: no property `count` for type `string`

    /tmp/tmpfd24tcr2.d(23): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfd24tcr2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    foreach (i; 0 .. c0)\n    {\n\
    \        if (s0[i] != s1[i]) return false;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2arvkb4o.d(22): Error: no property `count` for type `string`

    /tmp/tmp2arvkb4o.d(23): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2arvkb4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n    c0.sort;\n    c1.sort;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9khj__16.d(25): Error: no property `sort` for type `char[]`

    /tmp/tmp9khj__16.d(26): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9khj__16.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n    foreach\
    \ (c; c0.keys)\n    {\n        if (c0[c] != c1[c]) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4idcdjy0.d(23): Error: no property `countMap` for type `string`

    /tmp/tmp4idcdjy0.d(24): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4idcdjy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c1.count(c) != c0.count(c))\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp77r_13jx.d(22): Error: no property `countMap` for type `string`

    /tmp/tmp77r_13jx.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77r_13jx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(a => c1.count(a.key)\
    \ == a.value);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp3cnql4.d(22): Error: no property `countMap` for type `string`

    /tmp/tmppp3cnql4.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp3cnql4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.keys.all!(k => c0[k] == c1[k]);\n}\nunittest\n\
    {\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"\
    dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvc1bg_c4.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpvc1bg_c4.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvc1bg_c4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[char] counter0;\n    int[char]\
    \ counter1;\n    foreach(c; s0)\n        counter0[c]++;\n    foreach(c; s1)\n\
    \        counter1[c]++;\n    return counter0 == counter1;\n}\nunittest\n{\n  \
    \  alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv89fux1a.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428899]

    ??:? void tmpv89fux1a.__unittest_L30_C1() [0x427ba5]

    ??:? void tmpv89fux1a.__modtest() [0x427d38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d757]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4286f6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a621]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a6b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a5ad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4286cd]

    ??:? runModuleUnitTests [0x42d52d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4292cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.count;\n    auto c1 =\
    \ s1.count;\n    if (c0 != c1) return false;\n    auto m0 = s0.countMap;\n   \
    \ auto m1 = s1.countMap;\n    foreach (k; m0.keys) {\n        if (m0[k] != m1[k])\
    \ return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1frziwrf.d(22): Error: no property `count` for type `string`

    /tmp/tmp1frziwrf.d(23): Error: no property `count` for type `string`

    /tmp/tmp1frziwrf.d(25): Error: no property `countMap` for type `string`

    /tmp/tmp1frziwrf.d(26): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1frziwrf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz4kq287.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpoz4kq287.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz4kq287.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && all!(a => a[1] == c1[a[0]])(c0);\n\
    }\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5mbgnggs.d(22): Error: no property `countMap` for type `string`

    /tmp/tmp5mbgnggs.d(23): Error: no property `countMap` for type `string`

    /tmp/tmp5mbgnggs.d(24): Error: template instance `all!((a) => a[1] == c1[a[0]])`
    template `all` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5mbgnggs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) \n   \
    \ {\n        return false;\n    }\n    auto c0 = s0.dup;\n    auto c1 = s1.dup;\n\
    \    c0.sort;\n    c1.sort;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplscvxf1w.d(28): Error: no property `sort` for type `char[]`

    /tmp/tmplscvxf1w.d(29): Error: no property `sort` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplscvxf1w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length) return\
    \ false;\n    int[] c0 = new int[256];\n    int[] c1 = new int[256];\n    foreach\
    \ (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n    return c0 == c1;\n}\n/*\n\
    unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\"\
    ) == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"\
    eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\
    \    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjgardzqk.d(29): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgardzqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c0[c] != c1[c])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwglo49z0.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpwglo49z0.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwglo49z0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.equal(c1);\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoz4kq287.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpoz4kq287.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoz4kq287.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0) c0[c]++;\n    foreach (c; s1) c1[c]++;\n\
    \    return c0 == c1;\n}\nunittest\n{\n    alias candidate = same_chars;\n\n \
    \   assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8ht07eh3.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmp8ht07eh3.__unittest_L28_C1() [0x427f5d]

    ??:? void tmp8ht07eh3.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxdxd1ath.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxdxd1ath.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto m0 = new Map!(char, int)();\n\
    \    auto m1 = new Map!(char, int)();\n    foreach (c; s0)\n        m0[c]++;\n\
    \    foreach (c; s1)\n        m1[c]++;\n    return m0 == m1;\n}\nunittest\n{\n\
    \    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5b1g0fm9.d(22): Error: template instance `Map!(char, int)` template
    `Map` is not defined

    /tmp/tmp5b1g0fm9.d(23): Error: template instance `Map!(char, int)` template `Map`
    is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5b1g0fm9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    if (s0.length != s1.length)\n    \
    \    return false;\n    auto c0 = s0.countMap;\n    auto c1 = s1.countMap;\n \
    \   foreach (c; c0.keys)\n    {\n        if (c0[c] != c1[c])\n            return\
    \ false;\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate = same_chars;\n\
    \n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"\
    abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\"\
    ) == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkh5bbofw.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkh5bbofw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    foreach(c; c0.keys)\n    {\n        if(c0[c] != c1[c])\n\
    \            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwglo49z0.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpwglo49z0.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwglo49z0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    return c0 == c1;\n}\nunittest\n{\n    alias candidate =\
    \ same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqx6f5zrx.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x428405]

    ??:? void tmpqx6f5zrx.__unittest_L30_C1() [0x427f5d]

    ??:? void tmpqx6f5zrx.__modtest() [0x428188]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b272]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4304fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4309ac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430489]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b249]

    ??:? runModuleUnitTests [0x42c1b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.all!(k => c1.count(k)\
    \ == c0.count(k));\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnk39pqv5.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpnk39pqv5.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnk39pqv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    int[] c0 = new int[256];\n    int[]\
    \ c1 = new int[256];\n    foreach (c; s0)\n        c0[c]++;\n    foreach (c; s1)\n\
    \        c1[c]++;\n    foreach (i; 0 .. 256)\n        if (c0[i] != c1[i])\n  \
    \          return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"\
    dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n   \
    \ assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"\
    aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp51nx_s_9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4282c5]

    ??:? void tmp51nx_s_9.__unittest_L33_C1() [0x427eb5]

    ??:? void tmp51nx_s_9.__modtest() [0x428048]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c29f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b132]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43086c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430349]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b109]

    ??:? runModuleUnitTests [0x42c075]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428788]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Check if two words have\
    \ the same characters.\n    >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    )\n    true\n    >>> same_chars(\"abcd\", \"dddddddabc\")\n    true\n    >>> same_chars(\"\
    dddddddabc\", \"abcd\")\n    true\n    >>> same_chars(\"eabcd\", \"dddddddabc\"\
    )\n    false\n    >>> same_chars(\"abcd\", \"dddddddabce\")\n    false\n    >>>\
    \ same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n    \n*/\nbool\
    \ same_chars(string s0, string s1) \n{\n    auto c0 = s0.countMap;\n    auto c1\
    \ = s1.countMap;\n    return c0.length == c1.length && c0.keys.all!(k => c0[k]\
    \ == c1[k]);\n}\nunittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\"\
    , \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") ==\
    \ true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"\
    abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfkxbkyht.d(22): Error: no property `countMap` for type `string`

    /tmp/tmpfkxbkyht.d(23): Error: no property `countMap` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfkxbkyht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
