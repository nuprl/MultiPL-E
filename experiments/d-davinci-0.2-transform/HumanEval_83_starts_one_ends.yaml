name: HumanEval_83_starts_one_ends
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given a positive integer\
  \ n, return the count of the numbers of n-digit\n    positive integers that start\
  \ or end with 1.\n    \n*/\nlong starts_one_ends(long n) \n"
tests: "unittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L)\
  \ == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n\
  \    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\n\
  void main(){}"
completions: ["{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n  \
    \  long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m\
    \ = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n \
    \   long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x\
    \ = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n \
    \   long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g\
    \ = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n\
    \    long ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long qq = 0;\n    long\
    \ rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv =\
    \ 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n\
    \    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long\
    \ ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n    long aaaa\
    \ = 0;\n    long b", "{\n    long result = 0;\n    long start = 1;\n    long end\
    \ = 1;\n    for (long i = 0; i < n; i++) {\n        start *= 10;\n        end\
    \ *= 10;\n    }\n    end -= 1;\n    for (long i = start; i <= end; i++) {\n  \
    \      if (i % 10 == 1 || i / 10 == 1) {\n            result++;\n        }\n \
    \   }\n    return result;\n}", "{\n    long res = 0;\n    for (long i = 1; i <=\
    \ n; i++) \n    {\n        res += pow(10, i - 1);\n    }\n    return res;\n}",
  "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n    for (long\
    \ i = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    end\
    \ += 1;\n    result = end - start;\n    return result;\n}", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac\
    \ = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n\
    \    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long\
    \ al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap =\
    \ 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n\
    \    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long\
    \ ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc =\
    \ 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n\
    \    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long\
    \ bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp =\
    \ 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n\
    \    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx =", "{\n  \
    \  long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long i =\
    \ 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    start\
    \ /= 10;\n    end -= 1;\n    count = end - start + 1;\n    return count;\n}",
  "{\n    if (n == 1)\n        return 2;\n    else\n        return pow(10, n - 1)\
    \ + pow(10, n - 2);\n}", "{\n    long result = 0;\n    if (n == 1)\n        return\
    \ 1;\n    else if (n == 2)\n        return 10;\n    else\n    {\n        result\
    \ = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n        return result;\n\
    \    }\n}", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n\
    \    for (long i = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n\
    \    }\n    for (long i = start; i < end; i++) {\n        if (i % 10 == 1 || i\
    \ / 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}",
  "{\n    long result = 0;\n    if (n == 1)\n        return 1;\n    if (n == 2)\n\
    \        return 10;\n    if (n == 3)\n        return 100;\n    if (n == 4)\n \
    \       return 1000;\n    if (n == 5)\n        return 10000;\n    if (n == 6)\n\
    \        return 100000;\n    if (n == 7)\n        return 1000000;\n    if (n ==\
    \ 8)\n        return 10000000;\n    if (n == 9)\n        return 100000000;\n \
    \   if (n == 10)\n        return 1000000000;\n    if (n == 11)\n        return\
    \ 10000000000;\n    if (n == 12)\n        return 100000000000;\n    if (n == 13)\n\
    \        return 1000000000000;\n    if (n == 14)\n        return 10000000000000;\n\
    \    if (n == 15)\n        return 100000000000000;\n    if (n == 16)\n       \
    \ return 1000000000000000;\n    if (n == 17)\n        return 10000000000000000;\n\
    \    if (n == 18)\n        return 100000000000000000;\n    if (n == 19)\n    \
    \    return 1000000000000000000;\n    if (n == 20)\n        return 10000000000000000000;\n\
    \    if (n == 21)\n        return 100000000000000000000;\n    if (n == 22)\n \
    \       return 1000000000000000000000;\n    if (n == 23)\n        return 10000000000000000000000;\n\
    \    if (n == 24)\n        return 100000000000000000000000;\n    if (n == 25)\n\
    \        return 1000000000000000000000000;\n    if (n == 26)\n        return 10000000000000000000000000;\n\
    \    if (n == 27)\n        return 100000000000000000000000000;\n    if (n == 28)\n\
    \        return 1000000000000000000000000000;\n    if (n == 29)\n        return\
    \ 10000000000000000000000000000;\n    if (n == 30)\n        return 100000000000000000000000000000;\n\
    \    if (n == 31)\n        return 1000000000000000000000000000000;\n    if (n\
    \ == 32)\n        return 10000000000000000000000000000000;\n    if (n == 33)\n\
    \        return 100000000000000000000000000000000;\n    if (n == 34)\n       \
    \ return 1000000000000000000000000000000000;\n   ", "{\n    long count = 0;\n\
    \    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n\
    \        start *= 10;\n        end *= 10;\n    }\n    end += 1;\n    for (long\
    \ i = start; i < end; i++) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long count = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    for (long i = start; i < end; i++) {\n \
    \       if (i % 10 == 1 || i / start == 1) {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    if (n == 1)\n   \
    \     return 1;\n    else if (n == 2)\n        return 10;\n    else\n    {\n \
    \       result = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n        return\
    \ result;\n    }\n}", "{\n    long result = 0;\n    long max = pow(10, n);\n \
    \   for (long i = 1; i < max; i++) \n    {\n        if (i % 10 == 1) \n      \
    \  {\n            result++;\n        }\n        if (i / 10 == 1) \n        {\n\
    \            result++;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    if (n == 1) \n    {\n        result = 1;\n    } \n    else\
    \ \n    {\n        long m = n / 2;\n        if (n % 2 == 0) \n        {\n    \
    \        result = pow(10, m - 1) * 9;\n        } \n        else \n        {\n\
    \            result = pow(10, m - 1) * 9 * 2;\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long\
    \ c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n\
    \    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long\
    \ ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr =\
    \ 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n\
    \    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long\
    \ aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee =\
    \ 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n\
    \    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n\
    \    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n\
    \    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n\
    \    long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n    long aaaa = 0;\n\
    \    long b", "{\n    long result = 0;\n    for (long i = 1; i <= n; i++) \n \
    \   {\n        result += pow(10, i - 1);\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i\
    \ = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    start\
    \ /= 10;\n    end -= 1;\n    result = end - start + 1;\n    return result;\n}",
  "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long i\
    \ = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    for\
    \ (long i = start; i < end; i++) {\n        if (i % 10 == 1 || i / start == 1)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i\
    \ < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n\
    \    end -= 1;\n    result = end - start + 1;\n    return result;\n}", "{\n  \
    \  if (n == 1)\n        return 1;\n    else\n        return starts_one_ends(n\
    \ - 1) + pow(10, n - 1);\n}", "{\n    long count = 0;\n    long start = 1;\n \
    \   long end = 1;\n    long i = 0;\n    while (i < n) \n    {\n        count +=\
    \ start + end;\n        start *= 10;\n        end *= 10;\n        ++i;\n    }\n\
    \    return count;\n}", "{\n    long count = 0;\n    long start = 1;\n    long\
    \ end = 1;\n    for (long i = 0; i < n; i++) {\n        start *= 10;\n       \
    \ end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    count = end - start\
    \ + 1;\n    return count;\n}", "{\n    if (n == 1)\n        return 2;\n    else\n\
    \        return (pow(10, n - 1) + pow(10, n - 2));\n}", "{\n    long count = 0;\n\
    \    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++) \n \
    \   {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n   \
    \ end -= 1;\n    for (long i = start; i <= end; i++) \n    {\n        if (i %\
    \ 10 == 1 || i / 10 == 1) \n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    long result = 0;\n    long start = 1;\n    long\
    \ end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n       \
    \ end *= 10;\n    }\n    end += 1;\n    result = end - start;\n    return result;\n\
    }", "{\n    if (n == 1) \n        return 2;\n    else if (n == 2) \n        return\
    \ 4;\n    else \n        return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n\
    }", "{\n    long result = 0;\n    long max = pow(10, n);\n    for (long i = 1;\
    \ i < max; i++) \n    {\n        auto s = to!string(i);\n        if (s[0] == '1'\
    \ || s[$-1] == '1') \n        {\n            result++;\n        }\n    }\n   \
    \ return result;\n}", "{\n    long result = 0;\n    long start = 1;\n    long\
    \ end = 1;\n    for (long i = 0; i < n; i++) {\n        start *= 10;\n       \
    \ end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    result = end - start\
    \ + 1;\n    return result;\n}", "{\n    long result = 0;\n    long start = pow(10,\
    \ n - 1);\n    long end = pow(10, n);\n    foreach (i; start .. end) {\n     \
    \   if (i % 10 == 1 || i / 10 == 1) {\n            result++;\n        }\n    }\n\
    \    return result;\n}", "{\n    if (n == 1)\n        return 2;\n    else if (n\
    \ == 2)\n        return 4;\n    else\n        return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2);\n}", "{\n    long result = 0;\n    long max = pow(10,\
    \ n);\n    long min = pow(10, n - 1);\n    foreach(i; min .. max) {\n        string\
    \ s = to!string(i);\n        if (s[0] == '1' || s[$ - 1] == '1') {\n         \
    \   result++;\n        }\n    }\n    return result;\n}", "{\n    long result =\
    \ 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n    end\
    \ /= 10;\n    for (long i = start; i < end; i++) {\n        if (i % 10 == 1 ||\
    \ i / 10 == 1) {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    if (n == 1)\n        return 2;\n    if (n == 2)\n        return 3;\n\
    \    return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}", "{\n    long\
    \ count = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n   \
    \ long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v =\
    \ 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n   \
    \ long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz", "{\n\
    \    long result = 0;\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n\
    \        return 10;\n    else\n    {\n        result = starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2);\n        return result;\n    }\n}", "{\n    long count\
    \ = 0;\n    long start = pow(10, n - 1);\n    long end = pow(10, n) - 1;\n   \
    \ for (long i = start; i <= end; i++) {\n        auto s = to!string(i);\n    \
    \    if (s[0] == '1' || s[$ - 1] == '1') {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    end += 1;\n    result = end - start;\n    return\
    \ result;\n}", "{\n    long result = 0;\n    if (n == 1)\n        return 1;\n\
    \    else if (n == 2)\n        return 10;\n    else if (n == 3)\n        return\
    \ 100;\n    else if (n == 4)\n        return 1000;\n    else if (n == 5)\n   \
    \     return 10000;\n    else if (n == 6)\n        return 100000;\n    else if\
    \ (n == 7)\n        return 1000000;\n    else if (n == 8)\n        return 10000000;\n\
    \    else if (n == 9)\n        return 100000000;\n    else if (n == 10)\n    \
    \    return 1000000000;\n    else if (n == 11)\n        return 10000000000;\n\
    \    else if (n == 12)\n        return 100000000000;\n    else if (n == 13)\n\
    \        return 1000000000000;\n    else if (n == 14)\n        return 10000000000000;\n\
    \    else if (n == 15)\n        return 100000000000000;\n    else if (n == 16)\n\
    \        return 1000000000000000;\n    else if (n == 17)\n        return 10000000000000000;\n\
    \    else if (n == 18)\n        return 100000000000000000;\n    else if (n ==\
    \ 19)\n        return 1000000000000000000;\n    else if (n == 20)\n        return\
    \ 10000000000000000000;\n    else if (n == 21)\n        return 100000000000000000000;\n\
    \    else if (n == 22)\n        return 1000000000000000000000;\n    else if (n\
    \ == 23)\n        return 10000000000000000000000;\n    else if (n == 24)\n   \
    \     return 100000000000000000000000;\n    else if (n == 25)\n        return\
    \ 1000000000000000000000000;\n    else if (n == 26)\n        return 10000000000000000000000000;\n\
    \    else if (n == 27)\n        return 100000000000000000000000000;\n    else\
    \ if (n == 28)\n        return 1000000000000000000000000000;\n    else if (n ==\
    \ 29)\n        return 10000000000000000000000000000;\n    else if (n == 30)\n\
    \        return 100000000000000000000000000000;\n    else if (n == 31)\n     \
    \   return 1000000000000000000000000000000;\n    else if (n == 32)\n        return\
    \ 10000000000000000000000000000000;\n    else", "{\n    if (n == 1)\n        return\
    \ 1;\n    else\n        return starts_one_ends(n - 1) + pow(10, n - 1);\n}", "{\n\
    \    long result = 0;\n    long max_number = pow(10, n);\n    foreach(i; 1 ..\
    \ max_number)\n    {\n        if(i % 10 == 1)\n        {\n            result++;\n\
    \        }\n        if(i / 10 == 1)\n        {\n            result++;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long count = 0;\n    long start =\
    \ 1;\n    long end = 1;\n    for (long i = 1; i <= n; i++) {\n        start *=\
    \ 10;\n        end = end * 10 + 1;\n    }\n    count = end - start;\n    return\
    \ count;\n}", "{\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n \
    \       return 10;\n    else\n    {\n        long result = 0;\n        foreach\
    \ (i; 1 .. n)\n        {\n            result += pow(10, i - 1);\n        }\n \
    \       return result;\n    }\n}", "{\n    long count = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    count += start;\n    count += end;\n    count\
    \ += (start - 1) * (n - 2) * 9;\n    return count;\n}", "{\n    if (n == 1)\n\
    \        return 1;\n    else\n        return (long)pow(10, n - 1) + starts_one_ends(n\
    \ - 1);\n}", "{\n    long result = 0;\n    if (n == 1)\n        return 1;\n  \
    \  else if (n == 2)\n        return 10;\n    else\n    {\n        long start =\
    \ pow(10, n - 1);\n        long end = pow(10, n - 2);\n        result = start\
    \ + end;\n        return result;\n    }\n}", "{\n    long count = 0;\n    long\
    \ start = pow(10, n - 1);\n    long end = pow(10, n);\n    foreach(i; start ..\
    \ end) {\n        if (i % 10 == 1 || i / 10 == 1) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}", "{\n    if (n == 1) return 1;\n    if\
    \ (n == 2) return 2;\n    if (n == 3) return 4;\n    if (n == 4) return 8;\n \
    \   if (n == 5) return 16;\n    if (n == 6) return 32;\n    if (n == 7) return\
    \ 64;\n    if (n == 8) return 128;\n    if (n == 9) return 256;\n    if (n ==\
    \ 10) return 512;\n    if (n == 11) return 1024;\n    if (n == 12) return 2048;\n\
    \    if (n == 13) return 4096;\n    if (n == 14) return 8192;\n    if (n == 15)\
    \ return 16384;\n    if (n == 16) return 32768;\n    if (n == 17) return 65536;\n\
    \    if (n == 18) return 131072;\n    if (n == 19) return 262144;\n    if (n ==\
    \ 20) return 524288;\n    if (n == 21) return 1048576;\n    if (n == 22) return\
    \ 2097152;\n    if (n == 23) return 4194304;\n    if (n == 24) return 8388608;\n\
    \    if (n == 25) return 16777216;\n    if (n == 26) return 33554432;\n    if\
    \ (n == 27) return 67108864;\n    if (n == 28) return 134217728;\n    if (n ==\
    \ 29) return 268435456;\n    if (n == 30) return 536870912;\n    if (n == 31)\
    \ return 1073741824;\n    if (n == 32) return 2147483648;\n    if (n == 33) return\
    \ 4294967296;\n    if (n == 34) return 8589934592;\n    if (n == 35) return 17179869184;\n\
    \    if (n == 36) return 34359738368;\n    if (n == 37) return 68719476736;\n\
    \    if (n == 38) return 137438953472;\n    if (n == 39) return 274877906944;\n\
    \    if (n == 40) return", "{\n    long count = 0;\n    if (n == 1)\n        return\
    \ 1;\n    else if (n == 2)\n        return 10;\n    else\n    {\n        count\
    \ = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n        return count;\n\
    \    }\n}", "{\n    long count = 0;\n    long max = pow(10, n);\n    long min\
    \ = pow(10, n - 1);\n    for (long i = min; i < max; i++) {\n        if (i % 10\
    \ == 1 || i / 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    if (n == 1)\n        return 2;\n    else\n        return starts_one_ends(n\
    \ - 1) + pow(10, n - 1);\n}", "{\n    if (n == 1)\n        return 2;\n    else\
    \ \n    {\n        long r = starts_one_ends(n - 1);\n        return r + (long)pow(10,\
    \ n - 1);\n    }\n}", "{\n    long count = 0;\n    long start = 1;\n    long end\
    \ = 1;\n    for (long i = 0; i < n; i++) {\n        start *= 10;\n        end\
    \ *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    count = end - start + 1;\n\
    \    return count;\n}", "{\n    long result = 0;\n    for (long i = 1; i <= n;\
    \ i++) \n    {\n        result += pow(10, i - 1);\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    long max = pow(10, n);\n    long min = pow(10,\
    \ n - 1);\n    for (long i = min; i < max; i++) {\n        string s = to!string(i);\n\
    \        if (s[0] == '1' || s[$ - 1] == '1') {\n            count++;\n       \
    \ }\n    }\n    return count;\n}", "{\n    long result = 0;\n    long i = 1;\n\
    \    while (i <= n) {\n        result += (long)pow(10, i - 1);\n        i++;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    result += start;\n    result += end;\n    result\
    \ += (start - 1) * (n - 1);\n    return result;\n}", "{\n    long ret = 0;\n \
    \   long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m\
    \ = 0;\n    long nn = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long\
    \ ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii =\
    \ 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n\
    \    long nnn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n   \
    \ long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long\
    \ vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz =\
    \ 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd =\
    \ 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh =\
    \ 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll =\
    \ 0;\n    long mmm = 0;\n    long nnnn = 0;\n    long ooo = 0;\n    long ppp =\
    \ 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt =\
    \ 0;\n    long uuu = 0;\n    long vvv = 0;\n", "{\n    long result = 0;\n    if\
    \ (n == 1)\n        return 1;\n    else if (n == 2)\n        return 10;\n    else\n\
    \    {\n        result = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n  \
    \      return result;\n    }\n}", "{\n    long result = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    result += start;\n    result += end;\n    result\
    \ += (start - 1) * (end - 1);\n    return result;\n}", "{\n    long count = 0;\n\
    \    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++) {\n\
    \        start *= 10;\n        end *= 10;\n    }\n    end += 1;\n    for (long\
    \ i = start; i < end; i++) {\n        if (i % 10 == 1 || i / 10 == 1) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return\
    \ 10;\n    else if (n == 3)\n        return 100;\n    else\n    {\n        count\
    \ = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n        return count;\n\
    \    }\n}", "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n\
    \    for (long i = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n\
    \    }\n    start /= 10;\n    end--;\n    result = end - start + 1;\n    return\
    \ result;\n}", "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n\
    \    for (int i = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n\
    \    }\n    result += start;\n    result += end;\n    result += (n - 2) * 9 *\
    \ start;\n    return result;\n}", "{\n    long result = 0;\n    long max = pow(10,\
    \ n);\n    long min = pow(10, n - 1);\n    foreach(i; min .. max)\n    {\n   \
    \     string s = to!string(i);\n        if(s[0] == '1' || s[$ - 1] == '1')\n \
    \           result++;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    long max = pow(10, n);\n    for (long i = 1; i < max; i++) {\n        if\
    \ (i % 10 == 1) {\n            result++;\n        }\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long\
    \ i = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    for\
    \ (long i = start; i < end * 10; i++) {\n        if (i % 10 == 1 || i / start\
    \ == 1) {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    if (n == 1)\n        return 1;\n    else\n        return (long)pow(10, n\
    \ - 1) + starts_one_ends(n - 1);\n}", "{\n    /*\n        The number of n-digit\
    \ positive integers that start or end with 1 is\n        the sum of the number\
    \ of n-digit positive integers that start with 1\n        and the number of n-digit\
    \ positive integers that end with 1.\n        \n        The number of n-digit\
    \ positive integers that start with 1 is the\n        number of n-digit positive\
    \ integers that end with 1.\n        \n        The number of n-digit positive\
    \ integers that end with 1 is the number\n        of (n-1)-digit positive integers.\n\
    \        \n        The number of (n-1)-digit positive integers is 10^(n-1).\n\
    \        \n        Therefore, the number of n-digit positive integers that start\
    \ or end\n        with 1 is 2 * 10^(n-1).\n    */\n    return 2 * pow(10, n -\
    \ 1);\n}", "{\n    long result = 0;\n    long max = pow(10, n);\n    foreach(i;\
    \ 1 .. max) {\n        if (i % 10 == 1 || i / pow(10, n - 1) == 1) {\n       \
    \     result++;\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n    end\
    \ -= 1;\n    result = end - start + 1;\n    return result;\n}", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n    end\
    \ -= 1;\n    count = end - start + 1;\n    return count;\n}", "{\n    if (n ==\
    \ 1)\n        return 2;\n    else if (n == 2)\n        return 3;\n    else\n \
    \       return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}", "{\n    long\
    \ result = 0;\n    long pow = pow(10, n - 1);\n    for (long i = 1; i < 10; i++)\
    \ \n    {\n        result += pow;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i\
    \ < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n\
    \    end -= 1;\n    result = end - start + 1;\n    return result;\n}", "{\n  \
    \  long result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i =\
    \ 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    start\
    \ /= 10;\n    end -= 1;\n    result = end - start + 1;\n    return result;\n}",
  "{\n    if (n == 1)\n        return 2;\n    else\n        return starts_one_ends(n\
    \ - 1) + (pow(10, n - 1) - pow(10, n - 2));\n}", "{\n    long result = 0;\n  \
    \  long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n  \
    \      start *= 10;\n        end *= 10;\n    }\n    end += 1;\n    result = (end\
    \ - start) * n;\n    return result;\n}", "{\n    long count = 0;\n    long max\
    \ = pow(10, n);\n    long min = pow(10, n - 1);\n    foreach(i; min .. max) {\n\
    \        if (i % 10 == 1 || i / 10 == 1) {\n            count++;\n        }\n\
    \    }\n    return count;\n}", "{\n    long result = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    result += start;\n    result += end;\n    result\
    \ += (start - 1) * (n - 1);\n    return result;\n}", "{\n    if (n == 1) \n  \
    \      return 2;\n    else \n        return (pow(10, n) - pow(9, n) - pow(10,\
    \ n - 1) + pow(8, n - 1)) / 9;\n}", "{\n    if (n == 1)\n        return 2;\n \
    \   else\n        return (pow(10, n - 1) - pow(10, n - 2)) * 2;\n}", "{\n    long\
    \ result = 0;\n    long start = 1;\n    long end = 1;\n    foreach(i; 0 .. n)\n\
    \    {\n        result += start * end;\n        start *= 10;\n        end = end\
    \ * 10 + 1;\n    }\n    return result;\n}", "{\n    long result = 0;\n    if (n\
    \ == 1)\n        return 1;\n    else if (n == 2)\n        return 10;\n    else\n\
    \    {\n        result = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n  \
    \      return result;\n    }\n}", "{\n    long result = 0;\n    long max = pow(10,\
    \ n);\n    long min = pow(10, n - 1);\n    foreach(i; min .. max)\n    {\n   \
    \     string s = to!string(i);\n        if(s[0] == '1' || s[$ - 1] == '1')\n \
    \           result++;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    long start = 1;\n    long end = 1;\n    long i = 0;\n    while (i < n) {\n\
    \        start *= 10;\n        end *= 10;\n        i++;\n    }\n    start /= 10;\n\
    \    end -= 1;\n    result = end - start + 1;\n    return result;\n}", "{\n  \
    \  long count = 0;\n    long max = pow(10, n);\n    for (long i = 1; i < max;\
    \ i++) \n    {\n        if (i % 10 == 1) \n        {\n            count++;\n \
    \       }\n        if (i / 10 == 1) \n        {\n            count++;\n      \
    \  }\n    }\n    return count;\n}", "{\n    if (n == 1)\n        return 1;\n \
    \   else\n        return (n - 1) * pow(10, n - 2) + starts_one_ends(n - 1);\n}",
  "{\n    long count = 0;\n    long max = pow(10, n);\n    for (long i = 1; i < max;\
    \ i++) {\n        if (i % 10 == 1) {\n            count++;\n        }\n    }\n\
    \    return count;\n}", "{\n    if (n == 1)\n        return 2;\n    else if (n\
    \ == 2)\n        return 3;\n    else\n        return starts_one_ends(n - 1) +\
    \ starts_one_ends(n - 2);\n}", "{\n    long res = 0;\n    long max = pow(10, n);\n\
    \    for (long i = 1; i < max; i++) {\n        if (i % 10 == 1) {\n          \
    \  res++;\n        }\n    }\n    return res;\n}", "{\n    long result = 0;\n \
    \   if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 10;\n\
    \    else\n    {\n        result = starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n        return result;\n    }\n}", "{\n    if (n == 1)\n        return\
    \ 2;\n    else if (n == 2)\n        return 3;\n    else\n        return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}", "{\n    long result = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    end -= 1;\n    result = end - start + 1;\n\
    \    return result;\n}", "{\n    long count = 0;\n    long start = 1;\n    long\
    \ end = 1;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long m = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long w = 0;\n    long\
    \ v = 0;\n    long u = 0;\n    long t = 0;\n    long s = 0;\n    long r = 0;\n\
    \    long q = 0;\n    long p = 0;\n    long o = 0;\n    long l = 0;\n    long\
    \ h = 0;\n    long g = 0;\n    long f = 0;\n    long e = 0;\n    long d = 0;\n\
    \    long c = 0;\n    long b = 0;\n    long a = 0;\n    long N = 0;\n    long\
    \ M = 0;\n    long L = 0;\n    long K = 0;\n    long J = 0;\n    long I = 0;\n\
    \    long H = 0;\n    long G = 0;\n    long F = 0;\n    long E = 0;\n    long\
    \ D = 0;\n    long C = 0;\n    long B = 0;\n    long A = 0;\n    long Z = 0;\n\
    \    long Y = 0;\n    long X = 0;\n    long W = 0;\n    long V = 0;\n    long\
    \ U = 0;\n    long T = 0;\n    long S = 0;\n    long R = 0;\n    long Q = 0;\n\
    \    long P = 0;\n    long O = 0;\n    long[] arr = new long[n];\n    long[] arr2\
    \ = new long[n];\n    long[] arr3 = new long[n];\n    long[] arr4 = new long[n];\n\
    \    long[] arr5 = new long[n];\n    long[] arr6 = new long[n];\n    long[] arr7\
    \ = new long[n];\n    long[] arr8 = new long[n];\n    long[] arr9 = new long[n];\n\
    \    long[] arr10 = new long[n];\n    long[] arr11 = new long[n];\n", "{\n   \
    \ long result = 0;\n    long start = 1;\n    long end = 1;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\
    \ 0", "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n_digits = 0;\n    long n_digits_end = 0;\n    long n_digits_start =\
    \ 0;\n    long n_digits_start_end = 0;\n    long n_digits_start_end_start = 0;\n\
    \    long n_digits_start_end_end = 0;\n    long n_digits_start_end_start_end =\
    \ 0;\n    long n_digits_start_end_start_end_start = 0;\n    long n_digits_start_end_start_end_end\
    \ = 0;\n    long n_digits_start_end_start_end_start_end = 0;\n    long n_digits_start_end_start_end_start_end_start\
    \ = 0;\n    long n_digits_start_end_start_end_start_end_end = 0;\n    long n_digits_start_end_start_end_start_end_start_end\
    \ = 0;\n    long n_digits_start_end_start_end_start_end_start_end_start = 0;\n\
    \    long n_digits_start_end_start_end_start_end_start_end_end = 0;\n    long\
    \ n_digits_start_end_start_end_start_end_start_end_start_end = 0;\n    long n_digits_start_end_start_end_start_end_start_end_start_end_start\
    \ = 0;\n    long n_digits_start_end_start_end_start_end_start_end_start_end_end\
    \ = 0;\n    long n_digits_start_end_start_end_start_end_start_end_start_end_start_end\
    \ = 0;\n    long n_digits_start_end_start_end_start_end_start_end_start_end_start_end_start\
    \ = 0;", "{\n    if (n == 1)\n        return 1;\n    else\n        return starts_one_ends(n\
    \ - 1) + pow(10, n - 1);\n}", "{\n    long count = 0;\n    long max = pow(10,\
    \ n);\n    foreach(i; 1 .. max) {\n        if (i % 10 == 1 || i / pow(10, n -\
    \ 1) == 1) {\n            count++;\n        }\n    }\n    return count;\n}", "{\n\
    \    long res = 0;\n    long start = 1;\n    long end = 1;\n    for (long i =\
    \ 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    res +=\
    \ start;\n    res += end;\n    res += (start - 1) * 9;\n    return res;\n}", "{\n\
    \    if (n == 1)\n        return 2;\n    else\n        return pow(10, n-1) + pow(10,\
    \ n-2);\n}", "{\n    if (n == 1)\n        return 1;\n    else\n        return\
    \ starts_one_ends(n - 1) + (long)pow(10, n - 1);\n}", "{\n    long result = 0;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n\
    \    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long\
    \ af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj =\
    \ 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n\
    \    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long\
    \ as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw =\
    \ 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n\
    \    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long\
    \ bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj =\
    \ 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n\
    \    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long\
    \ bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw =\
    \ 0;\n    long bx = 0;\n    long by = 0;\n    long bz", "{\n    if (n == 1)\n\
    \        return 2;\n    else\n        return (starts_one_ends(n - 1) + pow(10,\
    \ n - 1));\n}", "{\n    if (n == 1)\n        return 2;\n    else\n        return\
    \ (long)pow(10, n - 1) + 9 * (n - 1) * (long)pow(10, n - 2);\n}", "{\n    long\
    \ result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i\
    \ < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    for (long\
    \ i = start; i < end; i++) {\n        if (i % 10 == 1 || i / start == 1) {\n \
    \           result++;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    long max = pow(10, n);\n    long min = pow(10, n - 1);\n  \
    \  foreach(i; min .. max)\n    {\n        string s = to!string(i);\n        if(s[0]\
    \ == '1' || s[$ - 1] == '1')\n            result++;\n    }\n    return result;\n\
    }", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long\
    \ i = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    for\
    \ (long i = start; i < end; i++) {\n        if (i % 10 == 1 || i / 10 == 1) {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    end += 1;\n    for (long\
    \ i = start; i < end; i++) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}", "{\n    long result = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n_digits = 0;\n    long start = 0;\n    long end = 0;\n    long start_end\
    \ = 0;\n    long start_start = 0;\n    long end_end = 0;\n    long end_start =\
    \ 0;\n    long start_end_start = 0;\n    long start_start_end = 0;\n    long end_end_start\
    \ = 0;\n    long end_start_end = 0;\n    long start_end_start_end = 0;\n    long\
    \ start_start_end_end = 0;\n    long end_end_start_end = 0;\n    long end_start_end_end\
    \ = 0;\n    long start_end_start_end_end = 0;\n    long start_start_end_end_end\
    \ = 0;\n    long end_end_start_end_end = 0;\n    long end_start_end_end_end =\
    \ 0;\n    long start_end_start_end_end_end = 0;\n    long start_start_end_end_end_end\
    \ = 0;\n    long end_end_start_end_end_end = 0;\n    long end_start_end_end_end_end\
    \ = 0;\n    long start_end_start_end_end_end_end = 0;\n    long start_start_end_end_end_end_end\
    \ = 0;\n    long end_end_start_end_end_end_end = 0;\n    long end_start_end_end_end_end_end\
    \ = 0;\n    long start_end_start_end_end_end_end_end = 0;\n    long start_start_end_end_end_end_end_end\
    \ = 0;\n    long end_end_start_end_end_end_end_end = 0;\n    long end_start_end_end_end_end_end_end\
    \ = 0;\n    long start_end_start_end_end_end_end_end_end = 0;\n", "{\n    long\
    \ count = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i <\
    \ n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    end += 1;\n\
    \    for (long i = start; i < end; i++) {\n        if (i % 10 == 1 || i / 10 ==\
    \ 1) {\n            count++;\n        }\n    }\n    return count;\n}", "{\n  \
    \  long result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i =\
    \ 1; i <= n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    start\
    \ /= 10;\n    end -= 1;\n    result = end - start + 1;\n    return result;\n}",
  "{\n    long result = 0;\n    long start = 1;\n    long end = 1;\n    foreach(i;\
    \ 1..n) {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n\
    \    end -= 1;\n    result = end - start + 1;\n    return result;\n}", "{\n  \
    \  long result = 0;\n    long max = pow(10, n);\n    long min = pow(10, n - 1);\n\
    \    foreach(i; min .. max)\n    {\n        if(i % 10 == 1 || i / 10 == 1)\n \
    \       {\n            result++;\n        }\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    long start = 1;\n    long end = 1;\n    long i = 0;\n\
    \    while (i < n) {\n        start *= 10;\n        end *= 10;\n        result\
    \ += start;\n        ++i;\n    }\n    return result + end;\n}", "{\n    if (n\
    \ == 1)\n        return 1;\n    else\n        return starts_one_ends(n - 1) +\
    \ (long)pow(10, n - 1);\n}", "{\n    long count = 0;\n    long start = 1;\n  \
    \  long end = 1;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n\
    \    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long\
    \ v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long\
    \ be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi =\
    \ 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n\
    \    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long\
    \ br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv =\
    \ 0;\n    long bw = 0;\n    long bx =", "{\n    long result = 0;\n    long max\
    \ = pow(10, n);\n    foreach(i; 1 .. max)\n    {\n        if(i % 10 == 1)\n  \
    \          result++;\n        if(i / 10 == 1)\n            result++;\n    }\n\
    \    return result;\n}", "{\n    long count = 0;\n    long max = pow(10, n);\n\
    \    long min = pow(10, n - 1);\n    foreach(i; min .. max) {\n        if (i %\
    \ 10 == 1 || i / 10 == 1) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}", "{\n    long count = 0;\n    long start = 1;\n    long end = 10;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long\
    \ g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n\
    \    long ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long qq = 0;\n    long\
    \ rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv =\
    \ 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n\
    \    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long\
    \ ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n    long aaa\
    \ = 0;\n    long b", "{\n    long result = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n\
    \    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long\
    \ ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak =\
    \ 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n\
    \    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long\
    \ at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax =\
    \ 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n\
    \    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long\
    \ bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk =\
    \ 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n\
    \    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long\
    \ bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx =\
    \ 0;\n    long by =", "{\n    long result = 0;\n    long max = pow(10, n);\n \
    \   for (long i = 1; i < max; i++) \n    {\n        if (i % 10 == 1) \n      \
    \  {\n            result++;\n        }\n        if (i / 10 == 1) \n        {\n\
    \            result++;\n        }\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    long max_num = pow(10, n);\n    foreach(i; 1 .. max_num)\n\
    \    {\n        if(i % 10 == 1 || i / 10 == 1)\n            result++;\n    }\n\
    \    return result;\n}", "{\n    long result = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af =\
    \ 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n\
    \    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long\
    \ ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as =\
    \ 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n\
    \    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long\
    \ bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf =\
    \ 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n\
    \    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long\
    \ bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs =\
    \ 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n\
    \    long bx = 0;\n    long by =", "{\n    if (n == 1)\n        return 2;\n  \
    \  else if (n == 2)\n        return 3;\n    else\n        return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}", "{\n    long result = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n\
    \    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long\
    \ ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak =\
    \ 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n\
    \    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long\
    \ at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax =\
    \ 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n\
    \    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long\
    \ bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk =\
    \ 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n\
    \    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long\
    \ bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx =\
    \ 0;\n    long by = 0;\n    long bz", "{\n    if (n == 1)\n        return 2;\n\
    \    else\n        return (pow(10, n - 1) + pow(10, n - 2));\n}", "{\n    long\
    \ result = 0;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l =\
    \ 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n   \
    \ long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u =\
    \ 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n   \
    \ long z = 1;\n    long aa = 1;\n    long ab = 1;\n    long ac = 1;\n    long\
    \ ad = 1;\n    long ae = 1;\n    long af = 1;\n    long ag = 1;\n    long ah =\
    \ 1;\n    long ai = 1;\n    long aj = 1;\n    long ak = 1;\n    long al = 1;\n\
    \    long am = 1;\n    long an = 1;\n    long ao = 1;\n    long ap = 1;\n    long\
    \ aq = 1;\n    long ar = 1;\n    long as = 1;\n    long at = 1;\n    long au =\
    \ 1;\n    long av = 1;\n    long aw = 1;\n    long ax = 1;\n    long ay = 1;\n\
    \    long az = 1;\n    long ba = 1;\n    long bb = 1;\n    long bc = 1;\n    long\
    \ bd = 1;\n    long be = 1;\n    long bf = 1;\n    long bg = 1;\n    long bh =\
    \ 1;\n    long bi = 1;\n    long bj = 1;\n    long bk = 1;\n    long bl = 1;\n\
    \    long bm = 1;\n    long bn = 1;\n    long bo = 1;\n    long bp = 1;\n    long\
    \ bq = 1;\n    long br = 1;\n    long bs = 1;\n    long bt = 1;\n    long bu =\
    \ 1;\n    long bv = 1;\n    long bw = 1;\n    long bx = 1;\n    long by =", "{\n\
    \    long result = 0;\n    long max = pow(10, n);\n    foreach(i; 1 .. max)\n\
    \    {\n        if (i % 10 == 1)\n            result++;\n        if (i / 10 ==\
    \ 1)\n            result++;\n    }\n    return result;\n}", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    end += 1;\n    for (long\
    \ i = start; i < end; i++) {\n        if (i % 10 == 1 || i / 10 == 1) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d =\
    \ 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n   \
    \ long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long\
    \ mm = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss =\
    \ 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n\
    \    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long\
    \ bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff =\
    \ 0;\n    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ppp = 0;\n\
    \    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n\
    \    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n\
    \    long yyy = 0;\n    long zzz = 0;\n    long aaaa = 0;\n    long b", "{\n \
    \   if (n == 1)\n        return 1;\n    else\n        return starts_one_ends(n\
    \ - 1) + pow(10, n - 1);\n}", "{\n    long count = 0;\n    long start = 1;\n \
    \   long end = 1;\n    for (long i = 0; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    count = end -\
    \ start + 1;\n    return count;\n}", "{\n    long result = 0;\n    long start\
    \ = pow(10, n - 1);\n    long end = pow(10, n);\n    foreach (i; start .. end)\
    \ {\n        if (i % 10 == 1 || i / 10 == 1) {\n            result++;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long result = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n_digits = 0;\n    long n_digits_1 = 0;\n    long n_digits_2 = 0;\n    long\
    \ n_digits_3 = 0;\n    long n_digits_4 = 0;\n    long n_digits_5 = 0;\n    long\
    \ n_digits_6 = 0;\n    long n_digits_7 = 0;\n    long n_digits_8 = 0;\n    long\
    \ n_digits_9 = 0;\n    long n_digits_10 = 0;\n    long n_digits_11 = 0;\n    long\
    \ n_digits_12 = 0;\n    long n_digits_13 = 0;\n    long n_digits_14 = 0;\n   \
    \ long n_digits_15 = 0;\n    long n_digits_16 = 0;\n    long n_digits_17 = 0;\n\
    \    long n_digits_18 = 0;\n    long n_digits_19 = 0;\n    long n_digits_20 =\
    \ 0;\n    long n_digits_21 = 0;\n    long n_digits_22 = 0;\n    long n_digits_23\
    \ = 0;\n    long n_digits_24 = 0;\n    long n_digits_25 = 0;\n    long n_digits_26\
    \ = 0;\n    long n_digits_27 = 0;\n    long n_digits_28 = 0;\n    long n_digits_29\
    \ = 0;\n    long n_digits_30 = 0;\n    long n_digits_31 = 0;\n    long n_digits_32\
    \ = 0;\n    long n_digits_33 = 0;\n    long n_digits_34 = 0;\n    long n_digits_35\
    \ = 0;\n    long n_digits_36 = 0;\n    long n_digits_37 = 0;\n    long n_digits_38\
    \ = 0;\n   ", "{\n    long result = 0;\n    long i = 1;\n    long j = 1;\n   \
    \ long k = 1;\n    long l = 1;\n    long m = 1;\n    long o = 1;\n    long p =\
    \ 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n   \
    \ long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y =\
    \ 1;\n    long z = 1;\n    long aa = 1;\n    long ab = 1;\n    long ac = 1;\n\
    \    long ad = 1;\n    long ae = 1;\n    long af = 1;\n    long ag = 1;\n    long\
    \ ah = 1;\n    long ai = 1;\n    long aj = 1;\n    long ak = 1;\n    long al =\
    \ 1;\n    long am = 1;\n    long an = 1;\n    long ao = 1;\n    long ap = 1;\n\
    \    long aq = 1;\n    long ar = 1;\n    long as = 1;\n    long at = 1;\n    long\
    \ au = 1;\n    long av = 1;\n    long aw = 1;\n    long ax = 1;\n    long ay =\
    \ 1;\n    long az = 1;\n    long ba = 1;\n    long bb = 1;\n    long bc = 1;\n\
    \    long bd = 1;\n    long be = 1;\n    long bf = 1;\n    long bg = 1;\n    long\
    \ bh = 1;\n    long bi = 1;\n    long bj = 1;\n    long bk = 1;\n    long bl =\
    \ 1;\n    long bm = 1;\n    long bn = 1;\n    long bo = 1;\n    long bp = 1;\n\
    \    long bq = 1;\n    long br = 1;\n    long bs = 1;\n    long bt = 1;\n    long\
    \ bu = 1;\n    long bv = 1;\n    long bw = 1;\n    long bx = 1;\n    long by =\
    \ 1;\n    long bz", "{\n    long count = 0;\n    long start = pow(10, n - 1);\n\
    \    long end = pow(10, n);\n    foreach(i; start .. end)\n    {\n        if(i\
    \ % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }", "{\n    long result = 0;\n    if (n == 1)\n        return 1;\n    else if\
    \ (n == 2)\n        return 10;\n    else\n    {\n        result = starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n        return result;\n    }\n}", "{\n    long\
    \ result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i\
    \ < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    result +=\
    \ start - 1;\n    end /= 10;\n    result += end - 1;\n    return result;\n}",
  "{\n    long result = 0;\n    if (n == 1)\n        return 1;\n    else if (n ==\
    \ 2)\n        return 11;\n    else\n    {\n        result = 11;\n        for (long\
    \ i = 3; i <= n; i++)\n        {\n            result += 9 * pow(10, i - 2);\n\
    \        }\n    }\n    return result;\n}", "{\n    long result = 0;\n    if (n\
    \ == 1) \n    {\n        result = 2;\n    }\n    else if (n == 2) \n    {\n  \
    \      result = 3;\n    }\n    else \n    {\n        result = starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n    }\n    return result;\n}", "{\n    if (n\
    \ == 1) \n        return 2;\n    else \n        return (n - 1) * pow(10, n - 2)\
    \ + starts_one_ends(n - 1);\n}", "{\n    long result = 0;\n    long start = 1;\n\
    \    long end = 1;\n    for (long i = 0; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    result = end\
    \ - start + 1;\n    return result;\n}", "{\n    long result = 0;\n    long min\
    \ = 1;\n    long max = 1;\n    long i = 0;\n    while (i < n) {\n        min *=\
    \ 10;\n        max *= 10;\n        ++i;\n    }\n    min += 1;\n    max += 9;\n\
    \    result = max - min + 1;\n    return result;\n}", "{\n    long count = 0;\n\
    \    long start = 1;\n    long end = 1;\n    long i = 0;\n    long j = 0;\n  \
    \  long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p\
    \ = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n \
    \   long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y\
    \ = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long\
    \ bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx =", "{\n    long count\
    \ = 0;\n    long max = pow(10, n);\n    for (long i = 1; i < max; i++) \n    {\n\
    \        if (i % 10 == 1) \n        {\n            count++;\n        }\n     \
    \   if (i / 10 == 1) \n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}", "{\n    long result = 0;\n    long start = 1;\n    long end\
    \ = 1;\n    for (long i = 0; i < n; i++) {\n        start *= 10;\n        end\
    \ *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    result = end - start + 1;\n\
    \    return result;\n}", "{\n    long result = 0;\n    long start = 1;\n    long\
    \ end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n       \
    \ end *= 10;\n    }\n    result += start;\n    result += end;\n    result += (start\
    \ - 1) * 9;\n    return result;\n}", "{\n    long count = 0;\n    long min = pow(10,\
    \ n - 1);\n    long max = pow(10, n);\n    for (long i = min; i < max; i++) {\n\
    \        string s = to!string(i);\n        if (s[0] == '1' || s[$ - 1] == '1')\
    \ {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ result = 0;\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n    \
    \    return 10;\n    else if (n == 3)\n        return 55;\n    else if (n == 4)\n\
    \        return 220;\n    else if (n == 5)\n        return 715;\n    else if (n\
    \ == 6)\n        return 2002;\n    else if (n == 7)\n        return 5005;\n  \
    \  else if (n == 8)\n        return 11440;\n    else if (n == 9)\n        return\
    \ 24310;\n    else if (n == 10)\n        return 48620;\n    else if (n == 11)\n\
    \        return 92378;\n    else if (n == 12)\n        return 167960;\n    else\
    \ if (n == 13)\n        return 293930;\n    else if (n == 14)\n        return\
    \ 497420;\n    else if (n == 15)\n        return 817190;\n    else if (n == 16)\n\
    \        return 1307504;\n    else if (n == 17)\n        return 2042975;\n   \
    \ else if (n == 18)\n        return 3124550;\n    else if (n == 19)\n        return\
    \ 4686825;\n    else if (n == 20)\n        return 6863040;\n    else if (n ==\
    \ 21)\n        return 10015005;\n    else if (n == 22)\n        return 14307150;\n\
    \    else if (n == 23)\n        return 20058300;\n    else if (n == 24)\n    \
    \    return 28171025;\n    else if (n == 25)\n        return 39679650;\n    else\
    \ if (n == 26)\n        return 55679075;\n    else if (n == 27)\n        return\
    \ 77261600;\n    else if (n == 28)\n        return 106700525;\n    else if (n\
    \ == 29)\n        return 148104150;\n    else if (n == 30)\n        return 206253075;\n\
    \    else if (n == 31)\n        return 287330736;\n    else if (n == 32)\n   \
    \     return", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n\
    \    for (long i = 0; i < n; i++) {\n        start *= 10;\n        end = end *\
    \ 10 + 1;\n    }\n    count = end - start;\n    return count;\n}", "{\n    long\
    \ result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i\
    \ < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    end += 1;\n\
    \    result = end - start;\n    return result;\n}", "{\n    long count = 0;\n\
    \    long start = 1;\n    long end = 1;\n    long i = 0;\n    long j = 0;\n  \
    \  long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p\
    \ = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n \
    \   long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y\
    \ = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n\
    \    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long\
    \ ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al =\
    \ 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n\
    \    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long\
    \ au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay =\
    \ 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n\
    \    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long\
    \ bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl =\
    \ 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n\
    \    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long\
    \ bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx =", "{\n    long res\
    \ = 0;\n    if (n == 1) \n    {\n        res = 1;\n    }\n    else \n    {\n \
    \       res = (long)pow(10, n - 1) + 9 * (n - 1) * (long)pow(10, n - 2);\n   \
    \ }\n    return res;\n}", "{\n    if (n <= 1)\n        return 0;\n    else if\
    \ (n == 2)\n        return 1;\n    else\n        return (long)pow(10, n - 1) +\
    \ starts_one_ends(n - 1);\n}", "{\n    long result = 0;\n    long max = pow(10,\
    \ n);\n    for (long i = 1; i < max; i++) {\n        if (i % 10 == 1) {\n    \
    \        result++;\n        }\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    long max = pow(10, n);\n    long min = pow(10, n - 1);\n    foreach(i;\
    \ min .. max) {\n        if(i % 10 == 1 || i / 10 == 1) {\n            result++;\n\
    \        }\n    }\n    return result;\n}", "{\n    long count = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad =\
    \ 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n\
    \    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long\
    \ am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq =\
    \ 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n\
    \    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long\
    \ az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd =\
    \ 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n\
    \    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long\
    \ bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq =\
    \ 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n\
    \    long bv = 0;\n    long bw = 0;\n    long bx =", "{\n    long count = 0;\n\
    \    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++) {\n\
    \        start *= 10;\n        end *= 10;\n    }\n    end += 1;\n    for (long\
    \ i = start; i < end; i++) {\n        if (i % 10 == 1 || i / 10 == 1) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}", "{\n    if (n == 1)\
    \ \n        return 2;\n    if (n == 2) \n        return 4;\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}", "{\n    long count = 0;\n    long start\
    \ = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) \n    {\n        start\
    \ *= 10;\n        end *= 10;\n    }\n    count += start;\n    count += end;\n\
    \    count += (start - 1) * 9;\n    return count;\n}", "{\n    long result = 0;\n\
    \    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return 10;\n\
    \    else if (n == 3)\n        return 100;\n    else if (n == 4)\n        return\
    \ 1000;\n    else if (n == 5)\n        return 10000;\n    else if (n == 6)\n \
    \       return 100000;\n    else if (n == 7)\n        return 1000000;\n    else\
    \ if (n == 8)\n        return 10000000;\n    else if (n == 9)\n        return\
    \ 100000000;\n    else if (n == 10)\n        return 1000000000;\n    else if (n\
    \ == 11)\n        return 10000000000;\n    else if (n == 12)\n        return 100000000000;\n\
    \    else if (n == 13)\n        return 1000000000000;\n    else if (n == 14)\n\
    \        return 10000000000000;\n    else if (n == 15)\n        return 100000000000000;\n\
    \    else if (n == 16)\n        return 1000000000000000;\n    else if (n == 17)\n\
    \        return 10000000000000000;\n    else if (n == 18)\n        return 100000000000000000;\n\
    \    else if (n == 19)\n        return 1000000000000000000;\n    else if (n ==\
    \ 20)\n        return 10000000000000000000;\n    else if (n == 21)\n        return\
    \ 100000000000000000000;\n    else if (n == 22)\n        return 1000000000000000000000;\n\
    \    else if (n == 23)\n        return 10000000000000000000000;\n    else if (n\
    \ == 24)\n        return 100000000000000000000000;\n    else if (n == 25)\n  \
    \      return 1000000000000000000000000;\n    else if (n == 26)\n        return\
    \ 10000000000000000000000000;\n    else if (n == 27)\n        return 100000000000000000000000000;\n\
    \    else if (n == 28)\n        return 1000000000000000000000000000;\n    else\
    \ if (n == 29)\n        return 10000000000000000000000000000;\n    else if (n\
    \ == 30)\n        return 100000000000000000000000000000;\n    else if (n == 31)\n\
    \        return 1000000000000000000000000000000;\n    else if (n == 32)\n    \
    \    return 10000000000000000000000000000000;\n    else", "{\n    long count =\
    \ 0;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n   \
    \ long m = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long aa\
    \ = 1;\n    long ab = 1;\n    long ac = 1;\n    long ad = 1;\n    long ae = 1;\n\
    \    long af = 1;\n    long ag = 1;\n    long ah = 1;\n    long ai = 1;\n    long\
    \ aj = 1;\n    long ak = 1;\n    long al = 1;\n    long am = 1;\n    long an =\
    \ 1;\n    long ao = 1;\n    long ap = 1;\n    long aq = 1;\n    long ar = 1;\n\
    \    long as = 1;\n    long at = 1;\n    long au = 1;\n    long av = 1;\n    long\
    \ aw = 1;\n    long ax = 1;\n    long ay = 1;\n    long az = 1;\n    long ba =\
    \ 1;\n    long bb = 1;\n    long bc = 1;\n    long bd = 1;\n    long be = 1;\n\
    \    long bf = 1;\n    long bg = 1;\n    long bh = 1;\n    long bi = 1;\n    long\
    \ bj = 1;\n    long bk = 1;\n    long bl = 1;\n    long bm = 1;\n    long bn =\
    \ 1;\n    long bo = 1;\n    long bp = 1;\n    long bq = 1;\n    long br = 1;\n\
    \    long bs = 1;\n    long bt = 1;\n    long bu = 1;\n    long bv = 1;\n    long\
    \ bw = 1;\n    long bx = 1;\n    long by = 1;\n    long bz", "{\n    long result\
    \ = 0;\n    long i = 1;\n    while (i <= n) \n    {\n        result += pow(10,\
    \ i - 1);\n        i++;\n    }\n    return result;\n}", "{\n    long result =\
    \ 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    result += start;\n \
    \   result += end;\n    result += (start - 1) * (n - 1);\n    return result;\n\
    }", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af =\
    \ 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n\
    \    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long\
    \ ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as =\
    \ 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n\
    \    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long\
    \ bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf =\
    \ 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n\
    \    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long\
    \ bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs =\
    \ 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n\
    \    long bx =", "{\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n\
    \        count += pow(10, i - 1);\n    }\n    return count;\n}", "{\n    long\
    \ result = 0;\n    long limit = pow(10, n);\n    foreach(i; 1 .. limit)\n    {\n\
    \        if(i % 10 == 1)\n            result++;\n        if(i / 10 == 1)\n   \
    \         result++;\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n\
    \        start *= 10;\n        end *= 10;\n    }\n    result += start;\n    result\
    \ += end;\n    result += (start - 1) * (n - 1);\n    return result;\n}", "{\n\
    \    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return\
    \ 4;\n    if (n == 4) return 8;\n    if (n == 5) return 16;\n    if (n == 6) return\
    \ 32;\n    if (n == 7) return 64;\n    if (n == 8) return 128;\n    if (n == 9)\
    \ return 256;\n    if (n == 10) return 512;\n    if (n == 11) return 1024;\n \
    \   if (n == 12) return 2048;\n    if (n == 13) return 4096;\n    if (n == 14)\
    \ return 8192;\n    if (n == 15) return 16384;\n    if (n == 16) return 32768;\n\
    \    if (n == 17) return 65536;\n    if (n == 18) return 131072;\n    if (n ==\
    \ 19) return 262144;\n    if (n == 20) return 524288;\n    if (n == 21) return\
    \ 1048576;\n    if (n == 22) return 2097152;\n    if (n == 23) return 4194304;\n\
    \    if (n == 24) return 8388608;\n    if (n == 25) return 16777216;\n    if (n\
    \ == 26) return 33554432;\n    if (n == 27) return 67108864;\n    if (n == 28)\
    \ return 134217728;\n    if (n == 29) return 268435456;\n    if (n == 30) return\
    \ 536870912;\n    if (n == 31) return 1073741824;\n    if (n == 32) return 2147483648;\n\
    \    if (n == 33) return 4294967296;\n    if (n == 34) return 8589934592;\n  \
    \  if (n == 35) return 17179869184;\n    if (n == 36) return 34359738368;\n  \
    \  if (n == 37) return 68719476736;\n    if (n == 38) return 137438953472;\n \
    \   if (n == 39) return 274877906944;\n    if (n == 40) return", "{\n    long\
    \ result = 0;\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n    \
    \    return 10;\n    else\n    {\n        result = starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n        return result;\n    }\n}", "{\n    long result = 0;\n    if (n\
    \ == 1)\n        return 1;\n    else if (n == 2)\n        return 10;\n    else\n\
    \    {\n        result = starts_one_ends(n - 1) + starts_one_ends(n - 2);\n  \
    \      return result;\n    }\n}", "{\n    if (n == 1)\n        return 1;\n   \
    \ else if (n == 2)\n        return 10;\n    else\n    {\n        long result =\
    \ 0;\n        for (long i = 1; i < n; i++)\n        {\n            result += starts_one_ends(i)\
    \ * pow(10, n - i);\n        }\n        result += pow(10, n - 1);\n        return\
    \ result;\n    }\n}", "{\n    long result = 0;\n    long max = pow(10, n);\n \
    \   for (long i = 1; i < max; i++) {\n        string s = to!string(i);\n     \
    \   if (s[0] == '1' || s[$-1] == '1') {\n            result++;\n        }\n  \
    \  }\n    return result;\n}", "{\n    long count = 0;\n    long start = 1;\n \
    \   long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n\
    \        end *= 10;\n    }\n    count += start;\n    count += end;\n    count\
    \ += (start - 1) * (n - 2) * 9;\n    return count;\n}", "{\n    long result =\
    \ 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n    end\
    \ -= 1;\n    result = end - start + 1;\n    return result;\n}", "{\n    long result\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n    end\
    \ -= 1;\n    result = end - start + 1;\n    return result;\n}", "{\n    long result\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n    end\
    \ -= 1;\n    result = end - start + 1;\n    return result;\n}", "{\n    long result\
    \ = 0;\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return\
    \ 10;\n    else if (n == 3)\n        return 100;\n    else if (n == 4)\n     \
    \   return 1000;\n    else if (n == 5)\n        return 10000;\n    else if (n\
    \ == 6)\n        return 100000;\n    else if (n == 7)\n        return 1000000;\n\
    \    else if (n == 8)\n        return 10000000;\n    else if (n == 9)\n      \
    \  return 100000000;\n    else if (n == 10)\n        return 1000000000;\n    else\
    \ if (n == 11)\n        return 10000000000;\n    else if (n == 12)\n        return\
    \ 100000000000;\n    else if (n == 13)\n        return 1000000000000;\n    else\
    \ if (n == 14)\n        return 10000000000000;\n    else if (n == 15)\n      \
    \  return 100000000000000;\n    else if (n == 16)\n        return 1000000000000000;\n\
    \    else if (n == 17)\n        return 10000000000000000;\n    else if (n == 18)\n\
    \        return 100000000000000000;\n    else if (n == 19)\n        return 1000000000000000000;\n\
    \    else if (n == 20)\n        return 10000000000000000000;\n    else if (n ==\
    \ 21)\n        return 100000000000000000000;\n    else if (n == 22)\n        return\
    \ 1000000000000000000000;\n    else if (n == 23)\n        return 10000000000000000000000;\n\
    \    else if (n == 24)\n        return 100000000000000000000000;\n    else if\
    \ (n == 25)\n        return 1000000000000000000000000;\n    else if (n == 26)\n\
    \        return 10000000000000000000000000;\n    else if (n == 27)\n        return\
    \ 100000000000000000000000000;\n    else if (n == 28)\n        return 1000000000000000000000000000;\n\
    \    else if (n == 29)\n        return 10000000000000000000000000000;\n    else\
    \ if (n == 30)\n        return 100000000000000000000000000000;\n    else if (n\
    \ == 31)\n        return 1000000000000000000000000000000;\n    else if (n == 32)\n\
    \        return 10000000000000000000000000000000;\n    else", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n    end\
    \ -= 1;\n    count = end - start + 1;\n    return count;\n}", "{\n    long count\
    \ = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i < n; i++)\
    \ {\n        start *= 10;\n        end *= 10;\n    }\n    count += start;\n  \
    \  count += end;\n    count += (start - 1) * (n - 2) * 9;\n    return count;\n\
    }", "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long\
    \ i = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    end\
    \ += 1;\n    for (long i = start; i < end; i++) {\n        if (i % 10 == 1) {\n\
    \            count++;\n        }\n    }\n    return count;\n}", "{\n    long result\
    \ = 0;\n    if (n == 1)\n        return 1;\n    else if (n == 2)\n        return\
    \ 10;\n    else if (n == 3)\n        return 100;\n    else if (n == 4)\n     \
    \   return 1000;\n    else if (n == 5)\n        return 10000;\n    else if (n\
    \ == 6)\n        return 100000;\n    else if (n == 7)\n        return 1000000;\n\
    \    else if (n == 8)\n        return 10000000;\n    else if (n == 9)\n      \
    \  return 100000000;\n    else if (n == 10)\n        return 1000000000;\n    else\
    \ if (n == 11)\n        return 10000000000;\n    else if (n == 12)\n        return\
    \ 100000000000;\n    else if (n == 13)\n        return 1000000000000;\n    else\
    \ if (n == 14)\n        return 10000000000000;\n    else if (n == 15)\n      \
    \  return 100000000000000;\n    else if (n == 16)\n        return 1000000000000000;\n\
    \    else if (n == 17)\n        return 10000000000000000;\n    else if (n == 18)\n\
    \        return 100000000000000000;\n    else if (n == 19)\n        return 1000000000000000000;\n\
    \    else if (n == 20)\n        return 10000000000000000000;\n    else if (n ==\
    \ 21)\n        return 100000000000000000000;\n    else if (n == 22)\n        return\
    \ 1000000000000000000000;\n    else if (n == 23)\n        return 10000000000000000000000;\n\
    \    else if (n == 24)\n        return 100000000000000000000000;\n    else if\
    \ (n == 25)\n        return 1000000000000000000000000;\n    else if (n == 26)\n\
    \        return 10000000000000000000000000;\n    else if (n == 27)\n        return\
    \ 100000000000000000000000000;\n    else if (n == 28)\n        return 1000000000000000000000000000;\n\
    \    else if (n == 29)\n        return 10000000000000000000000000000;\n    else\
    \ if (n == 30)\n        return 100000000000000000000000000000;\n    else if (n\
    \ == 31)\n        return 1000000000000000000000000000000;\n    else if (n == 32)\n\
    \        return 10000000000000000000000000000000;\n    else", "{\n    long count\
    \ = 0;\n    for (long i = 1; i <= n; i++) \n    {\n        count += pow(10, i\
    \ - 1);\n    }\n    return count;\n}", "{\n    if (n == 1) \n        return 2;\n\
    \    if (n == 2) \n        return 3;\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n}", "{\n    if (n == 1) return 2;\n    if (n == 2) return 4;\n    if\
    \ (n == 3) return 6;\n    if (n == 4) return 10;\n    if (n == 5) return 16;\n\
    \    if (n == 6) return 26;\n    if (n == 7) return 42;\n    if (n == 8) return\
    \ 68;\n    if (n == 9) return 110;\n    if (n == 10) return 178;\n    if (n ==\
    \ 11) return 288;\n    if (n == 12) return 466;\n    if (n == 13) return 754;\n\
    \    if (n == 14) return 1220;\n    if (n == 15) return 1974;\n    if (n == 16)\
    \ return 3194;\n    if (n == 17) return 5168;\n    if (n == 18) return 8362;\n\
    \    if (n == 19) return 13530;\n    if (n == 20) return 21892;\n    if (n ==\
    \ 21) return 35422;\n    if (n == 22) return 57314;\n    if (n == 23) return 92736;\n\
    \    if (n == 24) return 150050;\n    if (n == 25) return 242786;\n    if (n ==\
    \ 26) return 392836;\n    if (n == 27) return 635622;\n    if (n == 28) return\
    \ 1028458;\n    if (n == 29) return 1664080;\n    if (n == 30) return 2692538;\n\
    \    if (n == 31) return 4356618;\n    if (n == 32) return 7049156;\n    if (n\
    \ == 33) return 11405774;\n    if (n == 34) return 18454930;\n    if (n == 35)\
    \ return 29860704;\n    if (n == 36) return 48315634;\n    if (n == 37) return\
    \ 78176338;\n    if (n == 38) return 126491971;\n    if (n == 39) return 204668309;\n\
    \    if (n == 40) return 331160280;\n    if (n == 41) return 535828591;\n    if\
    \ (n == 42", "{\n    long count = 0;\n    long max = pow(10, n);\n    long min\
    \ = pow(10, n - 1);\n    foreach(i; min .. max) {\n        if(i % 10 == 1 || i\
    \ / 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}",
  "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long i\
    \ = 0; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    start\
    \ /= 10;\n    end -= 1;\n    count = end - start + 1;\n    return count;\n}",
  "{\n    if (n == 1)\n        return 2;\n    else if (n == 2)\n        return 3;\n\
    \    else\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}",
  "{\n    long count = 0;\n    long start = 1;\n    long end = 1;\n    for (long i\
    \ = 1; i < n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    for\
    \ (long i = start; i < end; i++) {\n        if (i % 10 == 1 || i / start == 1)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}", "{\n    long\
    \ count = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 0; i <\
    \ n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    start /= 10;\n\
    \    end -= 1;\n    count = end - start + 1;\n    return count;\n}", "{\n    if\
    \ (n == 1) return 2;\n    long count = 0;\n    long start = 1;\n    long end =\
    \ 1;\n    for (long i = 1; i < n; i++) {\n        start *= 10;\n        end *=\
    \ 10;\n    }\n    count += start;\n    count += end;\n    count += (start - 1)\
    \ * (n - 1);\n    return count;\n}", "{\n    long count = 0;\n    long start =\
    \ 1;\n    long end = 1;\n    for (long i = 1; i < n; i++) {\n        start *=\
    \ 10;\n        end *= 10;\n    }\n    count += start;\n    count += end;\n   \
    \ count += (start - 1) * (n - 2) * 9;\n    return count;\n}", "{\n    if (n ==\
    \ 1)\n        return 1;\n    else if (n == 2)\n        return 10;\n    else\n\
    \    {\n        long result = 0;\n        for (long i = 1; i < n; i++)\n     \
    \   {\n            result += starts_one_ends(i);\n        }\n        result *=\
    \ 9;\n        result += pow(10, n - 1);\n        return result;\n    }\n}", "{\n\
    \    long result = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n   \
    \ long l = 0;\n    long m = 0;\n    long n_copy = n;\n    long n_copy_copy = n;\n\
    \    long n_copy_copy_copy = n;\n    long n_copy_copy_copy_copy = n;\n    long\
    \ n_copy_copy_copy_copy_copy = n;\n    long n_copy_copy_copy_copy_copy_copy =\
    \ n;\n    long n_copy_copy_copy_copy_copy_copy_copy = n;\n    long n_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = n;\n    long n_copy_copy_copy_copy_copy_copy_copy_copy_copy = n;\n    long\
    \ n_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = n;\n    long n_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = n;\n    long n_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = n;\n    long n_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = n;\n    long n_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = n;\n    long n_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = n;\n    long n_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = n;\n    long n_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = n;\n    long n_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = n;", "{\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n ==\
    \ 3) return 3;\n    if (n == 4) return 4;\n    if (n == 5) return 5;\n    if (n\
    \ == 6) return 6;\n    if (n == 7) return 7;\n    if (n == 8) return 8;\n    if\
    \ (n == 9) return 9;\n    if (n == 10) return 10;\n    if (n == 11) return 11;\n\
    \    if (n == 12) return 12;\n    if (n == 13) return 13;\n    if (n == 14) return\
    \ 14;\n    if (n == 15) return 15;\n    if (n == 16) return 16;\n    if (n ==\
    \ 17) return 17;\n    if (n == 18) return 18;\n    if (n == 19) return 19;\n \
    \   if (n == 20) return 20;\n    if (n == 21) return 21;\n    if (n == 22) return\
    \ 22;\n    if (n == 23) return 23;\n    if (n == 24) return 24;\n    if (n ==\
    \ 25) return 25;\n    if (n == 26) return 26;\n    if (n == 27) return 27;\n \
    \   if (n == 28) return 28;\n    if (n == 29) return 29;\n    if (n == 30) return\
    \ 30;\n    if (n == 31) return 31;\n    if (n == 32) return 32;\n    if (n ==\
    \ 33) return 33;\n    if (n == 34) return 34;\n    if (n == 35) return 35;\n \
    \   if (n == 36) return 36;\n    if (n == 37) return 37;\n    if (n == 38) return\
    \ 38;\n    if (n == 39) return 39;\n    if (n == 40) return 40;\n    if (n ==\
    \ 41) return 41;\n    if (n == 42) return 42;\n    if (n == 43) return 43;\n \
    \   if (n == 44) return 44;\n    if (n == 45) return 45;\n    if (n == 46) return\
    \ 46;\n    if (", "{\n    long result = 0;\n    long start = 1;\n    long end\
    \ = 1;\n    for (long i = 0; i < n; i++) {\n        start *= 10;\n        end\
    \ *= 10;\n    }\n    start /= 10;\n    end -= 1;\n    result = end - start + 1;\n\
    \    return result;\n}", "{\n    if (n == 1)\n        return 2;\n    else\n  \
    \      return (long)pow(10, n - 1) + 9 * (long)pow(10, n - 2);\n}", "{\n    long\
    \ result = 0;\n    long start = 1;\n    long end = 1;\n    for (long i = 1; i\
    \ <= n; i++) {\n        start *= 10;\n        end *= 10;\n    }\n    start /=\
    \ 10;\n    end -= 1;\n    result = end - start + 1;\n    return result;\n}", "{\n\
    \    long count = 0;\n    long max = pow(10, n);\n    long min = pow(10, n - 1);\n\
    \    foreach(i; min .. max)\n    {\n        if(i % 10 == 1 || i / 10 == 1)\n \
    \           count++;\n    }\n    return count;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
