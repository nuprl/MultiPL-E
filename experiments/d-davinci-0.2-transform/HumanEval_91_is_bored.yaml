name: HumanEval_91_is_bored
language: d
prompt: "import std.math;\n/*\n\n    You'll be given a string of words, and your task\
  \ is to count the number\n    of boredoms. A boredom is a sentence that starts with\
  \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
  \ example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky\
  \ is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string\
  \ S) \n"
tests: "unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
  \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
  I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
  I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
  You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
completions: ["{\n    long count = 0;\n    string[] sentences = split(S, \".\");\n\
    \    foreach(string sentence; sentences)\n    {\n        if(sentence.length >\
    \ 0)\n        {\n            string[] words = split(sentence, \" \");\n      \
    \      if(words[0] == \"I\")\n            {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}", "{\n    long boredoms = 0;\n\
    \    string[] sentences = split(S, \".\");\n    foreach(string sentence; sentences)\n\
    \    {\n        string[] words = split(sentence, \" \");\n        if(words[0]\
    \ == \"I\")\n            boredoms++;\n    }\n    return boredoms;\n}", "{\n  \
    \  long boredoms = 0;\n    string[] sentences = split(S, \".\");\n    foreach(string\
    \ sentence; sentences)\n    {\n        string[] words = split(sentence, \" \"\
    );\n        if(words[0] == \"I\")\n            boredoms++;\n    }\n    return\
    \ boredoms;\n}", "{\n    long boredoms = 0;\n    string[] sentences = split(S,\
    \ \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}", "{\n    long boredoms\
    \ = 0;\n    string[] sentences = split(S, \".\");\n    foreach(string sentence;\
    \ sentences)\n    {\n        string[] words = split(sentence, \" \");\n      \
    \  if(words[0] == \"I\")\n            boredoms++;\n    }\n    return boredoms;\n\
    }", "{\n    long boredoms = 0;\n    string[] sentences = split(S, \".\");\n  \
    \  foreach(string sentence; sentences)\n    {\n        string[] words = split(sentence,\
    \ \" \");\n        if(words[0] == \"I\")\n            boredoms++;\n    }\n   \
    \ return boredoms;\n}", "{\n    long boredoms = 0;\n    string[] sentences = split(S,\
    \ \".\");\n    foreach(string sentence; sentences)\n    {\n        string[] words\
    \ = split(sentence, \" \");\n        if(words[0] == \"I\")\n            boredoms++;\n\
    \    }\n    return boredoms;\n}", "{\n    long boredoms = 0;\n    string[] sentences\
    \ = split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n       \
    \ string[] words = split(sentence, \" \");\n        if(words[0] == \"I\")\n  \
    \          boredoms++;\n    }\n    return boredoms;\n}", "{\n    long boredoms\
    \ = 0;\n    string[] sentences = split(S, \".\");\n    foreach(sentence; sentences)\n\
    \    {\n        if(sentence.length > 0)\n        {\n            string[] words\
    \ = split(sentence, \" \");\n            if(words[0] == \"I\")\n            {\n\
    \                boredoms++;\n            }\n        }\n    }\n    return boredoms;\n\
    }", "{\n    long boredoms = 0;\n    string[] sentences = split(S, \".\");\n  \
    \  foreach(sentence; sentences)\n    {\n        if(sentence.length > 0)\n    \
    \    {\n            string[] words = split(sentence, \" \");\n            if(words[0]\
    \ == \"I\")\n            {\n                boredoms++;\n            }\n     \
    \   }\n    }\n    return boredoms;\n}", "{\n    long boredoms = 0;\n    string[]\
    \ sentences = split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n\
    \        string[] words = split(sentence, \" \");\n        if(words[0] == \"I\"\
    )\n            boredoms++;\n    }\n    return boredoms;\n}", "{\n    long count\
    \ = 0;\n    string[] sentences = split(S, \".\");\n    foreach(string sentence;\
    \ sentences)\n    {\n        if(sentence.length > 0)\n        {\n            string[]\
    \ words = split(sentence, \" \");\n            if(words[0] == \"I\")\n       \
    \     {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}", "{\n    long boredoms = 0;\n    string[] sentences = split(S, \"\
    .\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            if(sentence[0] == 'I')\n            {\n       \
    \         boredoms++;\n            }\n        }\n    }\n    return boredoms;\n\
    }", "{\n    long boredoms = 0;\n    auto words = split(S, \" \");\n    foreach(word;\
    \ words)\n    {\n        if(word == \"I\")\n            boredoms++;\n    }\n \
    \   return boredoms;\n}", "{\n    long boredoms = 0;\n    string[] sentences =\
    \ split(S, \".\");\n    foreach(string sentence; sentences)\n    {\n        string[]\
    \ words = split(sentence, \" \");\n        if(words[0] == \"I\")\n           \
    \ boredoms++;\n    }\n    return boredoms;\n}", "{\n    long boredoms = 0;\n \
    \   string[] sentences = split(S, \".\");\n    foreach(string sentence; sentences)\n\
    \    {\n        string[] words = split(sentence, \" \");\n        if(words[0]\
    \ == \"I\")\n            boredoms++;\n    }\n    return boredoms;\n}", "{\n  \
    \  long boredoms = 0;\n    string[] sentences = split(S, \".\");\n    foreach(string\
    \ sentence; sentences)\n    {\n        string[] words = split(sentence, \" \"\
    );\n        if(words[0] == \"I\")\n            boredoms++;\n    }\n    return\
    \ boredoms;\n}", "{\n    long boredoms = 0;\n    string[] sentences = split(S,\
    \ \".\");\n    foreach(string sentence; sentences)\n    {\n        if(sentence.length\
    \ > 0)\n        {\n            string[] words = split(sentence, \" \");\n    \
    \        if(words[0] == \"I\")\n            {\n                boredoms++;\n \
    \           }\n        }\n    }\n    return boredoms;\n}", "{\n    long boredoms\
    \ = 0;\n    string[] sentences = split(S, \".\");\n    foreach(string sentence;\
    \ sentences)\n    {\n        if(sentence.length > 0)\n        {\n            string[]\
    \ words = split(sentence, \" \");\n            if(words[0] == \"I\")\n       \
    \     {\n                boredoms++;\n            }\n        }\n    }\n    return\
    \ boredoms;\n}", "{\n    long boredoms = 0;\n    string[] sentences = split(S,\
    \ \".\");\n    foreach(string sentence; sentences)\n    {\n        string[] words\
    \ = split(sentence, \" \");\n        if(words[0] == \"I\")\n            boredoms++;\n\
    \    }\n    return boredoms;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
