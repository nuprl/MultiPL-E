language: d
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpktc8m3g9.d(43): unittest failure\n----------------\n??:?
    _d_unittestp [0x428155]\n??:? void tmpktc8m3g9.__unittest_L39_C1() [0x427e3c]\n??:?
    void tmpktc8m3g9.__modtest() [0x427ed4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c153]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afe6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afbd]\n??:? runModuleUnitTests [0x42bf29]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428618]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42859f]\n??:? _d_run_main [0x42850a]\n??:? main [0x427ee7]\n??:?
    __libc_start_main [0x9f3f3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j &&\
    \ j == k) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnukjmd8k.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmpnukjmd8k.__unittest_L30_C1() [0x427aac]\n??:?
    void tmpnukjmd8k.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b57]\n??:?
    __libc_start_main [0x171d9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long *car_positions = new long[n];\n    long *car_velocities\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        car_positions[i] = rand();\n\
    \        car_velocities[i] = rand();\n    }\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (car_velocities[i] > 0 && car_velocities[j]\
    \ < 0) {\n                if (car_positions[i] < car_positions[j]) {\n       \
    \             collisions++;\n                }\n            }\n        }\n   \
    \ }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_aljvwlf.d(19): Error: cannot implicitly convert expression
    `new long[](cast(ulong)n)` of type `long[]` to `long*`\n/tmp/tmp_aljvwlf.d(20):
    Error: cannot implicitly convert expression `new long[](cast(ulong)n)` of type
    `long[]` to `long*`\n/tmp/tmp_aljvwlf.d(22): Error: undefined identifier `rand`,
    did you mean function `round`?\n/tmp/tmp_aljvwlf.d(23): Error: undefined identifier
    `rand`, did you mean function `round`?\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp_aljvwlf.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long result = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                result++;\n          \
    \  }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmptma2lth0.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x428155]\n??:? void tmptma2lth0.__unittest_L38_C1() [0x427e3c]\n??:?
    void tmptma2lth0.__modtest() [0x427ed4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c153]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afe6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afbd]\n??:? runModuleUnitTests [0x42bf29]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428618]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42859f]\n??:? _d_run_main [0x42850a]\n??:? main [0x427ee7]\n??:?
    __libc_start_main [0x41c85554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n    \
    \    left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n   \
    \ i = 0;\n    j = 0;\n    while (i < n && j < n) {\n        if (left_to_right[i]\
    \ < right_to_left[j]) {\n            collisions++;\n            i++;\n       \
    \ } else {\n            j++;\n        }\n    }\n    return collisions;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp8j8ifwem.d(42): unittest failure\n----------------\n??:?
    _d_unittestp [0x428145]\n??:? void tmp8j8ifwem.__unittest_L38_C1() [0x427e2c]\n??:?
    void tmp8j8ifwem.__modtest() [0x427ec4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c143]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afd6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afad]\n??:? runModuleUnitTests [0x42bf19]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428608]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42858f]\n??:? _d_run_main [0x4284fa]\n??:? main [0x427ed7]\n??:?
    __libc_start_main [0xb1809554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long result;\n    long[] cars_left;\n    long[] cars_right;\n    long[] cars_left_sorted;\n\
    \    long[] cars_right_sorted;\n    long[] cars_left_sorted_index;\n    long[]\
    \ cars_right_sorted_index;\n    long[] cars_left_sorted_index_sorted;\n    long[]\
    \ cars_right_sorted_index_sorted;\n    long[] cars_left_sorted_index_sorted_index;\n\
    \    long[] cars_right_sorted_index_sorted_index;\n    long[] cars_left_sorted_index_sorted_index_sorted;\n\
    \    long[] cars_right_sorted_index_sorted_index_sorted;\n    long[] cars_left_sorted_index_sorted_index_sorted_index;\n\
    \    long[] cars_right_sorted_index_sorted_index_sorted_index;\n    long[] cars_left_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] cars_right_sorted_index_sorted_index_sorted_index_sorted;\n    long[]\
    \ cars_left_sorted_index_sorted_index_sorted_index_sorted_index;\n    long[] cars_right_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] cars_left_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] cars_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] cars_left_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] cars_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] cars_left_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[]\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv1zs8hu0.d(43): Error: no identifier for declarator `long[]`\n/tmp/tmpv1zs8hu0.d(43):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpv1zs8hu0.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo8znh84h.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpo8znh84h.__unittest_L19_C1() [0x427a44]\n??:?
    void tmpo8znh84h.__modtest() [0x427adc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427aef]\n??:?
    __libc_start_main [0xcbbb8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long* left_to_right = new long[n];\n    long* right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprffhmcrj.d(19): Error: cannot implicitly convert expression
    `new long[](cast(ulong)n)` of type `long[]` to `long*`\n/tmp/tmprffhmcrj.d(20):
    Error: cannot implicitly convert expression `new long[](cast(ulong)n)` of type
    `long[]` to `long*`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprffhmcrj.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpln__y2ac.d(85): Error: no identifier for declarator `long`\n/tmp/tmpln__y2ac.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpln__y2ac.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result;\n    long[] cars_left;\n    long[] cars_right;\n    long[] cars_left_sorted;\n\
    \    long[] cars_right_sorted;\n    long[] cars_left_sorted_unique;\n    long[]\
    \ cars_right_sorted_unique;\n    long[] cars_left_sorted_unique_count;\n    long[]\
    \ cars_right_sorted_unique_count;\n    long[] cars_left_sorted_unique_count_cumulative;\n\
    \    long[] cars_right_sorted_unique_count_cumulative;\n    long[] cars_left_sorted_unique_count_cumulative_sorted;\n\
    \    long[] cars_right_sorted_unique_count_cumulative_sorted;\n    long[] cars_left_sorted_unique_count_cumulative_sorted_unique;\n\
    \    long[] cars_right_sorted_unique_count_cumulative_sorted_unique;\n    long[]\
    \ cars_left_sorted_unique_count_cumulative_sorted_unique_count;\n    long[] cars_right_sorted_unique_count_cumulative_sorted_unique_count;\n\
    \    long[] cars_left_sorted_unique_count_cumulative_sorted_unique_count_cumulative;\n\
    \    long[] cars_right_sorted_unique_count_cumulative_sorted_unique_count_cumulative;\n\
    \    long[] cars_left_sorted_unique_count_cumulative_sorted_unique_count_cumulative_sorted;\n\
    \    long[] cars_right_sorted_unique_count_cumulative_sorted_unique_count_cumulative_sorted;\n\
    \    long[] cars_left_sorted_unique_count_cumulative_sorted_unique_count_cumulative_sorted_unique;\n\
    \    long[] cars_right_sorted_unique_count_cumulative_sorted_unique_count_cumulative_sorted\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpirq0fwpm.d(42): Error: semicolon expected, not `unittest`\n/tmp/tmpirq0fwpm.d(42):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpirq0fwpm.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpln__y2ac.d(85): Error: no identifier for declarator `long`\n/tmp/tmpln__y2ac.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpln__y2ac.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo8znh84h.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpo8znh84h.__unittest_L19_C1() [0x427a44]\n??:?
    void tmpo8znh84h.__modtest() [0x427adc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427aef]\n??:?
    __libc_start_main [0xcbbb8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long left_to_right[n];\n    long right_to_left[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                collisions++;\n            }\n        }\n \
    \   }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzip25f42.d(19): Deprecation: instead of C-style syntax, use
    D-style syntax `long[n] left_to_right`\n/tmp/tmpzip25f42.d(20): Deprecation: instead
    of C-style syntax, use D-style syntax `long[n] right_to_left`\n/tmp/tmpzip25f42.d(19):
    Error: variable `n` cannot be read at compile time\n/tmp/tmpzip25f42.d(20): Error:
    variable `n` cannot be read at compile time\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpzip25f42.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n;\
    \ j++)\n        {\n            if (i < j)\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp4oivydsp.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d9d]\n??:? void tmp4oivydsp.__unittest_L30_C1() [0x427a84]\n??:?
    void tmp4oivydsp.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428173]\n??:? _d_run_main [0x4280de]\n??:? main [0x427b2f]\n??:?
    __libc_start_main [0x67bc2554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpln__y2ac.d(85): Error: no identifier for declarator `long`\n/tmp/tmpln__y2ac.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpln__y2ac.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a[100000];\n    long b[100000];\n    long c[100000];\n    long d[100000];\n\
    \    long e[100000];\n    long f[100000];\n    long g[100000];\n    long h[100000];\n\
    \    long i[100000];\n    long j[100000];\n    long k[100000];\n    long l[100000];\n\
    \    long m[100000];\n    long n[100000];\n    long o[100000];\n    long p[100000];\n\
    \    long q[100000];\n    long r[100000];\n    long s[100000];\n    long t[100000];\n\
    \    long u[100000];\n    long v[100000];\n    long w[100000];\n    long x[100000];\n\
    \    long y[100000];\n    long z[100000];\n    long aa[100000];\n    long bb[100000];\n\
    \    long cc[100000];\n    long dd[100000];\n    long ee[100000];\n    long ff[100000];\n\
    \    long gg[100000];\n    long hh[100000];\n    long ii[100000];\n    long jj[100000];\n\
    \    long kk[100000];\n    long ll[100000];\n    long mm[100000];\n    long nn[100000];\n\
    \    long oo[100000];\n    long pp[100000];\n    long qq[100000];\n    long rr[100000];\n\
    \    long ss[100000];\n    long tt[100000];\n    long uu[100000];\n    long vv[100000];\n\
    \    long ww[100000];\n    long xx[100000];\n    long yy[100000];\n    long zz[100000];\n\
    \    long aaa[100000];\n    long bbb[100000];\n    long ccc[100000];\n    long\
    \ ddd[100000];\n   \nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe7yuxzbu.d(18): Deprecation: instead of C-style syntax, use
    D-style syntax `long[100000] a`\n/tmp/tmpe7yuxzbu.d(19): Deprecation: instead
    of C-style syntax, use D-style syntax `long[100000] b`\n/tmp/tmpe7yuxzbu.d(20):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] c`\n/tmp/tmpe7yuxzbu.d(21):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] d`\n/tmp/tmpe7yuxzbu.d(22):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] e`\n/tmp/tmpe7yuxzbu.d(23):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] f`\n/tmp/tmpe7yuxzbu.d(24):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] g`\n/tmp/tmpe7yuxzbu.d(25):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] h`\n/tmp/tmpe7yuxzbu.d(26):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] i`\n/tmp/tmpe7yuxzbu.d(27):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] j`\n/tmp/tmpe7yuxzbu.d(28):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] k`\n/tmp/tmpe7yuxzbu.d(29):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] l`\n/tmp/tmpe7yuxzbu.d(30):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] m`\n/tmp/tmpe7yuxzbu.d(31):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] n`\n/tmp/tmpe7yuxzbu.d(32):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] o`\n/tmp/tmpe7yuxzbu.d(33):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] p`\n/tmp/tmpe7yuxzbu.d(34):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] q`\n/tmp/tmpe7yuxzbu.d(35):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] r`\n/tmp/tmpe7yuxzbu.d(36):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] s`\n/tmp/tmpe7yuxzbu.d(37):
    Deprecation: instead of C-style syntax, use D-style syntax `long[100000] t`\n/tmp/tmpe7yuxzbu.d(38):
    De'
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpln__y2ac.d(85): Error: no identifier for declarator `long`\n/tmp/tmpln__y2ac.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpln__y2ac.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ collisions = 0;\n    float x[n], y[n], z[n];\n    float a[n], b[n], c[n];\n\
    \    float t[n];\n    float d[n];\n    float e[n];\n    float f[n];\n    float\
    \ g[n];\n    float h[n];\n    float m[n];\n    float p[n];\n    float q[n];\n\
    \    float r[n];\n    float s[n];\n    float u[n];\n    float v[n];\n    float\
    \ w[n];\n    float x1[n];\n    float y1[n];\n    float z1[n];\n    float a1[n];\n\
    \    float b1[n];\n    float c1[n];\n    float t1[n];\n    float d1[n];\n    float\
    \ e1[n];\n    float f1[n];\n    float g1[n];\n    float h1[n];\n    float m1[n];\n\
    \    float p1[n];\n    float q1[n];\n    float r1[n];\n    float s1[n];\n    float\
    \ u1[n];\n    float v1[n];\n    float w1[n];\n    float x2[n];\n    float y2[n];\n\
    \    float z2[n];\n    float a2[n];\n    float b2[n];\n    float c2[n];\n    float\
    \ t2[n];\n    float d2[n];\n    float e2[n];\n    float f2[n];\n    float g2[n];\n\
    \    float h2[n];\n    float m2[n];\n    float p2[n];\n    float q2[n];\n    float\
    \ r2[n];\n    float s2[n];\n    float u2[n];\n    float v2[n];\n    float w2[n];\n\
    \    float x3[n];\n    float y3[n];\n    float z3[n];\n    float a3[n];\n    float\
    \ b3[n];\n    float c3[n];\n\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpim88o54o.d(18): Deprecation: instead of C-style syntax, use
    D-style syntax `float[n] x`\n/tmp/tmpim88o54o.d(18): Error: multiple declarations
    must have the same type, not `float[n]` and `float[n]`\n/tmp/tmpim88o54o.d(18):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] y`\n/tmp/tmpim88o54o.d(18):
    Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\n/tmp/tmpim88o54o.d(18):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] z`\n/tmp/tmpim88o54o.d(19):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] a`\n/tmp/tmpim88o54o.d(19):
    Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\n/tmp/tmpim88o54o.d(19):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] b`\n/tmp/tmpim88o54o.d(19):
    Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\n/tmp/tmpim88o54o.d(19):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] c`\n/tmp/tmpim88o54o.d(20):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] t`\n/tmp/tmpim88o54o.d(21):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] d`\n/tmp/tmpim88o54o.d(22):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] e`\n/tmp/tmpim88o54o.d(23):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] f`\n/tmp/tmpim88o54o.d(24):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] g`\n/tmp/tmpim88o54o.d(25):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] h`\n/tmp/tmpim88o54o.d(26):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] m`\n/tmp/tmpim88o54o.d(27):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] p`\n/tmp/tmpim88o54o.d(28):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] q`\n/tmp/tmpim88o54o.d(29):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] r`\n/tmp/tmpim88o54o.d(30):
    Deprecation: instead of C-style sy'
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ count;\n    float x, y, z;\n    float a[n], b[n];\n    float c[n], d[n];\n \
    \   float e[n], f[n];\n    float g[n], h[n];\n    float p[n], q[n];\n    float\
    \ r[n], s[n];\n    float t[n], u[n];\n    float v[n], w[n];\n    float x1[n],\
    \ y1[n];\n    float z1[n], a1[n];\n    float b1[n], c1[n];\n    float d1[n], e1[n];\n\
    \    float f1[n], g1[n];\n    float h1[n], p1[n];\n    float q1[n], r1[n];\n \
    \   float s1[n], t1[n];\n    float u1[n], v1[n];\n    float w1[n], x2[n];\n  \
    \  float y2[n], z2[n];\n    float a2[n], b2[n];\n    float c2[n], d2[n];\n   \
    \ float e2[n], f2[n];\n    float g2[n], h2[n];\n    float p2[n], q2[n];\n    float\
    \ r2[n], s2[n];\n    float t2[n], u2[n];\n    float v2[n], w2[n];\n    float x3[n],\
    \ y3[n];\n    float z3[n], a3[n];\n    float b3[n], c3[n];\n    float d3[n], e3[n];\n\
    \    float f3[n], g3[n];\n    float h3[n], p3[n];\n    float q3[n], r3[n];\n \
    \   float s3[n], t3[n];\n    float u3[n], v3[n];\n    float w3[n], x4[n];\n  \
    \  float y4[n], z4[n];\n    float a4[n], b4[n\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg8wsnu8f.d(19): Deprecation: instead of C-style syntax, use
    D-style syntax `float[n] a`\n/tmp/tmpg8wsnu8f.d(19): Error: multiple declarations
    must have the same type, not `float[n]` and `float[n]`\n/tmp/tmpg8wsnu8f.d(19):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] b`\n/tmp/tmpg8wsnu8f.d(20):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] c`\n/tmp/tmpg8wsnu8f.d(20):
    Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\n/tmp/tmpg8wsnu8f.d(20):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] d`\n/tmp/tmpg8wsnu8f.d(21):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] e`\n/tmp/tmpg8wsnu8f.d(21):
    Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\n/tmp/tmpg8wsnu8f.d(21):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] f`\n/tmp/tmpg8wsnu8f.d(22):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] g`\n/tmp/tmpg8wsnu8f.d(22):
    Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\n/tmp/tmpg8wsnu8f.d(22):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] h`\n/tmp/tmpg8wsnu8f.d(23):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] p`\n/tmp/tmpg8wsnu8f.d(23):
    Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\n/tmp/tmpg8wsnu8f.d(23):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] q`\n/tmp/tmpg8wsnu8f.d(24):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] r`\n/tmp/tmpg8wsnu8f.d(24):
    Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\n/tmp/tmpg8wsnu8f.d(24):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] s`\n/tmp/tmpg8wsnu8f.d(25):
    Deprecation: instead of C-style syntax, use D-style syntax `float[n] t`\n/tmp/tmpg8wsnu8f.d(25):
    Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\n/tmp/tmpg8wsnu8f.d(25)'
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpl5wv9ugw.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d9d]\n??:? void tmpl5wv9ugw.__unittest_L30_C1() [0x427a84]\n??:?
    void tmpl5wv9ugw.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428173]\n??:? _d_run_main [0x4280de]\n??:? main [0x427b2f]\n??:?
    __libc_start_main [0x83577554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    float[] left_to_right = new float[n];\n    float[] right_to_left\
    \ = new float[n];\n    float[] left_to_right_speed = new float[n];\n    float[]\
    \ right_to_left_speed = new float[n];\n    float[] left_to_right_time = new float[n];\n\
    \    float[] right_to_left_time = new float[n];\n    float[] left_to_right_distance\
    \ = new float[n];\n    float[] right_to_left_distance = new float[n];\n    float[]\
    \ left_to_right_distance_speed = new float[n];\n    float[] right_to_left_distance_speed\
    \ = new float[n];\n    float[] left_to_right_distance_time = new float[n];\n \
    \   float[] right_to_left_distance_time = new float[n];\n    float[] left_to_right_distance_speed_time\
    \ = new float[n];\n    float[] right_to_left_distance_speed_time = new float[n];\n\
    \    float[] left_to_right_distance_speed_time_distance = new float[n];\n    float[]\
    \ right_to_left_distance_speed_time_distance = new float[n];\n    float[] left_to_right_distance_speed_time_distance_speed\
    \ = new float[n];\n    float[] right_to_left_distance_speed_time_distance_speed\
    \ = new float[n];\n    float[] left_to_right_distance_speed_time_distance_speed_time\
    \ = new float[n];\n    float[] right_to_left_distance_speed_time_distance_speed_time\
    \ = new float[n];\n    float[] left_to_right_distance_speed_time_distance_speed_time_distance\
    \ = new float[n];\n    float[] right_to_left_distance_speed_time_distance_speed_time_distance\
    \ = new float[n];\n    float[] left_to_right_distance_speed_time_distance_speed_time_distance_speed\
    \ = new float[n];\n    float[] right\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph3q4o_ja.d(43): Error: semicolon expected, not \''unittest\''\n/tmp/tmph3q4o_ja.d(43):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmph3q4o_ja.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo8znh84h.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpo8znh84h.__unittest_L19_C1() [0x427a44]\n??:?
    void tmpo8znh84h.__modtest() [0x427adc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427aef]\n??:?
    __libc_start_main [0xcbbb8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long collisions = 0;\n    long[] cars_left\
    \ = new long[n];\n    long[] cars_right = new long[n];\n    while (i < n) {\n\
    \        cars_left[i] = i;\n        i = i + 1;\n    }\n    while (j < n) {\n \
    \       cars_right[j] = n - j - 1;\n        j = j + 1;\n    }\n    while (k <\
    \ n) {\n        if (cars_left[k] == cars_right[k]) {\n            collisions =\
    \ collisions + 1;\n        }\n        k = k + 1;\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzec4ffao.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long result = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j\
    \ && j == k) {\n                    result += 1;\n                }\n        \
    \    }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulmof4j6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long result = 0;\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n                for\
    \ (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n     \
    \                   for (n = 0; n < n; n++) {\n                            result\
    \ += 1;\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8e1xyr18.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i < j) \n        {\n            collisions += j - i;\n          \
    \  i++;\n        } \n        else \n        {\n            j++;\n        }\n \
    \   }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo90lil03.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long num_collisions = 0;\n    long* left_to_right = new long[n];\n    long*\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                num_collisions++;\n  \
    \          }\n        }\n    }\n    return num_collisions;\n}\nunittest\n{\n \
    \   alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpab4jbc5s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l;\n\
    \    long count = 0;\n    long* left_to_right = new long[n];\n    long* right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ce_v85q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long result = 0;\n    float x[n], y[n];\n    float a[n], b[n];\n   \
    \ float c[n], d[n];\n    float e[n], f[n];\n    float g[n], h[n];\n    float m[n],\
    \ p[n];\n    float q[n], r[n];\n    float s[n], t[n];\n    float u[n], v[n];\n\
    \    float w[n], z[n];\n    float aa[n], bb[n];\n    float cc[n], dd[n];\n   \
    \ float ee[n], ff[n];\n    float gg[n], hh[n];\n    float mm[n], pp[n];\n    float\
    \ qq[n], rr[n];\n    float ss[n], tt[n];\n    float uu[n], vv[n];\n    float ww[n],\
    \ zz[n];\n    float aaa[n], bbb[n];\n    float ccc[n], ddd[n];\n    float eee[n],\
    \ fff[n];\n    float ggg[n], hhh[n];\n    float mmm[n], ppp[n];\n    float qqq[n],\
    \ rrr[n];\n    float sss[n], ttt[n];\n    float uuu[n], vvv[n];\n    float www[n],\
    \ zzz[n];\n    float aaaa[n], bbbb[n];\n    float cccc[n], dddd[n];\n    float\
    \ eeee[n], ffff[n];\n    float gggg[n], hhhh[n];\n    float mmmm[n], pppp[n];\n\
    \    float qqqq[n], rrrr[n];\n    float ssss[n], tttt[n];\n    float uuuu[n],\
    \ vvvv[n];\n    float wwww[n], zzzz[n];\n    float aaaaa[n], bbbbb[n];\n    float\
    \ ccccc[n], ddd\nunittest\n{\n    alias candidate = car_race_collision;\n\n  \
    \  assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ntoeu46.d(19): Error: multiple declarations must have the same
    type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(20): Error: multiple declarations
    must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(21): Error:
    multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(22):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(23):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(24):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(25):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(26):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(27):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(28):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(29):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(30):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(31):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(32):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(33):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(34):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(35):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(36):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(37):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5ntoeu46.d(38):
    Error: multiple declaration'
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n     \
    \   for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n       \
    \         for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++)\
    \ {\n                        for (n = 0; n < n; n++) {\n                     \
    \       for (o = 0; o < n; o++) {\n                                for (p = 0;\
    \ p < n; p++) {\n                                    for (q = 0; q < n; q++) {\n\
    \                                        for (r = 0; r < n; r++) {\n         \
    \                                   for (s = 0; s < n; s++) {\n              \
    \                                  for (t = 0; t < n; t++) {\n               \
    \                                     for (u = 0; u < n; u++) {\n            \
    \                                            for (v = 0; v < n; v++) {\n     \
    \                                                       for (w = 0; w < n; w++)\
    \ {\n                                                                for (x =\
    \ 0; x < n; x++) {\n                                                         \
    \           for (y = 0; y < n; y++) {\n                                      \
    \                                  for (z = 0; z < n; z++) {\n               \
    \                                                             for (a = 0; a <\
    \ n; a++) {\n                                                                \
    \                for (b = 0; b < n; b++) {\n                                 \
    \                                                   for (c = 0; c < n; c++) {\n\
    \                                                                            \
    \            for (d = 0; d < n; d++) {\n                                     \
    \                                                       for (e = 0; e < n; e++)\
    \ {\n                                                                        \
    \                        for (f = 0; f < n; f++) {\n                         \
    \                                                                           for\
    \ (g = 0; g < n; g++) {\n                                                    \
    \                                                    for (h =\nunittest\n{\n \
    \   alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7cowrs91.d(47): Error: expression expected, not \''unittest\''\n/tmp/tmp7cowrs91.d(48):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmp7cowrs91.d(49):
    Error: expression expected, not \''alias\''\n/tmp/tmp7cowrs91.d(49): Error: found
    \''candidate\'' when expecting \'';\'' following for condition\n/tmp/tmp7cowrs91.d(49):
    Error: expression expected, not \''=\''\n/tmp/tmp7cowrs91.d(49): Error: found
    \''car_race_collision\'' when expecting \'')\''\n/tmp/tmp7cowrs91.d(49): Error:
    use \''{ }\'' for an empty statement, not a \'';\''\n/tmp/tmp7cowrs91.d(57): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cowrs91.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpln__y2ac.d(85): Error: no identifier for declarator `long`\n/tmp/tmpln__y2ac.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpln__y2ac.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphctsg366.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo8znh84h.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpo8znh84h.__unittest_L19_C1() [0x427a44]\n??:?
    void tmpo8znh84h.__modtest() [0x427adc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427aef]\n??:?
    __libc_start_main [0xcbbb8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long a[n];\n    long b[n];\n    for\
    \ (i = 0; i < n; i++) \n    {\n        a[i] = i;\n        b[i] = n - i - 1;\n\
    \    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (a[i] == b[j]) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpby99pxy4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n \
    \   long e[n];\n    long f[n];\n    long g[n];\n    long h[n];\n    long i[n];\n\
    \    long j[n];\n    long k[n];\n    long l[n];\n    long m[n];\n    long n[n];\n\
    \    long o[n];\n    long p[n];\n    long q[n];\n    long r[n];\n    long s[n];\n\
    \    long t[n];\n    long u[n];\n    long v[n];\n    long w[n];\n    long x[n];\n\
    \    long y[n];\n    long z[n];\n    long aa[n];\n    long ab[n];\n    long ac[n];\n\
    \    long ad[n];\n    long ae[n];\n    long af[n];\n    long ag[n];\n    long\
    \ ah[n];\n    long ai[n];\n    long aj[n];\n    long ak[n];\n    long al[n];\n\
    \    long am[n];\n    long an[n];\n    long ao[n];\n    long ap[n];\n    long\
    \ aq[n];\n    long ar[n];\n    long as[n];\n    long at[n];\n    long au[n];\n\
    \    long av[n];\n    long aw[n];\n    long ax[n];\n    long ay[n];\n    long\
    \ az[n];\n    long ba[n];\n    long bb[n];\n    long bc[n];\n    long bd[n];\n\
    \    long be[n];\n    long bf[n];\n    long bg[n];\n    long bh[n];\n    long\
    \ bi[n];\n    long bj[n];\n    long bk[n];\n    long bl[n];\n    long bm[n];\n\
    \    long bn[n];\n    long bo[n];\n    long bp[n];\n    long\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprxb4vy3l.d(87): Error: no identifier for declarator long\n/tmp/tmprxb4vy3l.d(87):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprxb4vy3l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n\
    \    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long\
    \ ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak =\
    \ 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n\
    \    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long\
    \ at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax =\
    \ 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n\
    \    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long\
    \ bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk =\
    \ 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n\
    \    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long\
    \ bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx =\
    \ 0;\n    long by = 0;\n    long bz = 0;\n    long ca\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5chig7m.d(87): Error: semicolon expected, not \''unittest\''\n/tmp/tmpi5chig7m.d(87):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpi5chig7m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcq_ryvis.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6a2r7by0.d(87): Error: semicolon expected, not \''unittest\''\n/tmp/tmp6a2r7by0.d(87):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6a2r7by0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n    long\
    \ ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n\
    \    long am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n    long\
    \ ar;\n    long as;\n    long at;\n    long au;\n    long av;\n    long aw;\n\
    \    long ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n    long\
    \ bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n\
    \    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long\
    \ bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n\
    \    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long\
    \ by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n\
    \    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long\
    \ cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n\
    \    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long\
    \ cu;\n    long cv;\n    long cw;\n    long cx;\n    long cy;\n   \nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb20kk_oq.d(113): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb20kk_oq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long left_to_right[n];\n    long\
    \ right_to_left[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] =\
    \ i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n \
    \   assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph5ohibt5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long l;\n    long m;\n    long collisions;\n    long\
    \ temp;\n    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n\
    \    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long\
    \ temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n\
    \    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long\
    \ temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n\
    \    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long\
    \ temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n\
    \    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long\
    \ temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n\
    \    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long\
    \ temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n\
    \    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long\
    \ temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n\
    \    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long\
    \ temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n\
    \    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long\
    \ temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n\
    \    long temp78;\n    long temp79;\n    long temp80;\n\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm2auvl7_.d(104): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm2auvl7_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprjwzm7hd.d(85): Error: no identifier for declarator long\n/tmp/tmprjwzm7hd.d(85):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprjwzm7hd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n     \
    \   for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n       \
    \         for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++)\
    \ {\n                        for (n = 0; n < n; n++) {\n                     \
    \       for (o = 0; o < n; o++) {\n                                for (p = 0;\
    \ p < n; p++) {\n                                    for (q = 0; q < n; q++) {\n\
    \                                        for (r = 0; r < n; r++) {\n         \
    \                                   for (s = 0; s < n; s++) {\n              \
    \                                  for (t = 0; t < n; t++) {\n               \
    \                                     for (u = 0; u < n; u++) {\n            \
    \                                            for (v = 0; v < n; v++) {\n     \
    \                                                       for (w = 0; w < n; w++)\
    \ {\n                                                                for (x =\
    \ 0; x < n; x++) {\n                                                         \
    \           for (y = 0; y < n; y++) {\n                                      \
    \                                  for (z = 0; z < n; z++) {\n               \
    \                                                             for (a = 0; a <\
    \ n; a++) {\n                                                                \
    \                for (b = 0; b < n; b++) {\n                                 \
    \                                                   for (c = 0; c < n; c++) {\n\
    \                                                                            \
    \            for (d = 0; d < n; d++) {\n                                     \
    \                                                       for (e = 0; e < n; e++)\
    \ {\n                                                                        \
    \                        for (f = 0; f < n; f++) {\n                         \
    \                                                                           for\
    \ (g = 0; g < n; g++) {\n                                                    \
    \                                                    for (h =\nunittest\n{\n \
    \   alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7cowrs91.d(47): Error: expression expected, not \''unittest\''\n/tmp/tmp7cowrs91.d(48):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmp7cowrs91.d(49):
    Error: expression expected, not \''alias\''\n/tmp/tmp7cowrs91.d(49): Error: found
    \''candidate\'' when expecting \'';\'' following for condition\n/tmp/tmp7cowrs91.d(49):
    Error: expression expected, not \''=\''\n/tmp/tmp7cowrs91.d(49): Error: found
    \''car_race_collision\'' when expecting \'')\''\n/tmp/tmp7cowrs91.d(49): Error:
    use \''{ }\'' for an empty statement, not a \'';\''\n/tmp/tmp7cowrs91.d(57): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cowrs91.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff =\
    \ 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n\
    \    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n \
    \   long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n \
    \   long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n \
    \   long lll = 0;\n    long mmm = 0;\n    long ppp = 0;\n    long qqq = 0;\n \
    \   long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n \
    \   long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n \
    \   long zzz = 0;\n    long aaaa = 0;\n    long bbbb = 0;\n\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_462w9vx.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_462w9vx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n;\n\
    \    long a[n],b[n];\n    for(i=0;i<n;i++)\n    {\n        a[i]=i;\n        b[i]=i;\n\
    \    }\n    for(i=0;i<n;i++)\n    {\n        for(j=0;j<n;j++)\n        {\n   \
    \         if(a[i]==b[j])\n            {\n                k++;\n            }\n\
    \        }\n    }\n    return k;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoqiplqxu.d(18): Error: multiple declarations must have the same
    type, not long[n] and long[n]\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoqiplqxu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpln__y2ac.d(85): Error: no identifier for declarator `long`\n/tmp/tmpln__y2ac.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpln__y2ac.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++)\n    {\n \
    \       for (j = 0; j < n; j++)\n        {\n            if (i == j)\n        \
    \    {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4srgof2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n], b[n];\n    long c[n], d[n];\n    long e[n], f[n];\n\
    \    long g[n], h[n];\n    long x[n], y[n];\n    long z[n], w[n];\n    long p[n],\
    \ q[n];\n    long r[n], s[n];\n    long t[n], u[n];\n    long v[n], o[n];\n  \
    \  long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n        a[i] =\
    \ i;\n        b[i] = i;\n        c[i] = i;\n        d[i] = i;\n        e[i] =\
    \ i;\n        f[i] = i;\n        g[i] = i;\n        h[i] = i;\n        x[i] =\
    \ i;\n        y[i] = i;\n        z[i] = i;\n        w[i] = i;\n        p[i] =\
    \ i;\n        q[i] = i;\n        r[i] = i;\n        s[i] = i;\n        t[i] =\
    \ i;\n        u[i] = i;\n        v[i] = i;\n        o[i] = i;\n    }\n    for\
    \ (j = 0; j < n; j++) {\n        for (k = 0; k < n; k++) {\n            if (a[j]\
    \ > b[k]) {\n                count = count + 1;\n            }\n        }\n  \
    \  }\n    for (l = 0; l < n; l++) {\n        for (m = 0; m < n; m++) {\n     \
    \       if (c[l] > d[m]) {\n                count = count + 1;\n            }\n\
    \        }\n    }\n    for (n = 0; n < n; n++) {\n        for (i = 0; i < n; i++)\
    \ {\n            if (e[n] > f[i]) {\n                count = count + 1;\n    \
    \       \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9pb79emh.d(18): Error: multiple declarations must have the same
    type, not long[n] and long[n]\n/tmp/tmp9pb79emh.d(19): Error: multiple declarations
    must have the same type, not long[n] and long[n]\n/tmp/tmp9pb79emh.d(20): Error:
    multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmp9pb79emh.d(21):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmp9pb79emh.d(22):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmp9pb79emh.d(23):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmp9pb79emh.d(24):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmp9pb79emh.d(25):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmp9pb79emh.d(26):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmp9pb79emh.d(27):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmp9pb79emh.d(71):
    Error: found \''unittest\'' instead of statement\n/tmp/tmp9pb79emh.d(81): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp9pb79emh.d(81):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp9pb79emh.d(81):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9pb79emh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n        for\
    \ (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n             \
    \   for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n\
    \                        for (o = 0; o < n; o++) {\n                         \
    \   for (p = 0; p < n; p++) {\n                                for (q = 0; q <\
    \ n; q++) {\n                                    for (r = 0; r < n; r++) {\n \
    \                                       for (s = 0; s < n; s++) {\n          \
    \                                  for (t = 0; t < n; t++) {\n               \
    \                                 for (u = 0; u < n; u++) {\n                \
    \                                    for (v = 0; v < n; v++) {\n             \
    \                                           for (w = 0; w < n; w++) {\n      \
    \                                                      for (x = 0; x < n; x++)\
    \ {\n                                                                for (y =\
    \ 0; y < n; y++) {\n                                                         \
    \           for (z = 0; z < n; z++) {\n                                      \
    \                                  for (a = 0; a < n; a++) {\n               \
    \                                                             for (b = 0; b <\
    \ n; b++) {\n                                                                \
    \                for (c = 0; c < n; c++) {\n                                 \
    \                                                   for (d = 0; d < n; d++) {\n\
    \                                                                            \
    \            for (e = 0; e < n; e++) {\n                                     \
    \                                                       for (f = 0; f < n; f++)\
    \ {\n                                                                        \
    \                        for (g = 0; g < n; g++) {\n                         \
    \                                                                           for\
    \ (h = 0; h < n; h++) {\n                                                    \
    \                                                    if (i == j)\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0bt7go_c.d(47): Error: found \''unittest\'' instead of statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0bt'
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n \
    \   assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmbrgwgw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    float x1, x2, y1, y2;\n    float a1, a2, b1, b2;\n    float x, y;\n    float\
    \ m1, m2;\n    float c1, c2;\n    float d;\n    float t;\n    float t1, t2;\n\
    \    float tmin;\n    float tmax;\n    float t1min;\n    float t1max;\n    float\
    \ t2min;\n    float t2max;\n    float xmin;\n    float xmax;\n    float ymin;\n\
    \    float ymax;\n    float x1min;\n    float x1max;\n    float y1min;\n    float\
    \ y1max;\n    float x2min;\n    float x2max;\n    float y2min;\n    float y2max;\n\
    \    float x1min_;\n    float x1max_;\n    float y1min_;\n    float y1max_;\n\
    \    float x2min_;\n    float x2max_;\n    float y2min_;\n    float y2max_;\n\
    \    float xmin_;\n    float xmax_;\n    float ymin_;\n    float ymax_;\n    float\
    \ tmin_;\n    float tmax_;\n    float t1min_;\n    float t1max_;\n    float t2min_;\n\
    \    float t2max_;\n    float t1_;\n    float t2_;\n    float t_;\n    float x_;\n\
    \    float y_;\n    float x1_;\n    float y1_;\n    float x2_;\n    float y2_;\n\
    \    float x1min__;\n    float x1max__;\n    float y1min__;\n    float y1max__;\n\
    \    float x2min__;\n    float x2max__;\n    float y2min__;\n    float y2max__;\n\
    \    float xmin__;\n    float xmax__;\n    float ymin__;\n    float ymax__;\n\
    \    float tmin__;\n    float tmax__;\n    float\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6eabryvu.d(86): Error: no identifier for declarator float\n/tmp/tmp6eabryvu.d(86):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6eabryvu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) \n  \
    \  {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n \
    \           {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpky5kg0jd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n*(n-1)/2;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr4bpbv61.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n], b[n];\n    long c[n], d[n];\n    long e[n], f[n];\n\
    \    long g[n], h[n];\n    long x[n], y[n];\n    long z[n], w[n];\n    long p[n],\
    \ q[n];\n    long r[n], s[n];\n    long t[n], u[n];\n    long v[n], o[n];\n  \
    \  long collisions = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i;\n  \
    \      b[i] = i;\n        c[i] = i;\n        d[i] = i;\n        e[i] = i;\n  \
    \      f[i] = i;\n        g[i] = i;\n        h[i] = i;\n        x[i] = i;\n  \
    \      y[i] = i;\n        z[i] = i;\n        w[i] = i;\n        p[i] = i;\n  \
    \      q[i] = i;\n        r[i] = i;\n        s[i] = i;\n        t[i] = i;\n  \
    \      u[i] = i;\n        v[i] = i;\n        o[i] = i;\n    }\n    for (j = 0;\
    \ j < n; j++) {\n        for (k = 0; k < n; k++) {\n            for (l = 0; l\
    \ < n; l++) {\n                for (m = 0; m < n; m++) {\n                   \
    \ for (n = 0; n < n; n++) {\n                        for (i = 0; i < n; i++) {\n\
    \                            if (a[i] > b[i]) {\n                            \
    \    collisions++;\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgdhn92zs.d(18): Error: multiple declarations must have the same
    type, not long[n] and long[n]\n/tmp/tmpgdhn92zs.d(19): Error: multiple declarations
    must have the same type, not long[n] and long[n]\n/tmp/tmpgdhn92zs.d(20): Error:
    multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmpgdhn92zs.d(21):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmpgdhn92zs.d(22):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmpgdhn92zs.d(23):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmpgdhn92zs.d(24):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmpgdhn92zs.d(25):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmpgdhn92zs.d(26):
    Error: multiple declarations must have the same type, not long[n] and long[n]\n/tmp/tmpgdhn92zs.d(27):
    Error: multiple declarations must have the same type, not long[n] and long[n]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgdhn92zs.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n*(n-1)/2;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr4bpbv61.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            for (k = 0; k < n; k++) {\n                for (l = 0;\
    \ l < n; l++) {\n                    for (m = 0; m < n; m++) {\n             \
    \           for (o = 0; o < n; o++) {\n                            for (p = 0;\
    \ p < n; p++) {\n                                for (q = 0; q < n; q++) {\n \
    \                                   for (r = 0; r < n; r++) {\n              \
    \                          for (s = 0; s < n; s++) {\n                       \
    \                     for (t = 0; t < n; t++) {\n                            \
    \                    for (u = 0; u < n; u++) {\n                             \
    \                       for (v = 0; v < n; v++) {\n                          \
    \                              for (w = 0; w < n; w++) {\n                   \
    \                                         for (x = 0; x < n; x++) {\n        \
    \                                                        for (y = 0; y < n; y++)\
    \ {\n                                                                    for (z\
    \ = 0; z < n; z++) {\n                                                       \
    \                 for (a = 0; a < n; a++) {\n                                \
    \                                            for (b = 0; b < n; b++) {\n     \
    \                                                                           for\
    \ (c = 0; c < n; c++) {\n                                                    \
    \                                for (d = 0; d < n; d++) {\n                 \
    \                                                                       for (e\
    \ = 0; e < n; e++) {\n                                                       \
    \                                     for (f = 0; f < n; f++) {\n            \
    \                                                                            \
    \        for (g = 0; g < n; g++) {\n                                         \
    \                                                           for (h = 0; h < n;\
    \ h++) {\n                                                                   \
    \                                     result++;\n                            \
    \                                                                        }\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa_3bhfp9.d(47): Error: found \''unittest\'' instead of statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpa_3bhfp9.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa_3'
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            for (k = 0; k < n; k++) {\n                if (i < j &&\
    \ j < k) {\n                    count++;\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpio7nzxmo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11mf_dqb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j &&\
    \ j == k) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnukjmd8k.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmpnukjmd8k.__unittest_L30_C1() [0x427aac]\n??:?
    void tmpnukjmd8k.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b57]\n??:?
    __libc_start_main [0x171d9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7kyqx31.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbaxy75_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions;\n    long[] left_to_right;\n   \
    \ long[] right_to_left;\n    long[] left_to_right_sorted;\n    long[] right_to_left_sorted;\n\
    \    collisions = 0;\n    left_to_right = new long[n];\n    right_to_left = new\
    \ long[n];\n    left_to_right_sorted = new long[n];\n    right_to_left_sorted\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = rand.nextLong(1000000000);\n\
    \        right_to_left[i] = rand.nextLong(1000000000);\n    }\n    for (i = 0;\
    \ i < n; i++) {\n        left_to_right_sorted[i] = left_to_right[i];\n       \
    \ right_to_left_sorted[i] = right_to_left[i];\n    }\n    sort(left_to_right_sorted);\n\
    \    sort(right_to_left_sorted);\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < n; j++) {\n            if (left_to_right[i] == left_to_right_sorted[j])\
    \ {\n                break;\n            }\n        }\n        for (k = 0; k <\
    \ n; k++) {\n            if (right_to_left[i] == right_to_left_sorted[k]) {\n\
    \                break;\n            }\n        }\n        if (j > k) {\n    \
    \        collisions++;\n        }\n    }\n    return collisions;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3b8tbw10.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long count;\n    long[] left_to_right;\n    long[]\
    \ right_to_left;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n   \
    \ long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n   \
    \ long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n \
    \   long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n\
    \    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n\
    \    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n\
    \    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n\
    \    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n\
    \    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n\
    \    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n\
    \    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n\
    \    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n\
    \    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n\
    \    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n\
    \    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n\
    \    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n\
    \    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n\
    \   \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvw6uo1s5.d(91): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvw6uo1s5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcq_ryvis.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++) {\n      \
    \  for (j = 0; j < n; j++) {\n            if (i < j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0mhekovm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7kyqx31.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                for (k = j; k < n - 1;\
    \ k++) \n                {\n                    right_to_left[k] = right_to_left[k\
    \ + 1];\n                }\n                collisions++;\n                break;\n\
    \            }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzvn4e9zf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo8znh84h.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpo8znh84h.__unittest_L19_C1() [0x427a44]\n??:?
    void tmpo8znh84h.__modtest() [0x427adc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427aef]\n??:?
    __libc_start_main [0xcbbb8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    float x[n];\n    float y[n];\n    float z[n];\n\
    \    float a[n];\n    float b[n];\n    float c[n];\n    float d[n];\n    float\
    \ e[n];\n    float f[n];\n    float g[n];\n    float h[n];\n    float i1[n];\n\
    \    float j1[n];\n    float k1[n];\n    float l[n];\n    float m[n];\n    float\
    \ n1[n];\n    float o[n];\n    float p[n];\n    float q[n];\n    float r[n];\n\
    \    float s[n];\n    float t[n];\n    float u[n];\n    float v[n];\n    float\
    \ w[n];\n    float x1[n];\n    float y1[n];\n    float z1[n];\n    float a1[n];\n\
    \    float b1[n];\n    float c1[n];\n    float d1[n];\n    float e1[n];\n    float\
    \ f1[n];\n    float g1[n];\n    float h1[n];\n    float i2[n];\n    float j2[n];\n\
    \    float k2[n];\n    float l1[n];\n    float m1[n];\n    float n2[n];\n    float\
    \ o1[n];\n    float p1[n];\n    float q1[n];\n    float r1[n];\n    float s1[n];\n\
    \    float t1[n];\n    float u1[n];\n    float v1[n];\n    float w1[n];\n    float\
    \ x2[n];\n    float y2[n];\n    float z2[n];\n    float a2[n];\n    float b2[n];\n\
    \    float c2[n];\n    float d2[n];\n    float e2[n];\n    float f2[n];\n    float\
    \ g2[n];\n    float h2[n];\n    float i3[n];\n    float j\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk180i4px.d(84): Error: semicolon expected, not \''unittest\''\n/tmp/tmpk180i4px.d(84):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpk180i4px.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptcrlgzoc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n\
    \    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long\
    \ ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak =\
    \ 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n\
    \    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long\
    \ at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax =\
    \ 0;\n    long ay = 0;\n    long az = 0;\n    long ba = 0;\n    long bb = 0;\n\
    \    long bc = 0;\n    long bd = 0;\n    long be = 0;\n    long bf = 0;\n    long\
    \ bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long bj = 0;\n    long bk =\
    \ 0;\n    long bl = 0;\n    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n\
    \    long bp = 0;\n    long bq = 0;\n    long br = 0;\n    long bs = 0;\n    long\
    \ bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long bw = 0;\n    long bx =\
    \ 0;\n    long by = 0;\n    long bz = 0;\n    long ca\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi5chig7m.d(87): Error: semicolon expected, not \''unittest\''\n/tmp/tmpi5chig7m.d(87):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpi5chig7m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j &&\
    \ j == k) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnukjmd8k.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmpnukjmd8k.__unittest_L30_C1() [0x427aac]\n??:?
    void tmpnukjmd8k.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b57]\n??:?
    __libc_start_main [0x171d9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long count = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i] = n - i -\
    \ 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n\
    \            if (left_to_right[i] == right_to_left[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rf3xosw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, collisions;\n    collisions = 0;\n    for (i = 0; i < n; i++) {\n    \
    \    for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n      \
    \          for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++)\
    \ {\n                        if (i == j || i == k || i == l || i == m || j ==\
    \ k || j == l || j == m || k == l || k == m || l == m) {\n                   \
    \         continue;\n                        }\n                        if (i\
    \ < j && j < k && k < l && l < m) {\n                            collisions++;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyp1l1n16.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long[] a = new long[n];\n    long[] b = new long[n];\n    long[] c = new\
    \ long[n];\n    long[] d = new long[n];\n    long[] e = new long[n];\n    long[]\
    \ f = new long[n];\n    long[] g = new long[n];\n    long[] h = new long[n];\n\
    \    long[] i1 = new long[n];\n    long[] j1 = new long[n];\n    long[] k1 = new\
    \ long[n];\n    long[] l = new long[n];\n    long[] m = new long[n];\n    long[]\
    \ n1 = new long[n];\n    long[] o = new long[n];\n    long[] p = new long[n];\n\
    \    long[] q = new long[n];\n    long[] r = new long[n];\n    long[] s = new\
    \ long[n];\n    long[] t = new long[n];\n    long[] u = new long[n];\n    long[]\
    \ v = new long[n];\n    long[] w = new long[n];\n    long[] x = new long[n];\n\
    \    long[] y = new long[n];\n    long[] z = new long[n];\n    long[] aa = new\
    \ long[n];\n    long[] bb = new long[n];\n    long[] cc = new long[n];\n    long[]\
    \ dd = new long[n];\n    long[] ee = new long[n];\n    long[] ff = new long[n];\n\
    \    long[] gg = new long[n];\n    long[] hh = new long[n];\n    long[] ii = new\
    \ long[n];\n    long[] jj = new long[n];\n    long[] kk = new long[n];\n    long[]\
    \ ll = new long[n];\n    long[] mm = new long[n];\n    long[] nn = new long[n];\n\
    \    long[] oo = new long[n];\n    long[] pp = new long[n];\n    long[] qq = new\
    \ long[n];\n    long[] rr = new long[n];\n   \nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplnuylres.d(63): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplnuylres.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11mf_dqb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            if (i < j) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6pd166bx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i;\n    long j;\n    for (i = 0; i < n; i++) \n    {\n      \
    \  for (j = 0; j < n; j++) \n        {\n            if (i < j) \n            {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyh149or1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long collisions = 0;\n    for (i = 0; i < n; i++)\n    {\n        for\
    \ (j = 0; j < n; j++)\n        {\n            for (k = 0; k < n; k++)\n      \
    \      {\n                for (l = 0; l < n; l++)\n                {\n       \
    \             for (m = 0; m < n; m++)\n                    {\n               \
    \         for (n = 0; n < n; n++)\n                        {\n               \
    \             for (o = 0; o < n; o++)\n                            {\n       \
    \                         for (p = 0; p < n; p++)\n                          \
    \      {\n                                    for (q = 0; q < n; q++)\n      \
    \                              {\n                                        for\
    \ (r = 0; r < n; r++)\n                                        {\n           \
    \                                 for (s = 0; s < n; s++)\n                  \
    \                          {\n                                               \
    \ for (t = 0; t < n; t++)\n                                                {\n\
    \                                                    for (u = 0; u < n; u++)\n\
    \                                                    {\n                     \
    \                                   for (v = 0; v < n; v++)\n                \
    \                                        {\n                                 \
    \                           for (w = 0; w < n; w++)\n                        \
    \                                    {\n                                     \
    \                           for (x = 0; x < n; x++)\n                        \
    \                                        {\n                                 \
    \                                   for (y = 0; y < n; y++)\n                \
    \                                                    {\n                     \
    \                                                   for (z = 0; z < n; z++)\n\
    \                                                                        {\n \
    \                                                                           for\
    \ (a = 0; a < n; a++)\n                                                      \
    \                      {\n                                                   \
    \                             for (b = 0; b < n; b++)\n                      \
    \                                                          {\n               \
    \                                                                     for (c =\
    \ 0; c < n; c++)\n                                                           \
    \                         {\n                                                \
    \                                        for (d = 0; d < n;\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpapsg3836.d(63): Error: expression expected, not \''unittest\''\n/tmp/tmpapsg3836.d(64):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpapsg3836.d(73): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpapsg3836.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpapsg3836.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++)\
    \ {\n            for (k = 0; k < n; k++) {\n                if (k != i && k !=\
    \ j) {\n                    count += (k > i) && (k < j);\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi23x32mw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long[] left = new long[n];\n    long[] right = new long[n];\n    long[] left_sorted\
    \ = new long[n];\n    long[] right_sorted = new long[n];\n    long[] left_sorted_index\
    \ = new long[n];\n    long[] right_sorted_index = new long[n];\n    long[] left_sorted_index_sorted\
    \ = new long[n];\n    long[] right_sorted_index_sorted = new long[n];\n    long[]\
    \ left_sorted_index_sorted_index = new long[n];\n    long[] right_sorted_index_sorted_index\
    \ = new long[n];\n    long[] left_sorted_index_sorted_index_sorted = new long[n];\n\
    \    long[] right_sorted_index_sorted_index_sorted = new long[n];\n    long[]\
    \ left_sorted_index_sorted_index_sorted_index = new long[n];\n    long[] right_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] left_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] right_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] left_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] right_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] left_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] right_sorted_index_sorted_index_sorted_index_sorted_index_sorted\
    \ = new long[n];\n    long[] left_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index\
    \ = new long[n];\n    long[] right_sorted_index_sorted_index\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0o6zqjpk.d(40): Error: semicolon expected, not \''unittest\''\n/tmp/tmp0o6zqjpk.d(40):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp0o6zqjpk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n \
    \   assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmbrgwgw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n     \
    \   for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n       \
    \         for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++)\
    \ {\n                        for (n = 0; n < n; n++) {\n                     \
    \       for (o = 0; o < n; o++) {\n                                for (p = 0;\
    \ p < n; p++) {\n                                    for (q = 0; q < n; q++) {\n\
    \                                        for (r = 0; r < n; r++) {\n         \
    \                                   for (s = 0; s < n; s++) {\n              \
    \                                  for (t = 0; t < n; t++) {\n               \
    \                                     for (u = 0; u < n; u++) {\n            \
    \                                            for (v = 0; v < n; v++) {\n     \
    \                                                       for (w = 0; w < n; w++)\
    \ {\n                                                                for (x =\
    \ 0; x < n; x++) {\n                                                         \
    \           for (y = 0; y < n; y++) {\n                                      \
    \                                  for (z = 0; z < n; z++) {\n               \
    \                                                             for (a = 0; a <\
    \ n; a++) {\n                                                                \
    \                for (b = 0; b < n; b++) {\n                                 \
    \                                                   for (c = 0; c < n; c++) {\n\
    \                                                                            \
    \            for (d = 0; d < n; d++) {\n                                     \
    \                                                       for (e = 0; e < n; e++)\
    \ {\n                                                                        \
    \                        for (f = 0; f < n; f++) {\n                         \
    \                                                                           for\
    \ (g = 0; g < n; g++) {\n                                                    \
    \                                                    for (h =\nunittest\n{\n \
    \   alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7cowrs91.d(47): Error: expression expected, not \''unittest\''\n/tmp/tmp7cowrs91.d(48):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmp7cowrs91.d(49):
    Error: expression expected, not \''alias\''\n/tmp/tmp7cowrs91.d(49): Error: found
    \''candidate\'' when expecting \'';\'' following for condition\n/tmp/tmp7cowrs91.d(49):
    Error: expression expected, not \''=\''\n/tmp/tmp7cowrs91.d(49): Error: found
    \''car_race_collision\'' when expecting \'')\''\n/tmp/tmp7cowrs91.d(49): Error:
    use \''{ }\'' for an empty statement, not a \'';\''\n/tmp/tmp7cowrs91.d(57): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cowrs91.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpln__y2ac.d(85): Error: no identifier for declarator `long`\n/tmp/tmpln__y2ac.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpln__y2ac.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n \
    \       if (i < j) \n        {\n            count += j - i;\n            i++;\n\
    \        }\n        else \n        {\n            j++;\n        }\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw42x_xzz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6a2r7by0.d(87): Error: semicolon expected, not \''unittest\''\n/tmp/tmp6a2r7by0.d(87):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6a2r7by0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long* left = new long[n];\n    long*\
    \ right = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left[i] =\
    \ i;\n        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n   \
    \ {\n        for (j = 0; j < n; j++) \n        {\n            if (left[i] == right[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_mgdl54t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpl5wv9ugw.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d9d]\n??:? void tmpl5wv9ugw.__unittest_L30_C1() [0x427a84]\n??:?
    void tmpl5wv9ugw.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428173]\n??:? _d_run_main [0x4280de]\n??:? main [0x427b2f]\n??:?
    __libc_start_main [0x83577554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo8znh84h.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpo8znh84h.__unittest_L19_C1() [0x427a44]\n??:?
    void tmpo8znh84h.__modtest() [0x427adc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427aef]\n??:?
    __libc_start_main [0xcbbb8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result;\n    long[] cars_left_to_right;\n    long[] cars_right_to_left;\n\
    \    long[] cars_left_to_right_sorted;\n    long[] cars_right_to_left_sorted;\n\
    \    long[] cars_left_to_right_sorted_unique;\n    long[] cars_right_to_left_sorted_unique;\n\
    \    long[] cars_left_to_right_sorted_unique_count;\n    long[] cars_right_to_left_sorted_unique_count;\n\
    \    long[] cars_left_to_right_sorted_unique_count_sorted;\n    long[] cars_right_to_left_sorted_unique_count_sorted;\n\
    \    long[] cars_left_to_right_sorted_unique_count_sorted_unique;\n    long[]\
    \ cars_right_to_left_sorted_unique_count_sorted_unique;\n    long[] cars_left_to_right_sorted_unique_count_sorted_unique_count;\n\
    \    long[] cars_right_to_left_sorted_unique_count_sorted_unique_count;\n    long[]\
    \ cars_left_to_right_sorted_unique_count_sorted_unique_count_sorted;\n    long[]\
    \ cars_right_to_left_sorted_unique_count_sorted_unique_count_sorted;\n    long[]\
    \ cars_left_to_right_sorted_unique_count_sorted_unique_count_sorted_unique;\n\
    \    long[] cars_right_to_left_sorted_unique_count_sorted_unique_count_sorted_unique;\n\
    \    long[] cars_left_to_right_sorted_unique_count_sorted_unique_count_sorted_unique_count;\n\
    \    long[] cars_right_to_left_sorted_unique_count_sorted_unique_count_\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp93v6b6iq.d(40): Error: semicolon expected, not \''unittest\''\n/tmp/tmp93v6b6iq.d(40):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp93v6b6iq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) \n  \
    \  {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n \
    \           {\n                count = count + 1;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjs7i3rd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collision\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp02yvu68u.d(85): Error: no identifier for declarator long\n/tmp/tmp02yvu68u.d(85):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp02yvu68u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long collisions = 0;\n    long car_positions[2*n];\n    long car_speeds[2*n];\n\
    \    for (i=0; i<n; i++) {\n        car_positions[i] = i;\n        car_speeds[i]\
    \ = 1;\n    }\n    for (i=n; i<2*n; i++) {\n        car_positions[i] = i;\n  \
    \      car_speeds[i] = -1;\n    }\n    for (i=0; i<2*n; i++) {\n        for (j=i+1;\
    \ j<2*n; j++) {\n            if (car_positions[i] == car_positions[j]) {\n   \
    \             if (car_speeds[i] != car_speeds[j]) {\n                    collisions++;\n\
    \                }\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1fen3t01.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long result = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0;\
    \ j < n; j++) {\n            for (k = 0; k < n; k++) {\n                for (l\
    \ = 0; l < n; l++) {\n                    if (i < j && k < l) {\n            \
    \            result += 1;\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdp_urer_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++) \n    {\n\
    \        for (j = 0; j < n; j++) \n        {\n            if (i == j) \n     \
    \       {\n                collisions++;\n            }\n        }\n    }\n  \
    \  return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo3383ccf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpln__y2ac.d(85): Error: no identifier for declarator `long`\n/tmp/tmpln__y2ac.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpln__y2ac.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11mf_dqb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpktc8m3g9.d(43): unittest failure\n----------------\n??:?
    _d_unittestp [0x428155]\n??:? void tmpktc8m3g9.__unittest_L39_C1() [0x427e3c]\n??:?
    void tmpktc8m3g9.__modtest() [0x427ed4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c153]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afe6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afbd]\n??:? runModuleUnitTests [0x42bf29]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428618]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42859f]\n??:? _d_run_main [0x42850a]\n??:? main [0x427ee7]\n??:?
    __libc_start_main [0x9f3f3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n\
    \    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long\
    \ ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am =\
    \ 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n\
    \    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long\
    \ av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az =\
    \ 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n\
    \    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long\
    \ bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm =\
    \ 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n\
    \    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long\
    \ bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by =\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph87u8md4.d(87): Error: expression expected, not \''unittest\''\n/tmp/tmph87u8md4.d(88):
    Error: semicolon expected, not \''{\''\n/tmp/tmph87u8md4.d(97): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmph87u8md4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp41p0e16i.d(84): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41p0e16i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0;\
    \ j < n; j++) {\n            for (k = 0; k < n; k++) {\n                for (l\
    \ = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n        \
    \                for (n = 0; n < n; n++) {\n                            for (o\
    \ = 0; o < n; o++) {\n                                for (p = 0; p < n; p++)\
    \ {\n                                    for (q = 0; q < n; q++) {\n         \
    \                               for (r = 0; r < n; r++) {\n                  \
    \                          for (s = 0; s < n; s++) {\n                       \
    \                         for (t = 0; t < n; t++) {\n                        \
    \                            for (u = 0; u < n; u++) {\n                     \
    \                                   for (v = 0; v < n; v++) {\n              \
    \                                              for (w = 0; w < n; w++) {\n   \
    \                                                             for (x = 0; x <\
    \ n; x++) {\n                                                                \
    \    for (y = 0; y < n; y++) {\n                                             \
    \                           for (z = 0; z < n; z++) {\n                      \
    \                                                      for (a = 0; a < n; a++)\
    \ {\n                                                                        \
    \        for (b = 0; b < n; b++) {\n                                         \
    \                                           for (c = 0; c < n; c++) {\n      \
    \                                                                            \
    \      for (d = 0; d < n; d++) {\n                                           \
    \                                                 for (e = 0; e < n; e++) {\n\
    \                                                                            \
    \                    for (f = 0; f < n; f++) {\n                             \
    \                                                                       for (g\
    \ = 0; g < n; g++) {\n                                                       \
    \                                                 for (h = 0; h <\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgwjaq_ir.d(46): Error: expression expected, not \''unittest\''\n/tmp/tmpgwjaq_ir.d(47):
    Error: found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpgwjaq_ir.d(48):
    Error: expression expected, not \''alias\''\n/tmp/tmpgwjaq_ir.d(48): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpgwjaq_ir.d(48): Error: found \''=\''
    instead of statement\n/tmp/tmpgwjaq_ir.d(56): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpgwjaq_ir.d(56):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwjaq_ir.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collisions;\n    long* left_to_right_cars;\n    long* right_to_left_cars;\n\
    \    long* left_to_right_cars_sorted;\n    long* right_to_left_cars_sorted;\n\
    \    long* left_to_right_cars_collision_index;\n    long* right_to_left_cars_collision_index;\n\
    \    long* left_to_right_cars_collision_index_sorted;\n    long* right_to_left_cars_collision_index_sorted;\n\
    \    long* left_to_right_cars_collision_index_sorted_unique;\n    long* right_to_left_cars_collision_index_sorted_unique;\n\
    \    long* left_to_right_cars_collision_index_sorted_unique_count;\n    long*\
    \ right_to_left_cars_collision_index_sorted_unique_count;\n    long* left_to_right_cars_collision_index_sorted_unique_count_sorted;\n\
    \    long* right_to_left_cars_collision_index_sorted_unique_count_sorted;\n  \
    \  long* left_to_right_cars_collision_index_sorted_unique_count_sorted_unique;\n\
    \    long* right_to_left_cars_collision_index_sorted_unique_count_sorted_unique;\n\
    \    long* left_to_right_cars_collision_index_sorted_unique_count_sorted_unique_count;\n\
    \    long* right_to_left_cars_collision_index_sorted_unique_count_sorted_unique_count;\n\
    \    long* left_to_right_cars_collision_index_sorted_unique_count_sorted_unique_count_sorted;\n\
    \    long* right_to_left_cars_collision_index_sorted_unique_count_sorted_unique_count_sorted;\n\
    \    long* left_to_right_cars_collision_index_sorted_unique_count_sorted_unique_count_s\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyucqx5uo.d(40): Error: semicolon expected, not \''unittest\''\n/tmp/tmpyucqx5uo.d(40):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpyucqx5uo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11mf_dqb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i < j) \n        {\n            collisions += j - i;\n          \
    \  i++;\n        }\n        else \n        {\n            j++;\n        }\n  \
    \  }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi332cwye.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i\
    \ + 1;\n        right_to_left[i] = n - i;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8p_h4ls.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                result++;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpux4ta86a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7kyqx31.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i == j) \n        {\n            collisions += i;\n            i++;\n\
    \        } \n        else if (i < j) \n        {\n            i++;\n        }\
    \ \n        else \n        {\n            j++;\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyioe_wt_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7kyqx31.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprjwzm7hd.d(85): Error: no identifier for declarator long\n/tmp/tmprjwzm7hd.d(85):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprjwzm7hd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff =\
    \ 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n\
    \    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n \
    \   long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n \
    \   long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n \
    \   long lll = 0;\n    long mmm = 0;\n    long ppp = 0;\n    long qqq = 0;\n \
    \   long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n \
    \   long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n \
    \   long zzz = 0;\n    long aaaa = 0;\n    long bbbb = 0;\n\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeky55wi7.d(85): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeky55wi7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprjwzm7hd.d(85): Error: no identifier for declarator long\n/tmp/tmprjwzm7hd.d(85):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprjwzm7hd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbaxy75_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long* left_to_right = new long[n];\n    long* right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                collisions++;\n      \
    \      }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7q9zvw91.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long left_to_right_cars[n];\n\
    \    long right_to_left_cars[n];\n    long collisions = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long bb = 0;\n\
    \    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long\
    \ gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n    long kk =\
    \ 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n\
    \    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long\
    \ tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long xx =\
    \ 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n\
    \    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n\
    \    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n\
    \    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n\
    \    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n\
    \    long sss = 0;\n    long ttt = 0;\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp_nc8db3.d(83): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_nc8db3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprjwzm7hd.d(85): Error: no identifier for declarator long\n/tmp/tmprjwzm7hd.d(85):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprjwzm7hd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpl5wv9ugw.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d9d]\n??:? void tmpl5wv9ugw.__unittest_L30_C1() [0x427a84]\n??:?
    void tmpl5wv9ugw.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428173]\n??:? _d_run_main [0x4280de]\n??:? main [0x427b2f]\n??:?
    __libc_start_main [0x83577554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long *left = new long[n];\n    long *right = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        left[i] = i;\n        right[i] = n - i\
    \ - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (left[i] == right[j]) {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyemhp36e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long A,B,C,D,E,F,G,H;\n    long I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z;\n\
    \    long aa,bb,cc,dd,ee,ff,gg,hh;\n    long AA,BB,CC,DD,EE,FF,GG,HH;\n    long\
    \ II,JJ,KK,LL,MM,NN,OO,PP,QQ,RR,SS,TT,UU,VV,WW,XX,YY,ZZ;\n    long aaa,bbb,ccc,ddd,eee,fff,ggg,hhh;\n\
    \    long AAA,BBB,CCC,DDD,EEE,FFF,GGG,HHH;\n    long III,JJJ,KKK,LLL,MMM,NNN,OOO,PPP,QQQ,RRR,SSS,TTT,UUU,VVV,WWW,XXX,YYY,ZZZ;\n\
    \    long aaaa,bbbb,cccc,dddd,eeee,ffff,gggg,hhhh;\n    long AAAA,BBBB,CCCC,DDDD,EEEE,FFFF,GGGG,HHHH;\n\
    \    long IIII,JJJJ,KKKK,LLLL,MMMM,NNNN,OOOO,PPPP,QQQQ,RRRR,SSSS,TTTT,UUUU,VVVV,WWWW,XXXX,YYYY,ZZZZ;\n\
    \    long aaaaa,bbbbb,ccccc,ddddd,eeeee,fffff,ggggg,hhhhh;\n    long AAAAA,BBBBB,CCCCC,DDDDD,EEEEE,FFFFF,GGGGG,HHHHH;\n\
    \    long IIIII,JJJJJ,KKKKK,LLLLL,MMMMM,NNNNN,OOOOO,PPPPP,QQQQQ,RRRRR\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk_2e_jzo.d(33): Error: semicolon expected, not \''unittest\''\n/tmp/tmpk_2e_jzo.d(33):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpk_2e_jzo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n\
    \    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long\
    \ ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am =\
    \ 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n\
    \    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long\
    \ av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az =\
    \ 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n\
    \    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long\
    \ bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm =\
    \ 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n\
    \    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long\
    \ bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by =\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp66oeb_42.d(87): Error: expression expected, not \''unittest\''\n/tmp/tmp66oeb_42.d(88):
    Error: semicolon expected, not \''{\''\n/tmp/tmp66oeb_42.d(97): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp66oeb_42.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    while (i < n) \n    {\n        left[i] = i;\n    \
    \    i = i + 1;\n    }\n    while (j < n) \n    {\n        right[j] = n - j -\
    \ 1;\n        j = j + 1;\n    }\n    i = 0;\n    j = 0;\n    while (i < n && j\
    \ < n) \n    {\n        if (left[i] < right[j]) \n        {\n            i = i\
    \ + 1;\n        } \n        else if (left[i] > right[j]) \n        {\n       \
    \     j = j + 1;\n        } \n        else \n        {\n            count = count\
    \ + 1;\n            i = i + 1;\n            j = j + 1;\n        }\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5qgd0c_2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collisions = 0;\n    long[] left_to_right_cars;\n    long[] right_to_left_cars;\n\
    \    left_to_right_cars = new long[n];\n    right_to_left_cars = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        left_to_right_cars[i] = i;\n        right_to_left_cars[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (left_to_right_cars[i] == right_to_left_cars[j]) {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6igyo9la.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long count = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i] = n - i -\
    \ 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n\
    \            if (left_to_right[i] == right_to_left[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rf3xosw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long result;\n    long car_positions[n];\n    long car_speeds[n];\n    long\
    \ car_directions[n];\n    long car_positions_2[n];\n    long car_speeds_2[n];\n\
    \    long car_directions_2[n];\n    long car_positions_3[n];\n    long car_speeds_3[n];\n\
    \    long car_directions_3[n];\n    long car_positions_4[n];\n    long car_speeds_4[n];\n\
    \    long car_directions_4[n];\n    long car_positions_5[n];\n    long car_speeds_5[n];\n\
    \    long car_directions_5[n];\n    long car_positions_6[n];\n    long car_speeds_6[n];\n\
    \    long car_directions_6[n];\n    long car_positions_7[n];\n    long car_speeds_7[n];\n\
    \    long car_directions_7[n];\n    long car_positions_8[n];\n    long car_speeds_8[n];\n\
    \    long car_directions_8[n];\n    long car_positions_9[n];\n    long car_speeds_9[n];\n\
    \    long car_directions_9[n];\n    long car_positions_10[n];\n    long car_speeds_10[n];\n\
    \    long car_directions_10[n];\n    long car_positions_11[n];\n    long car_speeds_11[n];\n\
    \    long car_directions_11[n];\n    long car_positions_12[n];\n    long car_speeds_12[n];\n\
    \    long car_directions_12[n];\n    long car_positions_13[n];\n    long car_speeds_13[n];\n\
    \    long car_directions_13[n];\n    long car\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4_c1lush.d(59): Error: semicolon expected, not \''unittest\''\n/tmp/tmp4_c1lush.d(59):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4_c1lush.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count;\n    float x[n], y[n];\n    float a[n], b[n];\n    float t;\n\
    \    count = 0;\n    for (i = 0; i < n; i++) {\n        x[i] = i;\n        y[i]\
    \ = i + n;\n        a[i] = 1;\n        b[i] = -1;\n    }\n    for (i = 0; i <\
    \ n; i++) {\n        for (j = 0; j < n; j++) {\n            t = (x[i] - y[j])\
    \ / (b[j] - a[i]);\n            if (t > 0) {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2nciffi5.d(19): Error: multiple declarations must have the same
    type, not float[n] and float[n]\n/tmp/tmp2nciffi5.d(20): Error: multiple declarations
    must have the same type, not float[n] and float[n]\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp2nciffi5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprjwzm7hd.d(85): Error: no identifier for declarator long\n/tmp/tmprjwzm7hd.d(85):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprjwzm7hd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprjwzm7hd.d(85): Error: no identifier for declarator long\n/tmp/tmprjwzm7hd.d(85):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprjwzm7hd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo2rvc2k9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n-i-1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphpsgpk8m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left[i] =\
    \ i;\n        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n   \
    \ {\n        for (j = 0; j < n; j++) \n        {\n            if (left[i] == right[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpid0ov2a0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n        for\
    \ (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n             \
    \   for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n\
    \                        for (o = 0; o < n; o++) {\n                         \
    \   for (p = 0; p < n; p++) {\n                                for (q = 0; q <\
    \ n; q++) {\n                                    for (r = 0; r < n; r++) {\n \
    \                                       for (s = 0; s < n; s++) {\n          \
    \                                  for (t = 0; t < n; t++) {\n               \
    \                                 for (u = 0; u < n; u++) {\n                \
    \                                    for (v = 0; v < n; v++) {\n             \
    \                                           for (w = 0; w < n; w++) {\n      \
    \                                                      for (x = 0; x < n; x++)\
    \ {\n                                                                for (y =\
    \ 0; y < n; y++) {\n                                                         \
    \           for (z = 0; z < n; z++) {\n                                      \
    \                                  for (a = 0; a < n; a++) {\n               \
    \                                                             for (b = 0; b <\
    \ n; b++) {\n                                                                \
    \                for (c = 0; c < n; c++) {\n                                 \
    \                                                   for (d = 0; d < n; d++) {\n\
    \                                                                            \
    \            for (e = 0; e < n; e++) {\n                                     \
    \                                                       for (f = 0; f < n; f++)\
    \ {\n                                                                        \
    \                        for (g = 0; g < n; g++) {\n                         \
    \                                                                           for\
    \ (h = 0; h < n; h++) {\n                                                    \
    \                                                    if (i == j)\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0bt7go_c.d(47): Error: found \''unittest\'' instead of statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp0bt7go_c.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0bt'
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right;\n    long[] right_to_left;\n \
    \   long[] left_to_right_sorted;\n    long[] right_to_left_sorted;\n    left_to_right\
    \ = new long[n];\n    right_to_left = new long[n];\n    left_to_right_sorted =\
    \ new long[n];\n    right_to_left_sorted = new long[n];\n    for (i = 0; i < n;\
    \ i++) {\n        left_to_right[i] = rand();\n        right_to_left[i] = rand();\n\
    \    }\n    for (i = 0; i < n; i++) {\n        left_to_right_sorted[i] = left_to_right[i];\n\
    \        right_to_left_sorted[i] = right_to_left[i];\n    }\n    sort(left_to_right_sorted);\n\
    \    sort(right_to_left_sorted);\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < n; j++) {\n            if (left_to_right_sorted[i] == left_to_right[j])\
    \ {\n                for (k = 0; k < n; k++) {\n                    if (right_to_left_sorted[k]\
    \ == right_to_left[j]) {\n                        count++;\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4g6q405.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcqw13nny.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            if (i < j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps2f5vz8_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long l;\n    long m;\n    long collisions;\n    long[]\
    \ left_to_right;\n    long[] right_to_left;\n    long[] left_to_right_sorted;\n\
    \    long[] right_to_left_sorted;\n    long[] left_to_right_sorted_index;\n  \
    \  long[] right_to_left_sorted_index;\n    long[] left_to_right_sorted_index_sorted;\n\
    \    long[] right_to_left_sorted_index_sorted;\n    long[] left_to_right_sorted_index_sorted_index;\n\
    \    long[] right_to_left_sorted_index_sorted_index;\n    long[] left_to_right_sorted_index_sorted_index_sorted;\n\
    \    long[] right_to_left_sorted_index_sorted_index_sorted;\n    long[] left_to_right_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_to_left_sorted_index_sorted_index_sorted_index;\n    long[]\
    \ left_to_right_sorted_index_sorted_index_sorted_index_sorted;\n    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_to_left_sorted_index_\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7df39r76.d(45): Error: semicolon expected, not \''unittest\''\n/tmp/tmp7df39r76.d(45):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp7df39r76.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11mf_dqb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long cnt = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                cnt++;\n             \
    \   for (k = j; k < n - 1; k++) \n                {\n                    right_to_left[k]\
    \ = right_to_left[k + 1];\n                }\n                for (l = i; l <\
    \ n - 1; l++) \n                {\n                    left_to_right[l] = left_to_right[l\
    \ + 1];\n                }\n                break;\n            }\n        }\n\
    \    }\n    return cnt;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi24wo2de.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j &&\
    \ j == k) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpnukjmd8k.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427dc5]\n??:? void tmpnukjmd8k.__unittest_L30_C1() [0x427aac]\n??:?
    void tmpnukjmd8k.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428214]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42819b]\n??:? _d_run_main [0x428106]\n??:? main [0x427b57]\n??:?
    __libc_start_main [0x171d9554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions;\n    long car_positions[n];\n    long car_velocities[n];\n\
    \    long car_positions_2[n];\n    long car_velocities_2[n];\n    long car_positions_3[n];\n\
    \    long car_velocities_3[n];\n    long car_positions_4[n];\n    long car_velocities_4[n];\n\
    \    long car_positions_5[n];\n    long car_velocities_5[n];\n    long car_positions_6[n];\n\
    \    long car_velocities_6[n];\n    long car_positions_7[n];\n    long car_velocities_7[n];\n\
    \    long car_positions_8[n];\n    long car_velocities_8[n];\n    long car_positions_9[n];\n\
    \    long car_velocities_9[n];\n    long car_positions_10[n];\n    long car_velocities_10[n];\n\
    \    long car_positions_11[n];\n    long car_velocities_11[n];\n    long car_positions_12[n];\n\
    \    long car_velocities_12[n];\n    long car_positions_13[n];\n    long car_velocities_13[n];\n\
    \    long car_positions_14[n];\n    long car_velocities_14[n];\n    long car_positions_15[n];\n\
    \    long car_velocities_15[n];\n    long car_positions_16[n];\n    long car_velocities_16[n];\n\
    \    long car_positions_17[n];\n    long car_velocities_17[n];\n    long car_positions_18[n];\n\
    \    long car_velocities_18[n];\n    long car_positions_19[n];\n    long car_velocities_19[n];\n\
    \    long car_positions_20[n];\n    long car_velocities_20[n];\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjo7w4n_o.d(59): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjo7w4n_o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long car_positions_left_to_right[n];\n\
    \    long car_positions_right_to_left[n];\n    while (i < n) \n    {\n       \
    \ car_positions_left_to_right[i] = i;\n        i = i + 1;\n    }\n    while (j\
    \ < n) \n    {\n        car_positions_right_to_left[j] = n - j - 1;\n        j\
    \ = j + 1;\n    }\n    i = 0;\n    j = 0;\n    while (i < n) \n    {\n       \
    \ while (j < n) \n        {\n            if (car_positions_left_to_right[i] ==\
    \ car_positions_right_to_left[j]) \n            {\n                num_collisions\
    \ = num_collisions + 1;\n            }\n            j = j + 1;\n        }\n  \
    \      i = i + 1;\n    }\n    return num_collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69or73d9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long result;\n    long[] left_to_right;\n    long[] right_to_left;\n    long[]\
    \ left_to_right_sorted;\n    long[] right_to_left_sorted;\n    long[] left_to_right_sorted_index;\n\
    \    long[] right_to_left_sorted_index;\n    long[] left_to_right_sorted_index_sorted;\n\
    \    long[] right_to_left_sorted_index_sorted;\n    long[] left_to_right_sorted_index_sorted_index;\n\
    \    long[] right_to_left_sorted_index_sorted_index;\n    long[] left_to_right_sorted_index_sorted_index_sorted;\n\
    \    long[] right_to_left_sorted_index_sorted_index_sorted;\n    long[] left_to_right_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_to_left_sorted_index_sorted_index_sorted_index;\n    long[]\
    \ left_to_right_sorted_index_sorted_index_sorted_index_sorted;\n    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long[] left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long[] right_to_left_sorted_index_sorted_index_sorted_index_sorted_index_s\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdvheskpq.d(41): Error: semicolon expected, not \''unittest\''\n/tmp/tmpdvheskpq.d(41):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdvheskpq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n;\n\
    \    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n    long e[n];\n\
    \    long f[n];\n    long g[n];\n    long h[n];\n    long i[n];\n    long j[n];\n\
    \    long k[n];\n    long l[n];\n    long m[n];\n    long n[n];\n    long o[n];\n\
    \    long p[n];\n    long q[n];\n    long r[n];\n    long s[n];\n    long t[n];\n\
    \    long u[n];\n    long v[n];\n    long w[n];\n    long x[n];\n    long y[n];\n\
    \    long z[n];\n    long aa[n];\n    long ab[n];\n    long ac[n];\n    long ad[n];\n\
    \    long ae[n];\n    long af[n];\n    long ag[n];\n    long ah[n];\n    long\
    \ ai[n];\n    long aj[n];\n    long ak[n];\n    long al[n];\n    long am[n];\n\
    \    long an[n];\n    long ao[n];\n    long ap[n];\n    long aq[n];\n    long\
    \ ar[n];\n    long as[n];\n    long at[n];\n    long au[n];\n    long av[n];\n\
    \    long aw[n];\n    long ax[n];\n    long ay[n];\n    long az[n];\n    long\
    \ ba[n];\n    long bb[n];\n    long bc[n];\n    long bd[n];\n    long be[n];\n\
    \    long bf[n];\n    long bg[n];\n    long bh[n];\n    long bi[n];\n    long\
    \ bj[n];\n    long bk[n];\n    long bl[n];\n    long bm[n];\n    long bn[n];\n\
    \    long bo[n];\n    long bp[n];\n    long\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp480cqlut.d(87): Error: no identifier for declarator long\n/tmp/tmp480cqlut.d(87):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp480cqlut.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n    \
    \    left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n   \
    \ for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if\
    \ (left_to_right[i] == right_to_left[j]) {\n                count++;\n       \
    \     }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fkv1kjg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n  \
    \  long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n  \
    \  long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n  \
    \  long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n    long\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxzmsgpcx.d(86): Error: no identifier for declarator long\n/tmp/tmpxzmsgpcx.d(86):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpxzmsgpcx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpln__y2ac.d(85): Error: no identifier for declarator `long`\n/tmp/tmpln__y2ac.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpln__y2ac.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long left_to_right[n];\n    long right_to_left[n];\n\
    \    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (left_to_right[i] == right_to_left[j]) {\n       \
    \         collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg26zpnft.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long count = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    long[] temp = new\
    \ long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n\
    \    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvnj7my8g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions;\n    long[] left_to_right;\n   \
    \ long[] right_to_left;\n    long[] sorted_left_to_right;\n    long[] sorted_right_to_left;\n\
    \    collisions = 0;\n    left_to_right = new long[n];\n    right_to_left = new\
    \ long[n];\n    sorted_left_to_right = new long[n];\n    sorted_right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = rand();\n\
    \        right_to_left[i] = rand();\n    }\n    for (i = 0; i < n; i++) {\n  \
    \      sorted_left_to_right[i] = left_to_right[i];\n        sorted_right_to_left[i]\
    \ = right_to_left[i];\n    }\n    sort(sorted_left_to_right);\n    sort(sorted_right_to_left);\n\
    \    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          \
    \  if (left_to_right[i] == sorted_left_to_right[j]) {\n                for (k\
    \ = 0; k < n; k++) {\n                    if (right_to_left[i] == sorted_right_to_left[k])\
    \ {\n                        if (j < k) {\n                            collisions++;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpww8l6pwl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long left_to_right_cars[n];\n    long right_to_left_cars[n];\n\
    \    for (i = 0; i < n; i++) {\n        left_to_right_cars[i] = i;\n        right_to_left_cars[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (left_to_right_cars[i] == right_to_left_cars[j]) {\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfepqw9yp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aa = 0;\n    long bb =\
    \ 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff = 0;\n\
    \    long gg = 0;\n    long hh = 0;\n    long iii = 0;\n    long jjj = 0;\n  \
    \  long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo = 0;\n  \
    \  long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\n  \
    \  long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www = 0;\n  \
    \  long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n    long\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxzmsgpcx.d(86): Error: no identifier for declarator long\n/tmp/tmpxzmsgpcx.d(86):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpxzmsgpcx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpktc8m3g9.d(43): unittest failure\n----------------\n??:?
    _d_unittestp [0x428155]\n??:? void tmpktc8m3g9.__unittest_L39_C1() [0x427e3c]\n??:?
    void tmpktc8m3g9.__modtest() [0x427ed4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c153]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42afe6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42afbd]\n??:? runModuleUnitTests [0x42bf29]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428618]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x42859f]\n??:? _d_run_main [0x42850a]\n??:? main [0x427ee7]\n??:?
    __libc_start_main [0x9f3f3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpce9qgk_1.d(85): Error: no identifier for declarator long\n/tmp/tmpce9qgk_1.d(85):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpce9qgk_1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collision = 0;\n    long left_to_right[n];\n    long right_to_left[n];\n\
    \    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (left_to_right[i] == right_to_left[j]) {\n       \
    \         collision++;\n            }\n        }\n    }\n    return collision;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppntoadb5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo8znh84h.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpo8znh84h.__unittest_L19_C1() [0x427a44]\n??:?
    void tmpo8znh84h.__modtest() [0x427adc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427aef]\n??:?
    __libc_start_main [0xcbbb8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long collision_count;\n    collision_count = 0;\n    for (i =\
    \ 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i < j)\
    \ {\n                collision_count = collision_count + 1;\n            }\n \
    \       }\n    }\n    return collision_count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9t_bt5i_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n     \
    \   for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n       \
    \         for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++)\
    \ {\n                        for (n = 0; n < n; n++) {\n                     \
    \       for (o = 0; o < n; o++) {\n                                for (p = 0;\
    \ p < n; p++) {\n                                    for (q = 0; q < n; q++) {\n\
    \                                        for (r = 0; r < n; r++) {\n         \
    \                                   for (s = 0; s < n; s++) {\n              \
    \                                  for (t = 0; t < n; t++) {\n               \
    \                                     for (u = 0; u < n; u++) {\n            \
    \                                            for (v = 0; v < n; v++) {\n     \
    \                                                       for (w = 0; w < n; w++)\
    \ {\n                                                                for (x =\
    \ 0; x < n; x++) {\n                                                         \
    \           for (y = 0; y < n; y++) {\n                                      \
    \                                  for (z = 0; z < n; z++) {\n               \
    \                                                             for (a = 0; a <\
    \ n; a++) {\n                                                                \
    \                for (b = 0; b < n; b++) {\n                                 \
    \                                                   for (c = 0; c < n; c++) {\n\
    \                                                                            \
    \            for (d = 0; d < n; d++) {\n                                     \
    \                                                       for (e = 0; e < n; e++)\
    \ {\n                                                                        \
    \                        for (f = 0; f < n; f++) {\n                         \
    \                                                                           for\
    \ (g = 0; g < n; g++) {\n                                                    \
    \                                                    for (h =\nunittest\n{\n \
    \   alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7cowrs91.d(47): Error: expression expected, not \''unittest\''\n/tmp/tmp7cowrs91.d(48):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmp7cowrs91.d(49):
    Error: expression expected, not \''alias\''\n/tmp/tmp7cowrs91.d(49): Error: found
    \''candidate\'' when expecting \'';\'' following for condition\n/tmp/tmp7cowrs91.d(49):
    Error: expression expected, not \''=\''\n/tmp/tmp7cowrs91.d(49): Error: found
    \''car_race_collision\'' when expecting \'')\''\n/tmp/tmp7cowrs91.d(49): Error:
    use \''{ }\'' for an empty statement, not a \'';\''\n/tmp/tmp7cowrs91.d(57): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp7cowrs91.d(57):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cowrs91.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i == j) \n        {\n            collisions++;\n            i++;\n\
    \            j++;\n        }\n        else if (i < j) \n        {\n          \
    \  i++;\n        }\n        else \n        {\n            j++;\n        }\n  \
    \  }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8elc3vyo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long result = 0;\n    long[] car_positions = new long[n];\n    long[] car_speeds\
    \ = new long[n];\n    long[] car_directions = new long[n];\n    long[] car_positions2\
    \ = new long[n];\n    long[] car_speeds2 = new long[n];\n    long[] car_directions2\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        car_positions[i]\
    \ = random(0, 1000000);\n        car_speeds[i] = random(1, 1000000);\n       \
    \ car_directions[i] = random(0, 1);\n        car_positions2[i] = random(0, 1000000);\n\
    \        car_speeds2[i] = random(1, 1000000);\n        car_directions2[i] = random(0,\
    \ 1);\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n;\
    \ j++) \n        {\n            if (car_directions[i] == 0 && car_directions2[j]\
    \ == 1) \n            {\n                if (car_positions[i] < car_positions2[j])\
    \ \n                {\n                    if (car_speeds[i] > car_speeds2[j])\
    \ \n                    {\n                        result++;\n               \
    \     }\n                }\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp16p1ie0g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < n; j++) {\n            if (i < j) {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8i8f1et5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n \
    \       if (i < j) \n        {\n            count += j - i;\n            i++;\n\
    \        }\n        else \n        {\n            j++;\n        }\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw42x_xzz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long result;\n    long num_collisions;\n    long\
    \ num_cars_left;\n    long num_cars_right;\n    long car_left_positions[n];\n\
    \    long car_right_positions[n];\n    long car_left_speeds[n];\n    long car_right_speeds[n];\n\
    \    long car_left_positions_sorted[n];\n    long car_right_positions_sorted[n];\n\
    \    long car_left_speeds_sorted[n];\n    long car_right_speeds_sorted[n];\n \
    \   long car_left_positions_sorted_index[n];\n    long car_right_positions_sorted_index[n];\n\
    \    long car_left_speeds_sorted_index[n];\n    long car_right_speeds_sorted_index[n];\n\
    \    long car_left_positions_sorted_index_inv[n];\n    long car_right_positions_sorted_index_inv[n];\n\
    \    long car_left_speeds_sorted_index_inv[n];\n    long car_right_speeds_sorted_index_inv[n];\n\
    \    long car_left_positions_sorted_index_inv_index[n];\n    long car_right_positions_sorted_index_inv_index[n];\n\
    \    long car_left_speeds_sorted_index_inv_index[n];\n    long car_right_speeds_sorted_index_inv_index[n];\n\
    \    long car_left_positions_sorted_index_inv_index_inv[n];\n    long car_right_positions_sorted_index_inv_index_inv[n];\n\
    \    long car_left_speeds_sorted_index_inv_index_inv[n];\n    long car_right_speeds_sorted_index_inv\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplvzwtc27.d(47): Error: semicolon expected, not \''unittest\''\n/tmp/tmplvzwtc27.d(47):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmplvzwtc27.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n*(n-1)/2;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr4bpbv61.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long collisions = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    i = 0;\n    j = 0;\n    while (i < n && j < n) \n    {\n        if (left_to_right[i]\
    \ < right_to_left[j]) \n        {\n            collisions++;\n            i++;\n\
    \        } \n        else \n        {\n            j++;\n        }\n    }\n  \
    \  return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpakm377zp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    double x, y;\n    double[] x_left = new double[n];\n    double[] x_right\
    \ = new double[n];\n    double[] y_left = new double[n];\n    double[] y_right\
    \ = new double[n];\n    for (i = 0; i < n; i++) \n    {\n        x_left[i] = rand()\
    \ % 1000000;\n        x_right[i] = rand() % 1000000;\n        y_left[i] = rand()\
    \ % 1000000;\n        y_right[i] = rand() % 1000000;\n    }\n    count = 0;\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            x = x_left[i] - x_right[j];\n            y = y_left[i] - y_right[j];\n\
    \            if (x * x + y * y < 100) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxa36hvcz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphctsg366.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpln__y2ac.d(85): Error: no identifier for declarator `long`\n/tmp/tmpln__y2ac.d(85):
    Error: found `unittest` instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpln__y2ac.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbaxy75_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11mf_dqb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphctsg366.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp41p0e16i.d(84): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41p0e16i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    float x[n], y[n];\n    float x1[n], y1[n];\n    float x2[n], y2[n];\n   \
    \ float x3[n], y3[n];\n    float x4[n], y4[n];\n    float x5[n], y5[n];\n    float\
    \ x6[n], y6[n];\n    float x7[n], y7[n];\n    float x8[n], y8[n];\n    float x9[n],\
    \ y9[n];\n    float x10[n], y10[n];\n    float x11[n], y11[n];\n    float x12[n],\
    \ y12[n];\n    float x13[n], y13[n];\n    float x14[n], y14[n];\n    float x15[n],\
    \ y15[n];\n    float x16[n], y16[n];\n    float x17[n], y17[n];\n    float x18[n],\
    \ y18[n];\n    float x19[n], y19[n];\n    float x20[n], y20[n];\n    float x21[n],\
    \ y21[n];\n    float x22[n], y22[n];\n    float x23[n], y23[n];\n    float x24[n],\
    \ y24[n];\n    float x25[n], y25[n];\n    float x26[n], y26[n];\n    float x27[n],\
    \ y27[n];\n    float x28[n], y28[n];\n    float x29[n], y29[n];\n    float x30[n],\
    \ y30[n];\n    float x31[n], y31[n];\n    float x32[n], y32[n];\n    float x33[n],\
    \ y33[n];\n    float x34[n], y34[n];\n    float x35[n], y35[n];\n    float x36[n],\
    \ y36[n];\n    float x37[n], y37[n];\n    float x38[n], y\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphvwwpdmo.d(18): Error: multiple declarations must have the same
    type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(19): Error: multiple declarations
    must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(20): Error:
    multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(21):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(22):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(23):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(24):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(25):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(26):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(27):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(28):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(29):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(30):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(31):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(32):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(33):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(34):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(35):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(36):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmphvwwpdmo.d(37):
    Error: multiple declaration'
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n \
    \   assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp72izhwcf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long num_collisions = 0;\n    long[] left_to_right_cars;\n    long[] right_to_left_cars;\n\
    \    left_to_right_cars = new long[n];\n    right_to_left_cars = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        left_to_right_cars[i] = i;\n        right_to_left_cars[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (left_to_right_cars[i] == right_to_left_cars[j]) {\n\
    \                num_collisions++;\n            }\n        }\n    }\n    return\
    \ num_collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdno0uxby.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo8znh84h.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpo8znh84h.__unittest_L19_C1() [0x427a44]\n??:?
    void tmpo8znh84h.__modtest() [0x427adc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427aef]\n??:?
    __libc_start_main [0xcbbb8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i > j) {\n                count\
    \ = count + 1;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgardgi_5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left[i] =\
    \ i;\n        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n   \
    \ {\n        for (j = 0; j < n; j++) \n        {\n            if (left[i] == right[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpid0ov2a0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphctsg366.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i < j) \n        {\n            collisions += j - i;\n          \
    \  i++;\n        } \n        else \n        {\n            j++;\n        }\n \
    \   }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo90lil03.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i < j) {\n                count\
    \ = count + 1;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpajcpripo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long[] left_to_right_cars;\n    long[] right_to_left_cars;\n    long[] left_to_right_cars_sorted;\n\
    \    long[] right_to_left_cars_sorted;\n    long[] left_to_right_cars_sorted_unique;\n\
    \    long[] right_to_left_cars_sorted_unique;\n    long[] left_to_right_cars_sorted_unique_count;\n\
    \    long[] right_to_left_cars_sorted_unique_count;\n    long[] left_to_right_cars_sorted_unique_count_sorted;\n\
    \    long[] right_to_left_cars_sorted_unique_count_sorted;\n    long[] left_to_right_cars_sorted_unique_count_sorted_unique;\n\
    \    long[] right_to_left_cars_sorted_unique_count_sorted_unique;\n    long[]\
    \ left_to_right_cars_sorted_unique_count_sorted_unique_count;\n    long[] right_to_left_cars_sorted_unique_count_sorted_unique_count;\n\
    \    long[] left_to_right_cars_sorted_unique_count_sorted_unique_count_sorted;\n\
    \    long[] right_to_left_cars_sorted_unique_count_sorted_unique_count_sorted;\n\
    \    long[] left_to_right_cars_sorted_unique_count_sorted_unique_count_sorted_unique;\n\
    \    long[] right_to_left_cars_sorted_unique_count_sorted_unique_count_sorted_unique;\n\
    \    long[] left_to_right_cars_sorted_unique_count_sorted_unique_count_sorted_unique_count;\n\
    \    long[] right_to_left_cars_sorted_unique_count_sorted_unique_count_sorted_unique_count;\n\
    \    long[] left_to_right_cars_sorted_unique_count_sorted_unique_count_sorted_unique_count_sorted;\n\
    \    long[] right_to_left\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsb9zuycn.d(40): Error: semicolon expected, not \''unittest\''\n/tmp/tmpsb9zuycn.d(40):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpsb9zuycn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long left_to_right[n];\n    long right_to_left[n];\n    long collisions\
    \ = 0;\n    for (i = 0; i < n; i++)\n    {\n        left_to_right[i] = i;\n  \
    \      right_to_left[i] = n - i - 1;\n    }\n    for (j = 0; j < n; j++)\n   \
    \ {\n        for (k = 0; k < n; k++)\n        {\n            if (left_to_right[j]\
    \ == right_to_left[k])\n            {\n                collisions++;\n       \
    \     }\n        }\n    }\n    return collisions;\n}\n/*\n    Given an array of\
    \ integers, return the number of subarrays that have the same number of odd and\
    \ even numbers.\n*/\nlong odd_even_subarrays(long n, long a[n])\n{\n    long i,\
    \ j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e,\
    \ f, g, h;\n    long odd_count = 0;\n    long even_count = 0;\n    long subarrays\
    \ = 0;\n    for (i = 0; i < n; i++)\n    {\n        for (j = i; j < n; j++)\n\
    \        {\n            if (a[j] % 2 == 0)\n            {\n                even_count++;\n\
    \            }\n            else\n            {\n                odd_count++;\n\
    \            }\n            if (even_count == odd_count)\n            {\n    \
    \            subarrays++;\n            }\n        }\n        even_count = 0;\n\
    \        odd_count = 0;\n    }\n    return subarrays;\n}\n/*\n    Given an array\
    \ of integers, return the number of subarrays that have the same number of odd\
    \ and even numbers.\n*/\n\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6k5oz326.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11mf_dqb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n], b[n];\n    long c[n];\n    long d[n];\n    long e[n];\n\
    \    long f[n];\n    long g[n];\n    long h[n];\n    long i[n];\n    long j[n];\n\
    \    long k[n];\n    long l[n];\n    long m[n];\n    long n[n];\n    long o[n];\n\
    \    long p[n];\n    long q[n];\n    long r[n];\n    long s[n];\n    long t[n];\n\
    \    long u[n];\n    long v[n];\n    long w[n];\n    long x[n];\n    long y[n];\n\
    \    long z[n];\n    long aa[n];\n    long ab[n];\n    long ac[n];\n    long ad[n];\n\
    \    long ae[n];\n    long af[n];\n    long ag[n];\n    long ah[n];\n    long\
    \ ai[n];\n    long aj[n];\n    long ak[n];\n    long al[n];\n    long am[n];\n\
    \    long an[n];\n    long ao[n];\n    long ap[n];\n    long aq[n];\n    long\
    \ ar[n];\n    long as[n];\n    long at[n];\n    long au[n];\n    long av[n];\n\
    \    long aw[n];\n    long ax[n];\n    long ay[n];\n    long az[n];\n    long\
    \ ba[n];\n    long bb[n];\n    long bc[n];\n    long bd[n];\n    long be[n];\n\
    \    long bf[n];\n    long bg[n];\n    long bh[n];\n    long bi[n];\n    long\
    \ bj[n];\n    long bk[n];\n    long bl[n];\n    long bm[n];\n    long bn[n];\n\
    \    long bo[n];\n    long bp[n];\n    long bq[\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpddos29rj.d(18): Error: multiple declarations must have the same
    type, not long[n] and long[n]\n/tmp/tmpddos29rj.d(86): Error: expression expected,
    not \''unittest\''\n/tmp/tmpddos29rj.d(87): Error: found \''{\'' when expecting
    \'']\''\n/tmp/tmpddos29rj.d(88): Error: semicolon expected, not \''alias\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpddos29rj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpo8znh84h.d(23): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d5d]\n??:? void tmpo8znh84h.__unittest_L19_C1() [0x427a44]\n??:?
    void tmpo8znh84h.__modtest() [0x427adc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a8ed]\n??:? runModuleUnitTests [0x42b859]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428133]\n??:? _d_run_main [0x42809e]\n??:? main [0x427aef]\n??:?
    __libc_start_main [0xcbbb8554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ collisions;\n    collisions = 0;\n    for (i = 0; i < n; i++) {\n        for\
    \ (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n             \
    \   if (i == j) {\n                    collisions++;\n                }\n    \
    \        }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa89n_q3a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long count = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu41prvb8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    long collision_count\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (left_to_right[i] < right_to_left[j]) \n        {\n            collision_count\
    \ += j;\n            i++;\n        } \n        else \n        {\n            j++;\n\
    \        }\n    }\n    collision_count += (n - i) * j;\n    return collision_count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jhzocpn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpl5wv9ugw.d(34): unittest failure\n----------------\n??:?
    _d_unittestp [0x427d9d]\n??:? void tmpl5wv9ugw.__unittest_L30_C1() [0x427a84]\n??:?
    void tmpl5wv9ugw.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428173]\n??:? _d_run_main [0x4280de]\n??:? main [0x427b2f]\n??:?
    __libc_start_main [0x83577554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    while (i < n) {\n        long j = 0;\n        while\
    \ (j < n) {\n            if (i != j) {\n                collisions++;\n      \
    \      }\n            j++;\n        }\n        i++;\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq32qncr2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collision = 0;\n    long *left = new long[n];\n    long *right\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left[i] = i;\n      \
    \  right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < n; j++) {\n            if (left[i] == right[j]) {\n               \
    \ collision++;\n            }\n        }\n    }\n    return collision;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xr21_nu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long left[n];\n    long right[n];\n    for (i = 0; i\
    \ < n; i++) {\n        left[i] = i;\n        right[i] = n - i - 1;\n    }\n  \
    \  for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if\
    \ (left[i] == right[j]) {\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1dssk7l6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++)\n   \
    \ {\n        for (j = 0; j < n; j++)\n        {\n            for (k = 0; k < n;\
    \ k++)\n            {\n                for (l = 0; l < n; l++)\n             \
    \   {\n                    for (m = 0; m < n; m++)\n                    {\n  \
    \                      for (n = 0; n < n; n++)\n                        {\n  \
    \                          count++;\n                        }\n             \
    \       }\n                }\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppkzi820o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = n - 1;\n    long[] left = new long[n];\n \
    \   long[] right = new long[n];\n    for (i = 0; i < n; i++) \n    {\n       \
    \ left[i] = i;\n        right[i] = n - i - 1;\n    }\n    while (i < n && j >=\
    \ 0) \n    {\n        if (left[i] < right[j]) \n        {\n            count +=\
    \ j + 1;\n            i++;\n        } \n        else \n        {\n           \
    \ j--;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4egim0m4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i < j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxc1sy4gl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long count = 0;\n    for (i = 0; i < n; i++)\n    {\n        for (j\
    \ = 0; j < n; j++)\n        {\n            for (k = 0; k < n; k++)\n         \
    \   {\n                for (l = 0; l < n; l++)\n                {\n          \
    \          for (m = 0; m < n; m++)\n                    {\n                  \
    \      for (n = 0; n < n; n++)\n                        {\n                  \
    \          for (o = 0; o < n; o++)\n                            {\n          \
    \                      for (p = 0; p < n; p++)\n                             \
    \   {\n                                    for (q = 0; q < n; q++)\n         \
    \                           {\n                                        for (r\
    \ = 0; r < n; r++)\n                                        {\n              \
    \                              for (s = 0; s < n; s++)\n                     \
    \                       {\n                                                for\
    \ (t = 0; t < n; t++)\n                                                {\n   \
    \                                                 for (u = 0; u < n; u++)\n  \
    \                                                  {\n                       \
    \                                 for (v = 0; v < n; v++)\n                  \
    \                                      {\n                                   \
    \                         for (w = 0; w < n; w++)\n                          \
    \                                  {\n                                       \
    \                         for (x = 0; x < n; x++)\n                          \
    \                                      {\n                                   \
    \                                 for (y = 0; y < n; y++)\n                  \
    \                                                  {\n                       \
    \                                                 for (z = 0; z < n; z++)\n  \
    \                                                                      {\n   \
    \                                                                         for\
    \ (a = 0; a < n; a++)\n                                                      \
    \                      {\n                                                   \
    \                             for (b = 0; b < n; b++)\n                      \
    \                                                          {\n               \
    \                                                                     for (c =\
    \ 0; c < n; c++)\n                                                           \
    \                         {\n                                                \
    \                                        for (d = 0; d < n;\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplniw3l8u.d(63): Error: expression expected, not \''unittest\''\n/tmp/tmplniw3l8u.d(64):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmplniw3l8u.d(73): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmplniw3l8u.d(73):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplniw3l8u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ cnt;\n    float x[n], y[n], z[n];\n    float a[n], b[n], c[n];\n    float t[n];\n\
    \    float d;\n    float min;\n    cnt = 0;\n    for (i = 0; i < n; i++) {\n \
    \       x[i] = rand();\n        y[i] = rand();\n        z[i] = rand();\n     \
    \   a[i] = rand();\n        b[i] = rand();\n        c[i] = rand();\n    }\n  \
    \  for (i = 0; i < n; i++) {\n        min = 1000000;\n        for (j = 0; j <\
    \ n; j++) {\n            if (i == j) {\n                continue;\n          \
    \  }\n            d = (x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] -\
    \ y[j]) + (z[i] - z[j]) * (z[i] - z[j]);\n            if (d < min) {\n       \
    \         min = d;\n            }\n        }\n        t[i] = sqrt(min);\n    }\n\
    \    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          \
    \  if (i == j) {\n                continue;\n            }\n            d = (a[i]\
    \ - a[j]) * (a[i] - a[j]) + (b[i] - b[j]) * (b[i] - b[j]) + (c[i] - c[j]) * (c[i]\
    \ - c[j]);\n            if (d < 0.00001) {\n                continue;\n      \
    \      }\n            d = (x[i] - x[j]) * (a[i] - a[j]) + (y[i] - y[j]) * (b[i]\
    \ - b[j]) + (z[i] - z[j]) * (c[i] - c[j]);\n            if (d < 0) {\n       \
    \        \nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5_syr9j_.d(18): Error: multiple declarations must have the same
    type, not float[n] and float[n]\n/tmp/tmp5_syr9j_.d(18): Error: multiple declarations
    must have the same type, not float[n] and float[n]\n/tmp/tmp5_syr9j_.d(19): Error:
    multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5_syr9j_.d(19):
    Error: multiple declarations must have the same type, not float[n] and float[n]\n/tmp/tmp5_syr9j_.d(57):
    Error: found \''unittest\'' instead of statement\n/tmp/tmp5_syr9j_.d(67): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp5_syr9j_.d(67):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp5_syr9j_.d(67):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_syr9j_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11mf_dqb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792596
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j < n;\
    \ j++) \n        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeyo_nao7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    while (i < n) {\n        long j = 0;\n        while\
    \ (j < n) {\n            if (i == j) {\n                j = j + 1;\n         \
    \   } else {\n                collisions = collisions + 1;\n                j\
    \ = j + 1;\n            }\n        }\n        i = i + 1;\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwwej2sy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
- exit_code: 1
  program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left = new long[n];\n    long[] right = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        left[i] = i;\n        right[i] = n - i\
    \ - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (left[i] > right[j]) {\n                count++;\n       \
    \     }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphc5a4b1q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659792597
