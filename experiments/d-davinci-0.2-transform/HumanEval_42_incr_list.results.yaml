language: d
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n        ret[i] = e + 1L;\n   \
    \ return ret;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n      \
    \  ret[i] = e + 1L;\n    return ret;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n        ret[i] = e + 1L;\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L,\
    \ 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L,\
    \ 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n\
    {\n    long[] ret =\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1nlnpuua.d(59): Error: expression expected, not `unittest`\n/tmp/tmp1nlnpuua.d(60):
    Error: semicolon expected, not `{`\n/tmp/tmp1nlnpuua.d(67): Error: found `End
    of File` when expecting `}` following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp1nlnpuua.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmnj6py8q.d(63): Error: no identifier for declarator `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnj6py8q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmnj6py8q.d(63): Error: no identifier for declarator `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnj6py8q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1.0, 2.0,\
    \ 3.0])\n    [2.0, 3.0, 4.0]\n    >>> incr_list([5.0, 3.0, 5.0, 2.0, 3.0, 3.0,\
    \ 9.0, 0.0, 123.0])\n    [6.0, 4.0, 6.0, 3.0, 4.0, 4.0, 10.0, 1.0, 124.0]\n  \
    \  \n*/\ndouble[] incr_list(double[] l) \n{\n    double[] res = new double[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1.0;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1.0, 2.0,\
    \ 3.0])\n    [0.0, 1.0, 2.0]\n    >>> decr_list([5.0, 3.0, 5.0, 2.0, 3.0, 3.0,\
    \ 9.0, 0.0,\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps74xj05x.d(54): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps74xj05x.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppfib0x5q.d(67): Error: `tmppfib0x5q.incr_list` called with argument
    types `(void[])` matches both:\n/tmp/tmppfib0x5q.d(11):     `tmppfib0x5q.incr_list(long[]
    l)`\nand:\n/tmp/tmppfib0x5q.d(45):     `tmppfib0x5q.incr_list(long[] l)`\n/tmp/tmppfib0x5q.d(68):
    Error: `tmppfib0x5q.incr_list` called with argument types `(long[])` matches both:\n/tmp/tmppfib0x5q.d(11):     `tmppfib0x5q.incr_list(long[]
    l)`\nand:\n/tmp/tmppfib0x5q.d(45):     `tmppfib0x5q.incr_list(long[] l)`\n/tmp/tmppfib0x5q.d(69):
    Error: `tmppfib0x5q.incr_list` called with argument types `(long[])` matches both:\n/tmp/tmppfib0x5q.d(11):     `tmppfib0x5q.incr_list(long[]
    l)`\nand:\n/tmp/tmppfib0x5q.d(45):     `tmppfib0x5q.incr_list(long[] l)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppfib0x5q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwebfg_bo.d(66): Error: `tmpwebfg_bo.incr_list` called with argument
    types `(void[])` matches both:\n/tmp/tmpwebfg_bo.d(11):     `tmpwebfg_bo.incr_list(long[]
    l)`\nand:\n/tmp/tmpwebfg_bo.d(45):     `tmpwebfg_bo.incr_list(long[] l)`\n/tmp/tmpwebfg_bo.d(67):
    Error: `tmpwebfg_bo.incr_list` called with argument types `(long[])` matches both:\n/tmp/tmpwebfg_bo.d(11):     `tmpwebfg_bo.incr_list(long[]
    l)`\nand:\n/tmp/tmpwebfg_bo.d(45):     `tmpwebfg_bo.incr_list(long[] l)`\n/tmp/tmpwebfg_bo.d(68):
    Error: `tmpwebfg_bo.incr_list` called with argument types `(long[])` matches both:\n/tmp/tmpwebfg_bo.d(11):     `tmpwebfg_bo.incr_list(long[]
    l)`\nand:\n/tmp/tmpwebfg_bo.d(45):     `tmpwebfg_bo.incr_list(long[] l)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwebfg_bo.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmnj6py8q.d(63): Error: no identifier for declarator `long[]`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmnj6py8q.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    */\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n   \
    \ foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n*/\nlong[] decr\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8b1skyi4.d(61): Error: semicolon expected, not `unittest`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8b1skyi4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    */\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n   \
    \ foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n*/\nlong[] decr\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8b1skyi4.d(61): Error: semicolon expected, not `unittest`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8b1skyi4.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        ret[i] = e + 1L;\n \
    \   }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \   >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l) {\n        ret[i] = e + 1L;\n    }\n    return ret;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l) {\n    \
    \    ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpms651wzk.d(60): Error: found `unittest` when expecting `)`\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpms651wzk.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzxkx70qi.d(54): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpzxkx70qi.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp21p061d8.d(54): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp21p061d8.d", "-I/tmp"]\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
