language: d
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n        ret[i] = e + 1L;\n   \
    \ return ret;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n      \
    \  ret[i] = e + 1L;\n    return ret;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n        ret[i] = e + 1L;\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L,\
    \ 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L,\
    \ 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n\
    {\n    long[] ret =\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf2y2vzvm.d(59): Error: expression expected, not `unittest`

    /tmp/tmpf2y2vzvm.d(60): Error: semicolon expected, not `{`

    /tmp/tmpf2y2vzvm.d(67): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf2y2vzvm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1.0, 2.0,\
    \ 3.0])\n    [2.0, 3.0, 4.0]\n    >>> incr_list([5.0, 3.0, 5.0, 2.0, 3.0, 3.0,\
    \ 9.0, 0.0, 123.0])\n    [6.0, 4.0, 6.0, 3.0, 4.0, 4.0, 10.0, 1.0, 124.0]\n  \
    \  \n*/\ndouble[] incr_list(double[] l) \n{\n    double[] res = new double[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1.0;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1.0, 2.0,\
    \ 3.0])\n    [0.0, 1.0, 2.0]\n    >>> decr_list([5.0, 3.0, 5.0, 2.0, 3.0, 3.0,\
    \ 9.0, 0.0,\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn8cwxppw.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn8cwxppw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiodcor6h.d(67): Error: `tmpiodcor6h.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(68): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(69): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiodcor6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedws6imw.d(66): Error: `tmpedws6imw.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    /tmp/tmpedws6imw.d(67): Error: `tmpedws6imw.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    /tmp/tmpedws6imw.d(68): Error: `tmpedws6imw.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedws6imw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    */\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n   \
    \ foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n*/\nlong[] decr\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpznz4200g.d(61): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpznz4200g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    */\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n   \
    \ foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n*/\nlong[] decr\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpznz4200g.d(61): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpznz4200g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        ret[i] = e + 1L;\n \
    \   }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \   >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l) {\n        ret[i] = e + 1L;\n    }\n    return ret;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l) {\n    \
    \    ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjzb2yu4o.d(60): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjzb2yu4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0oeygqbs.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oeygqbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgcmyg9vx.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgcmyg9vx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   ret[i] = l[i] - 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        res[i] = e + 1L;\n \
    \   }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n \
    \   >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    */\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n   \
    \ foreach (i, e; l) {\n        res[i] = e - 1L;\n    }\n    return res;\n}\n/*\n\
    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n  \
    \  [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n        ret[i] = e + 1L;\n   \
    \ return ret;\n}\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n      \
    \  ret[i] = e - 1L;\n    return ret;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1.0, 2.0, 3.0])\n    [2.0, 3.0, 4.0]\n    >>> incr_list([5.0,\
    \ 3.0, 5.0, 2.0, 3.0, 3.0, 9.0, 0.0, 123.0])\n    [6.0, 4.0, 6.0, 3.0, 4.0, 4.0,\
    \ 10.0, 1.0, 124.0]\n    \n*/\ndouble[] incr_list(double[] l) \n{\n    double[]\
    \ ret = new double[l.length];\n    foreach (i, e; l)\n        ret[i] = e + 1.0;\n\
    \    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n    >>>\
    \ decr_list([1.0, 2.0, 3.0])\n    [0.0, 1.0, 2.0]\n    >>> decr_list([5.0, 3.0,\
    \ 5.0, 2.0, 3.0, 3.0, 9.0, 0.0, 123.0])\n    [4.0, 2.0, 4.0\nunittest\n{\n   \
    \ alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcg3fk5gd.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcg3fk5gd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n        ret[i] = e + 1L;\n   \
    \ return ret;\n}\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n      \
    \  ret[i] = e - 1L;\n    return ret;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n        ret[i] = e + 1L;\n    return ret;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L,\
    \ 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L,\
    \ 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[] l) \n\
    {\n    long[]\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikfrisnl.d(59): Error: no identifier for declarator `long[]`

    /tmp/tmpikfrisnl.d(59): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikfrisnl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        result[i] = e\
    \ + 1L;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        result[i] = e + 1L;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    foreach (i, e; l) \n  \
    \  {\n        result[i] = e + 1L;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate =\
    \ incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1ljt6r1.d(66): Error: `tmpv1ljt6r1.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpv1ljt6r1.d(11):     `tmpv1ljt6r1.incr_list(long[] l)`

    and:

    /tmp/tmpv1ljt6r1.d(45):     `tmpv1ljt6r1.incr_list(long[] l)`

    /tmp/tmpv1ljt6r1.d(67): Error: `tmpv1ljt6r1.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpv1ljt6r1.d(11):     `tmpv1ljt6r1.incr_list(long[] l)`

    and:

    /tmp/tmpv1ljt6r1.d(45):     `tmpv1ljt6r1.incr_list(long[] l)`

    /tmp/tmpv1ljt6r1.d(68): Error: `tmpv1ljt6r1.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpv1ljt6r1.d(11):     `tmpv1ljt6r1.incr_list(long[] l)`

    and:

    /tmp/tmpv1ljt6r1.d(45):     `tmpv1ljt6r1.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1ljt6r1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5__m27jt.d(66): Error: `tmp5__m27jt.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(67): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(68): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5__m27jt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprijpnepu.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprijpnepu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e - 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprijpnepu.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprijpnepu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] r =\
    \ new long[l.length];\n    foreach (i, e; l) {\n        r[i] = e + 1L;\n    }\n\
    \    return r;\n}\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] r = new long[l.length];\n    foreach (i, e; l) {\n      \
    \  r[i] = e - 1L;\n    }\n    return r;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] r = new long[l.length];\n\
    \    foreach (i, e; l) {\n        r[i] = e + 1L;\n    }\n    return r;\n}\n/*\n\
    Return list with elements decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n\
    \    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppt_epanu.d(60): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppt_epanu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        res[i] = e + 1L;\n \
    \   }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n \
    \   >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) {\n        res[i] = e - 1L;\n    }\n    return res;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) {\n    \
    \    res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo37ct_r1.d(60): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo37ct_r1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n      \
    \  res[i] = e - 1L;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e - 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw6fdxg9u.d(67): Error: `tmpw6fdxg9u.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpw6fdxg9u.d(11):     `tmpw6fdxg9u.incr_list(long[] l)`

    and:

    /tmp/tmpw6fdxg9u.d(45):     `tmpw6fdxg9u.incr_list(long[] l)`

    /tmp/tmpw6fdxg9u.d(68): Error: `tmpw6fdxg9u.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpw6fdxg9u.d(11):     `tmpw6fdxg9u.incr_list(long[] l)`

    and:

    /tmp/tmpw6fdxg9u.d(45):     `tmpw6fdxg9u.incr_list(long[] l)`

    /tmp/tmpw6fdxg9u.d(69): Error: `tmpw6fdxg9u.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpw6fdxg9u.d(11):     `tmpw6fdxg9u.incr_list(long[] l)`

    and:

    /tmp/tmpw6fdxg9u.d(45):     `tmpw6fdxg9u.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6fdxg9u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiodcor6h.d(67): Error: `tmpiodcor6h.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(68): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(69): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiodcor6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiodcor6h.d(67): Error: `tmpiodcor6h.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(68): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(69): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiodcor6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0oeygqbs.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oeygqbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptaacy8m_.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptaacy8m_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0oeygqbs.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oeygqbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    */\nlong[] decr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n   \
    \ foreach (i, e; l)\n    {\n        ret[i] = e - 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n*/\nlong[] decr\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy9y9dp1q.d(61): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy9y9dp1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiodcor6h.d(67): Error: `tmpiodcor6h.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(68): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(69): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiodcor6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    auto res =\
    \ new long[](l.length);\n    foreach (i, ref e; l)\n    {\n        res[i] = e\
    \ + 1L;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n      \
    \  res[i] = e + 1L;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n        res[i] = e + 1L;\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L,\
    \ 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L,\
    \ 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n\
    {\n    long[] res =\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgwu37szj.d(59): Error: expression expected, not `unittest`

    /tmp/tmpgwu37szj.d(60): Error: semicolon expected, not `{`

    /tmp/tmpgwu37szj.d(67): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwu37szj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        ret[i] = e + 1L;\n \
    \   }\n    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n \
    \   >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l) {\n        ret[i] = e - 1L;\n    }\n    return ret;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l) {\n    \
    \    ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3cb1d1eg.d(60): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cb1d1eg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   ret[i] = l[i] - 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   ret[i] = l[i] + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L,\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkywzx490.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkywzx490.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5__m27jt.d(66): Error: `tmp5__m27jt.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(67): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(68): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5__m27jt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret;\n\
    \    ret.length = l.length;\n    foreach (i, e; l)\n    {\n        ret[i] = e\
    \ + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret;\n    ret.length = l.length;\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret;\n    ret.length = l.length;\n    foreach (i, e; l)\n\
    \    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with\
    \ elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n\
    \    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L,\
    \ 4L, 4L, 10L, 1L, 124\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbftcjxt0.d(57): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbftcjxt0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1.0, 2.0,\
    \ 3.0])\n    [2.0, 3.0, 4.0]\n    >>> incr_list([5.0, 3.0, 5.0, 2.0, 3.0, 3.0,\
    \ 9.0, 0.0, 123.0])\n    [6.0, 4.0, 6.0, 3.0, 4.0, 4.0, 10.0, 1.0, 124.0]\n  \
    \  \n*/\ndouble[] incr_list(double[] l) \n{\n    double[] res = new double[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1.0;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1.0, 2.0,\
    \ 3.0])\n    [0.0, 1.0, 2.0]\n    >>> decr_list([5.0, 3.0, 5.0, 2.0, 3.0, 3.0,\
    \ 9.0, 0.0,\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn8cwxppw.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn8cwxppw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        ret[i] = e + 1L;\n \
    \   }\n    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n \
    \   >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l) {\n        ret[i] = e - 1L;\n    }\n    return ret;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l) {\n    \
    \    ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3cb1d1eg.d(60): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cb1d1eg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        res[i] = e + 1L;\n \
    \   }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \   >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) {\n        res[i] = e + 1L;\n    }\n    return res;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) {\n    \
    \    res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwthov21i.d(60): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwthov21i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n      \
    \  res[i] = e + 1L;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n        res[i] = e + 1L;\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L,\
    \ 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L,\
    \ 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n\
    {\n    long[] res =\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgwu37szj.d(59): Error: expression expected, not `unittest`

    /tmp/tmpgwu37szj.d(60): Error: semicolon expected, not `{`

    /tmp/tmpgwu37szj.d(67): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwu37szj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedws6imw.d(66): Error: `tmpedws6imw.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    /tmp/tmpedws6imw.d(67): Error: `tmpedws6imw.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    /tmp/tmpedws6imw.d(68): Error: `tmpedws6imw.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedws6imw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    return map!((e) => e + 1L)(l);\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    return map!((e) => e + 1L)(l);\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    return map!((e)\
    \ => e + 1L)(l);\n}\n/*\nReturn list with elements incremented by 1.\n    >>>\
    \ incr_list([1L, 2L, 3L])\n    [\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpds5s2261.d(56): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpds5s2261.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e - 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0oeygqbs.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oeygqbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprijpnepu.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprijpnepu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        res[i] = e + 1L;\n \
    \   }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \   >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) {\n        res[i] = e + 1L;\n    }\n    return res;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) {\n    \
    \    res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwthov21i.d(60): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwthov21i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list_2([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list_2([5L, 3L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_2(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n      \
    \  res[i] = e + 1L;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list_3([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list_3([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_3(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n        res[i] = e + 1L;\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list_4([1L, 2L, 3L])\n  \
    \  [2L, 3L, 4L]\n    >>> incr_list_4([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5t5d3i6c.d(57): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5t5d3i6c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        result[i] = e +\
    \ 1L;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        result[i] = e + 1L;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    foreach (i, e; l)\n   \
    \ {\n        result[i] = e + 1L;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eitata_.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eitata_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e - 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        res[i] = e + 1L;\n \
    \   }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \   >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) {\n        res[i] = e + 1L;\n    }\n    return res;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) {\n    \
    \    res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwthov21i.d(60): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwthov21i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgcmyg9vx.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgcmyg9vx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n        ret[i] = e + 1L;\n   \
    \ return ret;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n      \
    \  ret[i] = e + 1L;\n    return ret;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n        ret[i] = e + 1L;\n    return ret;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L,\
    \ 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L,\
    \ 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n\
    {\n    long[] ret =\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf2y2vzvm.d(59): Error: expression expected, not `unittest`

    /tmp/tmpf2y2vzvm.d(60): Error: semicolon expected, not `{`

    /tmp/tmpf2y2vzvm.d(67): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf2y2vzvm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprijpnepu.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprijpnepu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n      \
    \  res[i] = e + 1L;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n        res[i] = e + 1L;\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L,\
    \ 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L,\
    \ 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n\
    {\n    long[] res =\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgwu37szj.d(59): Error: expression expected, not `unittest`

    /tmp/tmpgwu37szj.d(60): Error: semicolon expected, not `{`

    /tmp/tmpgwu37szj.d(67): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwu37szj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        result[i] = e\
    \ + 1L;\n    }\n    return result;\n}\n/*\nReturn list with elements decremented\
    \ by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        result[i] = e - 1L;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n     \
    \   res[i] = l[i] + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_3(long[] l) \n{\n    return map!(a => a + 1L)(l);\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_4(long[]\
    \ l) \n{\n    return map!\nunittest\n{\n    alias candidate = incr_list;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8mnl0q1e.d(60): Error: template argument expected following `!`

    /tmp/tmp8mnl0q1e.d(60): Error: found `unittest` when expecting `;` following `return`
    statement

    /tmp/tmp8mnl0q1e.d(68): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mnl0q1e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0oeygqbs.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oeygqbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        result[i] = e +\
    \ 1L;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        result[i] = e + 1L;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    foreach (i, e; l)\n   \
    \ {\n        result[i] = e + 1L;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3a5j8aap.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3a5j8aap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiodcor6h.d(67): Error: `tmpiodcor6h.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(68): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(69): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiodcor6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        res[i] = e + 1L;\n \
    \   }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n \
    \   >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) {\n        res[i] = e - 1L;\n    }\n    return res;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e - 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e - 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprijpnepu.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprijpnepu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiodcor6h.d(67): Error: `tmpiodcor6h.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(68): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(69): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiodcor6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5__m27jt.d(66): Error: `tmp5__m27jt.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(67): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(68): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5__m27jt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n      \
    \  res[i] = e - 1L;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n        res[i] = e + 1L;\n    return res;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L,\
    \ 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L,\
    \ 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[] l) \n\
    {\n    long[]\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsnaki87e.d(59): Error: no identifier for declarator `long[]`

    /tmp/tmpsnaki87e.d(59): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnaki87e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        result[i] = e +\
    \ 1L;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        result[i] = e + 1L;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    foreach (i, e; l)\n   \
    \ {\n        result[i] = e + 1L;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3a5j8aap.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3a5j8aap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0oeygqbs.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oeygqbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e - 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        result[i] = e +\
    \ 1L;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        result[i] = e + 1L;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    foreach (i, e; l)\n   \
    \ {\n        result[i] = e + 1L;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3a5j8aap.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3a5j8aap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5__m27jt.d(66): Error: `tmp5__m27jt.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(67): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(68): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5__m27jt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        res[i] = e + 1L;\n \
    \   }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \   >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) {\n        res[i] = e + 1L;\n    }\n    return res;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) {\n    \
    \    res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwthov21i.d(60): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwthov21i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5__m27jt.d(66): Error: `tmp5__m27jt.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(67): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(68): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5__m27jt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedws6imw.d(66): Error: `tmpedws6imw.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    /tmp/tmpedws6imw.d(67): Error: `tmpedws6imw.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    /tmp/tmpedws6imw.d(68): Error: `tmpedws6imw.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedws6imw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        result[i] = e\
    \ + 1L;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        result[i] = e + 1L;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    foreach (i, e; l) \n  \
    \  {\n        result[i] = e + 1L;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate =\
    \ incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L,\
    \ 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1ljt6r1.d(66): Error: `tmpv1ljt6r1.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpv1ljt6r1.d(11):     `tmpv1ljt6r1.incr_list(long[] l)`

    and:

    /tmp/tmpv1ljt6r1.d(45):     `tmpv1ljt6r1.incr_list(long[] l)`

    /tmp/tmpv1ljt6r1.d(67): Error: `tmpv1ljt6r1.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpv1ljt6r1.d(11):     `tmpv1ljt6r1.incr_list(long[] l)`

    and:

    /tmp/tmpv1ljt6r1.d(45):     `tmpv1ljt6r1.incr_list(long[] l)`

    /tmp/tmpv1ljt6r1.d(68): Error: `tmpv1ljt6r1.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpv1ljt6r1.d(11):     `tmpv1ljt6r1.incr_list(long[] l)`

    and:

    /tmp/tmpv1ljt6r1.d(45):     `tmpv1ljt6r1.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1ljt6r1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n      \
    \  res[i] = e + 1L;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n        res[i] = e + 1L;\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L,\
    \ 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L,\
    \ 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n\
    {\n    long[] res =\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgwu37szj.d(59): Error: expression expected, not `unittest`

    /tmp/tmpgwu37szj.d(60): Error: semicolon expected, not `{`

    /tmp/tmpgwu37szj.d(67): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwu37szj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements multiplied by 2.\n    >>> mul2_list([1L, 2L,\
    \ 3L])\n    [2L, 4L, 6L]\n    >>> mul2_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [10L, 6L, 10L, 4L, 6L, 6L, 18L, 0L, 246L]\n    \n*/\nlong[] mul2_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e * 2L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ divided by 2.\n    >>> div2_list([1L, 2L, 3L])\n    [0L, 1L, 1L]\n    >>> div2_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [2L, 1L, 2L, 1L, 1L, 1L, 4L, 0L, 61L]\n\
    \    \n*/\nlong[] div\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp90osq1j6.d(63): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp90osq1j6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiodcor6h.d(67): Error: `tmpiodcor6h.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(68): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(69): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiodcor6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n        ret[i] = e + 1L;\n   \
    \ return ret;\n}\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n      \
    \  ret[i] = e - 1L;\n    return ret;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1.0, 2.0, 3.0])\n    [2.0, 3.0, 4.0]\n    >>> incr_list([5.0,\
    \ 3.0, 5.0, 2.0, 3.0, 3.0, 9.0, 0.0, 123.0])\n    [6.0, 4.0, 6.0, 3.0, 4.0, 4.0,\
    \ 10.0, 1.0, 124.0]\n    \n*/\ndouble[] incr_list(double[] l) \n{\n    double[]\
    \ ret = new double[l.length];\n    foreach (i, e; l)\n        ret[i] = e + 1.0;\n\
    \    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n    >>>\
    \ decr_list([1.0, 2.0, 3.0])\n    [0.0, 1.0, 2.0]\n    >>> decr_list([5.0, 3.0,\
    \ 5.0, 2.0, 3.0, 3.0, 9.0, 0.0, 123.0])\n    [4.0, 2.0, 4.0\nunittest\n{\n   \
    \ alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcg3fk5gd.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcg3fk5gd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkp_w__0n.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkp_w__0n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n        ret[i] = e + 1L;\n   \
    \ return ret;\n}\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n      \
    \  ret[i] = e - 1L;\n    return ret;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n\
    {\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e - 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw6fdxg9u.d(67): Error: `tmpw6fdxg9u.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpw6fdxg9u.d(11):     `tmpw6fdxg9u.incr_list(long[] l)`

    and:

    /tmp/tmpw6fdxg9u.d(45):     `tmpw6fdxg9u.incr_list(long[] l)`

    /tmp/tmpw6fdxg9u.d(68): Error: `tmpw6fdxg9u.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpw6fdxg9u.d(11):     `tmpw6fdxg9u.incr_list(long[] l)`

    and:

    /tmp/tmpw6fdxg9u.d(45):     `tmpw6fdxg9u.incr_list(long[] l)`

    /tmp/tmpw6fdxg9u.d(69): Error: `tmpw6fdxg9u.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpw6fdxg9u.d(11):     `tmpw6fdxg9u.incr_list(long[] l)`

    and:

    /tmp/tmpw6fdxg9u.d(45):     `tmpw6fdxg9u.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6fdxg9u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n        ret[i] = e + 1L;\n   \
    \ return ret;\n}\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n      \
    \  ret[i] = e - 1L;\n    return ret;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1.0, 2.0, 3.0])\n    [2.0, 3.0, 4.0]\n    >>> incr_list([5.0,\
    \ 3.0, 5.0, 2.0, 3.0, 3.0, 9.0, 0.0, 123.0])\n    [6.0, 4.0, 6.0, 3.0, 4.0, 4.0,\
    \ 10.0, 1.0, 124.0]\n    \n*/\ndouble[] incr_list(double[] l) \n{\n    double[]\
    \ ret = new double[l.length];\n    foreach (i, e; l)\n        ret[i] = e + 1.0;\n\
    \    return ret;\n}\n/*\nReturn list with elements decremented by 1.\n    >>>\
    \ decr_list([1.0, 2.0, 3.0])\n    [0.0, 1.0, 2.0]\n    >>> decr_list([5.0, 3.0,\
    \ 5.0, 2.0, 3.0, 3.0, 9.0, 0.0, 123.0])\n    [4.0, 2.0, 4.0\nunittest\n{\n   \
    \ alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcg3fk5gd.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcg3fk5gd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiodcor6h.d(67): Error: `tmpiodcor6h.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(68): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(69): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiodcor6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n      \
    \  res[i] = e - 1L;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n        res[i] = e + 1L;\n    return res;\n}\n/*\nReturn\
    \ list with elements decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L,\
    \ 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L,\
    \ 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n*/\nlong[] decr_list(long[] l) \n{\n   \
    \ long[] res = new long\nunittest\n{\n    alias candidate = incr_list;\n\n   \
    \ assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L,\
    \ 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgpj7wxlr.d(57): Error: semicolon expected, not `unittest`

    /tmp/tmpgpj7wxlr.d(57): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgpj7wxlr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbf8lzmrx.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbf8lzmrx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] r =\
    \ new long[l.length];\n    foreach (i, e; l)\n        r[i] = e + 1L;\n    return\
    \ r;\n}\n/*\nReturn list with elements decremented by 1.\n    >>> decr_list([1L,\
    \ 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n    \n*/\nlong[] decr_list(long[]\
    \ l) \n{\n    long[] r = new long[l.length];\n    foreach (i, e; l)\n        r[i]\
    \ = e - 1L;\n    return r;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgcmyg9vx.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgcmyg9vx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0oeygqbs.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oeygqbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ decremented by 1.\n    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>>\
    \ decr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L,\
    \ 2L, 8L, -1L, 122L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiodcor6h.d(67): Error: `tmpiodcor6h.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(68): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    /tmp/tmpiodcor6h.d(69): Error: `tmpiodcor6h.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpiodcor6h.d(11):     `tmpiodcor6h.incr_list(long[] l)`

    and:

    /tmp/tmpiodcor6h.d(45):     `tmpiodcor6h.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiodcor6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n\
    \    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0oeygqbs.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oeygqbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements squared.\n    >>> square_list([1L, 2L, 3L])\n\
    \    [1L, 4L, 9L]\n    >>> square_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [25L, 9L, 25L, 4L, 9L, 9L, 81L, 0L, 15129L]\n    \n*/\nlong[] square_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e * e;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ cubed.\n    >>> cube_list([1L, 2L, 3L])\n    [1L, 8L, 27L]\n    >>> cube_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [125L, 27L, 125L, 8L, 27L, 27L, 729L,\
    \ 0L, 1860867L]\n    \n*/\nlong[] cube_list(long[]\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtscz2mq.d(63): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtscz2mq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0oeygqbs.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oeygqbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) {\n        res[i] = e + 1L;\n \
    \   }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n \
    \   >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) {\n        res[i] = e + 1L;\n    }\n    return res;\n}\n\
    /*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n\
    \    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) {\n    \
    \    res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long\nunittest\n{\n    alias\
    \ candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwthov21i.d(60): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwthov21i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        result[i] = e +\
    \ 1L;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list2(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n      \
    \  res[i] = e + 1L;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list3(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n        res[i] = e + 1L;\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L,\
    \ 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L,\
    \ 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list4(long[] l) \n\
    {\n    long\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppyyv2b_5.d(59): Error: no identifier for declarator `long`

    /tmp/tmppyyv2b_5.d(59): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppyyv2b_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5__m27jt.d(66): Error: `tmp5__m27jt.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(67): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    /tmp/tmp5__m27jt.d(68): Error: `tmp5__m27jt.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmp5__m27jt.d(11):     `tmp5__m27jt.incr_list(long[] l)`

    and:

    /tmp/tmp5__m27jt.d(45):     `tmp5__m27jt.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5__m27jt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0oeygqbs.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oeygqbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n      \
    \  res[i] = e + 1L;\n    return res;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n        res[i] = e + 1L;\n    return res;\n}\n/*\nReturn\
    \ list with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L,\
    \ 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L,\
    \ 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n\
    {\n    long[] res =\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgwu37szj.d(59): Error: expression expected, not `unittest`

    /tmp/tmpgwu37szj.d(60): Error: semicolon expected, not `{`

    /tmp/tmpgwu37szj.d(67): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwu37szj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprijpnepu.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprijpnepu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] result\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        result[i] = e\
    \ + 1L;\n    }\n    return result;\n}\n/*\nReturn list with elements incremented\
    \ by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L,\
    \ 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list_2(long[] l) \n{\n    long[] result = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        result[i] = e + 1L;\n    }\n    return\
    \ result;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L,\
    \ 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L,\
    \ 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list_3(long[]\
    \ l) \n{\n    long[] result = new long[l.length];\n    foreach (i, e; l) \n  \
    \  {\n        result[i] = e + 1L;\n    }\n    return result;\n}\n/*\nReturn list\
    \ with elements incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L,\
    \ 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L,\
    \ 6L, 3L, 4L, 4L, 10L, 1L, 124L]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sfll0pv.d(54): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sfll0pv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L,\
    \ 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprijpnepu.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprijpnepu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n        res[i] = e + 1L;\n   \
    \ return res;\n}\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L,\
    \ 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L,\
    \ 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements decremented by 1.\n\
    \    >>> decr_list([1L, 2L, 3L])\n    [0L, 1L, 2L]\n    >>> decr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [4L, 2L, 4L, 1L, 2L, 2L, 8L, -1L, 122L]\n\
    \    \n*/\nlong[] decr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        res[i] = e - 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list2(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list3(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\n\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        ret[i] = e + 1L;\n\
    \    }\n    return ret;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] ret = new long[l.length];\n\
    \    foreach (i, e; l) \n    {\n        ret[i] = e + 1L;\n    }\n    return ret;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] ret = new long[l.length];\n    foreach (i, e; l) \n    {\n\
    \        ret[i] = e + 1L;\n    }\n    return ret;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedws6imw.d(66): Error: `tmpedws6imw.incr_list` called with argument
    types `(void[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    /tmp/tmpedws6imw.d(67): Error: `tmpedws6imw.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    /tmp/tmpedws6imw.d(68): Error: `tmpedws6imw.incr_list` called with argument types
    `(long[])` matches both:

    /tmp/tmpedws6imw.d(11):     `tmpedws6imw.incr_list(long[] l)`

    and:

    /tmp/tmpedws6imw.d(45):     `tmpedws6imw.incr_list(long[] l)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpedws6imw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l) \n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = incr_list;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res\
    \ = new long[l.length];\n    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n\
    \    }\n    return res;\n}\n/*\nReturn list with elements incremented by 1.\n\
    \    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L,\
    \ 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n\
    \    \n*/\nlong[] incr_list(long[] l) \n{\n    long[] res = new long[l.length];\n\
    \    foreach (i, e; l)\n    {\n        res[i] = e + 1L;\n    }\n    return res;\n\
    }\n/*\nReturn list with elements incremented by 1.\n    >>> incr_list([1L, 2L,\
    \ 3L])\n    [2L, 3L, 4L]\n    >>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n\
    \    [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n    \n*/\nlong[] incr_list(long[]\
    \ l) \n{\n    long[] res = new long[l.length];\n    foreach (i, e; l)\n    {\n\
    \        res[i] = e + 1L;\n    }\n    return res;\n}\n/*\nReturn list with elements\
    \ incremented by 1.\n    >>> incr_list([1L, 2L, 3L])\n    [2L, 3L, 4L]\n    >>>\
    \ incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n    [6L, 4L, 6L, 3L, 4L,\
    \ 4L, 10L, 1L, 124L]\n    \n*/\nlong[]\nunittest\n{\n    alias candidate = incr_list;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L,\
    \ 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L,\
    \ 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17sphydx.d(63): Error: no identifier for declarator `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17sphydx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163089
