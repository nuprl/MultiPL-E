name: HumanEval_118_get_closest_vowel
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your task\
  \ is to find the closest vowel that stands between \n    two consonants from the\
  \ right side of the word (case sensitive).\n    \n    Vowels in the beginning and\
  \ ending doesn't count. Return empty string if you didn't\n    find any vowel met\
  \ the above condition. \n\n    You may assume that the given string contains English\
  \ letter only.\n\n    Example:\n    >>> get_closest_vowel(\"yogurt\")\n    \"u\"\
  \n    >>> get_closest_vowel(\"FULL\")\n    \"U\"\n    >>> get_closest_vowel(\"quick\"\
  )\n    \"\"\n    >>> get_closest_vowel(\"ab\")\n    \"\"\n    \n*/\nstring get_closest_vowel(string\
  \ word) \n"
tests: "unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
  yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
  easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
  ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
  most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
  ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
  anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
  Above\") == \"o\");\n}\nvoid main(){}"
completions: ["{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\";\n   \
    \ int distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c)\
    \ != -1)\n        {\n            if(i > 0 && consonants.find(word[i-1]) != -1)\n\
    \            {\n                if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                {\n                    if(abs(i - (word.length - 1))\
    \ < distance)\n                    {\n                        distance = abs(i\
    \ - (word.length - 1));\n                        result = c;\n               \
    \     }\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ distance = 0;\n    int min_distance = word.length;\n    int index = word.length\
    \ - 1;\n    while (index >= 0)\n    {\n        if (vowels.canFind(word[index]))\n\
    \        {\n            distance = word.length - index - 1;\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = word[index..$];\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string closest_vowel\
    \ = \"\";\n    int vowel_index = -1;\n    int word_length = word.length;\n   \
    \ int i = word_length - 1;\n    while (i >= 0)\n    {\n        if (consonants.find(word[i])\
    \ != -1)\n        {\n            int j = i - 1;\n            while (j >= 0)\n\
    \            {\n                if (vowels.find(word[j]) != -1)\n            \
    \    {\n                    if (vowel_index == -1)\n                    {\n  \
    \                      vowel_index = j;\n                        closest_vowel\
    \ = word[j];\n                    }\n                    else\n              \
    \      {\n                        if (abs(i - j) < abs(i - vowel_index))\n   \
    \                     {\n                            vowel_index = j;\n      \
    \                      closest_vowel = word[j];\n                        }\n \
    \                   }\n                }\n                j--;\n            }\n\
    \        }\n        i--;\n    }\n    return closest_vowel;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n  \
    \  int min_dist = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int dist = word.length - i;\n            if(dist < min_dist)\n\
    \            {\n                min_dist = dist;\n                index = i;\n\
    \            }\n        }\n    }\n    if(index != 0)\n    {\n        result =\
    \ word[index..$];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string closest_vowel = \"\";\n    int closest_vowel_index = 0;\n    int closest_consonant_index\
    \ = 0;\n    int closest_distance = 0;\n    int current_distance = 0;\n    int\
    \ current_vowel_index = 0;\n    int current_consonant_index = 0;\n    bool found_vowel\
    \ = false;\n    bool found_consonant = false;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  found_vowel = true;\n            current_vowel_index = i;\n        }\n    \
    \    else if (consonants.find(word[i]) != -1)\n        {\n            found_consonant\
    \ = true;\n            current_consonant_index = i;\n        }\n        if (found_vowel\
    \ && found_consonant)\n        {\n            current_distance = current_consonant_index\
    \ - current_vowel_index;\n            if (current_distance > closest_distance)\n\
    \            {\n                closest_distance = current_distance;\n       \
    \         closest_vowel_index = current_vowel_index;\n                closest_consonant_index\
    \ = current_consonant_index;\n            }\n            found_vowel = false;\n\
    \            found_consonant = false;\n        }\n    }\n    if (closest_vowel_index\
    \ != 0)\n    {\n        closest_vowel = word[closest_vowel_index];\n    }\n  \
    \  return closest_vowel;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ vowel; vowels)\n    {\n        int index = word.find(vowel);\n        if(index\
    \ != -1)\n        {\n            int distance = word.length - index;\n       \
    \     if(distance < min_distance)\n            {\n                int left_index\
    \ = index - 1;\n                int right_index = index + 1;\n               \
    \ if(left_index >= 0 && right_index < word.length)\n                {\n      \
    \              if(consonants.find(word[left_index]) != -1 && consonants.find(word[right_index])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = word[index..$];\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_index = word.length;\n\
    \    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n       \
    \ if(vowels.find(c) != -1)\n        {\n            if(index > 0 && consonants.find(word[index\
    \ - 1]) != -1)\n            {\n                int distance = word.length - index;\n\
    \                if(distance < min_distance)\n                {\n            \
    \        min_distance = distance;\n                    min_index = index;\n  \
    \                  result = c;\n                }\n            }\n        }\n\
    \        index++;\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ char c; word)\n    {\n        if(vowels.canFind(c))\n        {\n           \
    \ int distance = word.length - i;\n            if(distance < min_distance)\n \
    \           {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_dist = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ dist = word.length - i;\n            if(dist < min_dist)\n            {\n  \
    \              if(i == 0)\n                {\n                    if(consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_dist = dist;\n  \
    \                      result = c;\n                    }\n                }\n\
    \                else if(i == word.length - 1)\n                {\n          \
    \          if(consonants.find(word[i-1]) != -1)\n                    {\n     \
    \                   min_dist = dist;\n                        result = c;\n  \
    \                  }\n                }\n                else\n              \
    \  {\n                    if(consonants.find(word[i-1]) != -1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_dist = dist;\n  \
    \                      result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            if(consonants.find(word[i-1])\
    \ != -1 && consonants.find(word[i+1]) != -1)\n            {\n                if(abs(i\
    \ - word.length) < distance)\n                {\n                    distance\
    \ = abs(i - word.length);\n                    result = c;\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = word.length -\
    \ 1;\n    int closest = word.length;\n    while (index >= 0)\n    {\n        if\
    \ (vowels.find(word[index]) != -1)\n        {\n            if (index < closest)\n\
    \            {\n                result = word[index..$];\n                closest\
    \ = index;\n            }\n        }\n        index--;\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c) !=\
    \ -1)\n        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if(min_distance == word.length)\n\
    \        return result;\n    else\n    {\n        if(consonants.find(word[index\
    \ - 1]) != -1)\n            return word[index..$];\n        else\n           \
    \ return result;\n    }\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  int distance = word.length - i;\n            if (consonants.find(word[i+1])\
    \ != -1 && distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    foreach(i, vowel; vowels)\n\
    \    {\n        int index = word.find(vowel);\n        if(index != -1)\n     \
    \   {\n            if(index != 0 && index != word.length - 1)\n            {\n\
    \                if(consonants.find(word[index - 1]) != -1 && consonants.find(word[index\
    \ + 1]) != -1)\n                {\n                    if(index < min_distance)\n\
    \                    {\n                        min_distance = index;\n      \
    \                  result = vowel;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int minDistance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < minDistance)\n\
    \            {\n                minDistance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance = 0;\n\
    \    int min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            if (i\
    \ > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i-1])\
    \ == -1 && vowels.find(word[i+1]) == -1)\n                {\n                \
    \    distance = word.length - i;\n                    if (distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = word[i];\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int left\
    \ = i;\n            int right = i;\n            while(left >= 0 && consonants.canFind(word[left]))\n\
    \                left--;\n            while(right < word.length && consonants.canFind(word[right]))\n\
    \                right++;\n            if(left >= 0 && right < word.length)\n\
    \            {\n                if(distance > abs(i - left))\n               \
    \ {\n                    distance = abs(i - left);\n                    result\
    \ = c;\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ index = word.length - 1;\n    while (index >= 0)\n    {\n        if (vowels.canFind(word[index]))\n\
    \        {\n            if (index > 0 && vowels.canFind(word[index - 1]))\n  \
    \          {\n                index--;\n                continue;\n          \
    \  }\n            else if (index < word.length - 1 && vowels.canFind(word[index\
    \ + 1]))\n            {\n                index++;\n                continue;\n\
    \            }\n            else\n            {\n                result = word[index..$];\n\
    \                break;\n            }\n        }\n        index--;\n    }\n \
    \   return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int distance = word.length;\n    foreach(i, c; word)\n    {\n \
    \       if(vowels.canFind(c))\n        {\n            int pos = word.find(c);\n\
    \            if(pos > 0 && pos < word.length - 1)\n            {\n           \
    \     if(!vowels.canFind(word[pos - 1]) && !vowels.canFind(word[pos + 1]))\n \
    \               {\n                    if(distance > pos)\n                  \
    \  {\n                        distance = pos;\n                        result\
    \ = c;\n                    }\n                }\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiou\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i <\
    \ word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (i > 0 && i < word.length - 1)\n            {\n              \
    \  if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n   \
    \             {\n                    int distance = word.length - i;\n       \
    \             if (distance < min_distance)\n                    {\n          \
    \              min_distance = distance;\n                        result = word[i..$];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int index = word.length - 1;\n    while (index >= 0)\n    {\n        if\
    \ (consonants.find(word[index]) != -1)\n        {\n            if (index == word.length\
    \ - 1)\n            {\n                index--;\n                continue;\n \
    \           }\n            if (vowels.find(word[index + 1]) != -1)\n         \
    \   {\n                result = word[index + 1];\n                break;\n   \
    \         }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = word.length - 1;\n    while (index > 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (vowels.find(word[index - 1]) == -1)\n   \
    \         {\n                result = word[index];\n                break;\n \
    \           }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = 0;\n            for(int j = i + 1; j < word.length; j++)\n      \
    \      {\n                if(consonants.find(word[j]) != -1)\n               \
    \ {\n                    distance = j - i;\n                    break;\n     \
    \           }\n            }\n            if(distance != 0 && distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ left_distance = 0;\n            int right_distance = 0;\n            for(int\
    \ j = i - 1; j >= 0; j--)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    left_distance = i - j;\n    \
    \                break;\n                }\n            }\n            for(int\
    \ j = i + 1; j < word.length; j++)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    right_distance = j - i;\n   \
    \                 break;\n                }\n            }\n            if(left_distance\
    \ != 0 && right_distance != 0)\n            {\n                if(min_distance\
    \ > left_distance + right_distance)\n                {\n                    min_distance\
    \ = left_distance + right_distance;\n                    result = c;\n       \
    \         }\n            }\n        }\n    }\n    return result;\n}", "{\n   \
    \ string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_dist = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ dist = word.length - i;\n            if(dist < min_dist)\n            {\n  \
    \              if(i == 0)\n                {\n                    if(consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_dist = dist;\n  \
    \                      result = c;\n                    }\n                }\n\
    \                else if(i == word.length - 1)\n                {\n          \
    \          if(consonants.find(word[i-1]) != -1)\n                    {\n     \
    \                   min_dist = dist;\n                        result = c;\n  \
    \                  }\n                }\n                else\n              \
    \  {\n                    if(consonants.find(word[i-1]) != -1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_dist = dist;\n  \
    \                      result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(consonants.find(c) != -1)\n      \
    \  {\n            int vowel_index = word.find_first_of(vowels, i);\n         \
    \   if(vowel_index != -1)\n            {\n                distance = vowel_index\
    \ - i;\n                if(distance < min_distance)\n                {\n     \
    \               min_distance = distance;\n                    result = word[vowel_index..vowel_index];\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_dist = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ left_dist = 0;\n            int right_dist = 0;\n            for(int j = i -\
    \ 1; j >= 0; j--)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    left_dist = i - j;\n        \
    \            break;\n                }\n            }\n            for(int j =\
    \ i + 1; j < word.length; j++)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    right_dist = j - i;\n       \
    \             break;\n                }\n            }\n            if(left_dist\
    \ != 0 && right_dist != 0)\n            {\n                int dist = min(left_dist,\
    \ right_dist);\n                if(dist < min_dist)\n                {\n     \
    \               min_dist = dist;\n                    result = c;\n          \
    \      }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(consonants.find(c) != -1)\n      \
    \  {\n            int vowel_index = word.find(vowels, i);\n            if(vowel_index\
    \ != -1)\n            {\n                int distance = vowel_index - i;\n   \
    \             if(distance < min_distance)\n                {\n               \
    \     min_distance = distance;\n                    index = vowel_index;\n   \
    \             }\n            }\n        }\n    }\n    if(index != 0)\n    {\n\
    \        result = word[index..$];\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ left_distance = 0;\n            int right_distance = 0;\n            for(int\
    \ j = i - 1; j >= 0; j--)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    left_distance = i - j;\n    \
    \                break;\n                }\n            }\n            for(int\
    \ j = i + 1; j < word.length; j++)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    right_distance = j - i;\n   \
    \                 break;\n                }\n            }\n            if(left_distance\
    \ != 0 && right_distance != 0)\n            {\n                int distance =\
    \ min(left_distance, right_distance);\n                if(distance < min_distance)\n\
    \                {\n                    min_distance = distance;\n           \
    \         result = c;\n                }\n            }\n        }\n    }\n  \
    \  return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n     \
    \   if(vowels.find(c) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   if(i == 0)\n                {\n                    if(consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \                else if(i == word.length - 1)\n                {\n          \
    \          if(consonants.find(word[i-1]) != -1)\n                    {\n     \
    \                   min_distance = distance;\n                        result =\
    \ c;\n                    }\n                }\n                else\n       \
    \         {\n                    if(consonants.find(word[i-1]) != -1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                if(i > 0 && consonants.find(word[i-1]) != -1)\n   \
    \             {\n                    if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            int distance = 0;\n            for (int j = i;\
    \ j < word.length; j++)\n            {\n                if (consonants.find(word[j])\
    \ != -1)\n                {\n                    distance = j - i;\n         \
    \           break;\n                }\n            }\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               index = i;\n            }\n        }\n    }\n    if (min_distance\
    \ != word.length)\n    {\n        result = word[index..$];\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = 0;\n    int closest_vowel_distance =\
    \ 0;\n    int word_length = word.length;\n    int i = 0;\n    int j = 0;\n   \
    \ int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n\
    \    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii =\
    \ 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n   \
    \ int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n    int rr =\
    \ 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv = 0;\n   \
    \ int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n    int aa =\
    \ 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n   \
    \ int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n    int jjj\
    \ = 0;\n    int kkk = 0;\n    int lll = 0;\n", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    while (index\
    \ > 0)\n    {\n        if (vowels.find(word[index]) != -1)\n        {\n      \
    \      if (vowels.find(word[index - 1]) == -1)\n            {\n              \
    \  result = word[index];\n                break;\n            }\n        }\n \
    \       index--;\n    }\n    return result;\n}", "{\n    string vowels = \"aeiou\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if(index != 0)\n    {\n        result\
    \ = word[index];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int distance = word.length;\n    for (int i\
    \ = word.length - 1; i > 0; i--)\n    {\n        if (vowels.canFind(word[i]) &&\
    \ !vowels.canFind(word[i - 1]))\n        {\n            if (distance > i)\n  \
    \          {\n                distance = i;\n                result = word[i];\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c) !=\
    \ -1)\n        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               index = i;\n            }\n        }\n    }\n    if(index > 0\
    \ && index < word.length - 1)\n    {\n        if(vowels.find(word[index - 1])\
    \ == -1 && vowels.find(word[index + 1]) == -1)\n        {\n            result\
    \ = word[index..$];\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance =\
    \ word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ left_distance = i;\n            int right_distance = word.length - i - 1;\n\
    \            if(left_distance == 0 || right_distance == 0)\n                continue;\n\
    \            if(consonants.find(word[left_distance - 1]) != -1 && consonants.find(word[i\
    \ + 1]) != -1)\n            {\n                if(min_distance > min(left_distance,\
    \ right_distance))\n                {\n                    min_distance = min(left_distance,\
    \ right_distance);\n                    result = c;\n                }\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ ch; word)\n    {\n        if(vowels.canFind(ch))\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                if(i > 0 && consonants.canFind(word[i-1]))\n      \
    \          {\n                    if(i < word.length - 1 && consonants.canFind(word[i+1]))\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = ch;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance = 0;\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            distance = word.length - i;\n            if(distance <\
    \ min_distance)\n            {\n                min_distance = distance;\n   \
    \             result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string closest = \"\";\n    int\
    \ min_dist = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int dist = word.length - i;\n            if(dist < min_dist)\n\
    \            {\n                min_dist = dist;\n                closest = c;\n\
    \            }\n        }\n    }\n    return closest;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            if(i > 0 && i < word.length - 1)\n            {\n    \
    \            if(!vowels.canFind(word[i - 1]) && !vowels.canFind(word[i + 1]))\n\
    \                {\n                    if(abs(i - word.length) < min_distance)\n\
    \                    {\n                        min_distance = abs(i - word.length);\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if(index != 0)\n    {\n        result =\
    \ word[index];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, char c; word)\n    {\n        if(vowels.find(c) != -1)\n     \
    \   {\n            int distance = word.length - i;\n            if(distance <\
    \ min_distance)\n            {\n                min_distance = distance;\n   \
    \             index = i;\n            }\n        }\n    }\n    if(min_distance\
    \ == word.length)\n        return result;\n    else\n    {\n        if(consonants.find(word[index\
    \ - 1]) != -1 && consonants.find(word[index + 1]) != -1)\n            return word[index..$];\n\
    \        else\n            return result;\n    }\n}", "{\n    string vowels =\
    \ \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = 0;\n    int\
    \ distance = 0;\n    int word_length = word.length;\n    int vowel_length = vowels.length;\n\
    \    int vowel_index = 0;\n    int word_index = 0;\n    int vowel_pos = 0;\n \
    \   int word_pos = 0;\n    int vowel_pos_right = 0;\n    int word_pos_right =\
    \ 0;\n    int vowel_pos_left = 0;\n    int word_pos_left = 0;\n    bool found_vowel\
    \ = false;\n    bool found_consonant = false;\n    bool found_vowel_right = false;\n\
    \    bool found_consonant_right = false;\n    bool found_vowel_left = false;\n\
    \    bool found_consonant_left = false;\n    for (vowel_index = 0; vowel_index\
    \ < vowel_length; vowel_index++)\n    {\n        vowel_pos = vowels.indexOf(vowels[vowel_index]);\n\
    \        word_pos = word.indexOf(vowels[vowel_index]);\n        if (word_pos !=\
    \ -1)\n        {\n            found_vowel = true;\n            vowel_pos_right\
    \ = vowels.indexOf(vowels[vowel_index], vowel_pos + 1);\n            word_pos_right\
    \ = word.indexOf(vowels[vowel_index], word_pos + 1);\n            vowel_pos_left\
    \ = vowels.indexOf(vowels[vowel_index], vowel_pos - 1);\n            word_pos_left\
    \ = word.indexOf(vowels[vowel_index], word_pos - 1);\n            if (vowel_pos_right\
    \ != -1)\n            {\n                found_vowel_right = true;\n         \
    \   }\n            if (word_pos_right != -1)\n            {\n                found_consonant_right\
    \ = true;\n            }\n            if (vowel_pos_left != -1)\n            {\n\
    \               ", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int index = 0;\n    int min_index = 0;\n    int min_distance = word.length;\n\
    \    foreach(vowel; vowels)\n    {\n        index = word.find(vowel);\n      \
    \  if(index != -1)\n        {\n            if(consonants.find(word[index - 1])\
    \ != -1 && consonants.find(word[index + 1]) != -1)\n            {\n          \
    \      if(abs(index - word.length) < min_distance)\n                {\n      \
    \              min_distance = abs(index - word.length);\n                    min_index\
    \ = index;\n                }\n            }\n        }\n    }\n    if(min_index\
    \ != 0)\n    {\n        result = word[min_index..min_index];\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int index = 0;\n    int min = word.length;\n    foreach(i, c; word)\n \
    \   {\n        if(vowels.find(c) != -1)\n        {\n            if(i > 0 && consonants.find(word[i-1])\
    \ != -1)\n            {\n                if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                {\n                    if(abs(i - word.length) < min)\n\
    \                    {\n                        min = abs(i - word.length);\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if(index != 0)\n    {\n        result =\
    \ word[index];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int distance = 0;\n    int minDistance = 0;\n \
    \   int wordLength = word.length;\n    int vowelIndex = 0;\n    int consonantIndex\
    \ = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int\
    \ m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n   \
    \ int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int A = 0;\n\
    \    int B = 0;\n    int C = 0;\n    int D = 0;\n    int E = 0;\n    int F = 0;\n\
    \    int G = 0;\n    int H = 0;\n    int I = 0;\n    int J = 0;\n    int K = 0;\n\
    \    int L = 0;\n    int M = 0;\n    int N = 0;\n    int O = 0;\n    int P = 0;\n\
    \    int Q = 0;\n    int R = 0;\n    int S = 0;\n    int T = 0;\n    int U = 0;\n\
    \    int V = 0;\n    int W = 0;\n    int X = 0;\n    int Y = 0;\n    int Z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int ii = 0;\n    int jj =\
    \ 0;\n    int kk = 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n   \
    \ int", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n \
    \   int index = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index > 0 && index < word.length - 1)\n    {\n        result\
    \ = word[index..$];\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string closest_vowel = \"\";\n    int closest_vowel_index\
    \ = 0;\n    int closest_vowel_distance = 0;\n    int word_length = word.length;\n\
    \    int vowel_length = vowels.length;\n    int vowel_index = 0;\n    int vowel_distance\
    \ = 0;\n    for (int i = 0; i < word_length; i++)\n    {\n        for (int j =\
    \ 0; j < vowel_length; j++)\n        {\n            if (word[i] == vowels[j])\n\
    \            {\n                vowel_index = i;\n                vowel_distance\
    \ = word_length - vowel_index;\n                if (vowel_distance > closest_vowel_distance)\n\
    \                {\n                    closest_vowel_distance = vowel_distance;\n\
    \                    closest_vowel_index = vowel_index;\n                    closest_vowel\
    \ = word[closest_vowel_index];\n                }\n            }\n        }\n\
    \    }\n    return closest_vowel;\n}", "{\n    string vowels = \"aeiou\";\n  \
    \  string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int distance\
    \ = 0;\n    int min_distance = 0;\n    int min_index = 0;\n    int word_length\
    \ = word.length;\n    int vowel_length = vowels.length;\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n   \
    \ int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    for (i = 0; i < word_length; i++)\n    {\n\
    \        if (word[i] == 'a')\n        {\n            a = i;\n        }\n     \
    \   if (word[i] == 'e')\n        {\n            e = i;\n        }\n        if\
    \ (word[i] == 'i')\n        {\n            i = i;\n        }\n        if (word[i]\
    \ == 'o')\n        {\n            o = i;\n        }\n        if (word[i] == 'u')\n\
    \        {\n            u = i;\n        }\n        if (word[i] == 'A')\n     \
    \   {\n            A = i;\n        }\n        if (word[i] == 'E')\n        {\n\
    \            E = i;\n        }\n        if (word[i] == 'I')\n        {\n     \
    \       I = i;\n        }\n        if (word[i] == 'O')\n        {\n          \
    \  O = i;\n        }\n        if (word[i] == 'U')\n        {\n            U =\
    \ i;\n        }\n    }\n    if (a != 0)\n    {\n        index = a;\n        distance\
    \ = word_length - index;\n        if (min_distance == 0)\n        {\n        \
    \    min_distance =", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int distance = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, char c; word)\n    {\n        if(vowels.canFind(c))\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = 0;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = 0;\n            int j = i;\n            while(j >=\
    \ 0 && consonants.find(word[j]) != -1)\n            {\n                j--;\n\
    \                distance++;\n            }\n            if(distance > 0)\n  \
    \          {\n                j = i;\n                while(j < word.length &&\
    \ consonants.find(word[j]) != -1)\n                {\n                    j++;\n\
    \                    distance++;\n                }\n                if(distance\
    \ > 0)\n                {\n                    if(min_distance == 0 || distance\
    \ < min_distance)\n                    {\n                        min_distance\
    \ = distance;\n                        index = i;\n                    }\n   \
    \             }\n            }\n        }\n    }\n    if(min_distance > 0)\n \
    \   {\n        result = word[index..index];\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index > 0 && index < word.length - 1)\n    {\n        if(!vowels.canFind(word[index\
    \ - 1]) && !vowels.canFind(word[index + 1]))\n        {\n            result =\
    \ word[index..$];\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int left_distance\
    \ = 0;\n            int right_distance = 0;\n            for(int j = i; j >= 0;\
    \ j--)\n            {\n                if(consonants.canFind(word[j]))\n     \
    \           {\n                    left_distance = i - j;\n                  \
    \  break;\n                }\n            }\n            for(int j = i; j < word.length;\
    \ j++)\n            {\n                if(consonants.canFind(word[j]))\n     \
    \           {\n                    right_distance = j - i;\n                 \
    \   break;\n                }\n            }\n            if(left_distance !=\
    \ 0 && right_distance != 0)\n            {\n                if(min_distance >\
    \ min(left_distance, right_distance))\n                {\n                   \
    \ min_distance = min(left_distance, right_distance);\n                    result\
    \ = c;\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    int closest_vowel_index = -1;\n\
    \    int closest_vowel_distance = word.length;\n    int current_vowel_distance;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          current_vowel_distance = word.length - i;\n            if(current_vowel_distance\
    \ < closest_vowel_distance)\n            {\n                closest_vowel_distance\
    \ = current_vowel_distance;\n                closest_vowel_index = i;\n      \
    \      }\n        }\n    }\n    if(closest_vowel_index == -1)\n    {\n       \
    \ return \"\";\n    }\n    else\n    {\n        return word[closest_vowel_index..closest_vowel_index];\n\
    \    }\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\"\
    ;\n    int distance = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            distance\
    \ = word.length - i - 1;\n            if(distance < min_distance)\n          \
    \  {\n                min_distance = distance;\n                result = c;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, c; word) {\n        if(vowels.canFind(c)) {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance) {\n            \
    \    min_distance = distance;\n                result = c;\n            }\n  \
    \      }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int closest = -1;\n    int i = word.length - 1;\n    while (i >= 0) {\n\
    \        if (vowels.find(word[i]) != -1) {\n            closest = i;\n       \
    \     break;\n        }\n        i--;\n    }\n    if (closest == -1) {\n     \
    \   return \"\";\n    }\n    i = closest - 1;\n    while (i >= 0) {\n        if\
    \ (consonants.find(word[i]) != -1) {\n            return word[closest..closest];\n\
    \        }\n        i--;\n    }\n    return \"\";\n}", "{\n    string vowels =\
    \ \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int j = i;\n            while(j >= 0 && consonants.find(word[j])\
    \ != -1)\n            {\n                j--;\n            }\n            if(j\
    \ >= 0)\n            {\n                j = i;\n                while(j < word.length\
    \ && consonants.find(word[j]) != -1)\n                {\n                    j++;\n\
    \                }\n                if(j < word.length)\n                {\n \
    \                   distance = j - i;\n                    if(distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                if(i > 0 && consonants.find(word[i-1]) != -1)\n\
    \                {\n                    if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if(index != 0)\n    {\n        result =\
    \ word[index..$];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    while (index\
    \ > 0)\n    {\n        if (vowels.find(word[index]) != -1)\n        {\n      \
    \      if (vowels.find(word[index - 1]) == -1)\n            {\n              \
    \  result = word[index];\n                break;\n            }\n        }\n \
    \       index--;\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    while (index\
    \ > 0)\n    {\n        if (vowels.find(word[index]) != -1)\n        {\n      \
    \      if (vowels.find(word[index - 1]) == -1)\n            {\n              \
    \  result = word[index];\n                break;\n            }\n        }\n \
    \       index--;\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                int left = i - 1;\n                int right = i +\
    \ 1;\n                if(left >= 0 && right < word.length)\n                {\n\
    \                    if(consonants.find(word[left]) != -1 && consonants.find(word[right])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, char c; word)\n    {\n        if(vowels.canFind(c))\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiou\";\n    string result = \"\";\n    int distance = 0;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int d\
    \ = word.length - i;\n            if(d > distance)\n            {\n          \
    \      distance = d;\n                result = c;\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int index = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                min_distance = distance;\n                index = i;\n\
    \            }\n        }\n    }\n    if(index == 0)\n        return result;\n\
    \    if(consonants.find(word[index - 1]) != -1 && consonants.find(word[index +\
    \ 1]) != -1)\n        return word[index..$];\n    return result;\n}", "{\n   \
    \ string vowels = \"aeiou\";\n    string result = \"\";\n    int index = 0;\n\
    \    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n       \
    \ if(vowels.find(c) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index != 0)\n    {\n        result = word[index];\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n     \
    \   if(vowels.find(c) != -1)\n        {\n            int left_distance = i;\n\
    \            int right_distance = word.length - i - 1;\n            if(left_distance\
    \ > 0 && right_distance > 0)\n            {\n                if(consonants.find(word[i-1])\
    \ != -1 && consonants.find(word[i+1]) != -1)\n                {\n            \
    \        if(min_distance > min(left_distance, right_distance))\n             \
    \       {\n                        min_distance = min(left_distance, right_distance);\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            if(i != 0 && i != word.length-1)\n            {\n               \
    \ if(consonants.find(word[i-1]) != -1 && consonants.find(word[i+1]) != -1)\n \
    \               {\n                    if(abs(i - word.length) < min)\n      \
    \              {\n                        min = abs(i - word.length);\n      \
    \                  index = i;\n                    }\n                }\n    \
    \        }\n        }\n    }\n    if(index != 0)\n    {\n        result = word[index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n  \
    \  foreach(i, c; word) {\n        if(vowels.canFind(c)) {\n            int distance\
    \ = word.length - i - 1;\n            if(distance < min_distance) {\n        \
    \        min_distance = distance;\n                index = i;\n            }\n\
    \        }\n    }\n    if(min_distance < word.length) {\n        result = word[index..$];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = -1;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if(index > 0 && index < word.length\
    \ - 1)\n    {\n        if(!vowels.canFind(word[index - 1]) && !vowels.canFind(word[index\
    \ + 1]))\n        {\n            result = word[index..$];\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int distance = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ j = i;\n            while(j > 0 && consonants.find(word[j]) != -1)\n       \
    \     {\n                j--;\n            }\n            if(j == 0)\n       \
    \     {\n                j = i;\n                while(j < word.length && consonants.find(word[j])\
    \ != -1)\n                {\n                    j++;\n                }\n   \
    \             if(j == word.length)\n                {\n                    continue;\n\
    \                }\n            }\n            distance = i - j;\n           \
    \ if(distance < min_distance)\n            {\n                min_distance = distance;\n\
    \                result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(consonants.find(word[i-1]) != -1\
    \ && consonants.find(word[i+1]) != -1 && distance < min_distance)\n          \
    \  {\n                min_distance = distance;\n                result = c;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance = 0;\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            distance = word.length - i - 1;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n   \
    \ {\n        if (vowels.find(word[i]) != -1)\n        {\n            if (i > 0\
    \ && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (min_distance > abs(i - word.length + 1))\n                  \
    \  {\n                        min_distance = abs(i - word.length + 1);\n     \
    \                   result = word[i];\n                    }\n               \
    \ }\n            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    int vowel_index = 0;\n    int consonant_index = 0;\n    int word_length =\
    \ word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n\
    \        {\n            vowel_index = i;\n            foreach(j, d; word[i..$])\n\
    \            {\n                if(consonants.find(d) != -1)\n               \
    \ {\n                    consonant_index = j;\n                    distance =\
    \ consonant_index - vowel_index;\n                    if(distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int j = i;\n            while(j >= 0 && consonants.find(word[j])\
    \ != -1)\n            {\n                j--;\n            }\n            if(j\
    \ >= 0)\n            {\n                j = i;\n                while(j < word.length\
    \ && consonants.find(word[j]) != -1)\n                {\n                    j++;\n\
    \                }\n                if(j < word.length)\n                {\n \
    \                   distance = j - i;\n                    if(distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance = 0;\n    int\
    \ minDistance = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n\
    \        if (vowels.find(word[i]) != -1)\n        {\n            if (i > 0 &&\
    \ i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            distance = word.length - i;\n                    if (distance < minDistance)\n\
    \                    {\n                        minDistance = distance;\n    \
    \                    result = word[i];\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int current_distance = 0;\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            current_distance = word.length - i;\n            if(current_distance\
    \ < min_distance)\n            {\n                min_distance = current_distance;\n\
    \                result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(consonants.find(c) != -1)\n      \
    \  {\n            foreach(j, v; vowels)\n            {\n                if(word.find(v,\
    \ i) != -1)\n                {\n                    distance = word.find(v, i)\
    \ - i;\n                    if(distance < min_distance)\n                    {\n\
    \                        min_distance = distance;\n                        result\
    \ = v;\n                    }\n                }\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int index = word.length - 1;\n    while (index >= 0)\n \
    \   {\n        if (vowels.find(word[index]) != -1)\n        {\n            if\
    \ (index == word.length - 1)\n            {\n                index--;\n      \
    \          continue;\n            }\n            if (vowels.find(word[index +\
    \ 1]) == -1)\n            {\n                result = word[index];\n         \
    \       break;\n            }\n        }\n        index--;\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int distance = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ left_distance = 0;\n            int right_distance = 0;\n            for(int\
    \ j = i - 1; j >= 0; j--)\n            {\n                if(consonants.find(word[j])\
    \ != -1)\n                {\n                    left_distance++;\n          \
    \      }\n                else\n                {\n                    break;\n\
    \                }\n            }\n            for(int j = i + 1; j < word.length;\
    \ j++)\n            {\n                if(consonants.find(word[j]) != -1)\n  \
    \              {\n                    right_distance++;\n                }\n \
    \               else\n                {\n                    break;\n        \
    \        }\n            }\n            distance = left_distance + right_distance;\n\
    \            if(distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = c;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int closest = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i-1])\
    \ == -1 && vowels.find(word[i+1]) == -1)\n                {\n                \
    \    if (i < closest)\n                    {\n                        closest\
    \ = i;\n                        result = word[i];\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = word.length - 1;\n    while (index > 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (vowels.find(word[index - 1]) == -1)\n   \
    \         {\n                result = word[index];\n                break;\n \
    \           }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    bool found\
    \ = false;\n    while (index > 0 && !found)\n    {\n        if (consonants.find(word[index])\
    \ != -1)\n        {\n            if (vowels.find(word[index - 1]) != -1)\n   \
    \         {\n                result = word[index - 1];\n                found\
    \ = true;\n            }\n            else\n            {\n                index--;\n\
    \            }\n        }\n        else\n        {\n            index--;\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int closest = word.length;\n    foreach(i, c;\
    \ word)\n    {\n        if(vowels.canFind(c))\n        {\n            if(i > 0\
    \ && i < word.length - 1)\n            {\n                if(!vowels.canFind(word[i\
    \ - 1]) && !vowels.canFind(word[i + 1]))\n                {\n                \
    \    if(abs(i - word.length) < closest)\n                    {\n             \
    \           closest = abs(i - word.length);\n                        result =\
    \ c;\n                    }\n                }\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ left_consonant = word[i..$].find(consonants);\n            int right_consonant\
    \ = word[0..i].rfind(consonants);\n            if(left_consonant != -1 && right_consonant\
    \ != -1)\n            {\n                distance = left_consonant + right_consonant;\n\
    \                if(distance < min_distance)\n                {\n            \
    \        min_distance = distance;\n                    result = c;\n         \
    \       }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int minDistance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int left = i;\n            int right = i;\n            while(left\
    \ >= 0 && consonants.find(word[left]) != -1)\n            {\n                left--;\n\
    \            }\n            while(right < word.length && consonants.find(word[right])\
    \ != -1)\n            {\n                right++;\n            }\n           \
    \ if(left >= 0 && right < word.length)\n            {\n                distance\
    \ = right - left - 1;\n                if(distance < minDistance)\n          \
    \      {\n                    minDistance = distance;\n                    result\
    \ = c;\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(consonants.find(c) != -1)\n        {\n         \
    \   foreach(j, v; vowels)\n            {\n                if(word.find(v, i) !=\
    \ -1)\n                {\n                    int distance = word.find(v, i) -\
    \ i;\n                    if(distance < min_distance)\n                    {\n\
    \                        min_distance = distance;\n                        result\
    \ = v;\n                    }\n                }\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int min_distance = int.max;\n    foreach(i, c; word)\n    {\n \
    \       if(vowels.canFind(c))\n        {\n            int distance = 0;\n    \
    \        for(int j = i; j < word.length; j++)\n            {\n               \
    \ if(consonants.canFind(word[j]))\n                {\n                    distance++;\n\
    \                }\n                else if(vowels.canFind(word[j]))\n       \
    \         {\n                    break;\n                }\n            }\n  \
    \          if(distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = c;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int index = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                min_distance = distance;\n                index = i;\n\
    \            }\n        }\n    }\n    if(index != 0)\n    {\n        result =\
    \ word[index..$];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int i = word.length;\n    int j = 0;\n    int\
    \ k = 0;\n    while (i > 0)\n    {\n        if (vowels.find(word[i-1]) != -1)\n\
    \        {\n            j = i;\n            break;\n        }\n        i--;\n\
    \    }\n    while (j > 0)\n    {\n        if (vowels.find(word[j-1]) == -1)\n\
    \        {\n            k = j;\n            break;\n        }\n        j--;\n\
    \    }\n    if (k > 0)\n    {\n        result = word[k-1];\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n\
    \    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n       \
    \ if(vowels.find(c) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int min_distance = word.length;\n    for (int i\
    \ = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            int left_distance = 0;\n            int right_distance\
    \ = 0;\n            for (int j = i - 1; j >= 0; j--)\n            {\n        \
    \        if (consonants.find(word[j]) != -1)\n                {\n            \
    \        left_distance = i - j;\n                    break;\n                }\n\
    \            }\n            for (int j = i + 1; j < word.length; j++)\n      \
    \      {\n                if (consonants.find(word[j]) != -1)\n              \
    \  {\n                    right_distance = j - i;\n                    break;\n\
    \                }\n            }\n            if (left_distance != 0 && right_distance\
    \ != 0)\n            {\n                int distance = min(left_distance, right_distance);\n\
    \                if (distance < min_distance)\n                {\n           \
    \         min_distance = distance;\n                    result = word[i];\n  \
    \              }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min = int.max;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int left = i;\n\
    \            int right = i;\n            while(left >= 0 && consonants.canFind(word[left]))\n\
    \                left--;\n            while(right < word.length && consonants.canFind(word[right]))\n\
    \                right++;\n            if(left >= 0 && right < word.length)\n\
    \            {\n                if(right - left < min)\n                {\n  \
    \                  min = right - left;\n                    result = c;\n    \
    \            }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i == 0)\n            {\n                if\
    \ (consonants.find(word[i+1]) != -1)\n                {\n                    distance\
    \ = 1;\n                }\n            }\n            else if (i == word.length\
    \ - 1)\n            {\n                if (consonants.find(word[i-1]) != -1)\n\
    \                {\n                    distance = 1;\n                }\n   \
    \         }\n            else\n            {\n                if (consonants.find(word[i-1])\
    \ != -1 && consonants.find(word[i+1]) != -1)\n                {\n            \
    \        distance = 1;\n                }\n            }\n            if (distance\
    \ == 1)\n            {\n                if (min_distance > distance)\n       \
    \         {\n                    min_distance = distance;\n                  \
    \  result = word[i];\n                }\n            }\n            distance =\
    \ 0;\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                min_distance = distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               index = i;\n            }\n        }\n    }\n    if(min_distance\
    \ != word.length)\n    {\n        result = word[index..$];\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int distance = 0;\n    int temp = 0;\n    int index = 0;\n    int index_temp\
    \ = 0;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n   \
    \     {\n            temp = i;\n            index_temp = index;\n            if(index\
    \ > 0)\n            {\n                if(vowels.find(word[index-1]) == -1)\n\
    \                {\n                    if(distance == 0)\n                  \
    \  {\n                        distance = temp;\n                        result\
    \ = c;\n                    }\n                    else if(temp < distance)\n\
    \                    {\n                        distance = temp;\n           \
    \             result = c;\n                    }\n                }\n        \
    \    }\n        }\n        index++;\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, vowel; vowels)\n    {\n        index = word.find(vowel);\n   \
    \     if(index != -1)\n        {\n            if(index != 0 && index != word.length\
    \ - 1)\n            {\n                if(consonants.find(word[index - 1]) !=\
    \ -1 && consonants.find(word[index + 1]) != -1)\n                {\n         \
    \           if(min_distance > abs(index - word.length))\n                    {\n\
    \                        min_distance = abs(index - word.length);\n          \
    \              result = vowel;\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return result;\n}", "{\n    string vowels =\
    \ \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(consonants.find(word[i-1])\
    \ != -1 && consonants.find(word[i+1]) != -1)\n            {\n                if(distance\
    \ < min_distance)\n                {\n                    min_distance = distance;\n\
    \                    index = i;\n                }\n            }\n        }\n\
    \    }\n    if(min_distance != word.length)\n    {\n        result = word[index..$];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    for (i =\
    \ 0; i < word.length; i++)\n    {\n        for (j = 0; j < vowels.length; j++)\n\
    \        {\n            if (word[i] == vowels[j])\n            {\n           \
    \     for (k = i; k < word.length; k++)\n                {\n                 \
    \   for (l = 0; l < consonants.length; l++)\n                    {\n         \
    \               if (word[k] == consonants[l])\n                        {\n   \
    \                         distance = k - i;\n                            if (distance\
    \ < min_distance)\n                            {\n                           \
    \     min_distance = distance;\n                                result = word[i];\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            if(i\
    \ > 0 && consonants.canFind(word[i-1]) && i < word.length - 1 && consonants.canFind(word[i+1]))\n\
    \            {\n                if(i < distance)\n                {\n        \
    \            distance = i;\n                    result = c;\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int distance = 0;\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(consonants.find(c)\
    \ != -1)\n        {\n            foreach(j, v; vowels)\n            {\n      \
    \          if(word.find(v, i) != -1)\n                {\n                    distance\
    \ = word.find(v, i) - i;\n                    if(distance < min_distance)\n  \
    \                  {\n                        min_distance = distance;\n     \
    \                   index = word.find(v, i);\n                        result =\
    \ v;\n                    }\n                }\n            }\n        }\n   \
    \ }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string closest_vowel\
    \ = \"\";\n    int closest_vowel_index = -1;\n    int closest_consonant_index\
    \ = -1;\n    int word_length = word.length;\n    for (int i = 0; i < word_length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (closest_consonant_index != -1)\n            {\n                if (closest_vowel_index\
    \ == -1)\n                {\n                    closest_vowel_index = i;\n  \
    \                  closest_vowel = word[i..i];\n                }\n          \
    \      else if (i - closest_consonant_index < closest_vowel_index - closest_consonant_index)\n\
    \                {\n                    closest_vowel_index = i;\n           \
    \         closest_vowel = word[i..i];\n                }\n            }\n    \
    \    }\n        else if (consonants.find(word[i]) != -1)\n        {\n        \
    \    closest_consonant_index = i;\n        }\n    }\n    return closest_vowel;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    for (int i = word.length - 1; i >= 0; i--)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            if (i\
    \ + 1 < word.length && vowels.find(word[i + 1]) == -1)\n            {\n      \
    \          int distance = word.length - i - 1;\n                if (distance <\
    \ min_distance)\n                {\n                    min_distance = distance;\n\
    \                    result = word[i..$];\n                }\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          if(i > 0 && i < word.length - 1)\n            {\n                if(!vowels.canFind(word[i-1])\
    \ && !vowels.canFind(word[i+1]))\n                {\n                    if(abs(word.length\
    \ - i) < min_distance)\n                    {\n                        min_distance\
    \ = abs(word.length - i);\n                        index = i;\n              \
    \      }\n                }\n            }\n        }\n    }\n    if(index !=\
    \ 0)\n    {\n        result = word[index..$];\n    }\n    return result;\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance =\
    \ word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            if (i > 0 && i < word.length - 1)\n         \
    \   {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (min_distance > abs(i\
    \ - word.length))\n                    {\n                        min_distance\
    \ = abs(i - word.length);\n                        result = word[i];\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n   \
    \     if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string closest_vowel = \"\";\n    int closest_vowel_index = 0;\n    int\
    \ closest_vowel_distance = 0;\n    int word_length = word.length;\n    int i =\
    \ 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int\
    \ n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n   \
    \ int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n\
    \    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n\
    \    int h = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll\
    \ = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n \
    \   int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu\
    \ = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n \
    \   int zz = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd\
    \ = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n \
    \   int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int\
    \ mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n    int q",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int distance = 0;\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            if(consonants.canFind(word[i-1]) && consonants.canFind(word[i+1]))\n\
    \            {\n                distance = abs(i - word.length/2);\n         \
    \       if(distance < min_distance)\n                {\n                    min_distance\
    \ = distance;\n                    index = i;\n                }\n           \
    \ }\n        }\n    }\n    if(index != 0)\n    {\n        result = word[index..index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n    for\
    \ (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) !=\
    \ -1)\n        {\n            distance = 0;\n            for (int j = i; j < word.length;\
    \ j++)\n            {\n                if (consonants.find(word[j]) != -1)\n \
    \               {\n                    distance++;\n                }\n      \
    \          else\n                {\n                    if (distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = word[i];\n                    }\n             \
    \       break;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            int j\
    \ = i + 1;\n            while (j < word.length && consonants.find(word[j]) !=\
    \ -1)\n            {\n                j++;\n            }\n            if (j <\
    \ word.length && vowels.find(word[j]) == -1)\n            {\n                int\
    \ distance = j - i;\n                if (distance < min_distance)\n          \
    \      {\n                    min_distance = distance;\n                    result\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                result = c;\n              \
    \  min_distance = distance;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = int.max;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = 0;\n            for(int j = i + 1; j < word.length; j++)\n            {\n\
    \                if(consonants.canFind(word[j]))\n                {\n        \
    \            distance = j - i;\n                    break;\n                }\n\
    \            }\n            if(distance < min_distance)\n            {\n     \
    \           min_distance = distance;\n                result = c;\n          \
    \  }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int distance = 0;\n    int min_distance = 0;\n\
    \    int min_index = 0;\n    int index = 0;\n    foreach(i, c; word)\n    {\n\
    \        if(consonants.find(c) != -1)\n        {\n            if(vowels.find(word[i+1])\
    \ != -1)\n            {\n                distance = i - index;\n             \
    \   if(distance < min_distance || min_distance == 0)\n                {\n    \
    \                min_distance = distance;\n                    min_index = i;\n\
    \                }\n            }\n            index = i;\n        }\n    }\n\
    \    if(min_distance != 0)\n    {\n        result = word[min_index+1];\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int left_distance = i;\n\
    \            int right_distance = word.length - i - 1;\n            if(left_distance\
    \ > 0 && right_distance > 0)\n            {\n                if(left_distance\
    \ < right_distance)\n                {\n                    if(vowels.canFind(word[i\
    \ - 1]))\n                    {\n                        continue;\n         \
    \           }\n                    else\n                    {\n             \
    \           if(right_distance < min_distance)\n                        {\n   \
    \                         min_distance = right_distance;\n                   \
    \         result = c;\n                        }\n                    }\n    \
    \            }\n                else\n                {\n                    if(vowels.canFind(word[i\
    \ + 1]))\n                    {\n                        continue;\n         \
    \           }\n                    else\n                    {\n             \
    \           if(left_distance < min_distance)\n                        {\n    \
    \                        min_distance = left_distance;\n                     \
    \       result = c;\n                        }\n                    }\n      \
    \          }\n            }\n        }\n    }\n    return result;\n}", "{\n  \
    \  string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string closest_vowel = \"\";\n    int distance = 0;\n    int min_distance\
    \ = word.length;\n    int vowel_index = 0;\n    int consonant_index = 0;\n   \
    \ foreach(i, letter; word)\n    {\n        if(vowels.canFind(letter))\n      \
    \  {\n            vowel_index = i;\n            foreach(j, consonant; word[i..$])\n\
    \            {\n                if(consonants.canFind(consonant))\n          \
    \      {\n                    consonant_index = j;\n                    distance\
    \ = consonant_index - vowel_index;\n                    if(distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     closest_vowel = letter;\n                    }\n       \
    \         }\n            }\n        }\n    }\n    return closest_vowel;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = word.length - 1;\n    while (index > 0)\n    {\n        if (vowels.find(word[index])\
    \ != -1)\n        {\n            if (vowels.find(word[index - 1]) == -1)\n   \
    \         {\n                result = word[index];\n                break;\n \
    \           }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_dist = int.max;\n    int distance =\
    \ 0;\n    int last_consonant = -1;\n    int last_vowel = -1;\n    foreach(i, c;\
    \ word)\n    {\n        if(consonants.canFind(c))\n        {\n            last_consonant\
    \ = i;\n        }\n        else if(vowels.canFind(c))\n        {\n           \
    \ last_vowel = i;\n            distance = last_consonant - last_vowel;\n     \
    \       if(distance > 0 && distance < min_dist)\n            {\n             \
    \   min_dist = distance;\n                result = c;\n            }\n       \
    \ }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string result = \"\";\n    int index = -1;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if(index != -1)\n    {\n        result\
    \ = word[index..$];\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            if(consonants.find(word[i-1]) != -1 && consonants.find(word[i+1])\
    \ != -1)\n            {\n                distance = abs(i - word.length);\n  \
    \              if(distance < min_distance)\n                {\n              \
    \      min_distance = distance;\n                    result = c;\n           \
    \     }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = 0;\n\
    \    int distance = 0;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c)\
    \ != -1)\n        {\n            distance = word.length - i;\n            if(distance\
    \ < min_distance || min_distance == 0)\n            {\n                if(i >\
    \ 0 && consonants.find(word[i-1]) != -1)\n                {\n                \
    \    if(i < word.length - 1 && consonants.find(word[i+1]) != -1)\n           \
    \         {\n                        min_distance = distance;\n              \
    \          result = c;\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = 0;\n\
    \    int index = 0;\n    int min_index = 0;\n    int word_length = word.length;\n\
    \    for (int i = 0; i < word_length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            index = i;\n            distance = word_length\
    \ - index;\n            if (distance > min_distance)\n            {\n        \
    \        min_distance = distance;\n                min_index = index;\n      \
    \      }\n        }\n    }\n    if (min_distance == 0)\n    {\n        return\
    \ result;\n    }\n    else\n    {\n        result = word[min_index];\n       \
    \ return result;\n    }\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ j = i;\n            while(j >= 0 && consonants.find(word[j]) != -1)\n      \
    \      {\n                j--;\n            }\n            if(j >= 0)\n      \
    \      {\n                j = i;\n                while(j < word.length && consonants.find(word[j])\
    \ != -1)\n                {\n                    j++;\n                }\n   \
    \             if(j < word.length)\n                {\n                    distance\
    \ = j - i;\n                    if(distance < min_distance)\n                \
    \    {\n                        min_distance = distance;\n                   \
    \     result = c;\n                    }\n                }\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int new_distance\
    \ = word.length - i;\n            if(new_distance < distance)\n            {\n\
    \                distance = new_distance;\n                result = c;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    int pos = 0;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c) !=\
    \ -1)\n        {\n            pos = word.rfind(c);\n            distance = word.length\
    \ - pos;\n            if(distance < min_distance)\n            {\n           \
    \     min_distance = distance;\n                result = c;\n            }\n \
    \       }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    while (index\
    \ > 0) {\n        if (vowels.find(word[index]) != -1) {\n            if (vowels.find(word[index\
    \ - 1]) == -1) {\n                result = word[index];\n                break;\n\
    \            }\n        }\n        index--;\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            int distance = word.length\
    \ - i;\n            if (distance < min_distance)\n            {\n            \
    \    min_distance = distance;\n                result = word[i..$];\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string closest_vowel = \"\";\n    int closest_vowel_index = 0;\n    int closest_vowel_distance\
    \ = word.length;\n    int word_length = word.length;\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n   \
    \ int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm\
    \ = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n \
    \   int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv\
    \ = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n \
    \   int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee\
    \ = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n\
    \    int jjj = 0;\n    int kkk = 0;\n    int lll = 0", "{\n    string vowels =\
    \ \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            int left = i - 1;\n            int right = i + 1;\n  \
    \          while (left >= 0 && consonants.find(word[left]) != -1)\n          \
    \  {\n                left--;\n            }\n            while (right < word.length\
    \ && consonants.find(word[right]) != -1)\n            {\n                right++;\n\
    \            }\n            if (left >= 0 && right < word.length)\n          \
    \  {\n                if (right - left - 1 < min_distance)\n                {\n\
    \                    min_distance = right - left - 1;\n                    result\
    \ = word[i];\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(consonants.find(c) != -1)\n      \
    \  {\n            int vowel_index = vowels.find(word[i+1]);\n            if(vowel_index\
    \ != -1)\n            {\n                int distance = i - vowel_index;\n   \
    \             if(distance < min_distance)\n                {\n               \
    \     min_distance = distance;\n                    index = vowel_index;\n   \
    \             }\n            }\n        }\n    }\n    if(index != 0)\n    {\n\
    \        result = vowels[index..index];\n    }\n    return result;\n}", "{\n \
    \   string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    while (index\
    \ >= 0)\n    {\n        if (vowels.find(word[index]) != -1)\n        {\n     \
    \       if (index == word.length - 1)\n            {\n                index--;\n\
    \                continue;\n            }\n            if (consonants.find(word[index\
    \ + 1]) != -1)\n            {\n                result = word[index];\n       \
    \         break;\n            }\n        }\n        index--;\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int min_distance = 0;\n    int distance = 0;\n    int index_of_vowel =\
    \ 0;\n    int index_of_consonant = 0;\n    int index_of_second_consonant = 0;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            index_of_vowel = i;\n            for (int j =\
    \ i; j < word.length; j++)\n            {\n                if (consonants.find(word[j])\
    \ != -1)\n                {\n                    index_of_consonant = j;\n   \
    \                 for (int k = j; k < word.length; k++)\n                    {\n\
    \                        if (consonants.find(word[k]) != -1)\n               \
    \         {\n                            index_of_second_consonant = k;\n    \
    \                        distance = index_of_second_consonant - index_of_vowel;\n\
    \                            if (distance < min_distance || min_distance == 0)\n\
    \                            {\n                                min_distance =\
    \ distance;\n                                result = word[i];\n             \
    \               }\n                        }\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = 0;\n    int distance = 0;\n\
    \    foreach(i, c; word)\n    {\n        if(consonants.find(c) != -1)\n      \
    \  {\n            foreach(j, v; vowels)\n            {\n                if(word.find(v,\
    \ i) != -1)\n                {\n                    distance = word.find(v, i)\
    \ - i;\n                    if(min_distance == 0 || distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = v;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                if(i > 0 && consonants.find(word[i-1]) != -1)\n   \
    \             {\n                    if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int distance\
    \ = 0;\n    int min_distance = word.length;\n    foreach(i, letter; word)\n  \
    \  {\n        if(vowels.canFind(letter))\n        {\n            index = word.length\
    \ - i - 1;\n            distance = index - word.canFind(vowels, index);\n    \
    \        if(distance > 0 && distance < min_distance)\n            {\n        \
    \        min_distance = distance;\n                result = letter;\n        \
    \    }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int index = 0;\n    int min = word.length;\n  \
    \  foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n \
    \           if(i > 0 && consonants.find(word[i-1]) != -1)\n            {\n   \
    \             if(i < word.length-1 && consonants.find(word[i+1]) != -1)\n    \
    \            {\n                    if(abs(word.length-1-i) < min)\n         \
    \           {\n                        min = abs(word.length-1-i);\n         \
    \               index = i;\n                    }\n                }\n       \
    \     }\n        }\n    }\n    if(index != 0)\n    {\n        result = word[index..index];\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    int\
    \ len = word.length;\n    int i = len - 1;\n    while (i > 0)\n    {\n       \
    \ if (vowels.find(word[i]) != -1)\n        {\n            if (vowels.find(word[i-1])\
    \ == -1)\n            {\n                return word[i..$];\n            }\n \
    \       }\n        i--;\n    }\n    return \"\";\n}", "{\n    string vowels =\
    \ \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int pos = word.length;\n    int pos_vowel =\
    \ -1;\n    int pos_consonant = -1;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            pos_vowel\
    \ = i;\n            if(pos_consonant != -1)\n            {\n                if(pos_vowel\
    \ - pos_consonant < min_distance)\n                {\n                    min_distance\
    \ = pos_vowel - pos_consonant;\n                    pos = pos_vowel;\n       \
    \         }\n            }\n        }\n        else if(consonants.find(c) != -1)\n\
    \        {\n            pos_consonant = i;\n        }\n    }\n    if(pos != word.length)\n\
    \    {\n        result = word[pos..$];\n    }\n    return result;\n}", "{\n  \
    \  string vowels = \"aeiou\";\n    string result = \"\";\n    int min_dist = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int dist = word.length - i;\n            if(dist < min_dist)\n    \
    \        {\n                min_dist = dist;\n                result = c;\n  \
    \          }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = -1;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                if(i == 0)\n                {\n              \
    \      if(consonants.find(word[i+1]) != -1)\n                    {\n         \
    \               min_distance = distance;\n                        index = i;\n\
    \                    }\n                }\n                else if(i == word.length\
    \ - 1)\n                {\n                    if(consonants.find(word[i-1]) !=\
    \ -1)\n                    {\n                        min_distance = distance;\n\
    \                        index = i;\n                    }\n                }\n\
    \                else\n                {\n                    if(consonants.find(word[i-1])\
    \ != -1 && consonants.find(word[i+1]) != -1)\n                    {\n        \
    \                min_distance = distance;\n                        index = i;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   if(index != -1)\n    {\n        result = word[index..index];\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int index = -1;\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            index = i;\n            distance = word.length - index;\n       \
    \     if(distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = c;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int closest_vowel_index\
    \ = -1;\n    int closest_consonant_index = -1;\n    int closest_distance = -1;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          if(closest_consonant_index != -1)\n            {\n                if(closest_distance\
    \ == -1 || i - closest_consonant_index < closest_distance)\n                {\n\
    \                    closest_distance = i - closest_consonant_index;\n       \
    \             closest_vowel_index = i;\n                }\n            }\n   \
    \     }\n        else if(consonants.canFind(c))\n        {\n            closest_consonant_index\
    \ = i;\n        }\n    }\n    if(closest_vowel_index == -1)\n    {\n        return\
    \ \"\";\n    }\n    return word[closest_vowel_index..closest_vowel_index];\n}",
  "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance\
    \ = word.length;\n    for (int i = 0; i < word.length; i++)\n    {\n        if\
    \ (vowels.find(word[i]) != -1)\n        {\n            if (i > 0 && i < word.length\
    \ - 1)\n            {\n                if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i\
    \ + 1]) == -1)\n                {\n                    if (distance > abs(word.length\
    \ - i))\n                    {\n                        distance = abs(word.length\
    \ - i);\n                        result = word[i];\n                    }\n  \
    \              }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    for (int i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            distance = 0;\n            for (int j = i; j\
    \ < word.length; j++)\n            {\n                if (consonants.find(word[j])\
    \ != -1)\n                {\n                    distance++;\n               \
    \ }\n                else\n                {\n                    break;\n   \
    \             }\n            }\n            if (distance < min_distance)\n   \
    \         {\n                min_distance = distance;\n                result\
    \ = word[i];\n            }\n        }\n    }\n    return result;\n}", "{\n  \
    \  string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = 0;\n\
    \    int distance = 0;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            index = i;\n            distance = word.length - index;\n\
    \            if(min_distance == 0)\n            {\n                min_distance\
    \ = distance;\n                result = c;\n            }\n            else if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n   \
    \ {\n        if (vowels.find(word[i]) != -1)\n        {\n            if (i > 0\
    \ && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (min_distance > abs(word.length - i - 1))\n                  \
    \  {\n                        min_distance = abs(word.length - i - 1);\n     \
    \                   result = word[i..$];\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = word.length;\n    int distance =\
    \ word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            if(i > 0 && consonants.canFind(word[i-1]) && i < word.length\
    \ - 1 && consonants.canFind(word[i+1]))\n            {\n                if(i <\
    \ distance)\n                {\n                    distance = i;\n          \
    \          result = c;\n                }\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int distance = 0;\n    int min_distance = 0;\n    int index = 0;\n    int\
    \ min_index = 0;\n    int word_length = word.length;\n    int vowel_length = vowels.length;\n\
    \    int consonant_length = consonants.length;\n    for (int i = 0; i < word_length;\
    \ i++)\n    {\n        for (int j = 0; j < vowel_length; j++)\n        {\n   \
    \         if (word[i] == vowels[j])\n            {\n                for (int k\
    \ = 0; k < consonant_length; k++)\n                {\n                    if (word[i\
    \ - 1] == consonants[k])\n                    {\n                        for (int\
    \ l = 0; l < consonant_length; l++)\n                        {\n             \
    \               if (word[i + 1] == consonants[l])\n                          \
    \  {\n                                distance = i;\n                        \
    \        if (distance < min_distance || min_distance == 0)\n                 \
    \               {\n                                    min_distance = distance;\n\
    \                                    min_index = i;\n                        \
    \        }\n                            }\n                        }\n       \
    \             }\n                }\n            }\n        }\n    }\n    if (min_distance\
    \ != 0)\n    {\n        result = word[min_index];\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ index = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n \
    \   {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index != 0)\n    {\n        result = word[index..$];\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int distance = 0;\n    int temp = 0;\n    for (int i = word.length\
    \ - 1; i > 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (vowels.find(word[i - 1]) == -1)\n            {\n            \
    \    temp = i;\n                break;\n            }\n        }\n    }\n    if\
    \ (temp == 0)\n    {\n        return result;\n    }\n    for (int i = temp; i\
    \ > 0; i--)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n     \
    \       if (vowels.find(word[i - 1]) == -1)\n            {\n                distance\
    \ = temp - i;\n                if (distance < temp)\n                {\n     \
    \               temp = distance;\n                    result = word[i];\n    \
    \            }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int left = word[i..$].find(consonants);\n            int right =\
    \ word[0..i].find(consonants);\n            if(left != -1 && right != -1)\n  \
    \          {\n                distance = min(left, right);\n                if(distance\
    \ < min_distance)\n                {\n                    min_distance = distance;\n\
    \                    result = c;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i <\
    \ word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (i > 0 && i < word.length - 1)\n            {\n              \
    \  if (vowels.find(word[i - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n   \
    \             {\n                    if (min_distance > abs(word.length - i -\
    \ 1))\n                    {\n                        min_distance = abs(word.length\
    \ - i - 1);\n                        result = word[i];\n                    }\n\
    \                }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index\
    \ = 0;\n    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n\
    \        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                index = i;\n            }\n    \
    \    }\n    }\n    if(index != 0)\n    {\n        result = word[index..$];\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    int i = word.length - 1;\n    while (i >= 0)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            distance = word.length - 1 - i;\n           \
    \ if (distance < min_distance)\n            {\n                min_distance =\
    \ distance;\n                result = word[i..$];\n            }\n        }\n\
    \        i--;\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int j = i;\n            while(j >= 0 && consonants.find(word[j])\
    \ != -1)\n            {\n                j--;\n            }\n            if(j\
    \ >= 0)\n            {\n                j = i;\n                while(j < word.length\
    \ && consonants.find(word[j]) != -1)\n                {\n                    j++;\n\
    \                }\n                if(j < word.length)\n                {\n \
    \                   distance = i - j;\n                    if(distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i - 1;\n            if(distance < min_distance)\n\
    \            {\n                if(i > 0 && consonants.canFind(word[i - 1]))\n\
    \                {\n                    if(i < word.length - 1 && consonants.canFind(word[i\
    \ + 1]))\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                if(i > 0 && consonants.find(word[i-1]) != -1)\n   \
    \             {\n                    if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n    int min\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c) !=\
    \ -1)\n        {\n            if(i > 0 && vowels.find(word[i-1]) == -1)\n    \
    \        {\n                if(i < min)\n                {\n                 \
    \   min = i;\n                    result = c;\n                }\n           \
    \ }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int distance\
    \ = word.length - i;\n            if(distance < min_distance)\n            {\n\
    \                result = c;\n                min_distance = distance;\n     \
    \       }\n        }\n    }\n    return result;\n}", "{\n    string vowels = \"\
    aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                if(i > 0 && consonants.find(word[i-1]) != -1)\n\
    \                {\n                    if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        index = i;\n                    }\n                }\n\
    \            }\n        }\n    }\n    if(index != 0)\n    {\n        result =\
    \ word[index..$];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int i = word.length - 1;\n    while (i >= 0) {\n\
    \        if (consonants.find(word[i]) != -1) {\n            if (i != word.length\
    \ - 1) {\n                if (vowels.find(word[i + 1]) != -1) {\n            \
    \        result = word[i + 1];\n                    break;\n                }\n\
    \            }\n            if (i != 0) {\n                if (vowels.find(word[i\
    \ - 1]) != -1) {\n                    result = word[i - 1];\n                \
    \    break;\n                }\n            }\n        }\n        i--;\n    }\n\
    \    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\"\
    ;\n    int distance = word.length;\n    int index = 0;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.find(c) != -1)\n        {\n            if(consonants.find(word[i\
    \ - 1]) != -1 && consonants.find(word[i + 1]) != -1)\n            {\n        \
    \        if(abs(i - word.length) < distance)\n                {\n            \
    \        distance = abs(i - word.length);\n                    index = i;\n  \
    \              }\n            }\n        }\n    }\n    if(distance != word.length)\n\
    \    {\n        result = word[index..$];\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int vowel_index = -1;\n    int consonant_index\
    \ = -1;\n    int distance = 0;\n    int min_distance = word.length;\n    for (int\
    \ i = 0; i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n\
    \        {\n            vowel_index = i;\n            for (int j = i; j >= 0;\
    \ j--)\n            {\n                if (consonants.find(word[j]) != -1)\n \
    \               {\n                    consonant_index = j;\n                \
    \    distance = vowel_index - consonant_index;\n                    if (distance\
    \ < min_distance)\n                    {\n                        min_distance\
    \ = distance;\n                        result = word[i];\n                   \
    \ }\n                    break;\n                }\n            }\n        }\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    for (int i = word.length - 1; i >= 0; i--)\n    {\n        if (vowels.find(word[i])\
    \ != -1)\n        {\n            for (int j = i - 1; j >= 0; j--)\n          \
    \  {\n                if (vowels.find(word[j]) == -1)\n                {\n   \
    \                 distance = i - j;\n                    if (distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = word[i];\n                    }\n             \
    \       break;\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    string consonants = \"\
    bcdfghjklmnpqrstvwxyz\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(v; vowels)\n    {\n        int index = word.find(v);\n        if(index\
    \ != -1)\n        {\n            if(index != 0 && index != word.length - 1)\n\
    \            {\n                if(consonants.find(word[index - 1]) != -1 && consonants.find(word[index\
    \ + 1]) != -1)\n                {\n                    if(min_distance > abs(index\
    \ - word.length))\n                    {\n                        min_distance\
    \ = abs(index - word.length);\n                        result = v;\n         \
    \           }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiou\";\n    int closest = word.length;\n\
    \    string closestVowel = \"\";\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < closest)\n            {\n                closest = distance;\n           \
    \     closestVowel = c;\n            }\n        }\n    }\n    return closestVowel;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ distance = 0;\n    int min_distance = word.length;\n    int i = word.length\
    \ - 1;\n    while (i >= 0)\n    {\n        if (vowels.find(word[i]) != -1)\n \
    \       {\n            distance = word.length - i - 1;\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = word[i..$];\n            }\n        }\n        i--;\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int distance = word.length;\n    int index = 0;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int temp\
    \ = word.length - i;\n            if(temp < distance)\n            {\n       \
    \         distance = temp;\n                index = i;\n            }\n      \
    \  }\n    }\n    if(distance == word.length)\n    {\n        return result;\n\
    \    }\n    else\n    {\n        foreach(i, c; word[index..$])\n        {\n  \
    \          if(consonants.canFind(c))\n            {\n                return word[index..$][i-1..$];\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    int len = word.length;\n    int i = len - 1;\n\
    \    while (i > 0)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n\
    \            if (vowels.find(word[i-1]) == -1)\n            {\n              \
    \  return word[i..$];\n            }\n        }\n        i--;\n    }\n    return\
    \ \"\";\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\"\
    ;\n    int min_distance = word.length;\n    foreach(vowel; vowels)\n    {\n  \
    \      int index = word.find(vowel);\n        if(index != -1)\n        {\n   \
    \         if(index != 0 && index != word.length - 1)\n            {\n        \
    \        if(word[index - 1] != vowel && word[index + 1] != vowel)\n          \
    \      {\n                    if(min_distance > abs(index - word.length))\n  \
    \                  {\n                        min_distance = abs(index - word.length);\n\
    \                        result = vowel;\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance =\
    \ word.length;\n    foreach(i, char c; word)\n    {\n        if(vowels.find(c)\
    \ != -1)\n        {\n            int distance = word.length - i;\n           \
    \ if(distance < min_distance)\n            {\n                min_distance = distance;\n\
    \                result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ distance = word.length - i;\n            if(distance < min_distance)\n     \
    \       {\n                int left_index = i - 1;\n                int right_index\
    \ = i + 1;\n                if(left_index >= 0 && right_index < word.length)\n\
    \                {\n                    if(consonants.find(word[left_index]) !=\
    \ -1 && consonants.find(word[right_index]) != -1)\n                    {\n   \
    \                     min_distance = distance;\n                        result\
    \ = c;\n                    }\n                }\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(consonants.find(c) != -1)\n        {\n         \
    \   int j = i + 1;\n            while(j < word.length)\n            {\n      \
    \          if(vowels.find(word[j]) != -1)\n                {\n               \
    \     distance = j - i;\n                    if(distance < min_distance)\n   \
    \                 {\n                        min_distance = distance;\n      \
    \                  result = word[j..$];\n                    }\n             \
    \       break;\n                }\n                j++;\n            }\n     \
    \   }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n\
    \    string result = \"\";\n    int distance = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          distance = word.length - i - 1;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int min_distance =\
    \ word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = word.length - 1;\n    int distance\
    \ = 0;\n    int min_distance = word.length;\n    while (index >= 0)\n    {\n \
    \       if (vowels.find(word[index]) != -1)\n        {\n            if (index\
    \ + 1 < word.length)\n            {\n                if (consonants.find(word[index\
    \ + 1]) != -1)\n                {\n                    distance = word.length\
    \ - index - 1;\n                    if (distance < min_distance)\n           \
    \         {\n                        min_distance = distance;\n              \
    \          result = word[index..$];\n                    }\n                }\n\
    \            }\n            if (index - 1 >= 0)\n            {\n             \
    \   if (consonants.find(word[index - 1]) != -1)\n                {\n         \
    \           distance = word.length - index;\n                    if (distance\
    \ < min_distance)\n                    {\n                        min_distance\
    \ = distance;\n                        result = word[index..$];\n            \
    \        }\n                }\n            }\n        }\n        index--;\n  \
    \  }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int index = word.length - 1;\n    while (index > 0)\n  \
    \  {\n        if (vowels.find(word[index]) != -1)\n        {\n            if (vowels.find(word[index\
    \ - 1]) == -1)\n            {\n                result = word[index];\n       \
    \         break;\n            }\n        }\n        index--;\n    }\n    return\
    \ result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\
    \";\n    int pos = 0;\n    int min = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  if (i > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i\
    \ - 1]) == -1 && vowels.find(word[i + 1]) == -1)\n                {\n        \
    \            if (min > abs(word.length - i))\n                    {\n        \
    \                min = abs(word.length - i);\n                        pos = i;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   if (pos != 0)\n    {\n        result = word[pos];\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string closest_vowel = \"\";\n\
    \    int closest_vowel_index = -1;\n    int closest_vowel_distance = -1;\n   \
    \ int word_length = word.length;\n    int i = 0;\n    while (i < word_length)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            int distance\
    \ = word_length - i;\n            if (closest_vowel_distance == -1 || distance\
    \ < closest_vowel_distance)\n            {\n                closest_vowel_distance\
    \ = distance;\n                closest_vowel_index = i;\n                closest_vowel\
    \ = word[i..i+1];\n            }\n        }\n        i++;\n    }\n    return closest_vowel;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ index = word.length;\n    int closest = word.length;\n    int distance = word.length;\n\
    \    foreach(char c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            distance = index - closest;\n            if(distance > 1)\n     \
    \       {\n                result = word[closest];\n                break;\n \
    \           }\n            else\n            {\n                closest = index;\n\
    \            }\n        }\n        else\n        {\n            closest = index;\n\
    \        }\n        index--;\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    int closest = -1;\n    int distance = word.length;\n    for (int i = 0;\
    \ i < word.length; i++)\n    {\n        if (vowels.find(word[i]) != -1)\n    \
    \    {\n            if (consonants.find(word[i-1]) != -1 && consonants.find(word[i+1])\
    \ != -1)\n            {\n                if (i < distance)\n                {\n\
    \                    distance = i;\n                    closest = i;\n       \
    \         }\n            }\n        }\n    }\n    if (closest == -1)\n    {\n\
    \        return \"\";\n    }\n    return word[closest..closest];\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
