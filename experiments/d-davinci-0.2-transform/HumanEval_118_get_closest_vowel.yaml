name: HumanEval_118_get_closest_vowel
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou are given a word. Your task\
  \ is to find the closest vowel that stands between \n    two consonants from the\
  \ right side of the word (case sensitive).\n    \n    Vowels in the beginning and\
  \ ending doesn't count. Return empty string if you didn't\n    find any vowel met\
  \ the above condition. \n\n    You may assume that the given string contains English\
  \ letter only.\n\n    Example:\n    >>> get_closest_vowel(\"yogurt\")\n    \"u\"\
  \n    >>> get_closest_vowel(\"FULL\")\n    \"U\"\n    >>> get_closest_vowel(\"quick\"\
  )\n    \"\"\n    >>> get_closest_vowel(\"ab\")\n    \"\"\n    \n*/\nstring get_closest_vowel(string\
  \ word) \n"
tests: "unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"\
  yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"\
  easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"\
  ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"\
  most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"\
  ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"\
  anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"\
  Above\") == \"o\");\n}\nvoid main(){}"
completions: ["{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result = \"\";\n   \
    \ int distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c)\
    \ != -1)\n        {\n            if(i > 0 && consonants.find(word[i-1]) != -1)\n\
    \            {\n                if(i < word.length - 1 && consonants.find(word[i+1])\
    \ != -1)\n                {\n                    if(abs(i - (word.length - 1))\
    \ < distance)\n                    {\n                        distance = abs(i\
    \ - (word.length - 1));\n                        result = c;\n               \
    \     }\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ distance = 0;\n    int min_distance = word.length;\n    int index = word.length\
    \ - 1;\n    while (index >= 0)\n    {\n        if (vowels.canFind(word[index]))\n\
    \        {\n            distance = word.length - index - 1;\n            if (distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = word[index..$];\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string closest_vowel\
    \ = \"\";\n    int vowel_index = -1;\n    int word_length = word.length;\n   \
    \ int i = word_length - 1;\n    while (i >= 0)\n    {\n        if (consonants.find(word[i])\
    \ != -1)\n        {\n            int j = i - 1;\n            while (j >= 0)\n\
    \            {\n                if (vowels.find(word[j]) != -1)\n            \
    \    {\n                    if (vowel_index == -1)\n                    {\n  \
    \                      vowel_index = j;\n                        closest_vowel\
    \ = word[j];\n                    }\n                    else\n              \
    \      {\n                        if (abs(i - j) < abs(i - vowel_index))\n   \
    \                     {\n                            vowel_index = j;\n      \
    \                      closest_vowel = word[j];\n                        }\n \
    \                   }\n                }\n                j--;\n            }\n\
    \        }\n        i--;\n    }\n    return closest_vowel;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = 0;\n  \
    \  int min_dist = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int dist = word.length - i;\n            if(dist < min_dist)\n\
    \            {\n                min_dist = dist;\n                index = i;\n\
    \            }\n        }\n    }\n    if(index != 0)\n    {\n        result =\
    \ word[index..$];\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string closest_vowel = \"\";\n    int closest_vowel_index = 0;\n    int closest_consonant_index\
    \ = 0;\n    int closest_distance = 0;\n    int current_distance = 0;\n    int\
    \ current_vowel_index = 0;\n    int current_consonant_index = 0;\n    bool found_vowel\
    \ = false;\n    bool found_consonant = false;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  found_vowel = true;\n            current_vowel_index = i;\n        }\n    \
    \    else if (consonants.find(word[i]) != -1)\n        {\n            found_consonant\
    \ = true;\n            current_consonant_index = i;\n        }\n        if (found_vowel\
    \ && found_consonant)\n        {\n            current_distance = current_consonant_index\
    \ - current_vowel_index;\n            if (current_distance > closest_distance)\n\
    \            {\n                closest_distance = current_distance;\n       \
    \         closest_vowel_index = current_vowel_index;\n                closest_consonant_index\
    \ = current_consonant_index;\n            }\n            found_vowel = false;\n\
    \            found_consonant = false;\n        }\n    }\n    if (closest_vowel_index\
    \ != 0)\n    {\n        closest_vowel = word[closest_vowel_index];\n    }\n  \
    \  return closest_vowel;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ result = \"\";\n    int min_distance = word.length;\n    foreach(i, c; word)\n\
    \    {\n        if(vowels.canFind(c))\n        {\n            int distance = word.length\
    \ - i;\n            if(distance < min_distance)\n            {\n             \
    \   min_distance = distance;\n                result = c;\n            }\n   \
    \     }\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n \
    \   string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ vowel; vowels)\n    {\n        int index = word.find(vowel);\n        if(index\
    \ != -1)\n        {\n            int distance = word.length - index;\n       \
    \     if(distance < min_distance)\n            {\n                int left_index\
    \ = index - 1;\n                int right_index = index + 1;\n               \
    \ if(left_index >= 0 && right_index < word.length)\n                {\n      \
    \              if(consonants.find(word[left_index]) != -1 && consonants.find(word[right_index])\
    \ != -1)\n                    {\n                        min_distance = distance;\n\
    \                        result = word[index..$];\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return result;\n}", "{\n\
    \    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_index = word.length;\n\
    \    int min_distance = word.length;\n    foreach(i, c; word)\n    {\n       \
    \ if(vowels.find(c) != -1)\n        {\n            if(index > 0 && consonants.find(word[index\
    \ - 1]) != -1)\n            {\n                int distance = word.length - index;\n\
    \                if(distance < min_distance)\n                {\n            \
    \        min_distance = distance;\n                    min_index = index;\n  \
    \                  result = c;\n                }\n            }\n        }\n\
    \        index++;\n    }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\"\
    ;\n    string result = \"\";\n    int min_distance = word.length;\n    foreach(i,\
    \ char c; word)\n    {\n        if(vowels.canFind(c))\n        {\n           \
    \ int distance = word.length - i;\n            if(distance < min_distance)\n \
    \           {\n                min_distance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int min_dist = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            int\
    \ dist = word.length - i;\n            if(dist < min_dist)\n            {\n  \
    \              if(i == 0)\n                {\n                    if(consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_dist = dist;\n  \
    \                      result = c;\n                    }\n                }\n\
    \                else if(i == word.length - 1)\n                {\n          \
    \          if(consonants.find(word[i-1]) != -1)\n                    {\n     \
    \                   min_dist = dist;\n                        result = c;\n  \
    \                  }\n                }\n                else\n              \
    \  {\n                    if(consonants.find(word[i-1]) != -1 && consonants.find(word[i+1])\
    \ != -1)\n                    {\n                        min_dist = dist;\n  \
    \                      result = c;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n            if(consonants.find(word[i-1])\
    \ != -1 && consonants.find(word[i+1]) != -1)\n            {\n                if(abs(i\
    \ - word.length) < distance)\n                {\n                    distance\
    \ = abs(i - word.length);\n                    result = c;\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int index = word.length -\
    \ 1;\n    int closest = word.length;\n    while (index >= 0)\n    {\n        if\
    \ (vowels.find(word[index]) != -1)\n        {\n            if (index < closest)\n\
    \            {\n                result = word[index..$];\n                closest\
    \ = index;\n            }\n        }\n        index--;\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int\
    \ min_distance = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n\
    \        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiou\";\n    string result = \"\";\n    int min_distance\
    \ = word.length;\n    foreach(i, c; word)\n    {\n        if(vowels.find(c) !=\
    \ -1)\n        {\n            int distance = word.length - i;\n            if(distance\
    \ < min_distance)\n            {\n                min_distance = distance;\n \
    \               result = c;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int index = 0;\n    int min_distance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.find(c) != -1)\n        {\n\
    \            int distance = word.length - i;\n            if(distance < min_distance)\n\
    \            {\n                min_distance = distance;\n                index\
    \ = i;\n            }\n        }\n    }\n    if(min_distance == word.length)\n\
    \        return result;\n    else\n    {\n        if(consonants.find(word[index\
    \ - 1]) != -1)\n            return word[index..$];\n        else\n           \
    \ return result;\n    }\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    for (int i = 0; i < word.length;\
    \ i++)\n    {\n        if (vowels.find(word[i]) != -1)\n        {\n          \
    \  int distance = word.length - i;\n            if (consonants.find(word[i+1])\
    \ != -1 && distance < min_distance)\n            {\n                min_distance\
    \ = distance;\n                result = word[i];\n            }\n        }\n \
    \   }\n    return result;\n}", "{\n    string vowels = \"aeiouAEIOU\";\n    string\
    \ consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    string result\
    \ = \"\";\n    int min_distance = word.length;\n    foreach(i, vowel; vowels)\n\
    \    {\n        int index = word.find(vowel);\n        if(index != -1)\n     \
    \   {\n            if(index != 0 && index != word.length - 1)\n            {\n\
    \                if(consonants.find(word[index - 1]) != -1 && consonants.find(word[index\
    \ + 1]) != -1)\n                {\n                    if(index < min_distance)\n\
    \                    {\n                        min_distance = index;\n      \
    \                  result = vowel;\n                    }\n                }\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    string vowels\
    \ = \"aeiouAEIOU\";\n    string result = \"\";\n    int minDistance = word.length;\n\
    \    foreach(i, c; word)\n    {\n        if(vowels.canFind(c))\n        {\n  \
    \          int distance = word.length - i;\n            if(distance < minDistance)\n\
    \            {\n                minDistance = distance;\n                result\
    \ = c;\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int distance = 0;\n\
    \    int min_distance = word.length;\n    for (int i = 0; i < word.length; i++)\n\
    \    {\n        if (vowels.find(word[i]) != -1)\n        {\n            if (i\
    \ > 0 && i < word.length - 1)\n            {\n                if (vowels.find(word[i-1])\
    \ == -1 && vowels.find(word[i+1]) == -1)\n                {\n                \
    \    distance = word.length - i;\n                    if (distance < min_distance)\n\
    \                    {\n                        min_distance = distance;\n   \
    \                     result = word[i];\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return result;\n}", "{\n    string\
    \ vowels = \"aeiouAEIOU\";\n    string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    string result = \"\";\n    int distance = word.length;\n    foreach(i,\
    \ c; word)\n    {\n        if(vowels.canFind(c))\n        {\n            int left\
    \ = i;\n            int right = i;\n            while(left >= 0 && consonants.canFind(word[left]))\n\
    \                left--;\n            while(right < word.length && consonants.canFind(word[right]))\n\
    \                right++;\n            if(left >= 0 && right < word.length)\n\
    \            {\n                if(distance > abs(i - left))\n               \
    \ {\n                    distance = abs(i - left);\n                    result\
    \ = c;\n                }\n            }\n        }\n    }\n    return result;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
