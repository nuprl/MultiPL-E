language: d
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqfgmyfar.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x42871d]\n??:? void tmpqfgmyfar.__unittest_L59_C1() [0x42808d]\n??:?
    void tmpqfgmyfar.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b67]\n??:? _d_run_main [0x428ad2]\n??:? main [0x4284b3]\n??:?
    __libc_start_main [0x9a988554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpte4io09x.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4286dd]\n??:? void tmpte4io09x.__unittest_L56_C1() [0x428049]\n??:?
    void tmpte4io09x.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b27]\n??:? _d_run_main [0x428a92]\n??:? main [0x42846f]\n??:?
    __libc_start_main [0x87ced554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long min\
    \ = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min != long.max)\n    {\n        result ~= min;\n  \
    \      result ~= index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(index == -1)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp0_czjhu2.d(63): unittest failure\n----------------\n??:?
    _d_unittestp [0x4286dd]\n??:? void tmp0_czjhu2.__unittest_L57_C1() [0x4280aa]\n??:?
    void tmp0_czjhu2.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d64]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430841]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c56d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b27]\n??:? _d_run_main [0x428a92]\n??:? main [0x42846f]\n??:?
    __libc_start_main [0xa26f3554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long min\
    \ = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min != long.max)\n    {\n        result ~= min;\n  \
    \      result ~= index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    long minEven = 0;\n    long minEvenIndex\
    \ = 0;\n    bool foundEven = false;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ < min)\n        {\n            min = v;\n            minIndex = i;\n       \
    \ }\n        if(v % 2 == 0)\n        {\n            if(!foundEven)\n         \
    \   {\n                minEven = v;\n                minEvenIndex = i;\n     \
    \           foundEven = true;\n            }\n            else if(v < minEven)\n\
    \            {\n                minEven = v;\n                minEvenIndex = i;\n\
    \            }\n        }\n    }\n    if(foundEven)\n    {\n        result[0]\
    \ = minEven;\n        result[1] = minEvenIndex;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.RangeError@/tmp/tmpt6g5axzb.d(41): Range violation\n----------------\n??:?
    _d_arrayboundsp [0x4287e6]\n??:? long[] tmpt6g5axzb.pluck(long[]) [0x427e48]\n??:?
    void tmpt6g5axzb.__unittest_L75_C1() [0x4280c0]\n??:? void tmpt6g5axzb.__modtest()
    [0x4284b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284cb]\n??:?
    __libc_start_main [0x6ab86554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n \
    \       return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpj2keeelt.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4286cd]\n??:? void tmpj2keeelt.__unittest_L56_C1() [0x42803d]\n??:?
    void tmpj2keeelt.__modtest() [0x428450]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d54]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430831]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5f1]\n??:? runModuleUnitTests [0x42c55d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b17]\n??:? _d_run_main [0x428a82]\n??:? main [0x428463]\n??:?
    __libc_start_main [0xfd215554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = long.max;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n \
    \           index = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: b''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpt0qqpl29.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmpt0qqpl29.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmpt0qqpl29.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0x2460c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpho3jrkj3.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmpho3jrkj3.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmpho3jrkj3.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0x65026554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  result[0] = -1;\n    result[1] = -1;\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (int i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp23xkmjk0.d(67): unittest failure\n----------------\n??:?
    _d_unittestp [0x42879d]\n??:? void tmp23xkmjk0.__unittest_L62_C1() [0x428109]\n??:?
    void tmp23xkmjk0.__modtest() [0x42851c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c857]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430975]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430e24]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430901]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b6c1]\n??:? runModuleUnitTests [0x42c62d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c60]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428be7]\n??:? _d_run_main [0x428b52]\n??:? main [0x42852f]\n??:?
    __libc_start_main [0x40b6f554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if(arr.length\
    \ == 0) return result;\n    long min = arr[0];\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    result[0] = v;\n            result[1] = i;\n        }\n    }\n    if(result[0]\
    \ == 0)\n        result = [];\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmplnco610n.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x42872d]\n??:? void tmplnco610n.__unittest_L56_C1() [0x42809d]\n??:?
    void tmplnco610n.__modtest() [0x4284b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c60]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x43073d]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5f5]\n??:? runModuleUnitTests [0x42c561]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b77]\n??:? _d_run_main [0x428ae2]\n??:? main [0x4284c3]\n??:?
    __libc_start_main [0x7364d554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjsfllzy9.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x4286d5]\n??:? void tmpjsfllzy9.__unittest_L58_C1() [0x4280a6]\n??:?
    void tmpjsfllzy9.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d5c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430839]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5f9]\n??:? runModuleUnitTests [0x42c565]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b98]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b1f]\n??:? _d_run_main [0x428a8a]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0xa7384554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmplnrrv16y.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmplnrrv16y.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmplnrrv16y.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0xbc8af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp441actb4.d(65): unittest failure\n----------------\n??:?
    _d_unittestp [0x42874d]\n??:? void tmp441actb4.__unittest_L60_C1() [0x4280bd]\n??:?
    void tmp441actb4.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b97]\n??:? _d_run_main [0x428b02]\n??:? main [0x4284e3]\n??:?
    __libc_start_main [0xef490554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    auto min = arr[0];\n    auto minIndex = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1bgq894n.d(49): Error: cannot implicitly convert expression
    `i` of type `ulong` to `int`\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1bgq894n.d",
    "-I/tmp"]\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ min_index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n\
    \                min = arr[i];\n                min_index = i;\n            }\n\
    \        }\n    }\n    if (min == arr[0])\n        return result;\n    result[0]\
    \ = min;\n    result[1] = min_index;\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpxbogjnx1.d(67): unittest failure\n----------------\n??:?
    _d_unittestp [0x428785]\n??:? void tmpxbogjnx1.__unittest_L62_C1() [0x4280f1]\n??:?
    void tmpxbogjnx1.__modtest() [0x428504]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b676]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430809]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430cb8]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430795]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b64d]\n??:? runModuleUnitTests [0x42c5b9]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c48]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428bcf]\n??:? _d_run_main [0x428b3a]\n??:? main [0x428517]\n??:?
    __libc_start_main [0xad69b554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    bool found = false;\n    foreach (i, e; arr)\n    {\n   \
    \     if (e % 2 == 0)\n        {\n            if (!found)\n            {\n   \
    \             min = e;\n                minIndex = i;\n                found =\
    \ true;\n            }\n            else\n            {\n                if (e\
    \ < min)\n                {\n                    min = e;\n                  \
    \  minIndex = i;\n                }\n            }\n        }\n    }\n    if (found)\n\
    \    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_hi3hyep.d(79): unittest failure\n----------------\n??:?
    _d_unittestp [0x42871d]\n??:? void tmp_hi3hyep.__unittest_L73_C1() [0x4280ea]\n??:?
    void tmp_hi3hyep.__modtest() [0x42849c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b67]\n??:? _d_run_main [0x428ad2]\n??:? main [0x4284af]\n??:?
    __libc_start_main [0xa4168554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    bool found = false;\n    foreach (i, v; arr)\n    {\n   \
    \     if (v % 2 == 0)\n        {\n            if (!found)\n            {\n   \
    \             min = v;\n                minIndex = i;\n                found =\
    \ true;\n            }\n            else\n            {\n                if (v\
    \ < min)\n                {\n                    min = v;\n                  \
    \  minIndex = i;\n                }\n            }\n        }\n    }\n    if (found)\n\
    \    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpf7wkzuat.d(79): unittest failure\n----------------\n??:?
    _d_unittestp [0x42871d]\n??:? void tmpf7wkzuat.__unittest_L73_C1() [0x4280ea]\n??:?
    void tmpf7wkzuat.__modtest() [0x42849c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b67]\n??:? _d_run_main [0x428ad2]\n??:? main [0x4284af]\n??:?
    __libc_start_main [0xece5a554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpcg8sl1yt.d(65): unittest failure\n----------------\n??:?
    _d_unittestp [0x4286fd]\n??:? void tmpcg8sl1yt.__unittest_L60_C1() [0x42806d]\n??:?
    void tmpcg8sl1yt.__modtest() [0x428480]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d84]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430861]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b621]\n??:? runModuleUnitTests [0x42c58d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b47]\n??:? _d_run_main [0x428ab2]\n??:? main [0x428493]\n??:?
    __libc_start_main [0x3cd54554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long minEven = arr[0];\n    long minEvenIndex = 0;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n        {\n        \
    \    minEven = v;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven\
    \ == arr[0])\n        return [minEven, minEvenIndex];\n    return [];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpteocclez.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47pjt_j4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long minEven\
    \ = long.max;\n    long minEvenIndex = long.max;\n    foreach(i, n; arr)\n   \
    \ {\n        if(n % 2 == 0 && n < minEven)\n        {\n            minEven = n;\n\
    \            minEvenIndex = i;\n        }\n    }\n    if(minEven != long.max)\n\
    \    {\n        result ~= minEven;\n        result ~= minEvenIndex;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaa7947ew.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long smallestEven\
    \ = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < smallestEven)\n        {\n            smallestEven = e;\n  \
    \          index = i;\n        }\n    }\n    if(smallestEven != long.max)\n  \
    \  {\n        result ~= smallestEven;\n        result ~= index;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpirr1u7vp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp441actb4.d(65): unittest failure\n----------------\n??:?
    _d_unittestp [0x42874d]\n??:? void tmp441actb4.__unittest_L60_C1() [0x4280bd]\n??:?
    void tmp441actb4.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b97]\n??:? _d_run_main [0x428b02]\n??:? main [0x4284e3]\n??:?
    __libc_start_main [0xef490554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpho3jrkj3.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmpho3jrkj3.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmpho3jrkj3.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0x65026554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            result[0] = v;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq9817y37.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if(min == arr[0])\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4v53laq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [long.max, long.max];\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n    \
    \    {\n            result[0] = v;\n            result[1] = i;\n        }\n  \
    \  }\n    if(result[0] == long.max)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpne_ql6xn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    bool found = false;\n   \
    \ foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n           \
    \ if (!found)\n            {\n                min = v;\n                minIndex\
    \ = i;\n                found = true;\n            }\n            else\n     \
    \       {\n                if (v < min)\n                {\n                 \
    \   min = v;\n                    minIndex = i;\n                }\n         \
    \   }\n        }\n    }\n    if (found)\n    {\n        return [min, minIndex];\n\
    \    }\n    else\n    {\n        return new long[0];\n    }\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplyulshrr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min != arr[0])\n    {\n        result[0] = min;\n  \
    \      result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2dc5tym.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = arr[0];\n    long index = 0;\n    foreach(i, e; arr)\n    {\n  \
    \      if(e % 2 == 0 && e < min)\n        {\n            min = e;\n          \
    \  index = i;\n        }\n    }\n    if(min == arr[0])\n    {\n        return\
    \ result;\n    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumsedkjr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long[] result = [arr[0], 0];\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < result[0])\n        {\n            result[0] = e;\n\
    \            result[1] = i;\n        }\n    }\n    if (result[0] % 2 != 0)\n \
    \       return [];\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjmdzdvxo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe6kerd4t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = arr[0];\n    long index = 0;\n    bool found = false;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0)\n        {\n            if(e < min)\n\
    \            {\n                min = e;\n                index = i;\n       \
    \         found = true;\n            }\n        }\n    }\n    if(found)\n    {\n\
    \        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmfx3r5w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return [].dup;\n\
    \    long min = long.max;\n    long index = 0;\n    foreach (i, e; arr)\n    {\n\
    \        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n       \
    \     index = i;\n        }\n    }\n    if (min == long.max) return [].dup;\n\
    \    return [min, index].dup;\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17388ldf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf5rcyakf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpho3jrkj3.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmpho3jrkj3.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmpho3jrkj3.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0x65026554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    foreach(i, v; arr)\n    {\n        if(v < min && v % 2 ==\
    \ 0)\n        {\n            min = v;\n            result[0] = v;\n          \
    \  result[1] = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcocwna9c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, val; arr)\n    {\n        if (val % 2 == 0 && val\
    \ < min)\n        {\n            min = val;\n            index = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpok2eu8qh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpho3jrkj3.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmpho3jrkj3.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmpho3jrkj3.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0x65026554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, v; arr)\n    {\n        if (v < min && v % 2 == 0)\n        {\n        \
    \    min = v;\n            result[0] = v;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0)\n        return result;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzlg6ccrl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_2wq0ny.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_i9r_tax.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n       \
    \         min = arr[i];\n                index = i;\n            }\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf060fo4h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            minIndex\
    \ = i;\n        }\n    }\n    if(min == arr[0])\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = minIndex;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpat_50kj1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [long.max, long.max];\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < result[0])\n    \
    \    {\n            result[0] = e;\n            result[1] = i;\n        }\n  \
    \  }\n    if(result[0] == long.max)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkaulqj41.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpcg8sl1yt.d(65): unittest failure\n----------------\n??:?
    _d_unittestp [0x4286fd]\n??:? void tmpcg8sl1yt.__unittest_L60_C1() [0x42806d]\n??:?
    void tmpcg8sl1yt.__modtest() [0x428480]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d84]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430861]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b621]\n??:? runModuleUnitTests [0x42c58d]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b47]\n??:? _d_run_main [0x428ab2]\n??:? main [0x428493]\n??:?
    __libc_start_main [0x3cd54554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] res = new long[2];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n      \
    \  if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if(min == long.max)\n        return res;\n    res[0]\
    \ = min;\n    res[1] = index;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92yufqj8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(index != -1)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9koncuxg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2 ==\
    \ 0)\n        {\n            min = v;\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2cuto7hl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e;\
    \ arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return new long[0];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqoiiwujo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    bool hasEven = false;\n    foreach (i, v; arr)\n    {\n \
    \       if (v % 2 == 0)\n        {\n            hasEven = true;\n            if\
    \ (v < min)\n            {\n                min = v;\n                minIndex\
    \ = i;\n            }\n        }\n    }\n    if (hasEven)\n    {\n        result[0]\
    \ = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8xqpu99z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long minEven = arr[0];\n    long\
    \ minEvenIndex = 0;\n    foreach (i, value; arr)\n    {\n        if (value % 2\
    \ == 0)\n        {\n            if (value < minEven)\n            {\n        \
    \        minEven = value;\n                minEvenIndex = i;\n            }\n\
    \        }\n    }\n    if (minEven % 2 == 0)\n    {\n        result[0] = minEven;\n\
    \        result[1] = minEvenIndex;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7n64gmox.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrmn8u4m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbuzf0cl3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v < min && v % 2 == 0)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdbdpessy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            result[0] = e;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0L)\n        return [0L, 0L];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj7l9mzo6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long minEven = long.max;\n    long minEvenIndex = long.max;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ minEven)\n        {\n            minEven = arr[i];\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if (minEven == long.max)\n    {\n        return\
    \ result;\n    }\n    result[0] = minEven;\n    result[1] = minEvenIndex;\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9dt0gwox.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    bool found = false;\n    foreach(i, e;\
    \ arr)\n    {\n        if(e % 2 == 0)\n        {\n            if(!found)\n   \
    \         {\n                min = e;\n                index = i;\n          \
    \      found = true;\n            }\n            else\n            {\n       \
    \         if(e < min)\n                {\n                    min = e;\n     \
    \               index = i;\n                }\n            }\n        }\n    }\n\
    \    if(found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj6_ok9fd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long min\
    \ = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if\
    \ (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min != long.max)\n    {\n        result ~= min;\n\
    \        result ~= index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcqw4u78q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_2wq0ny.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    int index = -1;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6l9x92c4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0) \n    {\n        return result;\n    }\n    long minEven =\
    \ arr[0];\n    long minEvenIndex = 0;\n    foreach (i, e; arr) \n    {\n     \
    \   if (e % 2 == 0) \n        {\n            if (e < minEven) \n            {\n\
    \                minEven = e;\n                minEvenIndex = i;\n           \
    \ }\n        }\n    }\n    if (minEven % 2 == 0) \n    {\n        result[0] =\
    \ minEven;\n        result[1] = minEvenIndex;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66w_1skx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = long.max;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n \
    \           index = i;\n        }\n    }\n    if(min != long.max)\n    {\n   \
    \     result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpazkz1w3i.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v < min && v % 2 == 0)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdbdpessy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmp6rqlz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            result[0] = v;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq9817y37.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min == arr[0])\n    {\n        return result;\n    }\n\
    \    else\n    {\n        result[0] = min;\n        result[1] = index;\n     \
    \   return result;\n    }\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11ea21ug.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47pjt_j4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  result[0] = -1;\n    result[1] = -1;\n    if (arr.length == 0)\n        return\
    \ result;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n\
    \            if (result[0] == -1)\n            {\n                result[0] =\
    \ v;\n                result[1] = i;\n            }\n            else if (v <\
    \ result[0])\n            {\n                result[0] = v;\n                result[1]\
    \ = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcii1190g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2 ==\
    \ 0)\n        {\n            min = v;\n            index = i;\n        }\n   \
    \ }\n    if (min == arr[0] && min % 2 != 0)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvh1jf1ra.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    bool found = false;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (!found)\n\
    \            {\n                min = arr[i];\n                minIndex = i;\n\
    \                found = true;\n            }\n            else\n            {\n\
    \                if (arr[i] < min)\n                {\n                    min\
    \ = arr[i];\n                    minIndex = i;\n                }\n          \
    \  }\n        }\n    }\n    if (found)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyzrox6az.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0] =\
    \ min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56ebfqfo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47pjt_j4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpt0qqpl29.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmpt0qqpl29.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmpt0qqpl29.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0x2460c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (index, value; arr)\n    {\n        if (value % 2\
    \ == 0 && value < min)\n        {\n            min = value;\n            minIndex\
    \ = index;\n        }\n    }\n    if (min == arr[0])\n        return result;\n\
    \    result[0] = min;\n    result[1] = minIndex;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu855iem2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0] =\
    \ min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56ebfqfo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe69e4gni.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    \n    long min = arr[0];\n  \
    \  long minIndex = 0;\n    long minEven = 0;\n    long minEvenIndex = 0;\n   \
    \ bool hasEven = false;\n    foreach (i, v; arr)\n    {\n        if (v < min)\n\
    \        {\n            min = v;\n            minIndex = i;\n        }\n     \
    \   if (v % 2 == 0)\n        {\n            if (!hasEven)\n            {\n   \
    \             minEven = v;\n                minEvenIndex = i;\n              \
    \  hasEven = true;\n            }\n            else if (v < minEven)\n       \
    \     {\n                minEven = v;\n                minEvenIndex = i;\n   \
    \         }\n        }\n    }\n    if (hasEven)\n    {\n        result[0] = minEven;\n\
    \        result[1] = minEvenIndex;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzjabuxh5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            result[0] = e;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0L)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kz2e42e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) \n        return\
    \ new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i,\
    \ v; arr) \n    {\n        if (v < min && v % 2 == 0) \n        {\n          \
    \  min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\
    \ \n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpky2yqa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmp6rqlz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmplnrrv16y.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmplnrrv16y.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmplnrrv16y.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0xbc8af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] ret = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            ret[0] = v;\n           \
    \ ret[1] = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdoalsa_8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n  \
    \      {\n            min = arr[i];\n            minIndex = i;\n        }\n  \
    \  }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpww09ovyd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpt0qqpl29.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmpt0qqpl29.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmpt0qqpl29.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0x2460c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n    {\n        return result;\n    }\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphcnbi3kn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = long.max;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           index = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuu_ccrue.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfq4nezxo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpjsfllzy9.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x4286d5]\n??:? void tmpjsfllzy9.__unittest_L58_C1() [0x4280a6]\n??:?
    void tmpjsfllzy9.__modtest() [0x428458]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430d5c]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430839]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5f9]\n??:? runModuleUnitTests [0x42c565]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b98]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b1f]\n??:? _d_run_main [0x428a8a]\n??:? main [0x42846b]\n??:?
    __libc_start_main [0xa7384554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0eqklf1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp441actb4.d(65): unittest failure\n----------------\n??:?
    _d_unittestp [0x42874d]\n??:? void tmp441actb4.__unittest_L60_C1() [0x4280bd]\n??:?
    void tmp441actb4.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b97]\n??:? _d_run_main [0x428b02]\n??:? main [0x4284e3]\n??:?
    __libc_start_main [0xef490554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            result[0] = v;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq9817y37.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpte4io09x.d(61): unittest failure\n----------------\n??:?
    _d_unittestp [0x4286dd]\n??:? void tmpte4io09x.__unittest_L56_C1() [0x428049]\n??:?
    void tmpte4io09x.__modtest() [0x42845c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b27]\n??:? _d_run_main [0x428a92]\n??:? main [0x42846f]\n??:?
    __libc_start_main [0x87ced554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0eqklf1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk572ze9z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n        return\
    \ [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvamb93lp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe69e4gni.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrmn8u4m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] ret = new long[2];\n    long\
    \ min = long.max;\n    long index = long.max;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return ret;\n\
    \    ret[0] = min;\n    ret[1] = index;\n    return ret;\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_6fdu0gm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0eqklf1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp441actb4.d(65): unittest failure\n----------------\n??:?
    _d_unittestp [0x42874d]\n??:? void tmp441actb4.__unittest_L60_C1() [0x4280bd]\n??:?
    void tmp441actb4.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b97]\n??:? _d_run_main [0x428b02]\n??:? main [0x4284e3]\n??:?
    __libc_start_main [0xef490554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            result[0] = v;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq9817y37.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqfgmyfar.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x42871d]\n??:? void tmpqfgmyfar.__unittest_L59_C1() [0x42808d]\n??:?
    void tmpqfgmyfar.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b67]\n??:? _d_run_main [0x428ad2]\n??:? main [0x4284b3]\n??:?
    __libc_start_main [0x9a988554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ min_index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v\
    \ < min)\n        {\n            min = v;\n            min_index = i;\n      \
    \  }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = min_index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprysfczm9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    foreach(i, v; arr)\n    {\n        if (v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            result[0] = v;\n \
    \           result[1] = i;\n        }\n    }\n    if (min == long.max)\n     \
    \   return [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvuxmnje6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i]\
    \ < min)\n            {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n    }\n    if (min % 2 == 0)\n    {\n      \
    \  result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66zx4q24.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = int.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n \
    \       if(e % 2 == 0 && e < min)\n        {\n            min = e;\n         \
    \   index = i;\n        }\n    }\n    if(min == int.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpay0_guru.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long[]\
    \ evens = arr.filter!(x => x % 2 == 0).array;\n    if (evens.length == 0)\n  \
    \      return result;\n    result[0] = evens.min;\n    result[1] = arr.indexOf(result[0]);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0oxhmcgh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [0L, 0L];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n \
    \       return [min, minIndex];\n    else\n        return [0L, 0L];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoc4k8xz7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    int index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (index == -1)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5pou28z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            result[0] = e;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplk2n0o4t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n  \
    \      {\n            min = e;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp38mod4uj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(long i, long v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           index = i;\n        }\n    }\n    if(min == long.max)\n    {\n   \
    \     return result;\n    }\n    result[0] = min;\n    result[1] = index;\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7uhmxmn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47pjt_j4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 ==\
    \ 0)\n        {\n            min = arr[i];\n            minIndex = i;\n      \
    \  }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return\
    \ new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj7jsp7x8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpho3jrkj3.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmpho3jrkj3.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmpho3jrkj3.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0x65026554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxv8ldnx8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_2wq0ny.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n  \
    \      {\n            min = v;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoarl7ot6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e < min && e % 2 ==\
    \ 0)\n        {\n            min = e;\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnj2qcom0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if(min == arr[0])\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4v53laq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    bool found = false;\n    foreach(i, v;\
    \ arr)\n    {\n        if(v % 2 == 0)\n        {\n            if(!found)\n   \
    \         {\n                min = v;\n                index = i;\n          \
    \      found = true;\n            }\n            else\n            {\n       \
    \         if(v < min)\n                {\n                    min = v;\n     \
    \               index = i;\n                }\n            }\n        }\n    }\n\
    \    if(found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiii6m7i7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b8z8wlk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    if(arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if(min %\
    \ 2 == 0)\n        result ~= [min, index];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3prvsscu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0;\n    long index = 0;\n    bool found = false;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0)\n        {\n            if(!found)\n          \
    \  {\n                min = e;\n                index = i;\n                found\
    \ = true;\n            }\n            else\n            {\n                if(e\
    \ < min)\n                {\n                    min = e;\n                  \
    \  index = i;\n                }\n            }\n        }\n    }\n    if(found)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4kom5ke.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0\
    \ && e < min)\n        {\n            min = e;\n            result[0] = e;\n \
    \           result[1] = i;\n        }\n    }\n    if(min == long.max)\n    {\n\
    \        return new long[0];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzf21q1iu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            result[0] = e;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0L)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kz2e42e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 10001L;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            result[0] = e;\n            result[1]\
    \ = i;\n        }\n    }\n    if(min == 10001L)\n        return [];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3itr2y22.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    int\
    \ minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n       \
    \         min = arr[i];\n                minIndex = i;\n            }\n      \
    \  }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp00c9syc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n       \
    \     index = i;\n        }\n    }\n    if (min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbt5mpq8z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n\
    \    else\n    {\n        result[0] = min;\n        result[1] = index;\n     \
    \   return result;\n    }\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtqo4z3f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_2wq0ny.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n   \
    \ {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0) return [min,\
    \ minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5vryu8rv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdbjm6tpu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmplnrrv16y.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmplnrrv16y.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmplnrrv16y.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0xbc8af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            result[0] = e;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplk2n0o4t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n  \
    \      {\n            min = e;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp38mod4uj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvniiyo3m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2\
    \ == 0)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dozhft9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long minEven = arr[0];\n\
    \    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < minEven)\n\
    \            {\n                minEven = arr[i];\n                minEvenIndex\
    \ = i;\n            }\n        }\n    }\n    if (minEven % 2 == 0)\n    {\n  \
    \      result[0] = minEven;\n        result[1] = minEvenIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zn06_ew.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e < min && e % 2 == 0)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n  \
    \  result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqzswxp3a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    bool found = false;\n    foreach(i, e;\
    \ arr)\n    {\n        if(e % 2 == 0)\n        {\n            if(!found)\n   \
    \         {\n                min = e;\n                index = i;\n          \
    \      found = true;\n            }\n            else\n            {\n       \
    \         if(e < min)\n                {\n                    min = e;\n     \
    \               index = i;\n                }\n            }\n        }\n    }\n\
    \    if(found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj6_ok9fd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min == arr[0])\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7xfd081.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [long.max, long.max];\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n    \
    \    {\n            result[0] = v;\n            result[1] = i;\n        }\n  \
    \  }\n    if(result[0] == long.max)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpne_ql6xn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e;\
    \ arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return new long[0];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqoiiwujo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            result[0] = v;\n \
    \           result[1] = i;\n        }\n    }\n    if(min == long.max)\n    {\n\
    \        return [];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphap9bbn7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0;\n    long index = 0;\n    bool found = false;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0)\n        {\n            if(!found)\n          \
    \  {\n                found = true;\n                min = e;\n              \
    \  index = i;\n            }\n            else\n            {\n              \
    \  if(e < min)\n                {\n                    min = e;\n            \
    \        index = i;\n                }\n            }\n        }\n    }\n    if(found)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct39fhko.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    int\
    \ index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5wc9oler.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0eqklf1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    long count = 0L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0)\n        {\n            if(count == 0)\n      \
    \      {\n                min = e;\n                index = i;\n             \
    \   count++;\n            }\n            else if(e < min)\n            {\n   \
    \             min = e;\n                index = i;\n            }\n        }\n\
    \    }\n    if(count != 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fui27qe.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpt0qqpl29.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmpt0qqpl29.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmpt0qqpl29.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0x2460c554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0eqklf1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(long i, long v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           index = i;\n        }\n    }\n    if(min == long.max)\n    {\n   \
    \     return result;\n    }\n    result[0] = min;\n    result[1] = index;\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7uhmxmn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuknetrx_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long min\
    \ = long.max;\n    long index = long.max;\n    foreach(i, e; arr)\n    {\n   \
    \     if(e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ index = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result\
    \ ~= min;\n        result ~= index;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo5o351qj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            result[0] = v;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_9fh8dl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_i9r_tax.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    bool hasEven = false;\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0)\n        {\n            hasEven = true;\n\
    \            if(v < min)\n            {\n                min = v;\n          \
    \      minIndex = i;\n            }\n        }\n    }\n    if(hasEven)\n    {\n\
    \        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7f_y4rgo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 10001L;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n       \
    \ if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(min == 10001L)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_wgz3ni.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] res = new long[2];\n    if\
    \ (arr.length == 0)\n        return res;\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n \
    \       {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        res[0] = min;\n        res[1] = minIndex;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8midvtu0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    \n    long min = long.max;\n    long minIndex = long.max;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    \n   \
    \ if (min == long.max)\n        return new long[0];\n    \n    return [min, minIndex];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpslwfmo01.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf5rcyakf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long minEven = long.max;\n    long\
    \ minEvenIndex = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 ==\
    \ 0 && e < minEven)\n        {\n            minEven = e;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if(minEven == long.max)\n        return [];\n  \
    \  return [minEven, minEvenIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpta1n4z5s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2\
    \ == 0)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dozhft9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    foreach(long i, long e; arr)\n    {\n \
    \       if(e % 2 == 0)\n        {\n            if(min == 0L)\n            {\n\
    \                min = e;\n                index = i;\n            }\n       \
    \     else if(e < min)\n            {\n                min = e;\n            \
    \    index = i;\n            }\n        }\n    }\n    if(min != 0L)\n    {\n \
    \       result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjaq2zw1s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmplnrrv16y.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmplnrrv16y.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmplnrrv16y.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0xbc8af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    \n    long min = arr[0];\n\
    \    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 ==\
    \ 0 && e < min)\n        {\n            min = e;\n            minIndex = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv74snrvo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n  \
    \      {\n            min = v;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoarl7ot6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxv8ldnx8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] res = new long[2];\n    if\
    \ (arr.length == 0)\n        return res;\n    long min = arr[0];\n    long index\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n \
    \       {\n            min = v;\n            index = i;\n        }\n    }\n  \
    \  if (min % 2 == 0)\n    {\n        res[0] = min;\n        res[1] = index;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6gvhhgi2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmplnrrv16y.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x428735]\n??:? void tmplnrrv16y.__unittest_L59_C1() [0x4280a1]\n??:?
    void tmplnrrv16y.__modtest() [0x4284b4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430c68]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430745]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b5fd]\n??:? runModuleUnitTests [0x42c569]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]\n??:? _d_run_main [0x428aea]\n??:? main [0x4284c7]\n??:?
    __libc_start_main [0xbc8af554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long smallest = arr[0];\n   \
    \ long smallestIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 ==\
    \ 0 && v < smallest)\n        {\n            smallest = v;\n            smallestIndex\
    \ = i;\n        }\n    }\n    if (smallest % 2 == 0)\n    {\n        result[0]\
    \ = smallest;\n        result[1] = smallestIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99sv3xq0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    bool found = false;\n    foreach(i, v;\
    \ arr)\n    {\n        if(v % 2 == 0)\n        {\n            if(!found)\n   \
    \         {\n                found = true;\n                min = v;\n       \
    \         index = i;\n            }\n            else\n            {\n       \
    \         if(v < min)\n                {\n                    min = v;\n     \
    \               index = i;\n                }\n            }\n        }\n    }\n\
    \    if(found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2upkx_wq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] res = [0L, 0L];\n    if (arr.length\
    \ == 0) return res;\n    long min = arr[0];\n    long minIndex = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            minIndex = i;\n        }\n    }\n    if (min == arr[0])\
    \ return res;\n    res[0] = min;\n    res[1] = minIndex;\n    return res;\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3rlkh_2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0eqklf1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    auto result = arr.filter!(a => a\
    \ % 2 == 0).min;\n    if (result is null)\n        return [];\n    return [result,\
    \ arr.indexOf(result)];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3_tc1_l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long[] result = [arr[0], 0];\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < result[0])\n        {\n            result[0] = e;\n\
    \            result[1] = i;\n        }\n    }\n    if (result[0] % 2 != 0)\n \
    \       return [];\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjmdzdvxo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    bool found = false;\n    foreach (i, e; arr)\n    {\n   \
    \     if (e % 2 == 0)\n        {\n            if (!found)\n            {\n   \
    \             min = e;\n                minIndex = i;\n                found =\
    \ true;\n            }\n            else\n            {\n                if (e\
    \ < min)\n                {\n                    min = e;\n                  \
    \  minIndex = i;\n                }\n            }\n        }\n    }\n    if (found)\n\
    \    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp_hi3hyep.d(79): unittest failure\n----------------\n??:?
    _d_unittestp [0x42871d]\n??:? void tmp_hi3hyep.__unittest_L73_C1() [0x4280ea]\n??:?
    void tmp_hi3hyep.__modtest() [0x42849c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b67]\n??:? _d_run_main [0x428ad2]\n??:? main [0x4284af]\n??:?
    __libc_start_main [0xa4168554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            result[0] = v;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0)\n        return result[0..0];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnzctl_m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0) return result;\n    long min = arr[0];\n    foreach (i, e;\
    \ arr)\n    {\n        if (e < min && e % 2 == 0)\n        {\n            min\
    \ = e;\n            result[0] = e;\n            result[1] = i;\n        }\n  \
    \  }\n    if (result[0] == 0) return result;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtgu9lh2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmp441actb4.d(65): unittest failure\n----------------\n??:?
    _d_unittestp [0x42874d]\n??:? void tmp441actb4.__unittest_L60_C1() [0x4280bd]\n??:?
    void tmp441actb4.__modtest() [0x4284d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430dd4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x4308b1]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c5dd]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b97]\n??:? _d_run_main [0x428b02]\n??:? main [0x4284e3]\n??:?
    __libc_start_main [0xef490554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8vpdc37.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(index == -1)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjq79cm3k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvniiyo3m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47pjt_j4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    \n    long minEven = arr[0];\n    long minEvenIndex = 0;\n    bool\
    \ found = false;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0)\n  \
    \      {\n            if (!found)\n            {\n                minEven = e;\n\
    \                minEvenIndex = i;\n                found = true;\n          \
    \  }\n            else\n            {\n                if (e < minEven)\n    \
    \            {\n                    minEven = e;\n                    minEvenIndex\
    \ = i;\n                }\n            }\n        }\n    }\n    if (found)\n \
    \       return [minEven, minEvenIndex];\n    else\n        return [];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1of4hxnm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            result[0] = e;\n            result[1]\
    \ = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmogs8m6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n       \
    \         min = arr[i];\n                index = i;\n            }\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf060fo4h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe69e4gni.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long minEven = arr[0];\n    long minEvenIndex = 0;\n    for (long i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n\
    \            if (arr[i] < minEven)\n            {\n                minEven = arr[i];\n\
    \                minEvenIndex = i;\n            }\n        }\n    }\n    if (minEven\
    \ % 2 == 0)\n        return [minEven, minEvenIndex];\n    else\n        return\
    \ [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjhyjp2t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n  \
    \      {\n            min = e;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp38mod4uj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqabjoln.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = long.max;\n  \
    \  long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min == long.max)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvtcfhujn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp47pjt_j4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = long.max;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           index = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuu_ccrue.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long minEven = arr[0];\n\
    \    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < minEven)\n\
    \            {\n                minEven = arr[i];\n                minEvenIndex\
    \ = i;\n            }\n        }\n    }\n    if (minEven % 2 == 0)\n    {\n  \
    \      result[0] = minEven;\n        result[1] = minEvenIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zn06_ew.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'b''core.exception.AssertError@/tmp/tmpqfgmyfar.d(64): unittest failure\n----------------\n??:?
    _d_unittestp [0x42871d]\n??:? void tmpqfgmyfar.__unittest_L59_C1() [0x42808d]\n??:?
    void tmpqfgmyfar.__modtest() [0x4284a0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope
    int delegate(ref rt.sections_elf_shared.DSO)) [0x430da4]\n??:? int rt.minfo.moduleinfos_apply(scope
    int delegate(immutable(object.ModuleInfo*))) [0x430881]\n??:? int object.ModuleInfo.opApply(scope
    int delegate(object.ModuleInfo*)) [0x42b641]\n??:? runModuleUnitTests [0x42c5ad]\n??:?
    void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b67]\n??:? _d_run_main [0x428ad2]\n??:? main [0x4284b3]\n??:?
    __libc_start_main [0x9a988554]\n1/1 unittests FAILED\n'''
  stdout: b''
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [long.max, long.max];\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n    \
    \    {\n            result[0] = v;\n            result[1] = i;\n        }\n  \
    \  }\n    if(result[0] == long.max)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpne_ql6xn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659798396
