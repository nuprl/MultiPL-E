language: d
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp655rgcng.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmp655rgcng.__unittest_L59_C1() [0x42808d]

    ??:? void tmp655rgcng.__modtest() [0x4284a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb_cbd7y6.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpb_cbd7y6.__unittest_L56_C1() [0x428049]

    ??:? void tmpb_cbd7y6.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long min\
    \ = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min != long.max)\n    {\n        result ~= min;\n  \
    \      result ~= index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(index == -1)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg_w1ka32.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpg_w1ka32.__unittest_L57_C1() [0x4280aa]

    ??:? void tmpg_w1ka32.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long min\
    \ = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min != long.max)\n    {\n        result ~= min;\n  \
    \      result ~= index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    long minEven = 0;\n    long minEvenIndex\
    \ = 0;\n    bool foundEven = false;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ < min)\n        {\n            min = v;\n            minIndex = i;\n       \
    \ }\n        if(v % 2 == 0)\n        {\n            if(!foundEven)\n         \
    \   {\n                minEven = v;\n                minEvenIndex = i;\n     \
    \           foundEven = true;\n            }\n            else if(v < minEven)\n\
    \            {\n                minEven = v;\n                minEvenIndex = i;\n\
    \            }\n        }\n    }\n    if(foundEven)\n    {\n        result[0]\
    \ = minEven;\n        result[1] = minEvenIndex;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp97jvvm2s.d(41): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4287e6]

    ??:? long[] tmp97jvvm2s.pluck(long[]) [0x427e48]

    ??:? void tmp97jvvm2s.__unittest_L75_C1() [0x4280c0]

    ??:? void tmp97jvvm2s.__modtest() [0x4284b8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[]'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n \
    \       return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsomvqwol.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmpsomvqwol.__unittest_L56_C1() [0x42803d]

    ??:? void tmpsomvqwol.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = long.max;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n \
    \           index = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4_3st219.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmp4_3st219.__unittest_L59_C1() [0x4280a1]

    ??:? void tmp4_3st219.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7btvr_9l.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmp7btvr_9l.__unittest_L59_C1() [0x4280a1]

    ??:? void tmp7btvr_9l.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]

    ??:? _d_run_main [0x428aea]

    ??:? main [0x4284c7]

    ??:? __libc_start_main [0xe4b02554]

    1/1 unittests FAILED

    '
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  result[0] = -1;\n    result[1] = -1;\n    if (arr.length == 0)\n        return\
    \ result;\n    long min = arr[0];\n    long minIndex = 0;\n    for (int i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n\
    \        {\n            min = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnaic192h.d(67): unittest failure

    ----------------

    ??:? _d_unittestp [0x42879d]

    ??:? void tmpnaic192h.__unittest_L62_C1() [0x428109]

    ??:? void tmpnaic192h.__modtest() [0x42851c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c857]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430975]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430e24]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430901]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6c1]

    ??:? runModuleUnitTests [0x42c62d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c60]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if(arr.length\
    \ == 0) return result;\n    long min = arr[0];\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    result[0] = v;\n            result[1] = i;\n        }\n    }\n    if(result[0]\
    \ == 0)\n        result = [];\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv5vtf4ca.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpv5vtf4ca.__unittest_L56_C1() [0x42809d]

    ??:? void tmpv5vtf4ca.__modtest() [0x4284b0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuezbsjk5.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286d5]

    ??:? void tmpuezbsjk5.__unittest_L58_C1() [0x4280a6]

    ??:? void tmpuezbsjk5.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b622]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430839]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]

    ??:? runModuleUnitTests [0x42c565]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b98]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpudw_zioj.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpudw_zioj.__unittest_L59_C1() [0x4280a1]

    ??:? void tmpudw_zioj.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3dne2e_k.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3dne2e_k.__unittest_L60_C1() [0x4280bd]

    ??:? void tmp3dne2e_k.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    auto min = arr[0];\n    auto minIndex = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe043h1wn.d(49): Error: cannot implicitly convert expression `i`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe043h1wn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ min_index = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n\
    \                min = arr[i];\n                min_index = i;\n            }\n\
    \        }\n    }\n    if (min == arr[0])\n        return result;\n    result[0]\
    \ = min;\n    result[1] = min_index;\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr21ci7oa.d(67): unittest failure

    ----------------

    ??:? _d_unittestp [0x428785]

    ??:? void tmpr21ci7oa.__unittest_L62_C1() [0x4280f1]

    ??:? void tmpr21ci7oa.__modtest() [0x428504]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7e3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b676]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430809]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430cb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430795]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b64d]

    ??:? runModuleUnitTests [0x42c5b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c48]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    bool found = false;\n    foreach (i, e; arr)\n    {\n   \
    \     if (e % 2 == 0)\n        {\n            if (!found)\n            {\n   \
    \             min = e;\n                minIndex = i;\n                found =\
    \ true;\n            }\n            else\n            {\n                if (e\
    \ < min)\n                {\n                    min = e;\n                  \
    \  minIndex = i;\n                }\n            }\n        }\n    }\n    if (found)\n\
    \    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9fmwvxh2.d(79): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmp9fmwvxh2.__unittest_L73_C1() [0x4280ea]

    ??:? void tmp9fmwvxh2.__modtest() [0x42849c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    bool found = false;\n    foreach (i, v; arr)\n    {\n   \
    \     if (v % 2 == 0)\n        {\n            if (!found)\n            {\n   \
    \             min = v;\n                minIndex = i;\n                found =\
    \ true;\n            }\n            else\n            {\n                if (v\
    \ < min)\n                {\n                    min = v;\n                  \
    \  minIndex = i;\n                }\n            }\n        }\n    }\n    if (found)\n\
    \    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps1kmp1yw.d(79): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmps1kmp1yw.__unittest_L73_C1() [0x4280ea]

    ??:? void tmps1kmp1yw.__modtest() [0x42849c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbbp4myy6.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpbbp4myy6.__unittest_L60_C1() [0x42806d]

    ??:? void tmpbbp4myy6.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long minEven = arr[0];\n    long minEvenIndex = 0;\n    foreach (i,\
    \ v; arr)\n    {\n        if (v % 2 == 0 && v < minEven)\n        {\n        \
    \    minEven = v;\n            minEvenIndex = i;\n        }\n    }\n    if (minEven\
    \ == arr[0])\n        return [minEven, minEvenIndex];\n    return [];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnyyfbk3y.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286ed]

    ??:? void tmpnyyfbk3y.__unittest_L56_C1() [0x427fce]

    ??:? void tmpnyyfbk3y.__modtest() [0x42846c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c74b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430771]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b5]

    ??:? runModuleUnitTests [0x42c521]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprne0thxr.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmprne0thxr.__unittest_L56_C1() [0x428049]

    ??:? void tmprne0thxr.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long minEven\
    \ = long.max;\n    long minEvenIndex = long.max;\n    foreach(i, n; arr)\n   \
    \ {\n        if(n % 2 == 0 && n < minEven)\n        {\n            minEven = n;\n\
    \            minEvenIndex = i;\n        }\n    }\n    if(minEven != long.max)\n\
    \    {\n        result ~= minEven;\n        result ~= minEvenIndex;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long smallestEven\
    \ = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < smallestEven)\n        {\n            smallestEven = e;\n  \
    \          index = i;\n        }\n    }\n    if(smallestEven != long.max)\n  \
    \  {\n        result ~= smallestEven;\n        result ~= index;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3dne2e_k.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3dne2e_k.__unittest_L60_C1() [0x4280bd]

    ??:? void tmp3dne2e_k.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7btvr_9l.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmp7btvr_9l.__unittest_L59_C1() [0x4280a1]

    ??:? void tmp7btvr_9l.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]

    ??:? _d_run_main [0x428aea]

    ??:? main [0x4284c7]

    ??:? __libc_start_main [0xe4b02554]

    1/1 unittests FAILED

    '
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            result[0] = v;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if(min == arr[0])\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp59h3238l.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmp59h3238l.__unittest_L57_C1() [0x428089]

    ??:? void tmp59h3238l.__modtest() [0x42849c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [long.max, long.max];\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n    \
    \    {\n            result[0] = v;\n            result[1] = i;\n        }\n  \
    \  }\n    if(result[0] == long.max)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164167
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    bool found = false;\n   \
    \ foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n           \
    \ if (!found)\n            {\n                min = v;\n                minIndex\
    \ = i;\n                found = true;\n            }\n            else\n     \
    \       {\n                if (v < min)\n                {\n                 \
    \   min = v;\n                    minIndex = i;\n                }\n         \
    \   }\n        }\n    }\n    if (found)\n    {\n        return [min, minIndex];\n\
    \    }\n    else\n    {\n        return new long[0];\n    }\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min != arr[0])\n    {\n        result[0] = min;\n  \
    \      result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppiu6k4mk.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x42870d]

    ??:? void tmppiu6k4mk.__unittest_L58_C1() [0x42807d]

    ??:? void tmppiu6k4mk.__modtest() [0x428490]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c76b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430791]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c40]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43071d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d5]

    ??:? runModuleUnitTests [0x42c541]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bd0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = arr[0];\n    long index = 0;\n    foreach(i, e; arr)\n    {\n  \
    \      if(e % 2 == 0 && e < min)\n        {\n            min = e;\n          \
    \  index = i;\n        }\n    }\n    if(min == arr[0])\n    {\n        return\
    \ result;\n    }\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptwt8qddd.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x42870d]

    ??:? void tmptwt8qddd.__unittest_L59_C1() [0x428079]

    ??:? void tmptwt8qddd.__modtest() [0x42848c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b65a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d94]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430871]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b631]

    ??:? runModuleUnitTests [0x42c59d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bd0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long[] result = [arr[0], 0];\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < result[0])\n        {\n            result[0] = e;\n\
    \            result[1] = i;\n        }\n    }\n    if (result[0] % 2 != 0)\n \
    \       return [];\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8k8lb1dn.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x428765]

    ??:? void tmp8k8lb1dn.__unittest_L55_C1() [0x4280d5]

    ??:? void tmp8k8lb1dn.__modtest() [0x4284e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b656]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430775]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]

    ??:? runModuleUnitTests [0x42c599]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c28]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp94980yk0.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x428715]

    ??:? void tmp94980yk0.__unittest_L60_C1() [0x428081]

    ??:? void tmp94980yk0.__modtest() [0x428494]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c773]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b606]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430799]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430725]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5dd]

    ??:? runModuleUnitTests [0x42c549]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bd8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = arr[0];\n    long index = 0;\n    bool found = false;\n    foreach(i,\
    \ e; arr)\n    {\n        if(e % 2 == 0)\n        {\n            if(e < min)\n\
    \            {\n                min = e;\n                index = i;\n       \
    \         found = true;\n            }\n        }\n    }\n    if(found)\n    {\n\
    \        result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcoyocrkl.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286ed]

    ??:? void tmpcoyocrkl.__unittest_L63_C1() [0x428059]

    ??:? void tmpcoyocrkl.__modtest() [0x42846c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b63a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308c5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430851]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b611]

    ??:? runModuleUnitTests [0x42c57d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return [].dup;\n\
    \    long min = long.max;\n    long index = 0;\n    foreach (i, e; arr)\n    {\n\
    \        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n       \
    \     index = i;\n        }\n    }\n    if (min == long.max) return [].dup;\n\
    \    return [min, index].dup;\n}\nunittest\n{\n    alias candidate = pluck;\n\n\
    \    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4f944sc4.d(40): Error: cannot implicitly convert expression `dup([])`
    of type `void[]` to `long[]`

    /tmp/tmp4f944sc4.d(51): Error: cannot implicitly convert expression `dup([])`
    of type `void[]` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4f944sc4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3a6h3d5t.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmp3a6h3d5t.__unittest_L60_C1() [0x42806d]

    ??:? void tmp3a6h3d5t.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7btvr_9l.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmp7btvr_9l.__unittest_L59_C1() [0x4280a1]

    ??:? void tmp7btvr_9l.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]

    ??:? _d_run_main [0x428aea]

    ??:? main [0x4284c7]

    ??:? __libc_start_main [0xe4b02554]

    1/1 unittests FAILED

    '
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    foreach(i, v; arr)\n    {\n        if(v < min && v % 2 ==\
    \ 0)\n        {\n            min = v;\n            result[0] = v;\n          \
    \  result[1] = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy9fwj4cw.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286d5]

    ??:? void tmpy9fwj4cw.__unittest_L53_C1() [0x428045]

    ??:? void tmpy9fwj4cw.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c733]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430759]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c08]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b59d]

    ??:? runModuleUnitTests [0x42c509]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b98]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, val; arr)\n    {\n        if (val % 2 == 0 && val\
    \ < min)\n        {\n            min = val;\n            index = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1ch91fci.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmp1ch91fci.__unittest_L59_C1() [0x42808d]

    ??:? void tmp1ch91fci.__modtest() [0x4284a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7btvr_9l.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmp7btvr_9l.__unittest_L59_C1() [0x4280a1]

    ??:? void tmp7btvr_9l.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]

    ??:? _d_run_main [0x428aea]

    ??:? main [0x4284c7]

    ??:? __libc_start_main [0xe4b02554]

    1/1 unittests FAILED

    '
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, v; arr)\n    {\n        if (v < min && v % 2 == 0)\n        {\n        \
    \    min = v;\n            result[0] = v;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0)\n        return result;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8m4qm8b.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmpy8m4qm8b.__unittest_L57_C1() [0x428091]

    ??:? void tmpy8m4qm8b.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvg_3lsqk.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpvg_3lsqk.__unittest_L60_C1() [0x42806d]

    ??:? void tmpvg_3lsqk.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgvhber72.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x428765]

    ??:? void tmpgvhber72.__unittest_L63_C1() [0x4280d1]

    ??:? void tmpgvhber72.__modtest() [0x4284e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b656]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430775]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]

    ??:? runModuleUnitTests [0x42c599]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c28]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n       \
    \         min = arr[i];\n                index = i;\n            }\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptcybsvfx.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmptcybsvfx.__unittest_L63_C1() [0x4280bd]

    ??:? void tmptcybsvfx.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            minIndex\
    \ = i;\n        }\n    }\n    if(min == arr[0])\n    {\n        return result;\n\
    \    }\n    result[0] = min;\n    result[1] = minIndex;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkxfxoy4q.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmpkxfxoy4q.__unittest_L59_C1() [0x428089]

    ??:? void tmpkxfxoy4q.__modtest() [0x42849c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [long.max, long.max];\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < result[0])\n    \
    \    {\n            result[0] = e;\n            result[1] = i;\n        }\n  \
    \  }\n    if(result[0] == long.max)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbbp4myy6.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpbbp4myy6.__unittest_L60_C1() [0x42806d]

    ??:? void tmpbbp4myy6.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] res = new long[2];\n    long\
    \ min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n      \
    \  if(v % 2 == 0 && v < min)\n        {\n            min = v;\n            index\
    \ = i;\n        }\n    }\n    if(min == long.max)\n        return res;\n    res[0]\
    \ = min;\n    res[1] = index;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1d74mkyr.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmp1d74mkyr.__unittest_L57_C1() [0x4280b2]

    ??:? void tmp1d74mkyr.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(index != -1)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2 ==\
    \ 0)\n        {\n            min = v;\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpap401klb.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpap401klb.__unittest_L60_C1() [0x42806d]

    ??:? void tmpap401klb.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e;\
    \ arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return new long[0];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp932qktsy.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp932qktsy.__unittest_L56_C1() [0x42803d]

    ??:? void tmp932qktsy.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    bool hasEven = false;\n    foreach (i, v; arr)\n    {\n \
    \       if (v % 2 == 0)\n        {\n            hasEven = true;\n            if\
    \ (v < min)\n            {\n                min = v;\n                minIndex\
    \ = i;\n            }\n        }\n    }\n    if (hasEven)\n    {\n        result[0]\
    \ = min;\n        result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_yexvpgp.d(70): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmp_yexvpgp.__unittest_L65_C1() [0x42806d]

    ??:? void tmp_yexvpgp.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long minEven = arr[0];\n    long\
    \ minEvenIndex = 0;\n    foreach (i, value; arr)\n    {\n        if (value % 2\
    \ == 0)\n        {\n            if (value < minEven)\n            {\n        \
    \        minEven = value;\n                minEvenIndex = i;\n            }\n\
    \        }\n    }\n    if (minEven % 2 == 0)\n    {\n        result[0] = minEven;\n\
    \        result[1] = minEvenIndex;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv8a5yajo.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x428715]

    ??:? void tmpv8a5yajo.__unittest_L63_C1() [0x428085]

    ??:? void tmpv8a5yajo.__modtest() [0x428498]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c773]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b606]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430799]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430725]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5dd]

    ??:? runModuleUnitTests [0x42c549]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bd8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp39g2hcqt.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmp39g2hcqt.__unittest_L56_C1() [0x428099]

    ??:? void tmp39g2hcqt.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqgt6_g9a.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmpqgt6_g9a.__unittest_L56_C1() [0x428091]

    ??:? void tmpqgt6_g9a.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v < min && v % 2 == 0)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprqx4xwb5.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmprqx4xwb5.__unittest_L56_C1() [0x428049]

    ??:? void tmprqx4xwb5.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            result[0] = e;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0L)\n        return [0L, 0L];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeo59_7b6.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x42873d]

    ??:? void tmpeo59_7b6.__unittest_L57_C1() [0x4280a9]

    ??:? void tmpeo59_7b6.__modtest() [0x4284bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307c1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c70]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43074d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b605]

    ??:? runModuleUnitTests [0x42c571]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c00]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long minEven = long.max;\n    long minEvenIndex = long.max;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] <\
    \ minEven)\n        {\n            minEven = arr[i];\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if (minEven == long.max)\n    {\n        return\
    \ result;\n    }\n    result[0] = minEven;\n    result[1] = minEvenIndex;\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnh19pi7_.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpnh19pi7_.__unittest_L59_C1() [0x428102]

    ??:? void tmpnh19pi7_.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b682]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43090d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dbc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430899]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b659]

    ??:? runModuleUnitTests [0x42c5c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    bool found = false;\n    foreach(i, e;\
    \ arr)\n    {\n        if(e % 2 == 0)\n        {\n            if(!found)\n   \
    \         {\n                min = e;\n                index = i;\n          \
    \      found = true;\n            }\n            else\n            {\n       \
    \         if(e < min)\n                {\n                    min = e;\n     \
    \               index = i;\n                }\n            }\n        }\n    }\n\
    \    if(found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfilf6k_t.d(77): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286f5]

    ??:? void tmpfilf6k_t.__unittest_L71_C1() [0x4280c2]

    ??:? void tmpfilf6k_t.__modtest() [0x428474]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c753]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430779]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430705]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5bd]

    ??:? runModuleUnitTests [0x42c529]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long min\
    \ = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if\
    \ (e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if (min != long.max)\n    {\n        result ~= min;\n\
    \        result ~= index;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvg_3lsqk.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpvg_3lsqk.__unittest_L60_C1() [0x42806d]

    ??:? void tmpvg_3lsqk.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    int index = -1;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n        return result;\n    result[0] = min;\n    result[1] = index;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprrxuoeud.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmprrxuoeud.__unittest_L57_C1() [0x4280f2]

    ??:? void tmprrxuoeud.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430889]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c5b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0) \n    {\n        return result;\n    }\n    long minEven =\
    \ arr[0];\n    long minEvenIndex = 0;\n    foreach (i, e; arr) \n    {\n     \
    \   if (e % 2 == 0) \n        {\n            if (e < minEven) \n            {\n\
    \                minEven = e;\n                minEvenIndex = i;\n           \
    \ }\n        }\n    }\n    if (minEven % 2 == 0) \n    {\n        result[0] =\
    \ minEven;\n        result[1] = minEvenIndex;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp22feqmo4.d(70): unittest failure

    ----------------

    ??:? _d_unittestp [0x428715]

    ??:? void tmp22feqmo4.__unittest_L65_C1() [0x428085]

    ??:? void tmp22feqmo4.__modtest() [0x428498]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c773]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b606]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430799]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430725]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5dd]

    ??:? runModuleUnitTests [0x42c549]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bd8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = long.max;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n \
    \           index = i;\n        }\n    }\n    if(min != long.max)\n    {\n   \
    \     result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw41r7b73.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286d5]

    ??:? void tmpw41r7b73.__unittest_L58_C1() [0x4280a2]

    ??:? void tmpw41r7b73.__modtest() [0x428454]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b622]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430839]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]

    ??:? runModuleUnitTests [0x42c565]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b98]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v < min && v % 2 == 0)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprqx4xwb5.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmprqx4xwb5.__unittest_L56_C1() [0x428049]

    ??:? void tmprqx4xwb5.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprm186ygg.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmprm186ygg.__unittest_L56_C1() [0x428049]

    ??:? void tmprm186ygg.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            result[0] = v;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach(i, e; arr)\n    {\n        if(e\
    \ % 2 == 0 && e < min)\n        {\n            min = e;\n            index = i;\n\
    \        }\n    }\n    if(min == arr[0])\n    {\n        return result;\n    }\n\
    \    else\n    {\n        result[0] = min;\n        result[1] = index;\n     \
    \   return result;\n    }\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp98v0yi5m.d(67): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmp98v0yi5m.__unittest_L62_C1() [0x428089]

    ??:? void tmp98v0yi5m.__modtest() [0x42849c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprne0thxr.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmprne0thxr.__unittest_L56_C1() [0x428049]

    ??:? void tmprne0thxr.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  result[0] = -1;\n    result[1] = -1;\n    if (arr.length == 0)\n        return\
    \ result;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0)\n        {\n\
    \            if (result[0] == -1)\n            {\n                result[0] =\
    \ v;\n                result[1] = i;\n            }\n            else if (v <\
    \ result[0])\n            {\n                result[0] = v;\n                result[1]\
    \ = i;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn3ks55q3.d(69): unittest failure

    ----------------

    ??:? _d_unittestp [0x4287ad]

    ??:? void tmpn3ks55q3.__unittest_L63_C1() [0x42817a]

    ??:? void tmpn3ks55q3.__modtest() [0x42852c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c867]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6fa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430985]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430e34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430911]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d1]

    ??:? runModuleUnitTests [0x42c63d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c70]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2 ==\
    \ 0)\n        {\n            min = v;\n            index = i;\n        }\n   \
    \ }\n    if (min == arr[0] && min % 2 != 0)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8m9p0u6z.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428745]

    ??:? void tmp8m9p0u6z.__unittest_L59_C1() [0x4280b5]

    ??:? void tmp8m9p0u6z.__modtest() [0x4284c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b636]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430755]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b60d]

    ??:? runModuleUnitTests [0x42c579]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c08]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    bool found = false;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (!found)\n\
    \            {\n                min = arr[i];\n                minIndex = i;\n\
    \                found = true;\n            }\n            else\n            {\n\
    \                if (arr[i] < min)\n                {\n                    min\
    \ = arr[i];\n                    minIndex = i;\n                }\n          \
    \  }\n        }\n    }\n    if (found)\n    {\n        result[0] = min;\n    \
    \    result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp390b6gx1.d(79): unittest failure

    ----------------

    ??:? _d_unittestp [0x428785]

    ??:? void tmp390b6gx1.__unittest_L73_C1() [0x428156]

    ??:? void tmp390b6gx1.__modtest() [0x428508]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c83f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b6d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43095d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430e0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6a9]

    ??:? runModuleUnitTests [0x42c615]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c48]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0] =\
    \ min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpplw7i2hv.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpplw7i2hv.__unittest_L58_C1() [0x4280ae]

    ??:? void tmpplw7i2hv.__modtest() [0x428460]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprne0thxr.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmprne0thxr.__unittest_L56_C1() [0x428049]

    ??:? void tmprne0thxr.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4_3st219.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmp4_3st219.__unittest_L59_C1() [0x4280a1]

    ??:? void tmp4_3st219.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (index, value; arr)\n    {\n        if (value % 2\
    \ == 0 && value < min)\n        {\n            min = value;\n            minIndex\
    \ = index;\n        }\n    }\n    if (min == arr[0])\n        return result;\n\
    \    result[0] = min;\n    result[1] = minIndex;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp71r2qiic.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmp71r2qiic.__unittest_L59_C1() [0x4280a1]

    ??:? void tmp71r2qiic.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0] =\
    \ min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpplw7i2hv.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpplw7i2hv.__unittest_L58_C1() [0x4280ae]

    ??:? void tmpplw7i2hv.__modtest() [0x428460]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjty9l3qh.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpjty9l3qh.__unittest_L59_C1() [0x4280a1]

    ??:? void tmpjty9l3qh.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    \n    long min = arr[0];\n  \
    \  long minIndex = 0;\n    long minEven = 0;\n    long minEvenIndex = 0;\n   \
    \ bool hasEven = false;\n    foreach (i, v; arr)\n    {\n        if (v < min)\n\
    \        {\n            min = v;\n            minIndex = i;\n        }\n     \
    \   if (v % 2 == 0)\n        {\n            if (!hasEven)\n            {\n   \
    \             minEven = v;\n                minEvenIndex = i;\n              \
    \  hasEven = true;\n            }\n            else if (v < minEven)\n       \
    \     {\n                minEven = v;\n                minEvenIndex = i;\n   \
    \         }\n        }\n    }\n    if (hasEven)\n    {\n        result[0] = minEven;\n\
    \        result[1] = minEvenIndex;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4k4hlk4g.d(84): unittest failure

    ----------------

    ??:? _d_unittestp [0x428745]

    ??:? void tmp4k4hlk4g.__unittest_L78_C1() [0x428112]

    ??:? void tmp4k4hlk4g.__modtest() [0x4284c4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7a3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b636]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307c9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430755]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b60d]

    ??:? runModuleUnitTests [0x42c579]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c08]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            result[0] = e;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0L)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcbgkafmq.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpcbgkafmq.__unittest_L57_C1() [0x428099]

    ??:? void tmpcbgkafmq.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) \n        return\
    \ new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i,\
    \ v; arr) \n    {\n        if (v < min && v % 2 == 0) \n        {\n          \
    \  min = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\
    \ \n        return [min, minIndex];\n    return new long[0];\n}\nunittest\n{\n\
    \    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvz8dg9u7.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmpvz8dg9u7.__unittest_L56_C1() [0x42803d]

    ??:? void tmpvz8dg9u7.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprm186ygg.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmprm186ygg.__unittest_L56_C1() [0x428049]

    ??:? void tmprm186ygg.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpudw_zioj.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpudw_zioj.__unittest_L59_C1() [0x4280a1]

    ??:? void tmpudw_zioj.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] ret = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            ret[0] = v;\n           \
    \ ret[1] = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long i = 0; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 == 0)\n  \
    \      {\n            min = arr[i];\n            minIndex = i;\n        }\n  \
    \  }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return [];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd18eqpfb.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmpd18eqpfb.__unittest_L56_C1() [0x428091]

    ??:? void tmpd18eqpfb.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4_3st219.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmp4_3st219.__unittest_L59_C1() [0x4280a1]

    ??:? void tmp4_3st219.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = -1;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (index\
    \ == -1)\n    {\n        return result;\n    }\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4pjjbze7.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmp4pjjbze7.__unittest_L59_C1() [0x4280f2]

    ??:? void tmp4pjjbze7.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b672]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430889]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]

    ??:? runModuleUnitTests [0x42c5b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = long.max;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           index = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3lwbl3w0.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp3lwbl3w0.__unittest_L57_C1() [0x4280ae]

    ??:? void tmp3lwbl3w0.__modtest() [0x428460]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl_a3epz4.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpl_a3epz4.__unittest_L57_C1() [0x4280b2]

    ??:? void tmpl_a3epz4.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuezbsjk5.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286d5]

    ??:? void tmpuezbsjk5.__unittest_L58_C1() [0x4280a6]

    ??:? void tmpuezbsjk5.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b622]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430839]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]

    ??:? runModuleUnitTests [0x42c565]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b98]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzuz53s8f.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpzuz53s8f.__unittest_L57_C1() [0x4280b2]

    ??:? void tmpzuz53s8f.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3dne2e_k.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3dne2e_k.__unittest_L60_C1() [0x4280bd]

    ??:? void tmp3dne2e_k.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            result[0] = v;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, minIndex];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb_cbd7y6.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpb_cbd7y6.__unittest_L56_C1() [0x428049]

    ??:? void tmpb_cbd7y6.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzuz53s8f.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpzuz53s8f.__unittest_L57_C1() [0x4280b2]

    ??:? void tmpzuz53s8f.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = long.max;\n    long index = -1;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (index == -1)\n        return\
    \ [];\n    return [min, index];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjty9l3qh.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpjty9l3qh.__unittest_L59_C1() [0x4280a1]

    ??:? void tmpjty9l3qh.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    for (long i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0 && arr[i] < min)\n        {\n     \
    \       min = arr[i];\n            index = i;\n        }\n    }\n    if (min %\
    \ 2 == 0)\n        return [min, index];\n    return [];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp39g2hcqt.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmp39g2hcqt.__unittest_L56_C1() [0x428099]

    ??:? void tmp39g2hcqt.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] ret = new long[2];\n    long\
    \ min = long.max;\n    long index = long.max;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return ret;\n\
    \    ret[0] = min;\n    ret[1] = index;\n    return ret;\n}\nunittest\n{\n   \
    \ alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n\
    \    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) ==\
    \ []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpon3b6f5y.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpon3b6f5y.__unittest_L57_C1() [0x4280ae]

    ??:? void tmpon3b6f5y.__modtest() [0x428460]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzuz53s8f.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpzuz53s8f.__unittest_L57_C1() [0x4280b2]

    ??:? void tmpzuz53s8f.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3dne2e_k.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3dne2e_k.__unittest_L60_C1() [0x4280bd]

    ??:? void tmp3dne2e_k.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            result[0] = v;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp655rgcng.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmp655rgcng.__unittest_L59_C1() [0x42808d]

    ??:? void tmp655rgcng.__modtest() [0x4284a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ min_index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v\
    \ < min)\n        {\n            min = v;\n            min_index = i;\n      \
    \  }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = min_index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmrk4eya4.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x428715]

    ??:? void tmpmrk4eya4.__unittest_L60_C1() [0x428081]

    ??:? void tmpmrk4eya4.__modtest() [0x428494]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c773]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b606]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430799]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430725]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5dd]

    ??:? runModuleUnitTests [0x42c549]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bd8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    foreach(i, v; arr)\n    {\n        if (v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            result[0] = v;\n \
    \           result[1] = i;\n        }\n    }\n    if (min == long.max)\n     \
    \   return [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = arr[0];\n    long index = 0;\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n            if (arr[i]\
    \ < min)\n            {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n    }\n    if (min % 2 == 0)\n    {\n      \
    \  result[0] = min;\n        result[1] = index;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptaetrehs.d(66): unittest failure

    ----------------

    ??:? _d_unittestp [0x42873d]

    ??:? void tmptaetrehs.__unittest_L61_C1() [0x4280a9]

    ??:? void tmptaetrehs.__modtest() [0x4284bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b68a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430915]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dc4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308a1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b661]

    ??:? runModuleUnitTests [0x42c5cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c00]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = int.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n \
    \       if(e % 2 == 0 && e < min)\n        {\n            min = e;\n         \
    \   index = i;\n        }\n    }\n    if(min == int.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyvllf5o4.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286d5]

    ??:? void tmpyvllf5o4.__unittest_L57_C1() [0x4280a6]

    ??:? void tmpyvllf5o4.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b622]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430839]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]

    ??:? runModuleUnitTests [0x42c565]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b98]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long[]\
    \ evens = arr.filter!(x => x % 2 == 0).array;\n    if (evens.length == 0)\n  \
    \      return result;\n    result[0] = evens.min;\n    result[1] = arr.indexOf(result[0]);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi9_t9vrz.d(41): Error: no property `filter` for type `long[]`

    /tmp/tmpi9_t9vrz.d(44): Error: no property `min` for type `long[]`

    /tmp/tmpi9_t9vrz.d(45): Error: no property `indexOf` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9_t9vrz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [0L, 0L];\n    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, v;\
    \ arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n            min\
    \ = v;\n            minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n \
    \       return [min, minIndex];\n    else\n        return [0L, 0L];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpachhhkon.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286f5]

    ??:? void tmpachhhkon.__unittest_L57_C1() [0x428065]

    ??:? void tmpachhhkon.__modtest() [0x428478]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c753]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430779]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430705]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5bd]

    ??:? runModuleUnitTests [0x42c529]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    int index = -1;\n    foreach(i, v; arr)\n    {\n\
    \        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n       \
    \     index = i;\n        }\n    }\n    if (index == -1)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3s9ze9m_.d(48): Error: cannot implicitly convert expression `i`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s9ze9m_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164167
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            result[0] = e;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n  \
    \      {\n            min = e;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(long i, long v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           index = i;\n        }\n    }\n    if(min == long.max)\n    {\n   \
    \     return result;\n    }\n    result[0] = min;\n    result[1] = index;\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0wku4bn_.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmp0wku4bn_.__unittest_L59_C1() [0x4280b2]

    ??:? void tmp0wku4bn_.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprne0thxr.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmprne0thxr.__unittest_L56_C1() [0x428049]

    ??:? void tmprne0thxr.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long min = arr[0];\n    long minIndex = 0;\n    for (long\
    \ i = 0; i < arr.length; i++)\n    {\n        if (arr[i] < min && arr[i] % 2 ==\
    \ 0)\n        {\n            min = arr[i];\n            minIndex = i;\n      \
    \  }\n    }\n    if (min % 2 == 0)\n        return [min, minIndex];\n    return\
    \ new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpucm9db4k.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmpucm9db4k.__unittest_L56_C1() [0x428089]

    ??:? void tmpucm9db4k.__modtest() [0x42849c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7btvr_9l.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmp7btvr_9l.__unittest_L59_C1() [0x4280a1]

    ??:? void tmp7btvr_9l.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate()) [0x428b7f]

    ??:? _d_run_main [0x428aea]

    ??:? main [0x4284c7]

    ??:? __libc_start_main [0xe4b02554]

    1/1 unittests FAILED

    '
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfd6f1cu5.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmpfd6f1cu5.__unittest_L59_C1() [0x42808d]

    ??:? void tmpfd6f1cu5.__modtest() [0x4284a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvg_3lsqk.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpvg_3lsqk.__unittest_L60_C1() [0x42806d]

    ??:? void tmpvg_3lsqk.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n  \
    \      {\n            min = v;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e < min && e % 2 ==\
    \ 0)\n        {\n            min = e;\n            index = i;\n        }\n   \
    \ }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4n0r_9bs.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmp4n0r_9bs.__unittest_L60_C1() [0x42806d]

    ??:? void tmp4n0r_9bs.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long index = 0;\n    foreach(i, v; arr)\n    {\n        if(v\
    \ % 2 == 0 && v < min)\n        {\n            min = v;\n            index = i;\n\
    \        }\n    }\n    if(min == arr[0])\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp59h3238l.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmp59h3238l.__unittest_L57_C1() [0x428089]

    ??:? void tmp59h3238l.__modtest() [0x42849c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c77b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b60e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c50]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43072d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]

    ??:? runModuleUnitTests [0x42c551]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    bool found = false;\n    foreach(i, v;\
    \ arr)\n    {\n        if(v % 2 == 0)\n        {\n            if(!found)\n   \
    \         {\n                min = v;\n                index = i;\n          \
    \      found = true;\n            }\n            else\n            {\n       \
    \         if(v < min)\n                {\n                    min = v;\n     \
    \               index = i;\n                }\n            }\n        }\n    }\n\
    \    if(found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsbqtnvcu.d(77): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286f5]

    ??:? void tmpsbqtnvcu.__unittest_L71_C1() [0x4280c2]

    ??:? void tmpsbqtnvcu.__modtest() [0x428474]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c753]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430779]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430705]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5bd]

    ??:? runModuleUnitTests [0x42c529]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplzo0b_xq.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x428715]

    ??:? void tmplzo0b_xq.__unittest_L60_C1() [0x428081]

    ??:? void tmplzo0b_xq.__modtest() [0x428494]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c773]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b606]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430799]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430725]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5dd]

    ??:? runModuleUnitTests [0x42c549]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bd8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    if(arr.length\
    \ == 0)\n        return result;\n    long min = arr[0];\n    long index = 0;\n\
    \    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n        {\n\
    \            min = e;\n            index = i;\n        }\n    }\n    if(min %\
    \ 2 == 0)\n        result ~= [min, index];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprunf9ihj.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286ed]

    ??:? void tmprunf9ihj.__unittest_L57_C1() [0x428059]

    ??:? void tmprunf9ihj.__modtest() [0x42846c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d1e7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c07a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430a1d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ecc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4309a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c051]

    ??:? runModuleUnitTests [0x42cfbd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0;\n    long index = 0;\n    bool found = false;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0)\n        {\n            if(!found)\n          \
    \  {\n                min = e;\n                index = i;\n                found\
    \ = true;\n            }\n            else\n            {\n                if(e\
    \ < min)\n                {\n                    min = e;\n                  \
    \  index = i;\n                }\n            }\n        }\n    }\n    if(found)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo383vnqq.d(77): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286f5]

    ??:? void tmpo383vnqq.__unittest_L71_C1() [0x4280c2]

    ??:? void tmpo383vnqq.__modtest() [0x428474]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c753]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430779]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430705]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5bd]

    ??:? runModuleUnitTests [0x42c529]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0\
    \ && e < min)\n        {\n            min = e;\n            result[0] = e;\n \
    \           result[1] = i;\n        }\n    }\n    if(min == long.max)\n    {\n\
    \        return new long[0];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            result[0] = e;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0L)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcbgkafmq.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpcbgkafmq.__unittest_L57_C1() [0x428099]

    ??:? void tmpcbgkafmq.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 10001L;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            result[0] = e;\n            result[1]\
    \ = i;\n        }\n    }\n    if(min == 10001L)\n        return [];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    int\
    \ minIndex = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n       \
    \         min = arr[i];\n                minIndex = i;\n            }\n      \
    \  }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0jrk4d92.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp0jrk4d92.__unittest_L63_C1() [0x4280b9]

    ??:? void tmp0jrk4d92.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n       \
    \     index = i;\n        }\n    }\n    if (min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc2xib261.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpc2xib261.__unittest_L57_C1() [0x4280b2]

    ??:? void tmpc2xib261.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n\
    \    else\n    {\n        result[0] = min;\n        result[1] = index;\n     \
    \   return result;\n    }\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvg_3lsqk.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpvg_3lsqk.__unittest_L60_C1() [0x42806d]

    ??:? void tmpvg_3lsqk.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0) return new long[0];\n\
    \    long min = arr[0];\n    long minIndex = 0;\n    foreach (i, e; arr)\n   \
    \ {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n   \
    \         minIndex = i;\n        }\n    }\n    if (min % 2 == 0) return [min,\
    \ minIndex];\n    return new long[0];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxlbed0_o.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmpxlbed0_o.__unittest_L54_C1() [0x42803d]

    ??:? void tmpxlbed0_o.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpid_hcd8b.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmpid_hcd8b.__unittest_L59_C1() [0x42808d]

    ??:? void tmpid_hcd8b.__modtest() [0x4284a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpudw_zioj.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpudw_zioj.__unittest_L59_C1() [0x4280a1]

    ??:? void tmpudw_zioj.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            result[0] = e;\n        \
    \    result[1] = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ [];\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n  \
    \  assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n  \
    \      {\n            min = e;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp94wa5vlb.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmp94wa5vlb.__unittest_L60_C1() [0x42806d]

    ??:? void tmp94wa5vlb.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2\
    \ == 0)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkqf67aw8.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpkqf67aw8.__unittest_L60_C1() [0x42806d]

    ??:? void tmpkqf67aw8.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long minEven = arr[0];\n\
    \    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < minEven)\n\
    \            {\n                minEven = arr[i];\n                minEvenIndex\
    \ = i;\n            }\n        }\n    }\n    if (minEven % 2 == 0)\n    {\n  \
    \      result[0] = minEven;\n        result[1] = minEvenIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyiiuoa44.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpyiiuoa44.__unittest_L63_C1() [0x4280bd]

    ??:? void tmpyiiuoa44.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = long.max;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n     \
    \   if(e < min && e % 2 == 0)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n  \
    \  result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4qnqfnfu.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286ed]

    ??:? void tmp4qnqfnfu.__unittest_L57_C1() [0x4280be]

    ??:? void tmp4qnqfnfu.__modtest() [0x428470]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c74b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430771]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b5]

    ??:? runModuleUnitTests [0x42c521]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    bool found = false;\n    foreach(i, e;\
    \ arr)\n    {\n        if(e % 2 == 0)\n        {\n            if(!found)\n   \
    \         {\n                min = e;\n                index = i;\n          \
    \      found = true;\n            }\n            else\n            {\n       \
    \         if(e < min)\n                {\n                    min = e;\n     \
    \               index = i;\n                }\n            }\n        }\n    }\n\
    \    if(found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfilf6k_t.d(77): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286f5]

    ??:? void tmpfilf6k_t.__unittest_L71_C1() [0x4280c2]

    ??:? void tmpfilf6k_t.__modtest() [0x428474]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c753]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430779]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430705]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5bd]

    ??:? runModuleUnitTests [0x42c529]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min == arr[0])\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5hpj_x9u.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286ed]

    ??:? void tmp5hpj_x9u.__unittest_L56_C1() [0x427fce]

    ??:? void tmp5hpj_x9u.__modtest() [0x42846c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c74b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430771]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b5]

    ??:? runModuleUnitTests [0x42c521]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [long.max, long.max];\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n    \
    \    {\n            result[0] = v;\n            result[1] = i;\n        }\n  \
    \  }\n    if(result[0] == long.max)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e;\
    \ arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n            min\
    \ = e;\n            index = i;\n        }\n    }\n    if (min % 2 == 0)\n    \
    \    return [min, index];\n    return new long[0];\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp932qktsy.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286cd]

    ??:? void tmp932qktsy.__unittest_L56_C1() [0x42803d]

    ??:? void tmp932qktsy.__modtest() [0x428450]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c787]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308a5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d54]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430831]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f1]

    ??:? runModuleUnitTests [0x42c55d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b90]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0\
    \ && v < min)\n        {\n            min = v;\n            result[0] = v;\n \
    \           result[1] = i;\n        }\n    }\n    if(min == long.max)\n    {\n\
    \        return [];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0;\n    long index = 0;\n    bool found = false;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0)\n        {\n            if(!found)\n          \
    \  {\n                found = true;\n                min = e;\n              \
    \  index = i;\n            }\n            else\n            {\n              \
    \  if(e < min)\n                {\n                    min = e;\n            \
    \        index = i;\n                }\n            }\n        }\n    }\n    if(found)\n\
    \    {\n        result[0] = min;\n        result[1] = index;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0tj5gpmf.d(77): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286f5]

    ??:? void tmp0tj5gpmf.__unittest_L71_C1() [0x4280c2]

    ??:? void tmp0tj5gpmf.__modtest() [0x428474]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c753]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430779]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430705]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5bd]

    ??:? runModuleUnitTests [0x42c529]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    int\
    \ index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n          \
    \  index = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0]\
    \ = min;\n        result[1] = index;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbyvx4pxq.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x428745]

    ??:? void tmpbyvx4pxq.__unittest_L60_C1() [0x4280b5]

    ??:? void tmpbyvx4pxq.__modtest() [0x4284c8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b692]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43091d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dcc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308a9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b669]

    ??:? runModuleUnitTests [0x42c5d5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c08]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzuz53s8f.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpzuz53s8f.__unittest_L57_C1() [0x4280b2]

    ??:? void tmpzuz53s8f.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    long count = 0L;\n    foreach(i, e; arr)\n\
    \    {\n        if(e % 2 == 0)\n        {\n            if(count == 0)\n      \
    \      {\n                min = e;\n                index = i;\n             \
    \   count++;\n            }\n            else if(e < min)\n            {\n   \
    \             min = e;\n                index = i;\n            }\n        }\n\
    \    }\n    if(count != 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxvhgfhiw.d(74): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286f5]

    ??:? void tmpxvhgfhiw.__unittest_L68_C1() [0x4280c2]

    ??:? void tmpxvhgfhiw.__modtest() [0x428474]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c753]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430779]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430705]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5bd]

    ??:? runModuleUnitTests [0x42c529]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4_3st219.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmp4_3st219.__unittest_L59_C1() [0x4280a1]

    ??:? void tmp4_3st219.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzuz53s8f.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpzuz53s8f.__unittest_L57_C1() [0x4280b2]

    ??:? void tmpzuz53s8f.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(long i, long v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           index = i;\n        }\n    }\n    if(min == long.max)\n    {\n   \
    \     return result;\n    }\n    result[0] = min;\n    result[1] = index;\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0wku4bn_.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmp0wku4bn_.__unittest_L59_C1() [0x4280b2]

    ??:? void tmp0wku4bn_.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, v; arr)\n\
    \    {\n        if (v % 2 == 0 && v < min)\n        {\n            min = v;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpemuuxndo.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpemuuxndo.__unittest_L56_C1() [0x428049]

    ??:? void tmpemuuxndo.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [];\n    long min\
    \ = long.max;\n    long index = long.max;\n    foreach(i, e; arr)\n    {\n   \
    \     if(e % 2 == 0 && e < min)\n        {\n            min = e;\n           \
    \ index = i;\n        }\n    }\n    if(min != long.max)\n    {\n        result\
    \ ~= min;\n        result ~= index;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            result[0] = v;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa5pj3k85.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmpa5pj3k85.__unittest_L57_C1() [0x428099]

    ??:? void tmpa5pj3k85.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgvhber72.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x428765]

    ??:? void tmpgvhber72.__unittest_L63_C1() [0x4280d1]

    ??:? void tmpgvhber72.__modtest() [0x4284e4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b656]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430775]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]

    ??:? runModuleUnitTests [0x42c599]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c28]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    long minIndex = 0;\n    bool hasEven = false;\n    foreach(i,\
    \ v; arr)\n    {\n        if(v % 2 == 0)\n        {\n            hasEven = true;\n\
    \            if(v < min)\n            {\n                min = v;\n          \
    \      minIndex = i;\n            }\n        }\n    }\n    if(hasEven)\n    {\n\
    \        result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz2w8enxc.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpz2w8enxc.__unittest_L63_C1() [0x428069]

    ??:? void tmpz2w8enxc.__modtest() [0x42847c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c75b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430781]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c30]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43070d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c5]

    ??:? runModuleUnitTests [0x42c531]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 10001L;\n    long index = 0L;\n    foreach(i, e; arr)\n    {\n       \
    \ if(e % 2 == 0 && e < min)\n        {\n            min = e;\n            index\
    \ = i;\n        }\n    }\n    if(min == 10001L)\n        return result;\n    result[0]\
    \ = min;\n    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpen45f8_m.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmpen45f8_m.__unittest_L57_C1() [0x4280ae]

    ??:? void tmpen45f8_m.__modtest() [0x428460]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] res = new long[2];\n    if\
    \ (arr.length == 0)\n        return res;\n    long min = arr[0];\n    long minIndex\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n \
    \       {\n            min = v;\n            minIndex = i;\n        }\n    }\n\
    \    if (min % 2 == 0)\n    {\n        res[0] = min;\n        res[1] = minIndex;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx8fptqa1.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpx8fptqa1.__unittest_L60_C1() [0x42806d]

    ??:? void tmpx8fptqa1.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ new long[0];\n    \n    long min = long.max;\n    long minIndex = long.max;\n\
    \    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n\
    \            min = v;\n            minIndex = i;\n        }\n    }\n    \n   \
    \ if (min == long.max)\n        return new long[0];\n    \n    return [min, minIndex];\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3a6h3d5t.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmp3a6h3d5t.__unittest_L60_C1() [0x42806d]

    ??:? void tmp3a6h3d5t.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long minEven = long.max;\n    long\
    \ minEvenIndex = long.max;\n    foreach(i, e; arr)\n    {\n        if(e % 2 ==\
    \ 0 && e < minEven)\n        {\n            minEven = e;\n            minEvenIndex\
    \ = i;\n        }\n    }\n    if(minEven == long.max)\n        return [];\n  \
    \  return [minEven, minEvenIndex];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v < min && v % 2\
    \ == 0)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkqf67aw8.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpkqf67aw8.__unittest_L60_C1() [0x42806d]

    ??:? void tmpkqf67aw8.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    foreach(long i, long e; arr)\n    {\n \
    \       if(e % 2 == 0)\n        {\n            if(min == 0L)\n            {\n\
    \                min = e;\n                index = i;\n            }\n       \
    \     else if(e < min)\n            {\n                min = e;\n            \
    \    index = i;\n            }\n        }\n    }\n    if(min != 0L)\n    {\n \
    \       result[0] = min;\n        result[1] = index;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgjyqu9z5.d(72): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286ed]

    ??:? void tmpgjyqu9z5.__unittest_L66_C1() [0x4280ba]

    ??:? void tmpgjyqu9z5.__modtest() [0x42846c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c74b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430771]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b5]

    ??:? runModuleUnitTests [0x42c521]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpudw_zioj.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpudw_zioj.__unittest_L59_C1() [0x4280a1]

    ??:? void tmpudw_zioj.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    \n    long min = arr[0];\n\
    \    long minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 ==\
    \ 0 && e < min)\n        {\n            min = e;\n            minIndex = i;\n\
    \        }\n    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n  \
    \      result[1] = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n   \
    \ assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n\
    \    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpstkmbwp3.d(66): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmpstkmbwp3.__unittest_L61_C1() [0x42806d]

    ??:? void tmpstkmbwp3.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < min)\n  \
    \      {\n            min = v;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfd6f1cu5.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmpfd6f1cu5.__unittest_L59_C1() [0x42808d]

    ??:? void tmpfd6f1cu5.__modtest() [0x4284a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] res = new long[2];\n    if\
    \ (arr.length == 0)\n        return res;\n    long min = arr[0];\n    long index\
    \ = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n \
    \       {\n            min = v;\n            index = i;\n        }\n    }\n  \
    \  if (min % 2 == 0)\n    {\n        res[0] = min;\n        res[1] = index;\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0j3tytki.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmp0j3tytki.__unittest_L60_C1() [0x42806d]

    ??:? void tmp0j3tytki.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n\
    \        {\n            min = v;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpudw_zioj.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpudw_zioj.__unittest_L59_C1() [0x4280a1]

    ??:? void tmpudw_zioj.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long smallest = arr[0];\n   \
    \ long smallestIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 ==\
    \ 0 && v < smallest)\n        {\n            smallest = v;\n            smallestIndex\
    \ = i;\n        }\n    }\n    if (smallest % 2 == 0)\n    {\n        result[0]\
    \ = smallest;\n        result[1] = smallestIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_j8f8kix.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x428715]

    ??:? void tmp_j8f8kix.__unittest_L60_C1() [0x428081]

    ??:? void tmp_j8f8kix.__modtest() [0x428494]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c773]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b606]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430799]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430725]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5dd]

    ??:? runModuleUnitTests [0x42c549]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bd8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = 0L;\n    long index = 0L;\n    bool found = false;\n    foreach(i, v;\
    \ arr)\n    {\n        if(v % 2 == 0)\n        {\n            if(!found)\n   \
    \         {\n                found = true;\n                min = v;\n       \
    \         index = i;\n            }\n            else\n            {\n       \
    \         if(v < min)\n                {\n                    min = v;\n     \
    \               index = i;\n                }\n            }\n        }\n    }\n\
    \    if(found)\n    {\n        result[0] = min;\n        result[1] = index;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n \
    \   assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgxxwbn3c.d(77): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286f5]

    ??:? void tmpgxxwbn3c.__unittest_L71_C1() [0x4280c2]

    ??:? void tmpgxxwbn3c.__modtest() [0x428474]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c753]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5e6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430779]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c28]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430705]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5bd]

    ??:? runModuleUnitTests [0x42c529]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bb8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] res = [0L, 0L];\n    if (arr.length\
    \ == 0) return res;\n    long min = arr[0];\n    long minIndex = 0;\n    foreach\
    \ (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n        {\n        \
    \    min = e;\n            minIndex = i;\n        }\n    }\n    if (min == arr[0])\
    \ return res;\n    res[0] = min;\n    res[1] = minIndex;\n    return res;\n}\n\
    unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L])\
    \ == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6oyb_fo_.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmp6oyb_fo_.__unittest_L57_C1() [0x4280a1]

    ??:? void tmp6oyb_fo_.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzuz53s8f.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286e5]

    ??:? void tmpzuz53s8f.__unittest_L57_C1() [0x4280b2]

    ??:? void tmpzuz53s8f.__modtest() [0x428464]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c79f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b632]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430849]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b609]

    ??:? runModuleUnitTests [0x42c575]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    auto result = arr.filter!(a => a\
    \ % 2 == 0).min;\n    if (result is null)\n        return [];\n    return [result,\
    \ arr.indexOf(result)];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1zsq4nj0.d(40): Error: no property `filter` for type `long[]`

    /tmp/tmp1zsq4nj0.d(43): Error: no property `indexOf` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zsq4nj0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long[] result = [arr[0], 0];\n    foreach (i, e; arr)\n    {\n    \
    \    if (e % 2 == 0 && e < result[0])\n        {\n            result[0] = e;\n\
    \            result[1] = i;\n        }\n    }\n    if (result[0] % 2 != 0)\n \
    \       return [];\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8k8lb1dn.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x428765]

    ??:? void tmp8k8lb1dn.__unittest_L55_C1() [0x4280d5]

    ??:? void tmp8k8lb1dn.__modtest() [0x4284e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b656]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430775]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b62d]

    ??:? runModuleUnitTests [0x42c599]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c28]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    bool found = false;\n    foreach (i, e; arr)\n    {\n   \
    \     if (e % 2 == 0)\n        {\n            if (!found)\n            {\n   \
    \             min = e;\n                minIndex = i;\n                found =\
    \ true;\n            }\n            else\n            {\n                if (e\
    \ < min)\n                {\n                    min = e;\n                  \
    \  minIndex = i;\n                }\n            }\n        }\n    }\n    if (found)\n\
    \    {\n        result[0] = min;\n        result[1] = minIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9fmwvxh2.d(79): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmp9fmwvxh2.__unittest_L73_C1() [0x4280ea]

    ??:? void tmp9fmwvxh2.__modtest() [0x42849c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    foreach\
    \ (i, v; arr)\n    {\n        if (v % 2 == 0 && v < min)\n        {\n        \
    \    min = v;\n            result[0] = v;\n            result[1] = i;\n      \
    \  }\n    }\n    if (result[0] == 0)\n        return result[0..0];\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq948m1jn.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmpq948m1jn.__unittest_L57_C1() [0x428091]

    ??:? void tmpq948m1jn.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0) return result;\n    long min = arr[0];\n    foreach (i, e;\
    \ arr)\n    {\n        if (e < min && e % 2 == 0)\n        {\n            min\
    \ = e;\n            result[0] = e;\n            result[1] = i;\n        }\n  \
    \  }\n    if (result[0] == 0) return result;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2pqm0fim.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x428725]

    ??:? void tmp2pqm0fim.__unittest_L55_C1() [0x428091]

    ??:? void tmp2pqm0fim.__modtest() [0x4284a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c783]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b616]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307a9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430735]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5ed]

    ??:? runModuleUnitTests [0x42c559]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] % 2 == 0 && arr[i] < min)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3dne2e_k.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp3dne2e_k.__unittest_L60_C1() [0x4280bd]

    ??:? void tmp3dne2e_k.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] < min && arr[i] % 2 == 0)\n        {\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    if (min % 2 == 0)\n    {\n   \
    \     result[0] = min;\n        result[1] = minIndex;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1s61esu7.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmp1s61esu7.__unittest_L60_C1() [0x4280b9]

    ??:? void tmp1s61esu7.__modtest() [0x4284cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = -1;\n    foreach(i, e; arr)\n    {\n\
    \        if(e % 2 == 0 && e < min)\n        {\n            min = e;\n        \
    \    index = i;\n        }\n    }\n    if(index == -1)\n        return result;\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp04mmv6lm.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp04mmv6lm.__unittest_L57_C1() [0x4280aa]

    ??:? void tmp04mmv6lm.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e <\
    \ min)\n        {\n            min = e;\n            minIndex = i;\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = minIndex;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp94wa5vlb.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmp94wa5vlb.__unittest_L60_C1() [0x42806d]

    ??:? void tmp94wa5vlb.__modtest() [0x428480]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprne0thxr.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmprne0thxr.__unittest_L56_C1() [0x428049]

    ??:? void tmprne0thxr.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    \n    long minEven = arr[0];\n    long minEvenIndex = 0;\n    bool\
    \ found = false;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0)\n  \
    \      {\n            if (!found)\n            {\n                minEven = e;\n\
    \                minEvenIndex = i;\n                found = true;\n          \
    \  }\n            else\n            {\n                if (e < minEven)\n    \
    \            {\n                    minEven = e;\n                    minEvenIndex\
    \ = i;\n                }\n            }\n        }\n    }\n    if (found)\n \
    \       return [minEven, minEvenIndex];\n    else\n        return [];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    long\
    \ min = arr[0];\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            result[0] = e;\n            result[1]\
    \ = i;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprbbkg86o.d(58): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286d5]

    ??:? void tmprbbkg86o.__unittest_L53_C1() [0x428045]

    ??:? void tmprbbkg86o.__modtest() [0x428458]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c733]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430759]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c08]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306e5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b59d]

    ??:? runModuleUnitTests [0x42c509]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428b98]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ % 2 == 0)\n        {\n            if (arr[i] < min)\n            {\n       \
    \         min = arr[i];\n                index = i;\n            }\n        }\n\
    \    }\n    if (min % 2 == 0)\n    {\n        result[0] = min;\n        result[1]\
    \ = index;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmptcybsvfx.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmptcybsvfx.__unittest_L63_C1() [0x4280bd]

    ??:? void tmptcybsvfx.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [0L, 0L];\n    if\
    \ (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ minIndex = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 && v <\
    \ min)\n        {\n            min = v;\n            minIndex = i;\n        }\n\
    \    }\n    if (min == arr[0])\n        return result;\n    result[0] = min;\n\
    \    result[1] = minIndex;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjty9l3qh.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x428735]

    ??:? void tmpjty9l3qh.__unittest_L59_C1() [0x4280a1]

    ??:? void tmpjty9l3qh.__modtest() [0x4284b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c793]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b626]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430745]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5fd]

    ??:? runModuleUnitTests [0x42c569]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164167
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long minEven = arr[0];\n    long minEvenIndex = 0;\n    for (long i\
    \ = 0; i < arr.length; i++)\n    {\n        if (arr[i] % 2 == 0)\n        {\n\
    \            if (arr[i] < minEven)\n            {\n                minEven = arr[i];\n\
    \                minEvenIndex = i;\n            }\n        }\n    }\n    if (minEven\
    \ % 2 == 0)\n        return [minEven, minEvenIndex];\n    else\n        return\
    \ [];\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0jfkhz5r.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x42872d]

    ??:? void tmp0jfkhz5r.__unittest_L60_C1() [0x428099]

    ??:? void tmp0jfkhz5r.__modtest() [0x4284ac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c78b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b61e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43073d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f5]

    ??:? runModuleUnitTests [0x42c561]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bf0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long min = long.max;\n    long index\
    \ = -1;\n    foreach(i, e; arr)\n    {\n        if(e % 2 == 0 && e < min)\n  \
    \      {\n            min = e;\n            index = i;\n        }\n    }\n   \
    \ if(index == -1)\n        return [];\n    return [min, index];\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164168
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = 0;\n    foreach(i, v; arr)\n    {\n\
    \        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n        \
    \    index = i;\n        }\n    }\n    if(min == long.max)\n        return [];\n\
    \    result[0] = min;\n    result[1] = index;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L,\
    \ 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = long.max;\n  \
    \  long index = 0;\n    foreach (i, v; arr)\n    {\n        if (v % 2 == 0 &&\
    \ v < min)\n        {\n            min = v;\n            index = i;\n        }\n\
    \    }\n    if (min == long.max)\n        return result;\n    result[0] = min;\n\
    \    result[1] = index;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp09k23x1u.d(65): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286fd]

    ??:? void tmp09k23x1u.__unittest_L59_C1() [0x4280ca]

    ??:? void tmp09k23x1u.__modtest() [0x42847c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b64a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430861]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b621]

    ??:? runModuleUnitTests [0x42c58d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428bc0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164169
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    if (arr.length == 0)\n        return\
    \ [];\n    long min = arr[0];\n    long index = 0;\n    foreach (i, e; arr)\n\
    \    {\n        if (e % 2 == 0 && e < min)\n        {\n            min = e;\n\
    \            index = i;\n        }\n    }\n    if (min % 2 == 0)\n        return\
    \ [min, index];\n    return [];\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprne0thxr.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmprne0thxr.__unittest_L56_C1() [0x428049]

    ??:? void tmprne0thxr.__modtest() [0x42845c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c73b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b5ce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430761]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4306ed]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]

    ??:? runModuleUnitTests [0x42c511]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  long min = long.max;\n    long index = long.max;\n    foreach(i, v; arr)\n\
    \    {\n        if(v % 2 == 0 && v < min)\n        {\n            min = v;\n \
    \           index = i;\n        }\n    }\n    if(min == long.max)\n        return\
    \ result;\n    result[0] = min;\n    result[1] = index;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3lwbl3w0.d(63): unittest failure

    ----------------

    ??:? _d_unittestp [0x4286dd]

    ??:? void tmp3lwbl3w0.__unittest_L57_C1() [0x4280ae]

    ??:? void tmp3lwbl3w0.__modtest() [0x428460]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c797]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b62a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430d64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430841]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]

    ??:? runModuleUnitTests [0x42c56d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ba0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long minEven = arr[0];\n\
    \    long minEvenIndex = 0;\n    for (long i = 0; i < arr.length; i++)\n    {\n\
    \        if (arr[i] % 2 == 0)\n        {\n            if (arr[i] < minEven)\n\
    \            {\n                minEven = arr[i];\n                minEvenIndex\
    \ = i;\n            }\n        }\n    }\n    if (minEven % 2 == 0)\n    {\n  \
    \      result[0] = minEven;\n        result[1] = minEvenIndex;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n \
    \   assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L])\
    \ == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n\
    \    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L,\
    \ 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyiiuoa44.d(68): unittest failure

    ----------------

    ??:? _d_unittestp [0x42874d]

    ??:? void tmpyiiuoa44.__unittest_L63_C1() [0x4280bd]

    ??:? void tmpyiiuoa44.__modtest() [0x4284d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c807]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b69a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430925]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430dd4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4308b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]

    ??:? runModuleUnitTests [0x42c5dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428c10]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164168
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = new long[2];\n  \
    \  if (arr.length == 0)\n        return result;\n    long min = arr[0];\n    long\
    \ index = 0;\n    foreach (i, e; arr)\n    {\n        if (e % 2 == 0 && e < min)\n\
    \        {\n            min = e;\n            index = i;\n        }\n    }\n \
    \   if (min == arr[0])\n        return result;\n    result[0] = min;\n    result[1]\
    \ = index;\n    return result;\n}\nunittest\n{\n    alias candidate = pluck;\n\
    \n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L,\
    \ 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L,\
    \ 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n\
    \    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp655rgcng.d(64): unittest failure

    ----------------

    ??:? _d_unittestp [0x42871d]

    ??:? void tmp655rgcng.__unittest_L59_C1() [0x42808d]

    ??:? void tmp655rgcng.__modtest() [0x4284a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c7d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b66a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4308f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430da4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430881]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b641]

    ??:? runModuleUnitTests [0x42c5ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428be0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164166
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    \"Given an array representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest even value.\n    If multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\n\n    The plucked\
    \ node should be returned in a list, [ smalest_value, its index ],\n    If there\
    \ are no even values or the given array is empty, return [].\n\n    Example 1:\n\
    \    >>> pluck([4L, 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n    >>> pluck([1L,\
    \ 2L, 3L])\n    [2L, 1L]\n    Explanation: 2 has the smallest even value, and\
    \ 2 has the smallest index.\n\n    Example 3:\n    >>> pluck([])\n    []\n   \
    \ \n    Example 4:\n    >>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n    [0L, 1L]\n  \
    \  Explanation: 0 is the smallest value, but  there are two zeros,\n         \
    \        so we will choose the first zero, which has the smallest index.\n\n \
    \   Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \n*/\nlong[] pluck(long[] arr) \n{\n    long[] result = [long.max, long.max];\n\
    \    foreach(i, v; arr)\n    {\n        if(v % 2 == 0 && v < result[0])\n    \
    \    {\n            result[0] = v;\n            result[1] = i;\n        }\n  \
    \  }\n    if(result[0] == long.max)\n        return [];\n    return result;\n\
    }\nunittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L,\
    \ 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L])\
    \ == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L,\
    \ 9L, 7L, 1L]) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164167
