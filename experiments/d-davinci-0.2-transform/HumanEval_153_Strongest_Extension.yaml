name: HumanEval_153_Strongest_Extension
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou will be given the name of\
  \ a class (a string) and a list of extensions.\n    The extensions are to be used\
  \ to load additional classes to the class. The\n    strength of the extension is\
  \ as follows: Let CAP be the number of the uppercase\n    letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n    in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n    You should find the strongest\
  \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
  \    If there are two or more extensions with the same strength, you should\n  \
  \  choose the one that comes first in the list.\n    For example, if you are given\
  \ \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese',\
  \ 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
  \ is the strongest extension \n    (its strength is -1).\n    Example:\n    >>>\
  \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\
  \n    \n*/\nstring Strongest_Extension(string class_name, string[] extensions) \n"
tests: "unittest\n{\n    alias candidate = Strongest_Extension;\n\n    assert(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\");\n    assert(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
  );\n    assert(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
  , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\");\n    assert(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\");\n    assert(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\");\n    assert(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
  YameRore.okIWILL123\");\n    assert(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
  , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\");\n    assert(candidate(\"_\", [\"Bb\"\
  , \"91245\"]) == \"_.Bb\");\n    assert(candidate(\"Sp\", [\"671235\", \"Bb\"])\
  \ == \"Sp.671235\");\n}\nvoid main(){}"
completions: ["{\n    int max_strength = 0;\n    string strongest_extension = \"\"\
    ;\n    foreach(string extension; extensions)\n    {\n        int strength = 0;\n\
    \        foreach(char c; extension)\n        {\n            if(c.isUpper)\n  \
    \              strength++;\n            else\n                strength--;\n  \
    \      }\n        if(strength > max_strength)\n        {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name ~ \".\" ~ strongest_extension;\n}", "{\n    int max_strength\
    \ = 0;\n    string strongest_extension = \"\";\n    foreach(extension; extensions)\n\
    \    {\n        int cap = 0;\n        int sm = 0;\n        foreach(c; extension)\n\
    \        {\n            if(c.isUpper)\n                cap++;\n            else\n\
    \                sm++;\n        }\n        int strength = cap - sm;\n        if(strength\
    \ > max_strength)\n        {\n            max_strength = strength;\n         \
    \   strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ ~ \".\" ~ strongest_extension;\n}", "{\n    int max_strength = 0;\n    string\
    \ strongest_extension = \"\";\n    foreach(string extension; extensions)\n   \
    \ {\n        int strength = 0;\n        foreach(char c; extension)\n        {\n\
    \            if(c.isUpper)\n                strength++;\n            else if(c.isLower)\n\
    \                strength--;\n        }\n        if(strength > max_strength)\n\
    \        {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name ~ \".\" ~ strongest_extension;\n\
    }", "{\n    int max_strength = -1;\n    string strongest_extension = \"\";\n \
    \   foreach(extension; extensions)\n    {\n        int strength = 0;\n       \
    \ foreach(c; extension)\n        {\n            if (c.isUpper)\n             \
    \   strength++;\n            else if (c.isLower)\n                strength--;\n\
    \        }\n        if (strength > max_strength)\n        {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name ~ \".\" ~ strongest_extension;\n}", "{\n    int max_strength\
    \ = 0;\n    string strongest_extension = \"\";\n    foreach(extension; extensions)\n\
    \    {\n        int strength = 0;\n        foreach(char c; extension)\n      \
    \  {\n            if(c.isUpper)\n                strength++;\n            else\n\
    \                strength--;\n        }\n        if(strength > max_strength)\n\
    \        {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name ~ \".\" ~ strongest_extension;\n\
    }", "{\n    double max = 0;\n    string result = \"\";\n    foreach(string ext;\
    \ extensions)\n    {\n        double strength = 0;\n        foreach(char c; ext)\n\
    \        {\n            if(c.isUpper)\n                strength++;\n         \
    \   else if(c.isLower)\n                strength--;\n        }\n        if(strength\
    \ > max)\n        {\n            max = strength;\n            result = ext;\n\
    \        }\n    }\n    return class_name ~ \".\" ~ result;\n}", "{\n    int[]\
    \ strength = new int[extensions.length];\n    int max = 0;\n    int index = 0;\n\
    \    foreach(i, extension; extensions)\n    {\n        int cap = 0;\n        int\
    \ sm = 0;\n        foreach(c; extension)\n        {\n            if(c.isUpper)\n\
    \                cap++;\n            else\n                sm++;\n        }\n\
    \        strength[i] = cap - sm;\n        if(strength[i] > max)\n        {\n \
    \           max = strength[i];\n            index = i;\n        }\n    }\n   \
    \ return class_name ~ \".\" ~ extensions[index];\n}", "{\n    string strongest_extension\
    \ = \"\";\n    double strongest_extension_strength = 0;\n    foreach(string extension;\
    \ extensions)\n    {\n        double extension_strength = 0;\n        foreach(char\
    \ c; extension)\n        {\n            if(isUpper(c))\n            {\n      \
    \          extension_strength++;\n            }\n            else if(isLower(c))\n\
    \            {\n                extension_strength--;\n            }\n       \
    \ }\n        if(extension_strength > strongest_extension_strength)\n        {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name ~ \".\" ~ strongest_extension;\n\
    }", "{\n    string strongest_extension = \"\";\n    float strongest_extension_strength\
    \ = 0;\n    foreach(extension; extensions)\n    {\n        float extension_strength\
    \ = 0;\n        foreach(char c; extension)\n        {\n            if(c.isUpper)\n\
    \                extension_strength++;\n            else\n                extension_strength--;\n\
    \        }\n        if(extension_strength > strongest_extension_strength)\n  \
    \      {\n            strongest_extension_strength = extension_strength;\n   \
    \         strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ ~ \".\" ~ strongest_extension;\n}", "{\n    int max_strength = 0;\n    string\
    \ strongest_extension = \"\";\n    foreach(extension; extensions)\n    {\n   \
    \     int strength = 0;\n        foreach(c; extension)\n        {\n          \
    \  if(c.isUpper)\n                strength++;\n            else\n            \
    \    strength--;\n        }\n        if(strength > max_strength)\n        {\n\
    \            max_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name ~ \".\" ~ strongest_extension;\n}", "{\n\
    \    int max_strength = 0;\n    string strongest_extension = \"\";\n    foreach(extension;\
    \ extensions)\n    {\n        int strength = 0;\n        foreach(c; extension)\n\
    \        {\n            if(c.isUpper)\n                strength++;\n         \
    \   else\n                strength--;\n        }\n        if(strength > max_strength)\n\
    \        {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name ~ \".\" ~ strongest_extension;\n\
    }", "{\n    int[] strengths = extensions.map!(ext => ext.count!(c => c.isUpper)\
    \ - ext.count!(c => c.isLower));\n    int max_strength = strengths.max;\n    int\
    \ max_index = strengths.indexOf(max_strength);\n    return class_name ~ \".\"\
    \ ~ extensions[max_index];\n}", "{\n    int max_strength = 0;\n    string strongest_extension\
    \ = \"\";\n    foreach(extension; extensions)\n    {\n        int strength = 0;\n\
    \        foreach(c; extension)\n        {\n            if(c.isUpper)\n       \
    \         strength++;\n            else\n                strength--;\n       \
    \ }\n        if(strength > max_strength)\n        {\n            max_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name ~ \".\" ~ strongest_extension;\n}", "{\n    int max_strength\
    \ = 0;\n    string strongest_extension = \"\";\n    foreach(extension; extensions)\n\
    \    {\n        int strength = 0;\n        foreach(c; extension)\n        {\n\
    \            if(c.isUpper)\n                strength++;\n            else\n  \
    \              strength--;\n        }\n        if(strength > max_strength)\n \
    \       {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name ~ \".\" ~ strongest_extension;\n\
    }", "{\n    int max_strength = 0;\n    string strongest_extension = \"\";\n  \
    \  foreach(extension; extensions)\n    {\n        int strength = 0;\n        foreach(char\
    \ c; extension)\n        {\n            if(c.isUpper)\n                strength++;\n\
    \            else if(c.isLower)\n                strength--;\n        }\n    \
    \    if(strength > max_strength)\n        {\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ ~ \".\" ~ strongest_extension;\n}", "{\n    int max_strength = 0;\n    string\
    \ strongest_extension = \"\";\n    foreach(extension; extensions)\n    {\n   \
    \     int CAP = 0;\n        int SM = 0;\n        foreach(c; extension)\n     \
    \   {\n            if(c.isUpper)\n                CAP++;\n            else\n \
    \               SM++;\n        }\n        int strength = CAP - SM;\n        if(strength\
    \ > max_strength)\n        {\n            max_strength = strength;\n         \
    \   strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ ~ \".\" ~ strongest_extension;\n}", "{\n    float strongest = 0.0;\n    string\
    \ strongest_extension = \"\";\n    foreach(extension; extensions)\n    {\n   \
    \     float strength = 0.0;\n        foreach(c; extension)\n        {\n      \
    \      if(c.isUpper)\n                strength += 1.0;\n            else\n   \
    \             strength -= 1.0;\n        }\n        if(strength > strongest)\n\
    \        {\n            strongest = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name ~ \".\" ~ strongest_extension;\n\
    }", "{\n    int max_strength = 0;\n    string strongest_extension = \"\";\n  \
    \  foreach(extension; extensions)\n    {\n        int strength = 0;\n        foreach(char\
    \ c; extension)\n        {\n            if(c.isUpper)\n                strength++;\n\
    \            else\n                strength--;\n        }\n        if(abs(strength)\
    \ > max_strength)\n        {\n            max_strength = abs(strength);\n    \
    \        strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ ~ \".\" ~ strongest_extension;\n}", "{\n    double max_strength = 0;\n    string\
    \ strongest_extension = \"\";\n    foreach(extension; extensions)\n    {\n   \
    \     double strength = 0;\n        foreach(char c; extension)\n        {\n  \
    \          if(c.isUpper)\n                strength++;\n            else if(c.isLower)\n\
    \                strength--;\n        }\n        if(strength > max_strength)\n\
    \        {\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name ~ \".\" ~ strongest_extension;\n\
    }", "{\n    string result = \"\";\n    int max_strength = 0;\n    foreach(string\
    \ ext; extensions)\n    {\n        int strength = 0;\n        foreach(char c;\
    \ ext)\n        {\n            if(c.isUpper)\n                strength++;\n  \
    \          else if(c.isLower)\n                strength--;\n        }\n      \
    \  if(strength > max_strength)\n        {\n            max_strength = strength;\n\
    \            result = class_name ~ \".\" ~ ext;\n        }\n    }\n    return\
    \ result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
