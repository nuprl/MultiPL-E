name: HumanEval_93_encode
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a message, and encodes in such a\
  \ \n    // way that it swaps case of all letters, replaces all vowels in \n    //\
  \ the message with the letter that appears 2 places ahead of that \n    // vowel\
  \ in the english alphabet. \n    // Assume only letters. \n    // Examples:\n  \
  \  // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
  \    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string message) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
  TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
  mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
  This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
  I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
  \n}\n"
completions: ["        StringBuilder sb = new StringBuilder();\n        foreach (char\
    \ c in message) {\n            if (IsVowel(c)) {\n                sb.Append(ShiftVowel(c));\n\
    \            } else {\n                sb.Append(ToggleCase(c));\n           \
    \ }\n        }\n        return sb.ToString();", "        string lower = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        string upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        string vowels\
    \ = \"aeiou\";\n        char[] encoding = new char[message.Length];\n        for\
    \ (int i = 0; i < message.Length; i++) {\n            char c = message[i];\n \
    \           int idx = lower.IndexOf(c);\n            if (idx > -1) {\n       \
    \         idx = (idx + 2) % 26;\n                encoding[i] = lower[idx];\n \
    \           } else {\n                idx = upper.IndexOf(c);\n              \
    \  if (idx > -1) {\n                    idx = (idx + 2) % 26;\n              \
    \      encoding[i] = upper[idx];\n                } else {\n                 \
    \   encoding[i] = c;\n                }\n            }\n        }\n        return\
    \ new string(encoding);", '        return null;', '        return "";', '        return
    "";', '        return "";', "        Dictionary<char, char> vowels = new Dictionary<char,\
    \ char>();\n        vowels.Add('a', 'c');\n        vowels.Add('e', 'g');\n   \
    \     vowels.Add('i', 'k');\n        vowels.Add('o', 'q');\n        vowels.Add('u',\
    \ 'y');\n        vowels.Add('A', 'C');\n        vowels.Add('E', 'G');\n      \
    \  vowels.Add('I', 'K');\n        vowels.Add('O', 'Q');\n        vowels.Add('U',\
    \ 'Y');\n        StringBuilder output = new StringBuilder();\n        foreach\
    \ (char c in message) {\n            if (Char.IsLetter(c)) {\n               \
    \ if (vowels.ContainsKey(c)) {\n                    output.Append(vowels[c]);\n\
    \                } else {\n                    output.Append(c ^ 0x20);\n    \
    \            }\n            } else {\n                output.Append(c);\n    \
    \        }\n        }\n        return output.ToString();", "        var temp =\
    \ new StringBuilder();\n        foreach (var c in message) {\n            if (c\
    \ == ' ') {\n                temp.Append(' ');\n                continue;\n  \
    \          }\n            var ascii = (int)c;\n            if (ascii > 96) {\n\
    \                ascii -= 32;\n            }\n            else {\n           \
    \     ascii += 32;\n            }\n            if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                var offset = (ascii - 69 + 26)\
    \ % 26;\n                temp.Append((char)(offset + 65));\n            }\n  \
    \          else {\n                temp.Append((char)ascii);\n            }\n\
    \        }\n        return temp.ToString();", "        char[] output = new char[message.Length];\n\
    \        //Your code goes here\n        return new string(output);", '        throw
    new NotImplementedException();', "        string vowels = \"aeiou\";\n       \
    \ string encoded_message = \"\";\n        foreach (char letter in message) {\n\
    \            int idx = vowels.IndexOf(letter);\n            if (idx >= 0) {\n\
    \                // we are dealing with a vowel\n                idx = (idx +\
    \ 2) % 5;\n                encoded_message += vowels[idx];\n            } else\
    \ {\n                // we are dealing with a consonant\n                if (char.IsUpper(letter))\
    \ {\n                    encoded_message += char.ToLower(letter);\n          \
    \      } else {\n                    encoded_message += char.ToUpper(letter);\n\
    \                }\n            }\n        }\n        return encoded_message;",
  "        string result = \"\";\n        foreach (char c in message) {\n        \
    \    if (c >= 'a' && c <= 'z') {\n                result += Char.ToUpper(c);\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                result += Char.ToLower(c);\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;", "        // your code here!\n        return \"\";",
  "        // Your code here\n        char[] encoded = new char[message.Length];\n\
    \        for (int i = 0; i < message.Length; i++) {\n            if (Char.IsUpper(message[i]))\
    \ {\n                encoded[i] = Char.ToLower(message[i]);\n            } else\
    \ if (Char.IsLower(message[i])) {\n                encoded[i] = Char.ToUpper(message[i]);\n\
    \            } else {\n                encoded[i] = message[i];\n            }\n\
    \        }\n        return new string(encoded);", "        string encoded = \"\
    \";\n        for (int i = 0; i < message.Length; i++) {\n            char c =\
    \ message[i];\n            if (char.IsUpper(c)) {\n                encoded +=\
    \ char.ToLower(c);\n            } else if (char.IsLower(c)) {\n              \
    \  encoded += char.ToUpper(c);\n            } else {\n                encoded\
    \ += c;\n            }\n        }\n        return encoded;", "        char[] vowels\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        char[] encoded = new char[message.Length];\n\
    \        for (int i = 0; i < message.Length; i++) {\n            char currentChar\
    \ = message[i];\n            int charVal = Convert.ToInt32(currentChar);\n   \
    \         if (charVal < 65 || charVal > 122) {\n                encoded[i] = currentChar;\n\
    \            } else if (charVal >= 65 && charVal <= 90) {\n                  \
    \  charVal += 32;\n                    encoded[i] = Convert.ToChar(charVal);\n\
    \            } else if (charVal >= 97 && charVal <= 122) {\n                encoded[i]\
    \ = currentChar;\n            }\n        }\n        string encodedString = new\
    \ string(encoded);\n        char[] encodedStringArray = encodedString.ToCharArray();\n\
    \        for (int i = 0; i < encodedStringArray.Length; i++) {\n            char\
    \ currentChar = encodedStringArray[i];\n            if (vowels.Contains(currentChar))\
    \ {\n                encodedStringArray[i] = '.';\n            }\n        }\n\
    \        string encodedMessage = new string(encodedStringArray);\n        string[]\
    \ messageArray = encodedMessage.Split('.');\n        char[] vowelsArray = new\
    \ char[messageArray.Length];\n        for (int i = 0; i < messageArray.Length;\
    \ i++) {\n            if (messageArray[i].Length > 0) {\n                vowelsArray[i]\
    \ = messageArray[i][0];\n            }\n        }\n        for (int i = 0; i <\
    \ vowelsArray.Length; i++) {\n            if (vowelsArray[i] != '\\0') {\n   \
    \             char currentChar = vowelsArray[i];\n                int charVal\
    \ = Convert.ToInt32(currentChar);\n                if (charVal >= 115) {\n   \
    \                 charVal = 97 + (charVal - 115);\n                    vowelsArray[i]\
    \ = Convert.ToChar(charVal);\n                } else {\n                    charVal\
    \ += 2;\n                    vowelsArray[i] = Convert.ToChar(charVal);\n     \
    \           }\n            }\n       ", "        // TODO: Implement this function\n\
    \        return \"\";", "        var vowels = new List<char>{'a', 'e', 'i', 'o',\
    \ 'u'};\n        var newMessage = new StringBuilder();\n        foreach (var c\
    \ in message) {\n            if (vowels.Contains(c)) {\n                newMessage.Append(vowels[(vowels.IndexOf(c)\
    \ + 2) % vowels.Count]);\n            } else {\n                newMessage.Append(c);\n\
    \            }\n        }\n        return newMessage.ToString();", "        //\
    \ Implement me\n        return null;", "        // Your code here\n        char[]\
    \ alphabets = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\
    \        char[] new_msg = new char[message.Length];\n        // 'a' a = 97\n \
    \       // 'A' A = 65\n        for (int i = 0; i < message.Length; i++) {\n  \
    \          if (message[i] >= 97 && message[i] <= 122) {\n                // Debug.WriteLine(message[i]);\n\
    \                if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i'\
    \ || message[i] == 'o' || message[i] == 'u') {\n                    new_msg[i]\
    \ = alphabets[(int)message[i] - 97 + 2 - 26];\n                } else {\n    \
    \                new_msg[i] = (char)((int)message[i] - 32);\n                }\n\
    \            } else if (message[i] >= 65 && message[i] <= 90) {\n            \
    \    if (message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i]\
    \ == 'O' || message[i] == 'U') {\n                    new_msg[i] = (char)((int)alphabets[(int)message[i]\
    \ - 65 + 2] - 32);\n                } else {\n                    new_msg[i] =\
    \ (char)((int)message[i] + 32);\n                }\n            } else {\n   \
    \             new_msg[i] = message[i];\n            }\n        }\n        return\
    \ new string(new_msg);"]
stop_tokens:
- "\n    }\n"
