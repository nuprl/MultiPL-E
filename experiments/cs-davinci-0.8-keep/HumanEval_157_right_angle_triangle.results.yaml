language: cs
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        if (a < 0 || b < 0 || c < 0) return false;\n        var
    sorted = new List<long> { a, b, c }.OrderBy(x => x).ToList();\n        var squared
    = sorted.Select(x => x * x).ToList();\n        return squared[0] + squared[1]
    == squared[2];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        //return Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c,
    2);\n        return a * a + b * b == c * c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ceb832c1d734f909aa375d6e02bbfad>:0
    \n"
  stdout: ''
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        // Good luck!\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk1colrlv.cs(18,16): error CS0029: Cannot implicitly convert type ''int''
    to ''bool''

    '
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        // Write your code here\n\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3572d406396e44a3b02a3bd2628bb59a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3572d406396e44a3b02a3bd2628bb59a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        var max = Math.Max(a, Math.Max(b, c));\n        var
    min = Math.Min(a, Math.Min(b, c));\n        var mid = a + b + c - max - min;\n
    \       var max_squared = max * max;\n        var min_squared = min * min;\n        var
    mid_squared = mid * mid;\n        return max_squared == min_squared + mid_squared;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        var r = a * a + b * b == c * c;\n        var i =
    a * a == b * b + c * c;\n        var o = b * b == a * a + c * c;\n        return
    r || i || o;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        // If the longest side of the triangle is the hypotenuse,
    then the triangle\n        // is a right angle.\n        // The sum of the squares
    of two sides of a triangle are equal to the square\n        // of the hypotenuse.\n
    \       // Thus, if the square of the longest side equals the sum of the squares
    of\n        // the other two sides, then the triangle is a right angle.\n        long
    hypotenuse = Math.Max(a, Math.Max(b, c));\n        long s1 = Math.Min(a, Math.Min(b,
    c));\n        long s2 = a + b + c - hypotenuse - s1;\n        long h_squared =
    hypotenuse * hypotenuse;\n        long s1_squared = s1 * s1;\n        long s2_squared
    = s2 * s2;\n        return h_squared == s1_squared + s2_squared;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        return Math.Pow(a, 2) + Math.Pow(b, 2) == Math.Pow(c,
    2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3abad7a1e81b449d96e8794502c677e3>:0
    \n"
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        // An integer n is a perfect square if it is the
    square of an integer.\n        // You can use the sqrt method on a number x in
    C# to obtain the square root\n        // of x. \n        // Math.Sqrt(x) == the
    square root of x\n        // Math.Pow(x, y) == x to the power of y\n        //
    Note: you need to include the \"using System;\" line at the top of this\n        //
    file in order to be able to call the sqrt method.\n        // Also, try to see
    if it is possible to solve this problem without using\n        // the sqrt method.\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12c4c690113148e79084dd6bb0765131>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12c4c690113148e79084dd6bb0765131>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        return (a*a + b*b == c*c) || (b*b + c*c == a*a)
    || (c*c + a*a == b*b);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        // TODO: Write your code here\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd296bdbd1bd4be1921fb13379628047>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd296bdbd1bd4be1921fb13379628047>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        // TODO\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adb3c3ff7ca84b4d8aaa5bd0f1bfd2e0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <adb3c3ff7ca84b4d8aaa5bd0f1bfd2e0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        // your code goes here...\n        return false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40c15be16afc47e796fe906aa5653b34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40c15be16afc47e796fe906aa5653b34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        // create a temp variable, this is so we dont mess
    up the order of our\n        // sides.\n        var temp = 0L;\n        // check
    for a triangle\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return
    false;\n        }\n        // if the greatest side is a...\n        if (a > b
    && a > c) {\n            // swap a and c\n            temp = a;\n            a
    = c;\n            c = temp;\n        }\n        // if the greatest side is b...\n
    \       if (b > a && b > c) {\n            // swap b and c\n            temp =
    b;\n            b = c;\n            c = temp;\n        }\n        // final check...\n
    \       return a * a + b * b == c * c;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        long[] nums = new long[] { a, b, c };\n        Array.Sort(nums);\n
    \       // Pythagorean theorem\n        // (c^2) = (a^2) + (b^2)\n        return
    nums[2] * nums[2] == nums[0] * nums[0] + nums[1] * nums[1];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        // TODO: solve it\n        return false;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),
    (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))
    == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),
    (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))
    == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),
    (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))
    == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <580e40e01d4045c1bf1289dd6ec6d85e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <580e40e01d4045c1bf1289dd6ec6d85e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        return (a * a + b * b == c * c);\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <175d996c139e49a78520131f7b27563d>:0
    \n"
  stdout: ''
  timestamp: 1659823420
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <83baa5b9a7994696abd827b24b919efa>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <83baa5b9a7994696abd827b24b919efa>:0 \n"
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        return a * a + b * b == c * c;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),
    (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),
    (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))
    == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),
    (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))
    == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5093dc6d1f7149dbaa46afdfb76a0ba5>:0
    \n"
  stdout: ''
  timestamp: 1659823420
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given the lengths of the three sides of a triangle. Return True
    if the three\n    // sides form a right-angled triangle, False otherwise.\n    //
    A right-angled triangle is a triangle in which one angle is right angle or \n
    \   // 90 degree.\n    // Example:\n    // right_angle_triangle(3, 4, 5) == True\n
    \   // right_angle_triangle(1, 2, 3) == False\n    public static bool RightAngleTriangle(long
    a, long b, long c) {\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))
    == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n
    \   Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),
    (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))
    == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n
    \   Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),
    (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))
    == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <696d8c49072a4ee18e249102b4fe4af6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <696d8c49072a4ee18e249102b4fe4af6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823420
