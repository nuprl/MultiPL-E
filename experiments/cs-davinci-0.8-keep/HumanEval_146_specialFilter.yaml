name: HumanEval_146_specialFilter
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes an array of numbers as input and\
  \ returns \n    // the number of elements in the array that are greater than 10\
  \ and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
  \    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
  \ -2, -3, 45, 21, 109]) => 2\n    public static long Specialfilter(List<long> nums)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
  \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
  \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
  \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==\
  \ (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,\
  \ (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,\
  \ (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
  \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\
  \n}\n"
completions: ["        // your code here\n        return nums.Count(num => num > 10\
    \ && (num % 10) % 2 != 0 && num / 10 % 2 != 0);", '        return nums.Count(i
    => i > 10 && (i % 10) % 2 == 1 && i / 10 % 2 == 1);', "        var c = 0;\n  \
    \      var l = 0;\n        foreach (var s in nums) {\n            var n = s;\n\
    \            var d1 = n % 10;\n            if ((d1 & 1) == 0) {\n            \
    \    continue;\n            }\n            while (n >= 10) {\n               \
    \ n /= 10;\n            }\n            if ((n & 1) == 0) {\n                continue;\n\
    \            }\n            c++;\n        }\n        return c;", "        return\
    \ nums.Where(n =>\n            n > 10 &&\n            Math.Abs(n) > 10 &&\n  \
    \          Math.Abs(n) % 10 % 2 != 0 &&\n            Math.Abs(n) / 10 % 10 % 2\
    \ != 0).Count();", '        // your code here', "        // Write your code here\n\
    \        return 0;", "        int counter = 0;\n        foreach (var item in nums)\
    \ {\n            if (item > 10 && (item % 10 == 1 || item % 10 == 3 || item %\
    \ 10 == 5 || item % 10 == 7 || item % 10 == 9)) {\n                int firstDigit\
    \ = 0;\n                int secondDigit = 0;\n                for (int i = 0;\
    \ i < item.ToString().Length; i++) {\n                    if (i == 0) {\n    \
    \                    firstDigit = int.Parse(item.ToString()[i].ToString());\n\
    \                    }\n                    if (i == item.ToString().Length -\
    \ 1) {\n                        secondDigit = int.Parse(item.ToString()[i].ToString());\n\
    \                    }\n                }\n                if (firstDigit == 1\
    \ || firstDigit == 3 || firstDigit == 5 || firstDigit == 7 || firstDigit == 9)\
    \ {\n                    if (secondDigit == 1 || secondDigit == 3 || secondDigit\
    \ == 5 || secondDigit == 7 || secondDigit == 9) {\n                        counter++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ counter;", "        long count = 0;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            if (nums[i] > 10) {\n                if (nums[i] % 2 !=\
    \ 0) {\n                    if (nums[i] % 10 % 2 != 0) {\n                   \
    \     count++;\n                    }\n                }\n            }\n    \
    \    }\n        return count;", "        long count = 0;\n        foreach (var\
    \ elem in nums) {\n            if (elem > 10 && (elem % 10) % 2 != 0 && elem /\
    \ 10 % 2 != 0) {\n                count++;\n            }\n        }\n       \
    \ return count;", "        // Write your code here.\n        return nums.Where(x\
    \ => x > 10 && x % 2 != 0 && x % 10 != 0 && x % 10 != 5).Count();", "        long\
    \ count = 0;\n        foreach (var num in nums) {\n            string s = num.ToString();\n\
    \            if (s.Length > 1 && num > 10 && s[0] % 2 != 0 && s[s.Length - 1]\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // Your code here\n        long counter = 0;\n        foreach\
    \ (long element in nums)\n        {\n            long firstDigit = GetFirstDigit(element);\n\
    \            long lastDigit = GetLastDigit(element);\n            if (firstDigit\
    \ > 10 && lastDigit > 10 && (IsOdd(firstDigit) && IsOdd(lastDigit)))\n       \
    \     {\n                counter++;\n            }\n        }\n        return\
    \ counter;", '        return nums.Where(n => n > 10 && n.ToString().Last() % 2
    != 0 && n.ToString().First() % 2 != 0).Count();', '        return nums.Where(x
    => Math.Abs(x) > 10 && Math.Abs(x) % 10 % 2 != 0 && x % 10 % 2 != 0).Count();',
  "        return nums.Where(x => x > 10 &&\n                               (x % 10)\
    \ % 2 != 0 &&\n                               (x / Math.Pow(10, (int)Math.Log10(x)))\
    \ % 2 != 0)\n                   .LongCount();", "        long count = 0;\n   \
    \     foreach (long num in nums) {\n            if (num > 10 && (num % 10) % 2\
    \ != 0 && (num / 10) % 2 != 0) {\n                count++;\n            }\n  \
    \      }\n        return count;", "        return nums.Where(n => n > 10 &&\n\
    \                               n.ToString().First() % 2 != 0 &&\n           \
    \                    n.ToString().Last() % 2 != 0).Count();", '        return
    nums.Count(n => n > 10 && IsSpecial(n));', '        return nums.Where(num => num
    > 10 && num.ToString().EndsWith("1") || num.ToString().EndsWith("3") || num.ToString().EndsWith("5")
    || num.ToString().EndsWith("7") || num.ToString().EndsWith("9")).Count();', " \
    \       // Your code here.\n        return 0;"]
stop_tokens:
- "\n    }\n"
