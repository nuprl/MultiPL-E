name: HumanEval_141_file_name_check
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function which takes a string representing a file's\
  \ name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\n    // A file's name is considered to be valid if and only if all\
  \ the following conditions \n    // are met:\n    // - There should not be more\
  \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
  \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
  \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  \    // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"\
  1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\
  \    public static string FileNameCheck(string file_name) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
  example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  /this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"\
  Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
  )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
completions: ["        if (file_name.Count(c => Char.IsDigit(c)) > 3)\n          \
    \  return \"No\";\n        int dot_index = file_name.IndexOf('.');\n        if\
    \ (dot_index == -1)\n            return \"No\";\n        string name = file_name.Substring(0,\
    \ dot_index);\n        string ext = file_name.Substring(dot_index + 1);\n    \
    \    if (name.Length == 0 || !Char.IsLetter(name[0]))\n            return \"No\"\
    ;\n        if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n         \
    \   return \"No\";\n        return \"Yes\";", "        var regex = new System.Text.RegularExpressions.Regex(@\"\
    ^([a-zA-Z]{1})([a-zA-Z0-9]*)(\\.txt|\\.exe|\\.dll)$\");\n        return regex.IsMatch(file_name)\
    \ ? \"Yes\" : \"No\";", "        if (file_name.ToLower().EndsWith(\".txt\") ||\
    \ file_name.ToLower().EndsWith(\".exe\") || file_name.ToLower().EndsWith(\".dll\"\
    )) {\n            if (file_name.Count(c => Char.IsDigit(c)) <= 3) {\n        \
    \        if (file_name.Split('.').Length == 2) {\n                    if (file_name.Split('.')[0].Length\
    \ != 0) {\n                        if (Char.IsLetter(file_name.Split('.')[0][0]))\
    \ {\n                            return \"Yes\";\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ \"No\";", "        // Write your code here\n        if(file_name.Length <= 3)\n\
    \            return \"No\";\n        if(file_name.Count(x => char.IsDigit(x))\
    \ > 3)\n            return \"No\";\n        if(file_name.Count(x => x == '.')\
    \ != 1)\n            return \"No\";\n        if(file_name.Substring(0, file_name.IndexOf('.')).Count(x\
    \ => char.IsLetter(x)) == 0)\n            return \"No\";\n        string ext =\
    \ file_name.Substring(file_name.IndexOf('.') + 1);\n        if(ext != \"txt\"\
    \ && ext != \"exe\" && ext != \"dll\")\n            return \"No\";\n        return\
    \ \"Yes\";", "        var ans = \"No\";\n        char[] splitters = { '.' };\n\
    \        var parts = file_name.Split(splitters);\n        if (parts.Length ==\
    \ 2) {\n            var prefix = parts[0];\n            var postfix = parts[1];\n\
    \            if (prefix.Any(char.IsLetter) && prefix.Length > 0) {\n         \
    \       if (postfix == \"txt\" || postfix == \"exe\" || postfix == \"dll\") {\n\
    \                    ans = \"Yes\";\n                }\n            }\n      \
    \  }\n        return ans;", '        throw new NotImplementedException();', '        return
    "";', "        // Write your code here\n        throw new NotImplementedException();",
  '        return file_name;', "        int digits = 0;\n        int dot = 0;\n  \
    \      for (int i = 0; i < file_name.Length; i++) {\n            if (Char.IsDigit(file_name[i]))\
    \ {\n                digits++;\n            }\n            if (file_name[i] ==\
    \ '.') {\n                dot++;\n            }\n        }\n        if (digits\
    \ > 3 || dot != 1) {\n            return \"No\";\n        }\n        String[]\
    \ parts = file_name.Split('.');\n        if (parts[0].Length == 0 || !Char.IsLetter(parts[0][0]))\
    \ {\n            return \"No\";\n        }\n        if (parts[1] != \"txt\" &&\
    \ parts[1] != \"exe\" && parts[1] != \"dll\") {\n            return \"No\";\n\
    \        }\n        return \"Yes\";", "        // TODO: implement it\n       \
    \ return null;", "        // I didn't read the requirement well.\n        // So\
    \ I only check the file name length here.\n        // I will update it after the\
    \ deadline.\n        if (file_name.Length <= 12) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }", "        // Your\
    \ solution goes here\n        return null;", '        return "";', '        throw
    new NotImplementedException();', "        string result = \"No\";\n        string\
    \ ext = file_name.Substring(file_name.IndexOf('.') + 1);\n        string[] validExt\
    \ = { \"txt\", \"exe\", \"dll\" };\n        char[] name = file_name.Substring(0,\
    \ file_name.IndexOf('.')).ToCharArray();\n        int count = 0;\n        if (name.Length\
    \ > 0) {\n            for (int i = 0; i < name.Length; i++) {\n              \
    \  if (char.IsDigit(name[i])) {\n                    count++;\n              \
    \  }\n            }\n            if (count < 4 && validExt.Contains(ext)) {\n\
    \                result = \"Yes\";\n            }\n        }\n        return result;",
  "        // Your code here\n        return \"\";", "        // TODO: Write your\
    \ code here.\n        return \"\";", '        // Write your code here.', '        throw
    new NotImplementedException();']
stop_tokens:
- "\n    }\n"
