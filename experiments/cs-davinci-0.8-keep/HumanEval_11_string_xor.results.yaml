language: cs
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i] ? '0' :\
    \ '1');\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        string result = \"\";\n        for (int i = 0; i < a.Length;\
    \ i++) {\n            if (a[i] == b[i]) {\n                result += \"0\";\n\
    \            } else {\n                result += \"1\";\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        // convert strings to array of integers\n        var\
    \ a_int = a.Select(c => int.Parse(c.ToString())).ToArray();\n        var b_int\
    \ = b.Select(c => int.Parse(c.ToString())).ToArray();\n        var results = new\
    \ int[a_int.Length];\n        // XOR each digit\n        for (int i = 0; i < a_int.Length;\
    \ i++) {\n            results[i] = a_int[i] ^ b_int[i];\n        }\n        return\
    \ String.Join(\"\", results);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        // Convert the strings to bytes\n        byte[] ba =\
    \ a.Select(c => c == '1' ? (byte)1 : (byte)0).ToArray();\n        byte[] bb =\
    \ b.Select(c => c == '1' ? (byte)1 : (byte)0).ToArray();\n        byte[] xor =\
    \ new byte[ba.Length];\n        for (int i = 0; i < ba.Length; i++) {\n      \
    \      xor[i] = (byte)(ba[i] ^ bb[i]);\n        }\n        return String.Join(\"\
    \", xor.Select(x => x == 1 ? \"1\" : \"0\"));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        // ensure that a is the shortest one\n        if (a.Length\
    \ > b.Length) {\n            string tmp = a;\n            a = b;\n           \
    \ b = tmp;\n        }\n        StringBuilder xor = new StringBuilder();\n    \
    \    int i;\n        for (i = 0; i < a.Length; i++) {\n            if (a[i] ==\
    \ b[i])\n                xor.Append('0');\n            else\n                xor.Append('1');\n\
    \        }\n        // remaining bits of b\n        for (; i < b.Length; i++)\
    \ {\n            xor.Append(b[i]);\n        }\n        return xor.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        // int to ascii char offset is 48 (in decimal)\n   \
    \     char[] c = new char[a.Length];\n        for (int i = 0; i < a.Length; i++)\
    \ {\n            int ai = a[i] - 48;\n            int bi = b[i] - 48;\n      \
    \      int ci = ai ^ bi;\n            c[i] = (char)(ci + 48);\n        }\n   \
    \     return new string(c);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        var result = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            result.Append(a[i] == b[i] ? '0' :\
    \ '1');\n        }\n        return result.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        if (a.Length != b.Length)\n            throw new ArgumentException(\"\
    Length of a and b must be equal.\");\n        var result = new char[a.Length];\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result[i] = a[i] ==\
    \ b[i] ? '0' : '1';\n        }\n        return new string(result);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"\
    ), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        var sb = new StringBuilder();\n        for (int i =\
    \ 0; i < a.Length; i++) {\n            var ai = a[i] == '1';\n            var\
    \ bi = b[i] == '1';\n            sb.Append(ai ^ bi ? '1' : '0');\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        // b has to be longer than a\n        if (a.Length >\
    \ b.Length) {\n            return StringXor(b, a);\n        }\n        string\
    \ res = \"\";\n        int j = 0;\n        for (int i = a.Length - 1; i >= 0;\
    \ i--) {\n            res = (a[i] ^ b[i + j] ^ j).ToString() + res;\n        \
    \    if (a[i] == '1') {\n                j = 1;\n            }\n        }\n  \
    \      for (int i = b.Length - a.Length - 1; i >= 0; i--) {\n            res =\
    \ (b[i] ^ j).ToString() + res;\n            if (b[i] == '1') {\n             \
    \   j = 1;\n            }\n        }\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c93a0de4c92498c86ab0f3275d52c29>:0 \n"
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        int length = Math.Max(a.Length, b.Length);\n       \
    \ var sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n\
    \            int left = i < a.Length ? a[i] - '0' : 0;\n            int right\
    \ = i < b.Length ? b[i] - '0' : 0;\n            sb.Append((left ^ right).ToString());\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        Debug.Assert(a.Length == b.Length);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n  \
    \          if (a[i] == b[i]) {\n                sb.Append('0');\n            }\
    \ else {\n                sb.Append('1');\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        var result = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n             \
    \   result.Append('0');\n            } else {\n                result.Append('1');\n\
    \            }\n        }\n        return result.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        if (a.Length != b.Length) {\n            throw new ArgumentException(\"\
    String length mismatch\");\n        }\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            var c = a[i] ^ b[i];\n\
    \            result.Append(c);\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n        \
    \        sb.Append('0');\n            } else {\n                sb.Append('1');\n\
    \            }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        int n = Math.Max(a.Length, b.Length);\n        a = a.PadLeft(n,\
    \ '0');\n        b = b.PadLeft(n, '0');\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < n; i++) {\n            int x = int.Parse(a[i].ToString());\n\
    \            int y = int.Parse(b[i].ToString());\n            int z = x ^ y;\n\
    \            sb.Append(z);\n        }\n        return sb.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        int len = Math.Max(a.Length, b.Length);\n        var\
    \ res = new char[len];\n        for (int i = 0; i < len; i++) {\n            if\
    \ (a[i] == b[i]) {\n                res[i] = '0';\n            } else {\n    \
    \            res[i] = '1';\n            }\n        }\n        return new string(res);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        var result = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            result.Append(a[i] == b[i] ? '0' :\
    \ '1');\n        }\n        return result.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        if (a.Length != b.Length)\n            throw new ArgumentException(\"\
    a and b must be of equal length\");\n        var sb = new StringBuilder();\n \
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n\
    \                sb.Append('0');\n            } else {\n                sb.Append('1');\n\
    \            }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> string_xor('010', '110')\n    // '100'\n    public static string StringXor(string\
    \ a, string b) {\n        Debug.Assert(a.Length == b.Length);\n        int length\
    \ = a.Length;\n        var sb = new StringBuilder();\n        for (int i = 0;\
    \ i < length; i++) {\n            sb.Append(a[i] == b[i] ? '0' : '1');\n     \
    \   }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823300
