language: cs
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // var min = arr.Where(x => x % 2 == 0).Min();\n        var min = -1;\n
    \       var minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0) {\n                if (min == -1 || arr[i] < min) {\n                    min
    = arr[i];\n                    minIndex = i;\n                }\n            }\n
    \       }\n        return min == -1 ? new List<long>() : new List<long>{min, minIndex};\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdvit40af.cs(41,27): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // TODO:\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d2560c56c6eb470e8b85bfc72c32a5eb>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d2560c56c6eb470e8b85bfc72c32a5eb>:0
    \n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // Your code goes here.\n        // Console.WriteLine(\"arr: \" + arr.Count);\n
    \       if (arr.Count == 0) {\n            return new List<long>();\n        }\n
    \       long smallest = arr[0];\n        long index = 0;\n        foreach (long
    item in arr) {\n            if (item % 2 == 0 && item < smallest) {\n                smallest
    = item;\n                index = arr.IndexOf(item);\n            }\n        }\n
    \       if (smallest % 2 == 0) {\n            return new List<long>{smallest,
    index};\n        }\n        return new List<long>();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a349c7efcdef42f8a78dc186c0069a4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a349c7efcdef42f8a78dc186c0069a4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // Implement here\n        // Use a for loop\n        //if the value is
    even (if (val % 2 == 0) return val)\n        //if the value is even, replace the
    value at the given index with the value\n        //if the value is even and the
    value is less than the previous value replace the value at the given index with
    the value\n        //else, return []\n        long smallestEvenValue = -1;\n        long
    indexOfSmallestEvenValue = -1;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long val = arr[i];\n            if (val % 2 == 0) {\n                if
    (smallestEvenValue == -1) {\n                    smallestEvenValue = val;\n                    indexOfSmallestEvenValue
    = i;\n                } else if (val < smallestEvenValue) {\n                    smallestEvenValue
    = val;\n                    indexOfSmallestEvenValue = i;\n                }\n
    \           }\n        }\n        List<long> result = new List<long>();\n        if
    (smallestEvenValue == -1) {\n            return result;\n        } else {\n            result.Add(smallestEvenValue);\n
    \           result.Add(indexOfSmallestEvenValue);\n            return result;\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5091526c472a477190bd22292d70b381>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5091526c472a477190bd22292d70b381>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // You must return a List<long> here.\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50af083aab63474091f7bdeeabc9d697>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <50af083aab63474091f7bdeeabc9d697>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // We need to return the smallest even number and its index.\n        //
    We will do this by creating an array with the same number of elements\n        //
    as the input array and mark the even numbers with their indexes.\n        // We
    will then go through the array and find the smallest even number.\n        //
    We will mark the index of the array with the smallest even number,\n        //
    and return that to the caller.\n        // We will also return the even number
    we found.\n        if (arr.Count == 0) {\n            return new List<long>();\n
    \       }\n        // Lets create an array of the same length as the input array\n
    \       long[] output = new long[arr.Count];\n        // Next we will go through
    the input array and place the even numbers\n        // with their indexes in the
    output array\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    % 2 == 0) {\n                output[i] = arr[i];\n            }\n        }\n        //
    Now we have to get the smallest even number\n        // and its index.\n        long
    smallest_even = long.MaxValue;\n        int smallest_even_index = -1;\n        for
    (int i = 0; i < output.Length; i++) {\n            if (output[i] > 0 && output[i]
    < smallest_even) {\n                smallest_even = output[i];\n                smallest_even_index
    = i;\n            }\n        }\n        // We will now return the smallest even
    number and its index.\n        List<long> result = new List<long>();\n        result.Add(smallest_even);\n
    \       result.Add(smallest_even_index);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af8307c2a88f4e9999d7ca14b5f8885f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <af8307c2a88f4e9999d7ca14b5f8885f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // Your code goes here.\n        // return the list [ smallest_even_value,
    its_index ].\n        List<long> result = new List<long>();\n        long smallEven
    = long.MaxValue;\n        long index = 0;\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallEven) {\n                smallEven
    = arr[i];\n                index = i;\n            }\n        }\n        if (smallEven
    != long.MaxValue) {\n            result.Add(smallEven);\n            result.Add(index);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27f233bbdb904cb7bdbaf258efd16744>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27f233bbdb904cb7bdbaf258efd16744>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       var l = arr.Where(x => x % 2 == 0).ToList();\n        if (l.Count > 0)
    {\n            var ans = l.Min();\n            var idx = arr.IndexOf(ans);\n            return
    new List<long> { ans, idx };\n        }\n        return new List<long>();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a4360a425504b089053e6363ee398c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a4360a425504b089053e6363ee398c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       if (arr.Count == 0) {\n            return new List<long>();\n        }\n
    \       var smallestIndex = 0;\n        var smallestValue = arr[0];\n        for
    (var i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && (arr[i]
    < smallestValue || smallestValue % 2 != 0)) {\n                smallestIndex =
    i;\n                smallestValue = arr[i];\n            }\n        }\n        if
    (smallestValue % 2 != 0) {\n            return new List<long>();\n        }\n
    \       return new List<long> { smallestValue, smallestIndex };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <902eeef5f9e643d2806a4e5fb20b64e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <902eeef5f9e643d2806a4e5fb20b64e2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // your code goes here\n        return null;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <9dd3667357634db495975d2f37ba2fc7>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <9dd3667357634db495975d2f37ba2fc7>:0
    \n"
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc4a13911340492ea3586acd498e5cb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc4a13911340492ea3586acd498e5cb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // Your code here\n        return new List<long>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc3aeda777bc451880310a022a208a6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc3aeda777bc451880310a022a208a6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       List<long> ret = new List<long>();\n        long smallestEven = long.MaxValue;\n
    \       long smallestEvenIndex = long.MaxValue;\n        long counter = 0;\n        foreach
    (long num in arr) {\n            if (num % 2 == 0 && num < smallestEven) {\n                smallestEven
    = num;\n                smallestEvenIndex = counter;\n            }\n            counter++;\n
    \       }\n        if (smallestEvenIndex == long.MaxValue) {\n            return
    ret;\n        }\n        ret.Add(smallestEven);\n        ret.Add(smallestEvenIndex);\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a128acc5cb147569944966c2ef6ab12>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a128acc5cb147569944966c2ef6ab12>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // write your code here\n        return new List<long>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad62177166da4f7f80bba3bfc3173b62>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad62177166da4f7f80bba3bfc3173b62>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       long min_even = long.MaxValue;\n        long res_i = -1;\n        for
    (long i = 0; i < arr.Count; i++) {\n            long val = arr[(int)i];\n            if
    (val == 0) {\n                res_i = 0;\n                break;\n            }\n
    \           if (val % 2 == 0 && val < min_even) {\n                min_even =
    val;\n                res_i = i;\n            }\n        }\n        if (res_i
    == -1) {\n            return new List<long>();\n        }\n        return new
    List<long> { min_even, res_i };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49295314b2ec46798c60e0cbaaad5876>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49295314b2ec46798c60e0cbaaad5876>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       long s_even = -1;\n        long index = -1;\n        for (int i = 0; i
    < arr.Count; i++) {\n            long v = arr[i];\n            if (v % 2 == 0)
    {\n                if (s_even == -1 || v < s_even) {\n                    s_even
    = v;\n                    index = i;\n                }\n            }\n        }\n
    \       if (s_even == -1) return new List<long>();\n        return new List<long>
    { s_even, index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94bdd99fd5614b83975dffb9a06c58d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94bdd99fd5614b83975dffb9a06c58d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       var res = arr.Where(n => n % 2 == 0).OrderBy(n => n).ToList();\n        return
    res.Count() > 0 ? new List<long> { res[0], arr.IndexOf(res[0]) } : new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66dd4bcd2e1c40759798ebd2e181819c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <66dd4bcd2e1c40759798ebd2e181819c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       return arr.Select((val, i) => new { val, i })\n            .Where(x =>
    x.val % 2 == 0)\n            .OrderBy(x => x.val)\n            .ThenBy(x => x.i)\n
    \           .Select(x => new List<long> { x.val, x.i }).FirstOrDefault() ?? new
    List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4424cd573527465389e2ea9ff12174b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4424cd573527465389e2ea9ff12174b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // your code here\n        List<long> result = new List<long>();\n        if
    (arr.Count == 0) {\n            return result;\n        }\n\n        int index
    = 0;\n        bool hasEvenNumber = false;\n        long minValue = Int64.MaxValue;\n
    \       foreach (long item in arr) {\n            if (item % 2 == 0) {\n                hasEvenNumber
    = true;\n                if (item < minValue) {\n                    minValue
    = item;\n                    result.Clear();\n                    result.Add(item);\n
    \                   result.Add(index);\n                }\n            }\n            index++;\n
    \       }\n\n        if (!hasEvenNumber) {\n            result.Clear();\n        }\n\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3edc1335a4b84beba849d4471122ca00>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3edc1335a4b84beba849d4471122ca00>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659823964
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n    // Output:
    [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest
    index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output: [2, 1]\n    //
    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n    //
    Example 3:\n    // Input: []\n    // Output: []\n    // Example 4:\n    // Input:
    [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation: 0 is the smallest
    value, but  there are two zeros,\n    // so we will choose the first zero, which
    has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n
    \   // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {\n
    \       // Find the smallest even value\n        long minValue = arr.Where(x =>
    x % 2 == 0).Min();\n        // Find the index of the first occurrence of that
    value\n        int index = arr.IndexOf(minValue);\n        // Return the value
    and the index\n        return new List<long> { minValue, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70303795f4b545e587e9976fe06d1548>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70303795f4b545e587e9976fe06d1548>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <70303795f4b545e587e9976fe06d1548>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659823964
