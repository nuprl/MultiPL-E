language: cs
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float mean = numbers.Average();\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        var mean = Mean(numbers);\n        var deviations = numbers.Select(x\
    \ => Math.Abs(x - mean));\n        return Mean(deviations.ToList());\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ryge0uq.cs(17,20): error CS0103: The name ''Mean'' does not exist in
    the current context

    /tmp/tmp6ryge0uq.cs(19,16): error CS0103: The name ''Mean'' does not exist in
    the current context

    '
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        if (numbers.Count == 0) {\n            return 0;\n     \
    \   }\n        // Calculate mean\n        float mean = 0;\n        foreach (float\
    \ number in numbers) {\n            mean += number;\n        }\n        mean /=\
    \ numbers.Count;\n        // Calculate MAD\n        float mad = 0;\n        foreach\
    \ (float number in numbers) {\n            mad += Math.Abs(number - mean);\n \
    \       }\n        mad /= numbers.Count;\n        return mad;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        // Given a list of numbers, calculate the mean of that list.\n\
    \        // >>> mean([1.0, 2.0, 3.0, 4.0])\n        // 2.5\n        float mean\
    \ = 0;\n        foreach (float x in numbers) {\n            mean += x;\n     \
    \   }\n        mean /= numbers.Count;\n        // Given a list of numbers, calculate\
    \ the absolute deviation of each\n        // element from a centerpoint.\n   \
    \     // >>> absolute_deviation(1.0, 3.0)\n        // 2.0\n        // >>> absolute_deviation(1.0,\
    \ 2.0)\n        // 1.0\n        // >>> absolute_deviation(2.0, 2.0)\n        //\
    \ 0.0\n        // >>> absolute_deviation(4.0, 2.0)\n        // 2.0\n        List<float>\
    \ deviations = new List<float>();\n        foreach (float x in numbers) {\n  \
    \          deviations.Add(Math.Abs(x - mean));\n        }\n        return deviations.Average();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float sum_of_deviations = 0.0f;\n        float mean = 0.0f;\n\
    \        // Standard deviation\n        // Mean is the average value in a set\
    \ of numbers.\n        // We're looping through the numbers once to calculate\
    \ the mean,\n        // and then a second time to calculate the standard deviation.\n\
    \        foreach (float num in numbers) {\n            mean += num;\n        }\n\
    \        mean /= numbers.Count;\n        foreach (float num in numbers) {\n  \
    \          sum_of_deviations += Math.Abs(num - mean);\n        }\n        return\
    \ sum_of_deviations / numbers.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float mean = numbers.Average();\n        float sum = 0;\n\
    \        foreach (float num in numbers) {\n            sum += Math.Abs(num - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float n = (float)numbers.Count;\n        float mean = numbers.Sum()\
    \ / n;\n        float sum_abs_differences = 0;\n        foreach (float number\
    \ in numbers) {\n            sum_abs_differences += Math.Abs(number - mean);\n\
    \        }\n        return sum_abs_differences / n;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        double mean = numbers.Average();\n        double number_sum\
    \ = 0;\n        foreach (float n in numbers) {\n            number_sum += Math.Abs(n\
    \ - mean);\n        }\n        return (float)(number_sum / numbers.Count);\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float average = numbers.Average();\n        float sum =\
    \ 0;\n        foreach (float f in numbers) {\n            sum += Math.Abs(f -\
    \ average);\n        }\n        return sum / numbers.Count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float mean = numbers.Average();\n        float diff = 0.0f;\n\
    \        foreach (float num in numbers) {\n            diff += Math.Abs(num -\
    \ mean);\n        }\n        return diff / numbers.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float mean = Mean(numbers);\n        float deviation_sum\
    \ = 0.0f;\n        foreach (float number in numbers) {\n            deviation_sum\
    \ += Math.Abs(number - mean);\n        }\n        return deviation_sum / numbers.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp68hskkde.cs(17,22): error CS0103: The name ''Mean'' does not exist in
    the current context

    '
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float sum = 0.0f;\n        foreach (float number in numbers)\
    \ {\n            sum += number;\n        }\n        float mean = sum / numbers.Count;\n\
    \        sum = 0.0f;\n        foreach (float number in numbers) {\n          \
    \  sum += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        if (numbers.Count == 0)\n            return 0;\n       \
    \ float average = Average(numbers);\n        float devSum = 0;\n        foreach\
    \ (float f in numbers) {\n            devSum += Math.Abs(f - average);\n     \
    \   }\n        return devSum / numbers.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1nzvq646.cs(19,25): error CS0103: The name ''Average'' does not exist
    in the current context

    '
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float mean = numbers.Average();\n        float diffs = 0;\n\
    \        foreach (float item in numbers) {\n            diffs += Math.Abs(item\
    \ - mean);\n        }\n        return diffs / numbers.Count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        // Calculate the mean of the input numbers\n        float\
    \ mean = numbers.Average();\n        // Create a new list of absolute differences\
    \ around the mean\n        var absolute_differences = numbers.Select(val => Math.Abs(val\
    \ - mean));\n        // Return the mean of the absolute differences\n        return\
    \ absolute_differences.Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float mean = numbers.Average();\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float mean = numbers.Average();\n        var differences\
    \ = numbers.Select(x => Math.Abs(x - mean));\n        float average_difference\
    \ = differences.Average();\n        return average_difference;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float sum = 0.0f;\n        float mean = numbers.Average();\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            sum += Math.Abs(numbers[i]\
    \ - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        // mean\n        float mean = numbers.Average();\n     \
    \   return numbers.Select(number => Math.Abs(number - mean)).Average();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    // 1.0\n    public static float MeanAbsoluteDeviation(List<float>\
    \ numbers) {\n        float mean = numbers.Average();\n        float[] deltas\
    \ = numbers.Select(i => Math.Abs(i - mean)).ToArray();\n        return deltas.Average();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659823783
