name: HumanEval_9_rolling_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a given list of integers, generate a list of rolling maximum\
  \ element found until given moment\n    // in the sequence.\n    // >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n    // [1, 2, 3, 3, 3, 4, 4]\n    public static List<long>\
  \ RollingMax(List<long> numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
  \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long current_max\
    \ = numbers[0];\n        result.Add(current_max);\n        for (int index = 1;\
    \ index < numbers.Count; index++) {\n            if (numbers[index] > current_max)\
    \ {\n                current_max = numbers[index];\n            }\n          \
    \  result.Add(current_max);\n        }\n        return result;", "        var\
    \ maxs = new List<long>();\n        maxs.Add(numbers[0]);\n        for (int i\
    \ = 1; i < numbers.Count; i++) {\n            maxs.Add(Math.Max(maxs[i - 1], numbers[i]));\n\
    \        }\n        return maxs;", "        // [2, 3, 2, 3, 4, 2]\n        var\
    \ maxes = new List<long> { numbers[0] };\n        // [2, 3, 3, 3, 4, 4]\n    \
    \    for (int i = 1; i < numbers.Count; i++) {\n            maxes.Add(Math.Max(maxes[i\
    \ - 1], numbers[i]));\n        }\n        return maxes;", "        var rolling\
    \ = new List<long>();\n        var max = numbers[0];\n        for (int i = 0;\
    \ i < numbers.Count; i++) {\n            if (numbers[i] > max) {\n           \
    \     max = numbers[i];\n            }\n            rolling.Add(max);\n      \
    \  }\n        return rolling;", "        var res = new List<long>();\n       \
    \ long current_max = long.MinValue;\n        foreach (var item in numbers) {\n\
    \            current_max = Math.Max(current_max, item);\n            res.Add(current_max);\n\
    \        }\n        return res;", "        var result = new List<long>();\n  \
    \      var max = long.MinValue;\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n\
    \        }\n        return result;", "        int n = numbers.Count;\n       \
    \ List<long> result = new List<long>(n);\n        long current_max = numbers[0];\n\
    \        result.Add(current_max);\n        for (int i = 1; i < n; i++) {\n   \
    \         long x = numbers[i];\n            if (x > current_max) {\n         \
    \       current_max = x;\n            }\n            result.Add(current_max);\n\
    \        }\n        return result;", "        int n = numbers.Count;\n       \
    \ List<long> result = new List<long>(n);\n        long max = numbers[0];\n   \
    \     result.Add(max);\n        for (int i = 1; i < n; i++) {\n            max\
    \ = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n    \
    \    return result;", "        List<long> maxs = new List<long>();\n        long\
    \ currentMax = long.MinValue;\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            currentMax = Math.Max(currentMax, numbers[i]);\n            maxs.Add(currentMax);\n\
    \        }\n        return maxs;", "        List<long> result = new List<long>();\n\
    \        var max = numbers[0];\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long val in numbers) {\n            if\
    \ (val > max) max = val;\n            result.Add(max);\n        }\n        return\
    \ result;", "        if (numbers.Count == 0) return new List<long>();\n      \
    \  var res = new List<long>();\n        var curMax = numbers[0];\n        res.Add(curMax);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            curMax = Math.Max(curMax,\
    \ numbers[i]);\n            res.Add(curMax);\n        }\n        return res;",
  "        var rollingMax = new List<long>();\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            rollingMax.Add(Math.Max(numbers[i], i > 0 ? rollingMax[i\
    \ - 1] : numbers[i]));\n        }\n        return rollingMax;", "        var ret\
    \ = new List<long>();\n        long rolling_max = long.MinValue;\n        foreach\
    \ (var number in numbers) {\n            rolling_max = Math.Max(rolling_max, number);\n\
    \            ret.Add(rolling_max);\n        }\n        return ret;", "       \
    \ var prevMax = new List<long>();\n        long max = numbers[0];\n        prevMax.Add(max);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            max = Math.Max(max,\
    \ numbers[i]);\n            prevMax.Add(max);\n        }\n        return prevMax;",
  "        if (numbers.Count == 0) {\n            return new List<long>();\n     \
    \   }\n        if (numbers.Count == 1) {\n            return new List<long> {\
    \ numbers[0] };\n        }\n        long max = numbers[0];\n        List<long>\
    \ result = new List<long> { max };\n        for (int i = 1; i < numbers.Count;\
    \ i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n\
    \            }\n            result.Add(max);\n        }\n        return result;",
  "        List<long> maxes = new List<long>();\n        long currMax = 0;\n     \
    \   foreach (long number in numbers) {\n            if (number > currMax) {\n\
    \                currMax = number;\n            }\n            maxes.Add(currMax);\n\
    \        }\n        return maxes;", "        var max = new List<long>();\n   \
    \     var currentMax = long.MinValue;\n        foreach (var x in numbers) {\n\
    \            currentMax = Math.Max(currentMax, x);\n            max.Add(currentMax);\n\
    \        }\n        return max;", "        var maxSoFar = new List<long>();\n\
    \        var max = long.MinValue;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n\
    \            }\n            maxSoFar.Add(max);\n        }\n        return maxSoFar;",
  "        var max = new List<long> { };\n        long maxValue = long.MinValue;\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > maxValue)\n                maxValue = numbers[i];\n            max.Add(maxValue);\n\
    \        }\n        return max;"]
stop_tokens:
- "\n    }\n"
