name: HumanEval_65_circular_shift
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Circular shift the digits of the integer x, shift the digits\
  \ right by shift\n    // and return the result as a string.\n    // If shift > number\
  \ of digits, return digits reversed.\n    // >>> circular_shift(12, 1)\n    // \"\
  21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public static string\
  \ CircularShift(long x, long shift) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
  \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
  12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L),\
  \ (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"\
  11\")));\n    }\n\n}\n"
completions: ["        List<char> digits = new List<char>();\n        // Permute the\
    \ digits of the number x.\n        for (int i = 0; i < shift; i++) {\n       \
    \     digits.Add((char)((x % 10) + '0'));\n            x /= 10;\n        }\n \
    \       for (; x > 0; x /= 10) {\n            digits.Insert(0, (char)((x % 10)\
    \ + '0'));\n        }\n        // Convert the list of digits to a string and return\
    \ it.\n        return new string(digits.ToArray());", "        var num = x.ToString();\n\
    \        if (shift > num.Length) {\n            char[] charArray = num.ToCharArray();\n\
    \            Array.Reverse(charArray);\n            return new string(charArray);\n\
    \        }\n        return num.Substring(num.Length - (int)shift) + num.Substring(0,\
    \ num.Length - (int)shift);", "        string result = \"\";\n        foreach\
    \ (int digit in x.ToString())\n            result = digit + result;\n        if\
    \ (shift > result.Length)\n            return result;\n        else\n        \
    \    return result.Substring((int)shift) + result.Substring(0, (int)shift);",
  "        if (shift == 0) return x.ToString();\n        long digits = 1;\n      \
    \  long magnitude = 1;\n        while (x > magnitude) {\n            digits++;\n\
    \            magnitude *= 10;\n        }\n        if (shift > digits) {\n    \
    \        long y = 0;\n            for (long i = 0; i < digits; i++) {\n      \
    \          y = y * 10 + x % 10;\n                x /= 10;\n            }\n   \
    \         return y.ToString();\n        }\n        long y = 0;\n        for (long\
    \ i = 0; i < digits; i++) {\n            y = y * 10 + x % 10;\n            x /=\
    \ 10;\n        }\n        for (long i = 0; i < shift; i++) {\n            y /=\
    \ 10;\n        }\n        return y.ToString();", "        char[] digits = x.ToString().ToCharArray();\n\
    \        Array.Reverse(digits);\n        shift = shift % digits.Length;\n    \
    \    if (shift > 0) {\n            char[] new_digits = new char[digits.Length];\n\
    \            for (int i = 0; i < digits.Length; i++) {\n                new_digits[i]\
    \ = digits[(i + shift) % digits.Length];\n            }\n            digits =\
    \ new_digits;\n        }\n        Array.Reverse(digits);\n        return new string(digits);",
  "        int n = CountDigits(x);\n        shift = shift % n;\n        if (shift\
    \ == 0) {\n            return x.ToString();\n        }\n        return (x / (long)Math.Pow(10,\
    \ shift)).ToString() + (x % (long)Math.Pow(10, shift)).ToString();", "       \
    \ string xStr = x.ToString();\n        string reverseStr = new string(xStr.Reverse().ToArray());\n\
    \        return shift >= xStr.Length ? reverseStr : xStr.Substring(shift) + xStr.Substring(0,\
    \ shift);", "        if (shift == 0) {\n            return x.ToString();\n   \
    \     }\n        var numDigits = (int)Math.Floor(Math.Log10(x)) + 1;\n       \
    \ if (shift >= numDigits) {\n            return new string(x.ToString().Reverse().ToArray());\n\
    \        }\n        var arr = x.ToString().ToCharArray();\n        var i = 0;\n\
    \        while (i < shift) {\n            var temp = arr[0];\n            for\
    \ (var j = 0; j < numDigits - 1; j++) {\n                arr[j] = arr[j + 1];\n\
    \            }\n            arr[numDigits - 1] = temp;\n            i++;\n   \
    \     }\n        return new string(arr);", "        string s = x.ToString();\n\
    \        if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        return s.Substring(shift) + s.Substring(0, shift);", "   \
    \     string x_str = x.ToString();\n        if (shift > x_str.Length) {\n    \
    \        return new string(x_str.Reverse().ToArray());\n        }\n        string\
    \ suffix = x_str.Substring(0, (int)shift);\n        string prefix = x_str.Substring((int)shift);\n\
    \        return prefix + suffix;", "        if (shift == 0) {\n            return\
    \ x.ToString();\n        }\n        string digits = x.ToString();\n        if\
    \ (shift > digits.Length) {\n            return Reverse(digits);\n        }\n\
    \        return digits.Substring((int)shift) + digits.Substring(0, (int)shift);",
  "        if (shift > x.ToString().Length)\n            return new string(x.ToString().Reverse().ToArray());\n\
    \        return x.ToString().Substring((int)shift) + x.ToString().Substring(0,\
    \ (int)shift);", "        char[] arr = x.ToString().ToCharArray();\n        for\
    \ (int i = 0; i < shift; i++) {\n            char tmp = arr[arr.Length - 1];\n\
    \            for (int j = arr.Length - 1; j > 0; j--) {\n                arr[j]\
    \ = arr[j - 1];\n            }\n            arr[0] = tmp;\n        }\n       \
    \ return new string(arr);", "        List<int> num = new List<int>();\n      \
    \  string xs = x.ToString();\n        for (int i = 0; i < xs.Length; i++) {\n\
    \            num.Add(xs[i] - '0');\n        }\n        while (shift > 0) {\n \
    \           int last = num[num.Count - 1];\n            num.RemoveAt(num.Count\
    \ - 1);\n            num.Insert(0, last);\n            shift--;\n        }\n \
    \       string result = \"\";\n        for (int i = 0; i < num.Count; i++) {\n\
    \            result += num[i];\n        }\n        return result;", "        var\
    \ s = x.ToString();\n        var n = s.Length;\n        if (shift >= n) {\n  \
    \          return String.Join(\"\", s.Reverse());\n        }\n        return s.Substring(n\
    \ - (int)shift) + s.Substring(0, n - (int)shift);", "        var digits = x.ToString().ToCharArray();\n\
    \        // No shifting necessary\n        if (shift >= digits.Length)\n     \
    \       return new string(digits.Reverse().ToArray());\n        var prefix = digits.Skip((int)shift).ToArray();\n\
    \        var suffix = digits.Take((int)shift).ToArray();\n        return new string(prefix)\
    \ + new string(suffix);", "        // Extract the number of digits from x\n  \
    \      string s = x.ToString();\n        long len = s.Length;\n        if (shift\
    \ >= len)\n            return new string(s.Reverse().ToArray());\n        return\
    \ s.Substring((int)shift) + s.Substring(0, (int)shift);", "        char[] digits\
    \ = x.ToString().ToCharArray();\n        if (shift > digits.Length) {\n      \
    \      Array.Reverse(digits);\n            return new string(digits);\n      \
    \  } else {\n            // Shift the digits to the right\n            Array.Reverse(digits);\n\
    \            char[] shifted = new char[digits.Length];\n            for (int i\
    \ = 0; i < digits.Length; i++) {\n                shifted[(i + shift) % digits.Length]\
    \ = digits[i];\n            }\n            Array.Reverse(shifted);\n         \
    \   return new string(shifted);\n        }", "        string s = x.ToString();\n\
    \        string c = s.Substring((int)shift);\n        c += s.Substring(0, (int)shift);\n\
    \        return c;", '        return x.ToString();']
stop_tokens:
- "\n    }\n"
