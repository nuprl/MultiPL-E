name: HumanEval_24_largest_divisor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given number n, find the largest number that divides n\
  \ evenly, smaller than n\n    // >>> largest_divisor(15)\n    // 5\n    public static\
  \ long LargestDivisor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestDivisor((3L))\
  \ == (1L));\n    Debug.Assert(LargestDivisor((7L)) == (1L));\n    Debug.Assert(LargestDivisor((10L))\
  \ == (5L));\n    Debug.Assert(LargestDivisor((100L)) == (50L));\n    Debug.Assert(LargestDivisor((49L))\
  \ == (7L));\n    }\n\n}\n"
completions: ["        for (long i = n - 1; i > 0; i--) {\n            if (n % i ==\
    \ 0) {\n                return i;\n            }\n        }\n        return -1;",
  "        for (long i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n   \
    \             return i;\n            }\n        }\n        return -1;", "    \
    \    // Iterate on i * i <= n\n        for (long i = 2; i * i <= n; i++) {\n \
    \           if (n % i == 0)\n                return n / i;\n        }\n      \
    \  return 1;", "        var i = 2L;\n        while (i * i <= n) {\n          \
    \  if (n % i == 0) {\n                n /= i;\n            } else {\n        \
    \        i++;\n            }\n        }\n        return n;", "        long largest\
    \ = 0;\n        for (long i = 1; i <= Math.Sqrt(n); i++) {\n            if (n\
    \ % i == 0) {\n                largest = i;\n            }\n        }\n      \
    \  return largest;", "        // find the factors of n\n        var factors =\
    \ Factorize(n);\n        // create a list of factors, grouped by the number they\
    \ divide into\n        var factors2 = factors.GroupBy(x => x.Item1).ToDictionary(x\
    \ => x.Key, x => x.Count());\n        // multiply the factors with the largest\
    \ count, that divides n\n        return factors2.Where(x => n % x.Key == 0).OrderByDescending(x\
    \ => x.Value).Select(x => x.Key).Aggregate((x, y) => x * y);", "        long largestDivisor\
    \ = -1;\n        for (long i = 2; i <= Math.Sqrt(n); i++) {\n            if (n\
    \ % i == 0) {\n                largestDivisor = i;\n            }\n        }\n\
    \        return largestDivisor;", "        for (long i = n - 1; i > 0; i--) {\n\
    \            if (n % i == 0) {\n                return i;\n            }\n   \
    \     }\n        return 1;", "        if (n == 1) return 1;\n        long last_d\
    \ = n;\n        while (true) {\n            long d = n / last_d;\n           \
    \ if (n % last_d == 0) {\n                last_d = d;\n            } else {\n\
    \                return last_d;\n            }\n        }", "        for (long\
    \ i = n - 1; i > 0; i--) {\n            if (n % i == 0) return i;\n        }\n\
    \        return -1;", "        for (int i = 2; i <= Math.Sqrt(n); i++) {\n   \
    \         if (n % i == 0) {\n                return n / i;\n            }\n  \
    \      }\n        return 1;", "        for (long i = n - 1; i > 0; i--) {\n  \
    \          if (n % i == 0) return i;\n        }\n        return 0;", "       \
    \ long best = 0;\n        for (long i = 1; i < n; i++) {\n            if (n %\
    \ i == 0) best = i;\n        }\n        return best;", "        for (long i =\
    \ 2; i <= n; i++) {\n            if (n % i == 0) {\n                return n /\
    \ i;\n            }\n        }\n        return 1;", "        long limit = (long)Math.Floor(Math.Sqrt(n));\n\
    \        for (long i = limit; i > 0; i--) {\n            if (n % i == 0) {\n \
    \               return i;\n            }\n        }\n        return 1;", '        return
    n / 2;', "        for (long i = n / 2; i > 1; i--) {\n            if (n % i ==\
    \ 0) return i;\n        }\n        return 1;", "        long i = n / 2;\n    \
    \    while(i > 0) {\n            if(n % i == 0) {\n                return i;\n\
    \            }\n            i--;\n        }\n        return 1;", "        var\
    \ largest = 0L;\n        var sqrt = Math.Sqrt(n);\n        // starting at the\
    \ end of the range, we should find a number that divides n\n        // if we don't,\
    \ we increment up to find the next one\n        for (var i = (long)Math.Floor(sqrt);\
    \ i > 0; i--) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                break;\n            }\n        }\n        return largest;", " \
    \       long i;\n        for (i = 2; i < n; i++) {\n            if (n % i == 0)\
    \ {\n                return n / i;\n            }\n        }\n        return 1;"]
stop_tokens:
- "\n    }\n"
