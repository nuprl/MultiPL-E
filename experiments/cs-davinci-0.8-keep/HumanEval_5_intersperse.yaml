name: HumanEval_5_intersperse
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Insert a number 'delimeter' between every two consecutive elements\
  \ of input list `numbers'\n    // >>> intersperse([], 4)\n    // []\n    // >>>\
  \ intersperse([1, 2, 3], 4)\n    // [1, 4, 2, 4, 3]\n    public static List<long>\
  \ Intersperse(List<long> numbers, long delimeter) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersperse((new\
  \ List<long>()), (7L)).Equals((new List<long>())));\n    Debug.Assert(Intersperse((new\
  \ List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)2L})), (8L)).Equals((new\
  \ List<long>(new long[]{(long)5L, (long)8L, (long)6L, (long)8L, (long)3L, (long)8L,\
  \ (long)2L}))));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)2L})), (2L)).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
  \ (long)2L, (long)2L, (long)2L}))));\n    }\n\n}\n"
completions: ["        var result = new List<long>();\n        foreach (var x in numbers)\
    \ {\n            result.Add(x);\n            result.Add(delimeter);\n        }\n\
    \        result.RemoveAt(result.Count - 1);\n        return result;", "      \
    \  List<long> results = new List<long>();\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            results.Add(numbers[i]);\n            if (i < numbers.Count\
    \ - 1)\n                results.Add(delimeter);\n        }\n        return results;",
  "        if (numbers.Count < 2) {\n            return numbers;\n        }\n    \
    \    List<long> res = new List<long>();\n        res.Add(numbers[0]);\n      \
    \  for (int i = 1; i < numbers.Count; i++) {\n            res.Add(delimeter);\n\
    \            res.Add(numbers[i]);\n        }\n        return res;", "        List<long>\
    \ interspersed = new List<long>();\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            interspersed.Add(numbers[i]);\n            if (i < numbers.Count\
    \ - 1) {\n                interspersed.Add(delimeter);\n            }\n      \
    \  }\n        return interspersed;", "        var interspersed = new List<long>();\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            interspersed.Add(numbers[i]);\n\
    \            if (i < numbers.Count - 1) {\n                interspersed.Add(delimeter);\n\
    \            }\n        }\n        return interspersed;", "        List<long>\
    \ result = new List<long>();\n        if (numbers.Count > 0) {\n            result.Add(numbers[0]);\n\
    \            for (int i = 1; i < numbers.Count; i++) {\n                result.Add(delimeter);\n\
    \                result.Add(numbers[i]);\n            }\n        }\n        return\
    \ result;", '        return numbers.Where((x, i) => i % 2 == 0).SelectMany(x =>
    new List<long>() { x, delimeter }).ToList();', "        List<long> result = new\
    \ List<long>();\n        for (int i = 0; i < numbers.Count; i++) {\n         \
    \   result.Add(numbers[i]);\n            if (i < numbers.Count - 1) {\n      \
    \          result.Add(delimeter);\n            }\n        }\n        return result;",
  "        List<long> res = new List<long>();\n        int i = 0;\n        for (;\
    \ i < numbers.Count - 1; i++) {\n            res.Add(numbers[i]);\n          \
    \  res.Add(delimeter);\n        }\n        res.Add(numbers[i]);\n        return\
    \ res;", "        List<long> result = new List<long>();\n        if (numbers.Count\
    \ > 0) {\n            result.Add(numbers[0]);\n            for (int i = 1; i <\
    \ numbers.Count; i++) {\n                result.Add(delimeter);\n            \
    \    result.Add(numbers[i]);\n            }\n        }\n        return result;",
  "        List<long> ret = new List<long>();\n        long n = numbers.Count;\n \
    \       if (n == 0) return ret;\n        ret.Add(numbers[0]);\n        for (int\
    \ i = 1; i < n; i++) {\n            ret.Add(delimeter);\n            ret.Add(numbers[i]);\n\
    \        }\n        return ret;", "        if (numbers.Count == 0) {\n       \
    \     return numbers;\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < numbers.Count - 1; i++) {\n            result.Add(numbers[i]);\n\
    \            result.Add(delimeter);\n        }\n        result.Add(numbers[numbers.Count\
    \ - 1]);\n        return result;", "        List<long> interspersed = new List<long>();\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            interspersed.Add(numbers[i]);\n\
    \            if (i < numbers.Count - 1) {\n                interspersed.Add(delimeter);\n\
    \            }\n        }\n        return interspersed;", "        var newNumbers\
    \ = new List<long>();\n        if (numbers.Count == 0) {\n            return newNumbers;\n\
    \        }\n        newNumbers.Add(numbers[0]);\n        for (int i = 1; i < numbers.Count;\
    \ i++) {\n            newNumbers.Add(delimeter);\n            newNumbers.Add(numbers[i]);\n\
    \        }\n        return newNumbers;", "        List<long> interspersed = new\
    \ List<long>();\n        for (int i = 0; i < numbers.Count; i++) {\n         \
    \   interspersed.Add(numbers[i]);\n            if (i < numbers.Count - 1) {\n\
    \                interspersed.Add(delimeter);\n            }\n        }\n    \
    \    return interspersed;", "        List<long> ret = new List<long>();\n    \
    \    if (numbers.Count == 0) return ret;\n        for (int i = 0; i < numbers.Count\
    \ - 1; i++) {\n            ret.Add(numbers[i]);\n            ret.Add(delimeter);\n\
    \        }\n        ret.Add(numbers[numbers.Count - 1]);\n        return ret;",
  "        List<long> l = new List<long>();\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            l.Add(numbers[i]);\n            if (i != numbers.Count -\
    \ 1) {\n                l.Add(delimeter);\n            }\n        }\n        return\
    \ l;", "        List<long> interspersed = new List<long>();\n        if (numbers.Count\
    \ == 0) {\n            return interspersed;\n        }\n        interspersed.Add(numbers[0]);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            interspersed.Add(delimeter);\n\
    \            interspersed.Add(numbers[i]);\n        }\n        return interspersed;",
  "        List<long> result = new List<long>();\n        int i = 0;\n        while\
    \ (i < numbers.Count) {\n            result.Add(numbers[i]);\n            if (i\
    \ != numbers.Count - 1)\n                result.Add(delimeter);\n            i++;\n\
    \        }\n        return result;", "        List<long> res = new List<long>();\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            res.Add(numbers[i]);\n\
    \            if (i != numbers.Count - 1) {\n                res.Add(delimeter);\n\
    \            }\n        }\n        return res;"]
stop_tokens:
- "\n    }\n"
