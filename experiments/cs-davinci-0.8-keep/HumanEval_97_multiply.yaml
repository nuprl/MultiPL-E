name: HumanEval_97_multiply
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Complete the function that takes two integers and returns \n\
  \    // the product of their unit digits.\n    // Assume the input is always valid.\n\
  \    // Examples:\n    // multiply(148, 412) should return 16.\n    // multiply(19,\
  \ 28) should return 72.\n    // multiply(2020, 1851) should return 0.\n    // multiply(14,-15)\
  \ should return 20.\n    public static long Multiply(long a, long b) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Multiply((148L),\
  \ (412L)) == (16L));\n    Debug.Assert(Multiply((19L), (28L)) == (72L));\n    Debug.Assert(Multiply((2020L),\
  \ (1851L)) == (0L));\n    Debug.Assert(Multiply((14L), (-15L)) == (20L));\n    Debug.Assert(Multiply((76L),\
  \ (67L)) == (42L));\n    Debug.Assert(Multiply((17L), (27L)) == (49L));\n    Debug.Assert(Multiply((0L),\
  \ (1L)) == (0L));\n    Debug.Assert(Multiply((0L), (0L)) == (0L));\n    }\n\n}\n"
completions: ["        long aUnit = a % 10;\n        long bUnit = b % 10;\n      \
    \  return aUnit * bUnit;", '        return new long[] { a, b }.Select(n => Math.Abs(n)
    % 10).Aggregate((n1, n2) => n1 * n2);', '        return (a % 10) * (b % 10);',
  "        string aStr = Math.Abs(a).ToString();\n        string bStr = Math.Abs(b).ToString();\n\
    \        int aLast = aStr[aStr.Length - 1] - '0';\n        int bLast = bStr[bStr.Length\
    \ - 1] - '0';\n        return aLast * bLast;", '        return (a % 10) * (b %
    10);', "        var ab = a * b;\n        var unit = ab % 10;\n        return unit;",
  "        long unitA = a % 10;\n        long unitB = b % 10;\n        return unitA\
    \ * unitB;", "        long b_digit = b % 10;\n        long a_digit = a % 10;\n\
    \        if (b_digit < 0) {\n            b_digit = b_digit + 10;\n        }\n\
    \        if (a_digit < 0) {\n            a_digit = a_digit + 10;\n        }\n\
    \        return b_digit * a_digit;", '        return (a % 10) * (b % 10);', '        return
    Math.Abs(a % 10) * Math.Abs(b % 10);', "        var a_abs = Math.Abs(a);\n   \
    \     var b_abs = Math.Abs(b);\n        var result = (a_abs % 10) * (b_abs % 10);\n\
    \        return result;", '        return Math.Abs(a%10) * Math.Abs(b%10);', '        return
    (Math.Abs(a) % 10) * (Math.Abs(b) % 10);', '        return (a % 10) * (b % 10);',
  '        return Math.Abs(a % 10) * Math.Abs(b % 10);', '        return (Math.Abs(a
    % 10) * Math.Abs(b % 10));', '        return (long)(Math.Abs(a%10) * Math.Abs(b%10));',
  "        if (a == 0 || b == 0) return 0;\n        return Math.Abs(a % 10) * Math.Abs(b\
    \ % 10);", "        // Am I supposed to use the product of their unit digits\n\
    \        // or the sum of their unit digits?\n        return (a%10) * (b%10);",
  "        long r1 = a % 10;\n        long r2 = b % 10;\n        long r = r1 * r2;\n\
    \        return r;"]
stop_tokens:
- "\n    }\n"
