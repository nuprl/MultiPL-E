language: cs
name: HumanEval_85_add
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        return lst.Where((el, i)\
    \ => i % 2 == 1 && el % 2 == 0).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))\
    \ == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,\
    \ (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)4L, (long)6L,\
    \ (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        // Write your code here\n\
    \        long result = 0;\n        for (int i = 0; i < lst.Count; i++) {\n   \
    \         if (i % 2 == 1 && lst[i] % 2 == 0) {\n                result += lst[i];\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)4L, (long)6L,\
    \ (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        if (lst.Count == 0) {\n\
    \            return 0;\n        }\n        long sum = 0;\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n\
    \                sum += lst[i];\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        // your code here\n   \
    \     var result = lst.Select((v, i) => i % 2 == 1 && v % 2 == 0 ? v : 0).Sum();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        long res = 0;\n       \
    \ for (int i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 == 0) {\n\
    \                res += lst[i];\n            }\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14178f99a78b4fce9ee8d9a55b94bd55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14178f99a78b4fce9ee8d9a55b94bd55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        long sum = 0;\n       \
    \ for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i]\
    \ % 2 == 0) {\n                sum += lst[i];\n            }\n        }\n    \
    \    return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        // your code here\n   \
    \     long sum = 0;\n        int index = 1;\n        foreach (long element in\
    \ lst) {\n            if (element % 2 == 0 && index % 2 != 0) {\n            \
    \    sum += element;\n            }\n            index++;\n        }\n       \
    \ return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4b6581568384b8e94a16951149d9c1e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4b6581568384b8e94a16951149d9c1e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        long sum = 0;\n       \
    \ for (int i = 0; i < lst.Count; i += 2) {\n            sum += lst[i];\n     \
    \   }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==\
    \ (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,\
    \ (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)4L, (long)6L,\
    \ (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca76e795fc844b46aa114cbec3925dec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca76e795fc844b46aa114cbec3925dec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        long ret = 0;\n       \
    \ for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i]\
    \ % 2 == 0) {\n                ret += lst[i];\n            }\n        }\n    \
    \    return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        long sum = 0;\n       \
    \ for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i]\
    \ % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        long result = 0;\n    \
    \    for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i]\
    \ % 2 == 0)\n                result += lst[i];\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824266
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        int res = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2\
    \ == 0) {\n                res += lst[i];\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnohhuh_i.cs(16,17): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824266
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        return lst.Where((x, i)\
    \ => i % 2 == 1 && x % 2 == 0).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))\
    \ == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,\
    \ (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)4L, (long)6L,\
    \ (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        return lst.Where((number,\
    \ index) => index % 2 == 1 && number % 2 == 0).Sum();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)88L}))) == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)5L, (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)4L, (long)6L,\
    \ (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        return lst.Where((x, i)\
    \ => i % 2 == 1 && x % 2 == 0).Sum();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L})))\
    \ == (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,\
    \ (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)4L, (long)6L,\
    \ (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        // Because we want to ignore\
    \ the first element, we start from 1\n        // We continue until \"i < lst.Count\"\
    \ because we are interested in finding the last index\n        // We use i+2 because\
    \ that gives us the index at an odd index. \n        long sum = 0;\n        for\
    \ (int i = 1; i < lst.Count; i+=2) {\n            // Since we know that the index\
    \ is at an odd number, we can only care about even numbers.\n            if (lst[i]\
    \ % 2 == 0) {\n                sum += lst[i];\n            }\n        }\n    \
    \    return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        long sum = 0;\n       \
    \ for (long i = 0; i < lst.Count; i += 2) {\n            sum += lst[(int)i];\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) ==\
    \ (88L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L,\
    \ (long)6L, (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)4L, (long)6L,\
    \ (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95314977149646568e424b41566f8a39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95314977149646568e424b41566f8a39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        long sum = 0;\n       \
    \ for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i]\
    \ % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        long sum = 0;\n       \
    \ for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i]\
    \ % 2 == 0)\n                sum += lst[i];\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824267
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // add([4, 2, 6, 7]) ==> 2\n\
    \    public static long Add(List<long> lst) {\n        long sum = 0;\n       \
    \ for (int i = 0; i < lst.Count; i += 2) {\n            if (lst[i] % 2 == 0) {\n\
    \                sum += lst[i];\n            }\n        }\n        return sum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89fa00c1c1e2400d933163fb6c1f2e93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <89fa00c1c1e2400d933163fb6c1f2e93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824267
