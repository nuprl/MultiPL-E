name: HumanEval_3_below_zero
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You're given a list of deposit and withdrawal operations on\
  \ a bank account that starts with\n    // zero balance. Your task is to detect if\
  \ at any point the balance of account fallls below zero, and\n    // at that point\
  \ function should return True. Otherwise it should return False.\n    // >>> below_zero([1,\
  \ 2, 3])\n    // False\n    // >>> below_zero([1, 2, -4, 5])\n    // True\n    public\
  \ static bool BelowZero(List<long> operations) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
  \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==\
  \ (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,\
  \ (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n\
  \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,\
  \ (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new\
  \ List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
  \ (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
completions: ["        long currentBalance = 0;\n        foreach (long x in operations)\
    \ {\n            currentBalance += x;\n            if (currentBalance < 0) {\n\
    \                return true;\n            }\n        }\n        return false;",
  "        long balance = 0;\n        foreach (long operation in operations) {\n \
    \           balance += operation;\n            if (balance < 0) {\n          \
    \      return true;\n            }\n        }\n        return false;", "     \
    \   long balance = 0;\n        foreach (long i in operations) {\n            balance\
    \ += i;\n            if (balance < 0) {\n                return true;\n      \
    \      }\n        }\n        return false;", "        long sum = 0;\n        foreach\
    \ (long n in operations) {\n            sum += n;\n            if (sum < 0) {\n\
    \                return true;\n            }\n        }\n        return false;",
  "        long balance = 0;\n        foreach (long op in operations) {\n        \
    \    balance += op;\n            if (balance < 0) {\n                return true;\n\
    \            }\n        }\n        return false;", "        long balance = 0;\n\
    \        foreach (var op in operations) {\n            balance += op;\n      \
    \      if (balance < 0) {\n                return true;\n            }\n     \
    \   }\n        return false;", "        // Write your code here\n        return\
    \ false;", "        long balance = 0;\n        for (int i = 0; i < operations.Count;\
    \ i++) {\n            balance += operations[i];\n            if (balance < 0)\
    \ {\n                return true;\n            }\n        }\n        return false;",
  "        var sum = 0;\n        foreach (var operation in operations) {\n       \
    \     sum += operation;\n            if (sum < 0) {\n                return true;\n\
    \            }\n        }\n        return false;", "        int start = 0;\n \
    \       long end = 0;\n        if (operations[0] < 0) {\n            return true;\n\
    \        }\n        for (int i = 0; i < operations.Count; i++) {\n           \
    \ start += operations[i];\n            for (int j = i + 1; j < operations.Count;\
    \ j++) {\n                end += operations[j];\n            }\n            if\
    \ (start + end < 0) {\n                return true;\n            }\n         \
    \   end = 0;\n        }\n        return false;", "        long current = 0;\n\
    \        int lower = 0;\n        foreach (long i in operations) {\n          \
    \  current += i;\n            if (current < lower) {\n                return true;\n\
    \            }\n        }\n        return false;", "        long tmp = 0;\n  \
    \      foreach (long op in operations) {\n            tmp += op;\n           \
    \ if (tmp < 0) {\n                return true;\n            }\n        }\n   \
    \     return false;", "        long balance = 0;\n        foreach (var operation\
    \ in operations) {\n            balance += operation;\n            if (balance\
    \ < 0)\n                return true;\n        }\n        return false;", "   \
    \     long currentSum = 0;\n        foreach (var i in operations) {\n        \
    \    currentSum += i;\n            if (currentSum < 0) {\n                return\
    \ true;\n            }\n        }\n        return false;", "        long initialBalance\
    \ = 0;\n        for (long i = 0; i < operations.Count; i++) {\n            initialBalance\
    \ += operations[i];\n            if (initialBalance < 0) {\n                return\
    \ true;\n            }\n        }\n        return false;", "        long balance\
    \ = 0;\n        foreach (long operation in operations) {\n            balance\
    \ += operation;\n            if (balance < 0) return true;\n        }\n      \
    \  return false;", "        // your code goes here\n        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            balance += operation;\n\
    \            if (balance < 0) {\n                return true;\n            }\n\
    \        }\n        return false;", '        return operations.Sum() < 0;', " \
    \       if (operations.Count == 0) {\n            return false;\n        }\n \
    \       long balance = 0;\n        foreach (long operation in operations) {\n\
    \            balance += operation;\n            if (balance < 0) {\n         \
    \       return true;\n            }\n        }\n        return false;", "    \
    \    long current = 0;\n        foreach (long value in operations) {\n       \
    \     current += value;\n            if (current < 0) {\n                return\
    \ true;\n            }\n        }\n        return false;"]
stop_tokens:
- "\n    }\n"
