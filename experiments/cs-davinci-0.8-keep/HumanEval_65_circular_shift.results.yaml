language: cs
name: HumanEval_65_circular_shift
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        List<char> digits\
    \ = new List<char>();\n        // Permute the digits of the number x.\n      \
    \  for (int i = 0; i < shift; i++) {\n            digits.Add((char)((x % 10) +\
    \ '0'));\n            x /= 10;\n        }\n        for (; x > 0; x /= 10) {\n\
    \            digits.Insert(0, (char)((x % 10) + '0'));\n        }\n        //\
    \ Convert the list of digits to a string and return it.\n        return new string(digits.ToArray());\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e91610ac24b48c9ba7c402e4bb705fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e91610ac24b48c9ba7c402e4bb705fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        var num = x.ToString();\n\
    \        if (shift > num.Length) {\n            char[] charArray = num.ToCharArray();\n\
    \            Array.Reverse(charArray);\n            return new string(charArray);\n\
    \        }\n        return num.Substring(num.Length - (int)shift) + num.Substring(0,\
    \ num.Length - (int)shift);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        string result = \"\
    \";\n        foreach (int digit in x.ToString())\n            result = digit +\
    \ result;\n        if (shift > result.Length)\n            return result;\n  \
    \      else\n            return result.Substring((int)shift) + result.Substring(0,\
    \ (int)shift);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e7f16f14006494b920ee867c1e7e068>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e7f16f14006494b920ee867c1e7e068>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824146
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        if (shift == 0) return\
    \ x.ToString();\n        long digits = 1;\n        long magnitude = 1;\n     \
    \   while (x > magnitude) {\n            digits++;\n            magnitude *= 10;\n\
    \        }\n        if (shift > digits) {\n            long y = 0;\n         \
    \   for (long i = 0; i < digits; i++) {\n                y = y * 10 + x % 10;\n\
    \                x /= 10;\n            }\n            return y.ToString();\n \
    \       }\n        long y = 0;\n        for (long i = 0; i < digits; i++) {\n\
    \            y = y * 10 + x % 10;\n            x /= 10;\n        }\n        for\
    \ (long i = 0; i < shift; i++) {\n            y /= 10;\n        }\n        return\
    \ y.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgenjnxv1.cs(25,18): error CS0136: A local or parameter named ''y'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        char[] digits = x.ToString().ToCharArray();\n\
    \        Array.Reverse(digits);\n        shift = shift % digits.Length;\n    \
    \    if (shift > 0) {\n            char[] new_digits = new char[digits.Length];\n\
    \            for (int i = 0; i < digits.Length; i++) {\n                new_digits[i]\
    \ = digits[(i + shift) % digits.Length];\n            }\n            digits =\
    \ new_digits;\n        }\n        Array.Reverse(digits);\n        return new string(digits);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51823dd9fb774494b7716f4d6c76da2a>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        int n = CountDigits(x);\n\
    \        shift = shift % n;\n        if (shift == 0) {\n            return x.ToString();\n\
    \        }\n        return (x / (long)Math.Pow(10, shift)).ToString() + (x % (long)Math.Pow(10,\
    \ shift)).ToString();\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwh0miv27.cs(17,17): error CS0103: The name ''CountDigits'' does not exist
    in the current context

    '
  timestamp: 1659824145
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        string xStr = x.ToString();\n\
    \        string reverseStr = new string(xStr.Reverse().ToArray());\n        return\
    \ shift >= xStr.Length ? reverseStr : xStr.Substring(shift) + xStr.Substring(0,\
    \ shift);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeomnh8po.cs(19,67): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpeomnh8po.cs(19,94): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        if (shift == 0) {\n\
    \            return x.ToString();\n        }\n        var numDigits = (int)Math.Floor(Math.Log10(x))\
    \ + 1;\n        if (shift >= numDigits) {\n            return new string(x.ToString().Reverse().ToArray());\n\
    \        }\n        var arr = x.ToString().ToCharArray();\n        var i = 0;\n\
    \        while (i < shift) {\n            var temp = arr[0];\n            for\
    \ (var j = 0; j < numDigits - 1; j++) {\n                arr[j] = arr[j + 1];\n\
    \            }\n            arr[numDigits - 1] = temp;\n            i++;\n   \
    \     }\n        return new string(arr);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eae32f0966f1453195466d24bcfaf5cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eae32f0966f1453195466d24bcfaf5cf>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        string s = x.ToString();\n\
    \        if (shift > s.Length) {\n            return new string(s.Reverse().ToArray());\n\
    \        }\n        return s.Substring(shift) + s.Substring(0, shift);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz6sg2zq1.cs(21,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpz6sg2zq1.cs(21,52): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        string x_str = x.ToString();\n\
    \        if (shift > x_str.Length) {\n            return new string(x_str.Reverse().ToArray());\n\
    \        }\n        string suffix = x_str.Substring(0, (int)shift);\n        string\
    \ prefix = x_str.Substring((int)shift);\n        return prefix + suffix;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a93f6ef0211c425ea67168a182b3ac7a>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        if (shift == 0) {\n\
    \            return x.ToString();\n        }\n        string digits = x.ToString();\n\
    \        if (shift > digits.Length) {\n            return Reverse(digits);\n \
    \       }\n        return digits.Substring((int)shift) + digits.Substring(0, (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv2fkq3z7.cs(22,20): error CS0103: The name ''Reverse'' does not exist
    in the current context

    '
  timestamp: 1659824145
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        if (shift > x.ToString().Length)\n\
    \            return new string(x.ToString().Reverse().ToArray());\n        return\
    \ x.ToString().Substring((int)shift) + x.ToString().Substring(0, (int)shift);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ada9e075f3f47d7b3ba0f71b3e1afdc>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        char[] arr = x.ToString().ToCharArray();\n\
    \        for (int i = 0; i < shift; i++) {\n            char tmp = arr[arr.Length\
    \ - 1];\n            for (int j = arr.Length - 1; j > 0; j--) {\n            \
    \    arr[j] = arr[j - 1];\n            }\n            arr[0] = tmp;\n        }\n\
    \        return new string(arr);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n\
    \    Debug.Assert(CircularShift((12L), (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L),\
    \ (8L)).Equals((\"79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"\
    21\")));\n    Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2f4e457e6d34f72b078d3b565ec1bbb>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        List<int> num = new\
    \ List<int>();\n        string xs = x.ToString();\n        for (int i = 0; i <\
    \ xs.Length; i++) {\n            num.Add(xs[i] - '0');\n        }\n        while\
    \ (shift > 0) {\n            int last = num[num.Count - 1];\n            num.RemoveAt(num.Count\
    \ - 1);\n            num.Insert(0, last);\n            shift--;\n        }\n \
    \       string result = \"\";\n        for (int i = 0; i < num.Count; i++) {\n\
    \            result += num[i];\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d01cd15ceadc403c99555dd762b71c8a>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        var s = x.ToString();\n\
    \        var n = s.Length;\n        if (shift >= n) {\n            return String.Join(\"\
    \", s.Reverse());\n        }\n        return s.Substring(n - (int)shift) + s.Substring(0,\
    \ n - (int)shift);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b95c726977f4de995c205c27411c17c>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        var digits = x.ToString().ToCharArray();\n\
    \        // No shifting necessary\n        if (shift >= digits.Length)\n     \
    \       return new string(digits.Reverse().ToArray());\n        var prefix = digits.Skip((int)shift).ToArray();\n\
    \        var suffix = digits.Take((int)shift).ToArray();\n        return new string(prefix)\
    \ + new string(suffix);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CircularShift((100L), (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L),\
    \ (2L)).Equals((\"12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"\
    79\")));\n    Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n   \
    \ Debug.Assert(CircularShift((11L), (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e03d8b82ef924c4d85f8b6a2e9a18101>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e03d8b82ef924c4d85f8b6a2e9a18101>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        // Extract the number\
    \ of digits from x\n        string s = x.ToString();\n        long len = s.Length;\n\
    \        if (shift >= len)\n            return new string(s.Reverse().ToArray());\n\
    \        return s.Substring((int)shift) + s.Substring(0, (int)shift);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3000474a6b214538840f6bd0d6d1d702>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3000474a6b214538840f6bd0d6d1d702>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        char[] digits = x.ToString().ToCharArray();\n\
    \        if (shift > digits.Length) {\n            Array.Reverse(digits);\n  \
    \          return new string(digits);\n        } else {\n            // Shift\
    \ the digits to the right\n            Array.Reverse(digits);\n            char[]\
    \ shifted = new char[digits.Length];\n            for (int i = 0; i < digits.Length;\
    \ i++) {\n                shifted[(i + shift) % digits.Length] = digits[i];\n\
    \            }\n            Array.Reverse(shifted);\n            return new string(shifted);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c444afd079fb47f3b8a58cdafe527fb1>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        string s = x.ToString();\n\
    \        string c = s.Substring((int)shift);\n        c += s.Substring(0, (int)shift);\n\
    \        return c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7095af0003824a6b957a114ce108207b>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: startIndex cannot be larger than length of\
    \ string.\nParameter name: startIndex\n  at System.String.Substring (System.Int32\
    \ startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00009]\
    \ in <7095af0003824a6b957a114ce108207b>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <7095af0003824a6b957a114ce108207b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: startIndex cannot be larger than\
    \ length of string.\nParameter name: startIndex\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.String.Substring (System.Int32 startIndex) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.CircularShift (System.Int64 x, System.Int64 shift) [0x00009]\
    \ in <7095af0003824a6b957a114ce108207b>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00035] in <7095af0003824a6b957a114ce108207b>:0 \n"
  stdout: ''
  timestamp: 1659824146
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circular_shift(12,\
    \ 1)\n    // \"21\"\n    // >>> circular_shift(12, 2)\n    // \"12\"\n    public\
    \ static string CircularShift(long x, long shift) {\n        return x.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CircularShift((100L),\
    \ (2L)).Equals((\"001\")));\n    Debug.Assert(CircularShift((12L), (2L)).Equals((\"\
    12\")));\n    Debug.Assert(CircularShift((97L), (8L)).Equals((\"79\")));\n   \
    \ Debug.Assert(CircularShift((12L), (1L)).Equals((\"21\")));\n    Debug.Assert(CircularShift((11L),\
    \ (101L)).Equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b8b239d7fe419782092044fec57dc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b8b239d7fe419782092044fec57dc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824146
