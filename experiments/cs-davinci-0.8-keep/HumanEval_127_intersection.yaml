name: HumanEval_127_intersection
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given two intervals,\n    // where each interval is\
  \ a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The\
  \ given intervals are closed which means that the interval (start, end)\n    //\
  \ includes both start and end.\n    // For each given interval, it is assumed that\
  \ its start is less or equal its end.\n    // Your task is to determine whether\
  \ the length of intersection of these two \n    // intervals is a prime number.\n\
  \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  \
  \  // which its length is 1, which not a prime number.\n    // If the length of\
  \ the intersection is a prime number, return \"YES\",\n    // otherwise, return\
  \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output]\
  \ samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n    // intersection((-1,\
  \ 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1), (-5, 5)) ==> \"YES\"\n \
  \   public static string Intersection(Tuple<long, long> interval1, Tuple<long, long>\
  \ interval2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(2L, 3L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-1L,\
  \ 1L)), (Tuple.Create(0L, 4L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-3L,\
  \ -1L)), (Tuple.Create(-5L, 5L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ 2L)), (Tuple.Create(-4L, 0L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-11L,\
  \ 2L)), (Tuple.Create(-1L, -1L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(3L, 5L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(1L, 2L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ -2L)), (Tuple.Create(-3L, -2L))).Equals((\"NO\")));\n    }\n\n}\n"
completions: ["        var start = Math.Max(interval1.Item1, interval2.Item1);\n \
    \       var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        var p = BigInteger.Parse(start.ToString());\n\
    \        var q = BigInteger.Parse(end.ToString());\n        return IsPrime(q -\
    \ p + 1) ? \"YES\" : \"NO\";", "        // Your code here!\n        long start1\
    \ = interval1.Item1;\n        long end1 = interval1.Item2;\n        long start2\
    \ = interval2.Item1;\n        long end2 = interval2.Item2;\n        long maxStart\
    \ = Math.Max(start1, start2);\n        long minEnd = Math.Min(end1, end2);\n \
    \       if (maxStart <= minEnd) {\n            long length = minEnd - maxStart\
    \ + 1;\n            if (length <= 1) {\n                return \"NO\";\n     \
    \       }\n            if (length == 2) {\n                return \"YES\";\n \
    \           }\n            if (length % 2 == 0) {\n                return \"NO\"\
    ;\n            }\n            for (long i = 3; i * i <= length; i += 2) {\n  \
    \              if (length % i == 0) {\n                    return \"NO\";\n  \
    \              }\n            }\n            return \"YES\";\n        }\n    \
    \    return \"NO\";", "        // Solution is here!\n        var intersectLength\
    \ = Math.Max(interval1.Item1, interval2.Item1) - Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (intersectLength < 1) {\n            return \"NO\";\n        }\n \
    \       for (int i = 2; i < intersectLength; i++) {\n            if (intersectLength\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";", "        var intersection = Tuple.Create(\n           \
    \ Math.Max(interval1.Item1, interval2.Item1),\n            Math.Min(interval1.Item2,\
    \ interval2.Item2)\n        );\n        return (intersection.Item1 <= intersection.Item2\n\
    \            && IsPrime(intersection.Item2 - intersection.Item1 + 1)) ? \"YES\"\
    \ : \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return PrimeAlgorithm.IsPrimeNumber(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // Interval1 is (1, 5), interval2\
    \ is (2, 3)\n        // Interval1 is (1, 5), interval2 is (4, 8)\n        // Interval1\
    \ is (1, 5), interval2 is (6, 8)\n        // Interval1 is (2, 3), interval2 is\
    \ (1, 5)\n        // Interval1 is (4, 8), interval2 is (1, 5)\n        // Interval1\
    \ is (6, 8), interval2 is (1, 5)\n        long lowest = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long highest = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (lowest > highest) {\n            return \"NO\";\n        }\n    \
    \    long length = highest - lowest + 1;\n        if (IsPrime(length)) {\n   \
    \         return \"YES\";\n        }\n        return \"NO\";", "        // Determine\
    \ if the intersection of the two intervals is prime\n        // Your code here\n\
    \        return \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start + 1;\n        if (length <= 0) {\n            return \"\
    NO\";\n        }\n        if (IsPrime(length)) {\n            return \"YES\";\n\
    \        }\n        return \"NO\";", "        // write your code here\n      \
    \  if (interval1.Item1 > interval2.Item2 || interval2.Item1 > interval1.Item2)\n\
    \            return \"NO\";\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        return\
    \ (end - start + 1).IsPrime() ? \"YES\" : \"NO\";", "        BigInteger prime\
    \ = BigInteger.Pow(2, 127) - 1; // Mersenne prime\n        BigInteger a = interval1.Item1;\n\
    \        BigInteger b = interval1.Item2;\n        BigInteger c = interval2.Item1;\n\
    \        BigInteger d = interval2.Item2;\n        BigInteger len = (b < c || d\
    \ < a) ? 0 : (b < d ? b : d) - (a < c ? c : a);\n        return (!len.IsProbablePrime(64))\
    \ ? \"NO\" : \"YES\";", "        // TODO: Fix this mess of a method\n        var\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        var end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        if (start == end) {\n            return \"YES\";\n       \
    \ }\n        for (var i = 2; i < end; i++) {\n            if (start % i == 0 &&\
    \ end % i == 0) {\n                return \"NO\";\n            }\n        }\n\
    \        return \"YES\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        var length = end - start + 1;\n        return\
    \ IsPrime(length) ? \"YES\" : \"NO\";", "        if (interval1.Item1 >= interval2.Item2\
    \ || interval2.Item1 >= interval1.Item2) {\n            return \"NO\";\n     \
    \   }\n        return IsPrime(Math.Abs(interval1.Item1 - interval2.Item1) + 1)\
    \ ? \"YES\" : \"NO\";", "        // determine which interval is longer/smaller\n\
    \        // interval1 is smaller\n        var start = interval1.Item1 < interval2.Item1\
    \ ? interval2.Item1 : interval1.Item1;\n        var end = interval1.Item2 < interval2.Item2\
    \ ? interval1.Item2 : interval2.Item2;\n        if (start >= end) {\n        \
    \    return \"NO\";\n        }\n        // interval1 is bigger\n        var start2\
    \ = interval1.Item1 < interval2.Item1 ? interval1.Item1 : interval2.Item1;\n \
    \       var end2 = interval1.Item2 < interval2.Item2 ? interval2.Item2 : interval1.Item2;\n\
    \        var diff = end2 - start2;\n        if (diff < 0) {\n            return\
    \ \"NO\";\n        }\n        for (long i = 2; i < diff; i++) {\n            if\
    \ (diff % i == 0) {\n                return \"NO\";\n            }\n        }\n\
    \        return \"YES\";", "        var intersection = new Tuple<long, long>(\n\
    \            Math.Max(interval1.Item1, interval2.Item1),\n            Math.Min(interval1.Item2,\
    \ interval2.Item2)\n        );\n        var length = intersection.Item2 - intersection.Item1\
    \ + 1;\n        if (length <= 0) {\n            return \"NO\";\n        }\n  \
    \      if (length == 1) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"NO\";\n        }\n        var stop = (long)Math.Sqrt(length);\n\
    \        for (long i = 2; i <= stop; i++) {\n            if (length % i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";", "        //int a = Math.Min(interval1.Item1, interval2.Item1);\n\
    \        //int b = Math.Max(interval1.Item2, interval2.Item2);\n        //int\
    \ c = Math.Min(interval1.Item2, interval2.Item2);\n        //int d = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        //int x = Math.Min(b, c) - Math.Max(a, d);\n    \
    \    //if (x <= 0)\n        //    return \"NO\";\n        //return IsPrime(x)\
    \ ? \"YES\" : \"NO\";\n        if (interval1.Item1 > interval2.Item2 || interval2.Item1\
    \ > interval1.Item2)\n            return \"NO\";\n        long min = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long max = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        return IsPrime(max - min + 1) ? \"YES\" : \"NO\";", "        long start\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start + 1;\n        if (length\
    \ < 0)\n            return \"NO\";\n        else\n            return IsPrime(length)\
    \ ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        var len\
    \ = end - start + 1;\n        if (len < 0) {\n            return \"NO\";\n   \
    \     }\n        if (IsPrime(len)) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";", "        long min = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long max = Math.Min(interval1.Item2, interval2.Item2);\n        if (min\
    \ > max) {\n            return \"NO\";\n        }\n        BigInteger length =\
    \ max - min + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "     \
    \   long a = interval1.Item1;\n        long b = interval1.Item2;\n        long\
    \ c = interval2.Item1;\n        long d = interval2.Item2;\n        long start\
    \ = Math.Max(a, c);\n        long end = Math.Min(b, d);\n        if (start > end)\
    \ return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";"]
stop_tokens:
- "\n    }\n"
