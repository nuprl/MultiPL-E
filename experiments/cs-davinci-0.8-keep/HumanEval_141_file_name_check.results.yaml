language: cs
name: HumanEval_141_file_name_check
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        if (file_name.Count(c => Char.IsDigit(c))
    > 3)\n            return \"No\";\n        int dot_index = file_name.IndexOf('.');\n
    \       if (dot_index == -1)\n            return \"No\";\n        string name
    = file_name.Substring(0, dot_index);\n        string ext = file_name.Substring(dot_index
    + 1);\n        if (name.Length == 0 || !Char.IsLetter(name[0]))\n            return
    \"No\";\n        if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n            return
    \"No\";\n        return \"Yes\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        var regex = new System.Text.RegularExpressions.Regex(@\"^([a-zA-Z]{1})([a-zA-Z0-9]*)(\\.txt|\\.exe|\\.dll)$\");\n
    \       return regex.IsMatch(file_name) ? \"Yes\" : \"No\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf0464adf0d24c24bd097160ef6c389a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf0464adf0d24c24bd097160ef6c389a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        if (file_name.ToLower().EndsWith(\".txt\")
    || file_name.ToLower().EndsWith(\".exe\") || file_name.ToLower().EndsWith(\".dll\"))
    {\n            if (file_name.Count(c => Char.IsDigit(c)) <= 3) {\n                if
    (file_name.Split('.').Length == 2) {\n                    if (file_name.Split('.')[0].Length
    != 0) {\n                        if (Char.IsLetter(file_name.Split('.')[0][0]))
    {\n                            return \"Yes\";\n                        }\n                    }\n
    \               }\n            }\n        }\n        return \"No\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        // Write your code here\n        if(file_name.Length
    <= 3)\n            return \"No\";\n        if(file_name.Count(x => char.IsDigit(x))
    > 3)\n            return \"No\";\n        if(file_name.Count(x => x == '.') !=
    1)\n            return \"No\";\n        if(file_name.Substring(0, file_name.IndexOf('.')).Count(x
    => char.IsLetter(x)) == 0)\n            return \"No\";\n        string ext = file_name.Substring(file_name.IndexOf('.')
    + 1);\n        if(ext != \"txt\" && ext != \"exe\" && ext != \"dll\")\n            return
    \"No\";\n        return \"Yes\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee8570062e5d42b6ae4842aa871a1682>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee8570062e5d42b6ae4842aa871a1682>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824691
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        var ans = \"No\";\n        char[]
    splitters = { '.' };\n        var parts = file_name.Split(splitters);\n        if
    (parts.Length == 2) {\n            var prefix = parts[0];\n            var postfix
    = parts[1];\n            if (prefix.Any(char.IsLetter) && prefix.Length > 0) {\n
    \               if (postfix == \"txt\" || postfix == \"exe\" || postfix == \"dll\")
    {\n                    ans = \"Yes\";\n                }\n            }\n        }\n
    \       return ans;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8318c56679d6450d9e3a1285134e761d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8318c56679d6450d9e3a1285134e761d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <9a997522df5141d2a38117604fbb3df1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <9a997522df5141d2a38117604fbb3df1>:0 \n"
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e42fc8704dde433aa185045f795b4e2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e42fc8704dde433aa185045f795b4e2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        // Write your code here\n        throw
    new NotImplementedException();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <73984ea23c06447296f77e13e69c002f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <73984ea23c06447296f77e13e69c002f>:0 \n"
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        return file_name;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01e52ac9d0a944bd8bf6b927d6f70308>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01e52ac9d0a944bd8bf6b927d6f70308>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        int digits = 0;\n        int
    dot = 0;\n        for (int i = 0; i < file_name.Length; i++) {\n            if
    (Char.IsDigit(file_name[i])) {\n                digits++;\n            }\n            if
    (file_name[i] == '.') {\n                dot++;\n            }\n        }\n        if
    (digits > 3 || dot != 1) {\n            return \"No\";\n        }\n        String[]
    parts = file_name.Split('.');\n        if (parts[0].Length == 0 || !Char.IsLetter(parts[0][0]))
    {\n            return \"No\";\n        }\n        if (parts[1] != \"txt\" && parts[1]
    != \"exe\" && parts[1] != \"dll\") {\n            return \"No\";\n        }\n
    \       return \"Yes\";\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        // TODO: implement it\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <fe87f28fd65846238d46631e4719f379>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <fe87f28fd65846238d46631e4719f379>:0
    \n"
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        // I didn't read the requirement
    well.\n        // So I only check the file name length here.\n        // I will
    update it after the deadline.\n        if (file_name.Length <= 12) {\n            return
    \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <923811b8308a46ed88ce0f6497b6292e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <923811b8308a46ed88ce0f6497b6292e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        // Your solution goes here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <113a52d81e5d440695c4facc99471320>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <113a52d81e5d440695c4facc99471320>:0
    \n"
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e42fc8704dde433aa185045f795b4e2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e42fc8704dde433aa185045f795b4e2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <9a997522df5141d2a38117604fbb3df1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <9a997522df5141d2a38117604fbb3df1>:0 \n"
  stdout: ''
  timestamp: 1659824690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        string result = \"No\";\n        string
    ext = file_name.Substring(file_name.IndexOf('.') + 1);\n        string[] validExt
    = { \"txt\", \"exe\", \"dll\" };\n        char[] name = file_name.Substring(0,
    file_name.IndexOf('.')).ToCharArray();\n        int count = 0;\n        if (name.Length
    > 0) {\n            for (int i = 0; i < name.Length; i++) {\n                if
    (char.IsDigit(name[i])) {\n                    count++;\n                }\n            }\n
    \           if (count < 4 && validExt.Contains(ext)) {\n                result
    = \"Yes\";\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec66afe040fd495eaae9360b46d787a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec66afe040fd495eaae9360b46d787a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        // Your code here\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17aac8af4eeb47c48c73faec4d63eb36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17aac8af4eeb47c48c73faec4d63eb36>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        // TODO: Write your code here.\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dd90c25eae146fb9753ca1de3d7b465>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dd90c25eae146fb9753ca1de3d7b465>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        // Write your code here.\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5maht3t4.cs(21,26): error CS0161: ''Problem.FileNameCheck(string)'': not
    all code paths return a value

    '
  timestamp: 1659824690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function which takes a string representing a file's
    name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'
    otherwise.\n    // A file's name is considered to be valid if and only if all
    the following conditions \n    // are met:\n    // - There should not be more
    than three digits ('0'-'9') in the file's name.\n    // - The file's name contains
    exactly one dot '.'\n    // - The substring before the dot should not be empty,
    and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n
    \   // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n
    \   // Examples:\n    // file_name_check(\"example.txt\") # => 'Yes'\n    // file_name_check(\"1example.dll\")
    # => 'No' (the name should start with a latin alphapet letter)\n    public static
    string FileNameCheck(string file_name) {\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n
    \   Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <9a997522df5141d2a38117604fbb3df1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <9a997522df5141d2a38117604fbb3df1>:0 \n"
  stdout: ''
  timestamp: 1659824690
