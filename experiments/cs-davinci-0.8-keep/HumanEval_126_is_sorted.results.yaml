language: cs
name: HumanEval_126_is_sorted
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        return lst.Zip(lst.Skip(1), (a,
    b) => a < b).All(x => x);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <09a6be941ab842b890a411b716b14bdd>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        if (lst.Count == 1) {\n            return
    true;\n        }\n        long last = lst[0];\n        Dictionary<long, long>
    distincts = new Dictionary<long, long>();\n        distincts.Add(last, 1);\n        for
    (int i = 1; i < lst.Count; i++) {\n            long curr = lst[i];\n            if
    (curr >= last) {\n                if (distincts.ContainsKey(curr)) {\n                    distincts[curr]
    += 1;\n                    if (distincts[curr] > 1) {\n                        return
    false;\n                    }\n                } else {\n                    distincts.Add(curr,
    1);\n                }\n                last = curr;\n            } else {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00016] in <b542e834c8f0487eb9b3db402d5f0e48>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <b542e834c8f0487eb9b3db402d5f0e48>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00016] in <b542e834c8f0487eb9b3db402d5f0e48>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <b542e834c8f0487eb9b3db402d5f0e48>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        long last = 0;\n        int count
    = 0;\n        foreach (long i in lst) {\n            if (count > 0 && i <= last)
    {\n                return false;\n            }\n            last = i;\n            count++;\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d315a31f0a0c45d5bebfd615e5ed21ff>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        for (long i = 0; i < lst.Count
    - 1; i++) {\n            if (lst[(int)i] >= lst[(int)i + 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9386bf23248f4f249a62a2f7a82e7dff>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        HashSet<long> hs = new HashSet<long>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (hs.Contains(lst[i]))
    {\n                return false;\n            }\n            hs.Add(lst[i]);\n
    \       }\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i]
    > lst[i + 1]) {\n                return false;\n            }\n        }\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d85f541ca1c4dcbb31faf2009443d90>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        // Initialize vars\n        var
    test = new List<long>();\n        var prevNum = new long();\n        var isSorted
    = true;\n        // Check inputs\n        if (lst.Count < 1) {\n            return
    false;\n        }\n        if (lst.Count == 1) {\n            return true;\n        }\n
    \       // Sort list\n        test = lst.OrderBy(i => i).ToList();\n        //
    Compare vals\n        for (int i = 0; i < test.Count; i++) {\n            if (i
    == 0) {\n                prevNum = test[i];\n            } else {\n                if
    (test[i] == prevNum) {\n                    isSorted = false;\n                    break;\n
    \               } else {\n                    prevNum = test[i];\n                }\n
    \           }\n        }\n        return isSorted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <254ce98b8ff14a449cccc9e97898a485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <254ce98b8ff14a449cccc9e97898a485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        var prev = lst[0];\n        var
    count = 0;\n        foreach (var num in lst) {\n            if (num < prev) {\n
    \               return false;\n            }\n            if (num == prev) {\n
    \               count++;\n            }\n            if (count > 1) {\n                return
    false;\n            }\n            prev = num;\n        }\n        return true;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <4b98a1815f7d4f7999d06fd6b855ee52>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <4b98a1815f7d4f7999d06fd6b855ee52>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <4b98a1815f7d4f7999d06fd6b855ee52>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <4b98a1815f7d4f7999d06fd6b855ee52>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        HashSet<long> set = new HashSet<long>();\n
    \       for (int i = 0; i < lst.Count; i++) {\n            if (set.Contains(lst[i]))
    return false;\n            set.Add(lst[i]);\n        }\n        List<long> arr
    = new List<long>(set);\n        arr.Sort();\n        return arr.SequenceEqual(lst);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab99d8ac108d486f98e34408107ae583>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        // Loop through the list and check
    if the previous value is less than or equal to the next value\n        // If the
    previous value is greater than the next value, return false\n        for (int
    i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1]) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70b5b9c82cef4400890de7d51e8f1cb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70b5b9c82cef4400890de7d51e8f1cb0>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        bool ret = true;\n        if (lst.Count
    == 1) {\n            return ret;\n        }\n        long prev = lst[0];\n        bool
    match = false;\n        foreach (long i in lst) {\n            if (prev == i)
    {\n                if (match) {\n                    ret = false;\n                    break;\n
    \               }\n                match = true;\n            }\n            if
    (prev > i) {\n                ret = false;\n                break;\n            }\n
    \           prev = i;\n        }\n        return ret;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00016] in <cbc95e701f5a45e0865a2a764144b7cf>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <cbc95e701f5a45e0865a2a764144b7cf>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00016] in <cbc95e701f5a45e0865a2a764144b7cf>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <cbc95e701f5a45e0865a2a764144b7cf>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        List<long> sort = new List<long>(lst);\n
    \       sort.Sort();\n        bool flag = true;\n        for (int i = 0; i < lst.Count;
    i++) {\n            if (lst[i] != sort[i]) {\n                flag = false;\n
    \               break;\n            }\n        }\n        return flag;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <432999677ec5450ab9f777554e7528df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <432999677ec5450ab9f777554e7528df>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2797293044fb42f9bc0921d28b720e17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2797293044fb42f9bc0921d28b720e17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        bool sorted = true;\n        //loop
    through the list\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if
    (lst[i] > lst[i + 1]) {\n                //if the number is greater than the next
    number\n                sorted = false;\n                break;\n            }\n
    \       }\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48d40d7e10034e20a65e5c4443b3e3b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48d40d7e10034e20a65e5c4443b3e3b4>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        bool works = true;\n        for
    (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1]) works
    = false;\n        }\n        if (works) {\n            List<long> dedupe = new
    List<long>();\n            foreach (var i in lst) {\n                if (!dedupe.Contains(i))
    dedupe.Add(i);\n            }\n            return dedupe.Count == lst.Count;\n
    \       }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b6ffc4064484645a05097dfdefe5282>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        // first, remove duplicates and
    put in new list\n        List<long> tmp = new List<long>();\n        foreach (long
    l in lst) {\n            if (!tmp.Contains(l)) {\n                tmp.Add(l);\n
    \           }\n        }\n        // now, add all numbers in tmp to set\n        //
    and check if we have same size\n        HashSet<long> tmpSet = new HashSet<long>();\n
    \       foreach (long l in tmp) {\n            tmpSet.Add(l);\n        }\n        if
    (tmp.Count != tmpSet.Count) {\n            return false;\n        }\n        //
    finally, check if sorted\n        long last = tmp[0];\n        foreach (long l
    in tmp) {\n            if (l < last) {\n                return false;\n            }\n
    \           last = l;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x000ae] in <9bd73ef5c5454987a7a2f56c6ac73db1>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <9bd73ef5c5454987a7a2f56c6ac73db1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x000ae] in <9bd73ef5c5454987a7a2f56c6ac73db1>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <9bd73ef5c5454987a7a2f56c6ac73db1>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        bool sorted = true;\n        if
    (lst.Count > 1) {\n            for (int i = 0; i < lst.Count - 1; i++) {\n                if
    (lst[i] > lst[i + 1]) {\n                    sorted = false;\n                    break;\n
    \               }\n            }\n        }\n        return sorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==
    (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,
    (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n
    \   Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f9303e853934c59a3313825227e45b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f9303e853934c59a3313825227e45b3>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        var max = lst.Max();\n        var
    min = lst.Min();\n        if(max != min) {\n            var len = lst.Count;\n
    \           for(var i = 0; i < len - 1; i++) {\n                if(lst[i] > lst[i
    + 1]) {\n                    return false;\n                }\n            }\n
    \       }\n        return true;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <36e8ca90493446b5b03c04cb0f403a0e>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <36e8ca90493446b5b03c04cb0f403a0e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00001] in <36e8ca90493446b5b03c04cb0f403a0e>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <36e8ca90493446b5b03c04cb0f403a0e>:0
    \n"
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        bool result = true;\n        long
    current = lst[0];\n        HashSet<long> check = new HashSet<long>();\n        foreach
    (long item in lst) {\n            if (item > current) {\n                check.Add(item);\n
    \               current = item;\n            } else {\n                result
    = false;\n                break;\n            }\n        }\n        if (check.Count
    != lst.Count) {\n            result = false;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77b7569860194ab29c27d8d31d696de3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77b7569860194ab29c27d8d31d696de3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824388
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        // <---- Solution starts here
    ---->\n        // For lists shorter than 2 elements it is always true\n        if
    (lst.Count <= 1) return true;\n        // For each number we check if there is
    a lower one in the list,\n        // and if there is one it means that it isn't
    sorted\n        for (int i = 0; i < lst.Count - 1; i++) {\n            if (lst.IndexOf(lst[i])
    > lst.IndexOf(lst[i + 1])) return false;\n        }\n        // If we get here,
    list is sorted\n        return true;\n        // <---- Solution ends here ---->\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,
    (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5dac7e0cdcb421cab6f4564ac11581e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5dac7e0cdcb421cab6f4564ac11581e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659824388
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of numbers, return whether or not they are sorted\n
    \   // in ascending order. If list has more than 1 duplicate of the same\n    //
    number, return False. Assume no negative numbers and only integers.\n    // Examples\n
    \   // is_sorted([5]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5]) \u279E True\n
    \   // is_sorted([1, 3, 2, 4, 5]) \u279E False\n    // is_sorted([1, 2, 3, 4,
    5, 6]) \u279E True\n    // is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n    //
    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n    // is_sorted([1, 2, 2, 3, 3,
    4]) \u279E True\n    // is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\n    public
    static bool IsSorted(List<long> lst) {\n        bool allUnique = (lst.Count ==
    lst.Distinct().Count());\n        bool sorted = true;\n        long previous =
    lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            long current
    = lst[i];\n            if (current < previous) {\n                sorted = false;\n
    \               break;\n            }\n            previous = current;\n        }\n
    \       return allUnique && sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==
    (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new
    long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))
    == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,
    (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))
    == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,
    (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00017] in <9cb6b72a03ab4854941954300e21cfb3>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <9cb6b72a03ab4854941954300e21cfb3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IsSorted
    (System.Collections.Generic.List`1[T] lst) [0x00017] in <9cb6b72a03ab4854941954300e21cfb3>:0
    \n  at Problem.Main (System.String[] args) [0x000cc] in <9cb6b72a03ab4854941954300e21cfb3>:0
    \n"
  stdout: ''
  timestamp: 1659824388
