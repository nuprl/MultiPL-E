name: HumanEval_59_largest_prime_factor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not\
  \ a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
  \    // 2\n    public static long LargestPrimeFactor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
  \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
  \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
  \ == (29L));\n    }\n\n}\n"
completions: ["        long prime_factor = 0;\n        long copy = n;\n        long[]\
    \ primes = Primes(1000000);\n        for (int i = 0; i < primes.Length; i++) {\n\
    \            if (n % primes[i] == 0) {\n                prime_factor = primes[i];\n\
    \                n /= primes[i];\n            }\n        }\n        return prime_factor;",
  "        // TODO: Implement\n        return 0;", "        long factor = 2;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ n /= factor;\n            }\n            factor += 1;\n        }\n        return\
    \ factor - 1;", "        int i = 2;\n        while (i * i <= n) {\n          \
    \  if (n % i == 0) {\n                n /= i;\n            } else {\n        \
    \        i++;\n            }\n        }\n        return n;", "        // Insert\
    \ code here.\n        long factor = 0;\n        while (n % 2 == 0) {\n       \
    \     factor = 2;\n            n = n / 2;\n        }\n        for (long i = 3;\
    \ i <= n; i += 2) {\n            while (n % i == 0) {\n                factor\
    \ = i;\n                n = n / i;\n            }\n        }\n        return factor;",
  "        long largest = 2;\n        while (n > largest) {\n            if (n % largest\
    \ == 0)\n                n /= largest;\n            else\n                largest++;\n\
    \        }\n        return largest;", "        var factors = new List<long>();\n\
    \        while (n % 2 == 0) {\n            factors.Add(2);\n            n /= 2;\n\
    \        }\n        var factor = 3L;\n        while (n > 1) {\n            while\
    \ (n % factor == 0) {\n                factors.Add(factor);\n                n\
    \ /= factor;\n            }\n            factor += 2;\n        }\n        return\
    \ factors.Max();", "        long m = 2;\n        while (n % m != 0) {\n      \
    \      m += 1;\n        }\n        if (n == m) {\n            return n;\n    \
    \    }\n        return LargestPrimeFactor(n / m);", "        // Fill in the code.\n\
    \        return 0;", "        long d = 2;\n        while (n > 1) {\n         \
    \   if (n % d == 0) {\n                n /= d;\n            } else {\n       \
    \         d++;\n            }\n        }\n        return d;", "        int p =\
    \ 2;\n        while (n > 1) {\n            if (n % p == 0) {\n               \
    \ n /= p;\n            } else {\n                p += 1;\n            }\n    \
    \    }\n        return p;", "        // Smallest prime factor > sqrt(n) cannot\
    \ be <= sqrt(n).\n        // Thus we only need to check factors <= sqrt(n).\n\
    \        long sqrtn = (long)Math.Sqrt(n);\n        long factor = 2;\n        while\
    \ (n % factor != 0) {\n            factor++;\n        }\n        if (factor <=\
    \ sqrtn) {\n            // The largest prime factor <= sqrt(n).\n            return\
    \ LargestPrimeFactor(n / factor);\n        } else {\n            // The largest\
    \ prime factor > sqrt(n).\n            return n;\n        }", "        long largest\
    \ = 0;\n        var maxFactor = Math.Sqrt(n);\n        while (n % 2 == 0) {\n\
    \            largest = 2;\n            n = n / 2;\n        }\n        for (long\
    \ i = 3; i <= maxFactor; i = i + 2) {\n            while (n % i == 0) {\n    \
    \            largest = i;\n                n = n / i;\n            }\n       \
    \ }\n        if (n > 2) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long largest = -1;\n        long factor = 2;\n        while\
    \ (n > 1) {\n            if (n % factor == 0) {\n                while (n % factor\
    \ == 0) {\n                    n /= factor;\n                }\n             \
    \   largest = factor;\n            }\n            factor++;\n        }\n     \
    \   return largest;", "        Debug.Assert(n > 1);\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            if (n % i == 0) {\n                return LargestPrimeFactor(n\
    \ / i);\n            }\n        }\n        return n;", "        long x = (long)Math.Floor(Math.Sqrt(n));\n\
    \        if (x * x == n) return x;\n        while (true) {\n            x++;\n\
    \            if (n % x == 0) return n / x;\n        }", "        long i = 2;\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                n /=\
    \ i;\n            } else {\n                i++;\n            }\n        }\n \
    \       return i;", "        // The largest prime factor of n is at most n.\n\
    \        // >>> n = 0\n        // >>> while n < 10:\n        // ...     n += 1\n\
    \        // ...     print n\n        // ...\n        // 1\n        // 2\n    \
    \    // 3\n        // 4\n        // 5\n        // 6\n        // 7\n        //\
    \ 8\n        // 9\n        // 10\n        for (long p = n; p > 1; p--) {\n   \
    \         // >>> if (p == 2 or p == 3 or p == 5 or p == 7 or p == 11 or p == 13\
    \ or p == 17 or p == 19 or p == 23 or p == 29 or p == 31 or p == 37 or p == 41\
    \ or p == 43 or p == 47 or p == 53 or p == 59 or p == 61 or p == 67 or p == 71\
    \ or p == 73 or p == 79 or p == 83 or p == 89 or p == 97):\n            // ...\
    \     print p\n            // ...\n            // 97\n            // 89\n    \
    \        // 83\n            // 79\n            // 73\n            // 71\n    \
    \        // 67\n            // 61\n            // 59\n            // 53\n    \
    \        // 47\n            // 43\n            // 41\n            // 37\n    \
    \        // 31\n            // 29\n            // 23\n            // 19\n    \
    \        // 17\n            // 13\n            // 11\n            // 7\n     \
    \       // 5\n            // 3\n            // 2\n            if (p == 2 || p\
    \ == 3 || p == 5 || p == 7 || p == 11 || p == 13 || p == 17 || p == 19 || p ==\
    \ 23 || p == 29 || p == 31 || p == 37 || p == 41 || p == 43 || p == 47 || p ==\
    \ 53 || p == 59 || p == 61 || p == 67 || p == 71 || p == 73 || p == 79 || p ==\
    \ 83 || p == 89 || p == 97) {\n                // >>> if n % p == 0:\n       \
    \         // ...     print p\n                // ...\n                // 97\n\
    \                // 91\n                // 83\n                // 79\n       \
    \         // 73\n                // 71\n                // 67\n              \
    \  // 61\n                // 59\n                // 53\n                // 47\n\
    \                // 43\n                // 41\n                // 37\n       \
    \         // 31\n               ", "        long target = n;\n        while (target\
    \ % 2 == 0) {\n            target /= 2;\n        }\n        long next_prime =\
    \ 3;\n        while (next_prime <= target) {\n            if (target % next_prime\
    \ == 0) {\n                target /= next_prime;\n            } else {\n     \
    \           next_prime += 2;\n            }\n        }\n        return next_prime;",
  "        long largest_prime_factor = 0;\n        for (long i = 2; i < n / 2; i++)\
    \ {\n            if (n % i == 0 && IsPrime(i)) {\n                largest_prime_factor\
    \ = i;\n            }\n        }\n        return largest_prime_factor;"]
stop_tokens:
- "\n    }\n"
