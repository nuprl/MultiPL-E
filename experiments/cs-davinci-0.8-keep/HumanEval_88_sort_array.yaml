name: HumanEval_88_sort_array
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given an array of non-negative integers, return a copy of the\
  \ given array after sorting,\n    // you will sort the given array in ascending\
  \ order if the sum( first index value, last index value) is odd,\n    // or sort\
  \ it in descending order if the sum( first index value, last index value) is even.\n\
  \    // Note:\n    // * don't change the given array.\n    // Examples:\n    //\
  \ * sort_array([]) => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2,\
  \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5,\
  \ 6]) => [6, 5, 4, 3, 2, 1, 0]\n    public static List<long> SortArray(List<long>\
  \ array) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
  \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
  \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
  \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
  \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
  \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
  \ (long)11L}))));\n    }\n\n}\n"
completions: ["        if (array.Count == 0) return array;\n        bool isOdd = (array[0]\
    \ + array[array.Count - 1]) % 2 == 1;\n        var copy = new List<long>(array);\n\
    \        copy.Sort();\n        List<long> sorted = new List<long>();\n       \
    \ for (int i = 0; i < copy.Count; i++) {\n            if (isOdd) {\n         \
    \       sorted.Add(copy[i]);\n            } else {\n                sorted.Insert(0,\
    \ copy[i]);\n            }\n        }\n        return sorted;", '        return
    null;', "        if (array.Count <= 1) {\n            return array;\n        }\n\
    \        List<long> newList = new List<long>();\n        bool isEven = (array[0]\
    \ + array[array.Count - 1]) % 2 == 0;\n        if (isEven) {\n            newList\
    \ = array.OrderByDescending(x => x).ToList();\n        } else {\n            newList\
    \ = array.OrderBy(x => x).ToList();\n        }\n        return newList;", "  \
    \      List<long> sorted = new List<long>();\n        if (array.Count == 0) return\
    \ sorted;\n        if (array.Count == 1) {\n            sorted.Add(array[0]);\n\
    \            return sorted;\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        foreach (long\
    \ i in array) {\n            sorted.Add(i);\n        }\n        return sorted;",
  "        List<long> arr = new List<long>();\n        arr.AddRange(array);\n    \
    \    long sum = array[0] + array[array.Count-1];\n        if (sum % 2 == 0) {\n\
    \            arr.Sort();\n            arr.Reverse();\n        } else {\n     \
    \       arr.Sort();\n        }\n        return arr;", "        List<long> r =\
    \ new List<long>();\n        r.AddRange(array);\n        if (r.Count > 0) {\n\
    \            int sum = (int)(r[0] + r[r.Count - 1]);\n            if (sum % 2\
    \ == 0) {\n                r.Sort();\n                r.Reverse();\n         \
    \   } else {\n                r.Sort();\n            }\n        }\n        return\
    \ r;", "        int length = array.Count;\n        if (length == 0) {\n      \
    \      return array;\n        }\n        if (length == 1) {\n            return\
    \ array;\n        }\n        if (length == 2) {\n            return array[0] >\
    \ array[1] ? new List<long> { array[1], array[0] } : array;\n        }\n     \
    \   int pivot = (array[0] + array[length - 1]) % 2 == 0 ? 1 : 0;\n        if (pivot\
    \ == 0) {\n            for (int i = 0; i < length - 1; i++) {\n              \
    \  int j = i + 1;\n                for (; j < length; j++) {\n               \
    \     if (array[i] < array[j]) {\n                        long tmp = array[i];\n\
    \                        array[i] = array[j];\n                        array[j]\
    \ = tmp;\n                    }\n                }\n            }\n        } else\
    \ {\n            for (int i = 0; i < length - 1; i++) {\n                int j\
    \ = i + 1;\n                for (; j < length; j++) {\n                    if\
    \ (array[i] > array[j]) {\n                        long tmp = array[i];\n    \
    \                    array[i] = array[j];\n                        array[j] =\
    \ tmp;\n                    }\n                }\n            }\n        }\n \
    \       return array;", "        if (array.Count() < 2) return array;\n      \
    \  //if (array.Count() % 2 == 0)\n        //    return array.OrderByDescending(i\
    \ => i).ToList();\n        //else\n        //    return array.OrderBy(i => i).ToList();\n\
    \        return (array.Count() % 2 == 0) ? array.OrderByDescending(i => i).ToList()\
    \ : array.OrderBy(i => i).ToList();", "        var result = new List<long>();\n\
    \        var evens = new List<long>();\n        var odds = new List<long>();\n\
    \        if (array.Count <= 1) {\n            return array;\n        }\n     \
    \   foreach (var elem in array) {\n            if (elem % 2 == 0) {\n        \
    \        evens.Add(elem);\n            } else {\n                odds.Add(elem);\n\
    \            }\n        }\n        evens.Sort();\n        odds.Sort();\n     \
    \   if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            odds.Reverse();\n\
    \        } else {\n            evens.Reverse();\n        }\n        foreach (var\
    \ elem in odds) {\n            result.Add(elem);\n        }\n        foreach (var\
    \ elem in evens) {\n            result.Add(elem);\n        }\n        return result;",
  "        long left = array[0];\n        long right = array[array.Count - 1];\n \
    \       List<long> result = new List<long>();\n        if ((left + right) % 2\
    \ == 0) {\n            result = array.OrderByDescending(x => x).ToList();\n  \
    \      } else {\n            result = array.OrderBy(x => x).ToList();\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int first = 0;\n        int last = array.Count - 1;\n        while (first\
    \ <= last) {\n            if ((array[first] + array[last]) % 2 == 0) {\n     \
    \           result.Add(array[last]);\n                last--;\n            } else\
    \ {\n                result.Add(array[first]);\n                first++;\n   \
    \         }\n        }\n        return result;", "        if (array.Count == 0)\
    \ {\n            return array;\n        } else if (array.Count == 1) {\n     \
    \       return array;\n        } else {\n            long sum = array[0] + array[array.Count\
    \ - 1];\n            if (sum % 2 == 0) {\n                return array.OrderByDescending(o\
    \ => o).ToList();\n            } else {\n                return array.OrderBy(o\
    \ => o).ToList();\n            }\n        }", "        // check if the sum( first\
    \ index value, last index value) is odd\n        var condition = array.First()\
    \ + array.Last();\n        if(condition % 2 == 0)\n            array.Sort();\n\
    \        else\n            array.Sort();\n            array.Reverse();\n     \
    \   return array;", "        var r = new List<long>();\n        for (int i = 0;\
    \ i < array.Count; i++)\n            r.Add(i);\n        return r.OrderBy(x =>\
    \ (x % 2) == 0 ? array[x] : -array[x]).ToList();", "        // Write your code\
    \ here.\n        return array;", "        List<long> sortedArray = new List<long>();\n\
    \        sortedArray.AddRange(array);\n        if(array.Count() <= 1)\n      \
    \      return sortedArray;\n        if((array[0] + array[array.Count() - 1]) %\
    \ 2 == 0)\n            sortedArray.Sort((y, x) => -1 * x.CompareTo(y));\n    \
    \    else\n            sortedArray.Sort();\n        return sortedArray;", "  \
    \      List<long> result = new List<long>();\n        int first = 0;\n       \
    \ int last = array.Count - 1;\n        while (first <= last) {\n            if\
    \ ((array[first] + array[last]) % 2 == 0) {\n                result.Add(array[last]);\n\
    \                last--;\n            } else {\n                result.Add(array[first]);\n\
    \                first++;\n            }\n        }\n        return result;",
  "        var total_length = array.Count;\n        var copy = new List<long>(array);\n\
    \        var comparer = Comparer<long>.Default;\n        var comparer_desc = Comparer<long>.Create((x,\
    \ y) => comparer.Compare(y, x));\n        var has_even_last_index = (total_length\
    \ % 2 == 0);\n        Array.Sort(array.ToArray(), has_even_last_index ? comparer\
    \ : comparer_desc);\n        return array;", "        long start = array[0];\n\
    \        long end = array[array.Count - 1];\n        if ((start + end) % 2 ==\
    \ 0) {\n            array.Sort();\n            array.Reverse();\n        } else\
    \ {\n            array.Sort();\n        }\n        return array;", "        bool\
    \ even = (array[0] + array[array.Count - 1]) % 2 == 0;\n        List<long> sortedArray\
    \ = new List<long>();\n        for (int i = 0; i < array.Count; i++) {\n     \
    \       long temp = array[i];\n            int j = i - 1;\n            if (even)\
    \ {\n                while (j >= 0 && sortedArray[j] < temp) {\n             \
    \       sortedArray[j + 1] = sortedArray[j];\n                    j = j - 1;\n\
    \                }\n            } else {\n                while (j >= 0 && sortedArray[j]\
    \ > temp) {\n                    sortedArray[j + 1] = sortedArray[j];\n      \
    \              j = j - 1;\n                }\n            }\n            sortedArray[j\
    \ + 1] = temp;\n        }\n        return sortedArray;"]
stop_tokens:
- "\n    }\n"
