name: HumanEval_22_filter_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Filter given list of any python values only for integers\n \
  \   // >>> filter_integers(['a', 3.14, 5])\n    // [5]\n    // >>> filter_integers([1,\
  \ 2, 3, 'abc', {}, []])\n    // [1, 2, 3]\n    public static List<long> FilterIntegers(List<object>\
  \ values) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterIntegers((new\
  \ List<object>())).Equals((new List<long>())));\n    Debug.Assert(FilterIntegers((new\
  \ List<object>(new object[]{4L, new List<object>(), 23.2f, 9L, \"adasd\"}))).Equals((new\
  \ List<long>(new long[]{(long)4L, (long)9L}))));\n    Debug.Assert(FilterIntegers((new\
  \ List<object>(new object[]{3L, \"c\", 3L, 3L, \"a\", \"b\"}))).Equals((new List<long>(new\
  \ long[]{(long)3L, (long)3L, (long)3L}))));\n    }\n\n}\n"
completions: ['        return values.Where(v => (v is long) || (v is int)).Select(v
    => (long)v).ToList();', '        return values.OfType<long>().ToList();', '        return
    values.Where(val => val is long).Select(val => (long)val).ToList();', "      \
    \  var result = new List<long>();\n        foreach (var value in values) {\n \
    \           if (value is long) {\n                result.Add((long)value);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (object value in values) {\n          \
    \  if (value is long) {\n                result.Add((long)value);\n          \
    \  }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var v in values) {\n            var type = v.GetType();\n  \
    \          if (type == typeof(int) || type == typeof(long)) {\n              \
    \  result.Add((long)v);\n            }\n        }\n        return result;", '        return
    values.OfType<long>().ToList();', '        return values.Where(x => x is long).Select(x
    => (long)x).ToList();', "        var result = new List<long>();\n        foreach\
    \ (var value in values) {\n            if (value is long) {\n                result.Add((long)value);\n\
    \            }\n        }\n        return result;", '        return values.Where(v
    => v is long).Select(v => (long)v).ToList();', "        List<long> integers =\
    \ new List<long>();\n        foreach (object item in values) {\n            if\
    \ (item is long || item is int) {\n                integers.Add((long)item);\n\
    \            }\n        }\n        return integers;", "        var numbers = new\
    \ List<long>();\n        foreach (var o in values) {\n            if (o is Int64\
    \ || o is Int32) {\n                numbers.Add((long)o);\n            }\n   \
    \     }\n        return numbers;", "        List<long> output = new List<long>();\n\
    \        foreach (object o in values) {\n            if (o is int || o is long)\
    \ {\n                output.Add((long)o);\n            }\n        }\n        return\
    \ output;", "        var answer = new List<long>();\n        foreach (var item\
    \ in values) {\n            if (item is int || item is long) {\n             \
    \   answer.Add((long)item);\n            }\n        }\n        return answer;",
  '        return values.OfType<long>().ToList();', "        List<long> result = new\
    \ List<long>();\n        foreach (object value in values) {\n            // This\
    \ is how you check if value is an integer\n            if (value is int) {\n \
    \               result.Add((int)value);\n            }\n        }\n        return\
    \ result;", '        return values.OfType<long>().ToList();', "        List<long>\
    \ result = new List<long>();\n        foreach (object x in values) {\n       \
    \     if (x is long) {\n                result.Add((long)x);\n            }\n\
    \        }\n        return result;", "        var res = new List<long>();\n  \
    \      foreach (var v in values) {\n            if (v is long) {\n           \
    \     res.Add((long)v);\n            }\n        }\n        return res;", '        return
    values.OfType<long>().ToList();']
stop_tokens:
- "\n    }\n"
