name: HumanEval_152_compare
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // I think we all remember that feeling when the result of some\
  \ long-awaited\n    // event is finally known. The feelings and thoughts you have\
  \ at that moment are\n    // definitely worth noting down and comparing.\n    //\
  \ Your task is to determine if a person correctly guessed the results of a number\
  \ of matches.\n    // You are given two arrays of scores and guesses of equal length,\
  \ where each index shows a match. \n    // Return an array of the same length denoting\
  \ how far off each guess was. If they have guessed correctly,\n    // the value\
  \ is 0, and if not, the value is the absolute difference between the guess and the\
  \ score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
  \    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    public static\
  \ List<long> Compare(List<long> game, List<long> guess) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
  \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
  \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
  \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
  \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
  \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
  \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,\
  \ (long)1L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        for (int i =\
    \ 0; i < game.Count; i++) {\n            result.Add(Math.Abs(game[i] - guess[i]));\n\
    \        }\n        return result;", '        return Enumerable.Range(0, game.Count).Select(x
    => (long)Math.Abs(game[x] - guess[x])).ToList();', "        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < game.Count; i++) {\n      \
    \      long dif = Math.Abs(game[i] - guess[i]);\n            result.Add(dif);\n\
    \        }\n        return result;", '        return null;', "        List<long>\
    \ compare = new List<long>();\n        for (int i = 0; i < game.Count; i++) {\n\
    \            compare.Add(Math.Abs(game[i] - guess[i]));\n        }\n        return\
    \ compare;", "        List<long> result = new List<long>();\n        for (int\
    \ i = 0; i < game.Count; i++) {\n            result.Add(Math.Abs(game[i] - guess[i]));\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        for (int i = 0; i < game.Count; i++) {\n            if (game[i] == guess[i])\
    \ {\n                result.Add(0);\n            } else {\n                result.Add(Math.Abs(game[i]\
    \ - guess[i]));\n            }\n        }\n        return result;", "        List<long>\
    \ diffs = new List<long>();\n        for (int i = 0; i < game.Count; i++) {\n\
    \            if (guess[i] > game[i]) {\n                diffs.Add(guess[i] - game[i]);\n\
    \            } else if (guess[i] < game[i]) {\n                diffs.Add(game[i]\
    \ - guess[i]);\n            } else {\n                diffs.Add(0);\n        \
    \    }\n        }\n        return diffs;", "        // your code here\n      \
    \  return new List<long>();", "        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < game.Count; i++) {\n            if (game[i] == guess[i])\
    \ result.Add(0);\n            else result.Add(Math.Abs(game[i] - guess[i]));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < game.Count; i++) {\n            if (guess[i] == game[i])\
    \ {\n                result.Add(0);\n            } else {\n                result.Add(Math.Abs(guess[i]\
    \ - game[i]));\n            }\n        }\n        return result;", "        //\
    \ Your code goes here.\n        List<long> output = new List<long>();\n      \
    \  for (int i = 0; i < game.Count; i++) {\n            if (game[i] == guess[i])\
    \ {\n                output.Add(0);\n            } else {\n                output.Add(Math.Abs(game[i]\
    \ - guess[i]));\n            }\n        }\n        return output;", "        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < game.Count; i++) {\n\
    \            if (game[i] != guess[i]) {\n                result.Add(Math.Abs(game[i]\
    \ - guess[i]));\n            } else {\n                result.Add(0);\n      \
    \      }\n        }\n        return result;", "        var n = game.Count;\n \
    \       var result = new List<long>();\n        for (int i = 0; i < n; i++) {\n\
    \            result.Add(Math.Abs(game[i] - guess[i]));\n        }\n        return\
    \ result;", "        List<long> diffs = new List<long>();\n        for (int i\
    \ = 0; i < game.Count; i++) {\n            diffs.Add(Math.Abs(game[i] - guess[i]));\n\
    \        }\n        return diffs;", "        var results = new List<long>();\n\
    \        for (int i = 0; i < game.Count; i++) {\n            var diff = Math.Abs(game[i]\
    \ - guess[i]);\n            results.Add(diff);\n        }\n        return results;",
  "        List<long> result = new List<long>();\n        for (int i = 0; i < game.Count;\
    \ i++) {\n            result.Add(Math.Abs(game[i] - guess[i]));\n        }\n \
    \       return result;", '        return game.Zip(guess, (g, e) => Math.Abs(g
    - e)).ToList();', "        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i < game.Count; i++) {\n            result.Add(Math.Abs(game[i]\
    \ - guess[i]));\n        }\n        return result;", "        // create a list\
    \ of longs to hold the results of the differentials\n        List<long> diff =\
    \ new List<long>();\n        // loop through each score and guess\n        for\
    \ (int i = 0; i < game.Count; i++) {\n            // get the difference and add\
    \ it to the list\n            diff.Add(Math.Abs(game[i] - guess[i]));\n      \
    \  }\n        // return the list\n        return diff;"]
stop_tokens:
- "\n    }\n"
