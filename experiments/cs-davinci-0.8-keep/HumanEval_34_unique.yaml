name: HumanEval_34_unique
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique elements in a list\n    // >>> unique([5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123])\n    // [0, 2, 3, 5, 9, 123]\n    public static List<long>\
  \ Unique(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n"
completions: ['        return l.Distinct().OrderBy(x => x).ToList();', "        List<long>\
    \ ans = new List<long>();\n        ans.Add(l[0]);\n        for (int i = 1; i <\
    \ l.Count; i++) {\n            bool found = false;\n            for (int j = 0;\
    \ j < ans.Count; j++) {\n                if (ans[j] == l[i]) {\n             \
    \       found = true;\n                    break;\n                }\n       \
    \     }\n            if (!found) {\n                ans.Add(l[i]);\n         \
    \   }\n        }\n        ans.Sort();\n        return ans;", "        l.Sort();\n\
    \        return l.Distinct().ToList();", "        l.Sort();\n        int prev\
    \ = -1;\n        List<long> newl = new List<long>();\n        foreach (long x\
    \ in l) {\n            if (x != prev) {\n                newl.Add(x);\n      \
    \          prev = (int)x;\n            }\n        }\n        return newl;", " \
    \       List<long> res = new List<long>();\n        for (int i = 0; i < l.Count;\
    \ i++) {\n            if (!res.Contains(l[i]))\n                res.Add(l[i]);\n\
    \        }\n        res.Sort();\n        return res;", "        List<long> res\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!res.Contains(i))\
    \ {\n                res.Add(i);\n            }\n        }\n        res.Sort();\n\
    \        return res;", "        l.Sort();\n        for (int i = 1; i < l.Count;\
    \ ) {\n            if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n \
    \           } else {\n                i++;\n            }\n        }\n       \
    \ return l;", "        List<long> result = new List<long>();\n        result.Add(l[0]);\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1])\
    \ {\n                result.Add(l[i]);\n            }\n        }\n        return\
    \ result;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> res = new List<long>();\n        for (int i\
    \ = 0; i < l.Count; i++) {\n            if (!res.Contains(l[i]))\n           \
    \     res.Add(l[i]);\n        }\n        res.Sort();\n        return res;", " \
    \       l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if\
    \ (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n                i--;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", '        return l.Distinct().OrderBy(i
    => i).ToList();', "        l.Sort();\n        return l.Distinct().ToList();",
  "        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if\
    \ (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n                i--;\n\
    \            }\n        }\n        return l;", "        List<long> r = new List<long>();\n\
    \        r.Add(l[0]);\n        for (int i = 1; i < l.Count; i++) {\n         \
    \   if (l[i] != r[r.Count - 1]) {\n                r.Add(l[i]);\n            }\n\
    \        }\n        return r;", "        l.Sort();\n        List<long> u = new\
    \ List<long>();\n        if (l.Count == 0) {\n            return u;\n        }\n\
    \        u.Add(l[0]);\n        for (int i = 1; i < l.Count; i++) {\n         \
    \   if (l[i] != l[i - 1]) {\n                u.Add(l[i]);\n            }\n   \
    \     }\n        return u;", "        List<long> u = new List<long>();\n     \
    \   foreach (long n in l) {\n            if (!u.Contains(n)) {\n             \
    \   u.Add(n);\n            }\n        }\n        u.Sort();\n        return u;",
  "        l.Sort();\n        var result = new List<long>();\n        if (l.Count\
    \ == 0) return result;\n        result.Add(l[0]);\n        for (int i = 1; i <\
    \ l.Count; i++) {\n            if (l[i] != l[i - 1]) {\n                result.Add(l[i]);\n\
    \            }\n        }\n        return result;", "        l.Sort();\n     \
    \   var u = new List<long>();\n        long pre = l[0];\n        u.Add(pre);\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != pre) {\n\
    \                u.Add(l[i]);\n                pre = l[i];\n            }\n  \
    \      }\n        return u;"]
stop_tokens:
- "\n    }\n"
