name: HumanEval_151_double_the_difference
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
  \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    // double_the_difference([-1,\
  \ -2, 0]) == 0\n    // double_the_difference([9, -2]) == 81\n    // double_the_difference([0])\
  \ == 0  \n    // If the input list is empty, return 0.\n    public static long DoubleTheDifference(List<float>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
  \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
  \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
  \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
  \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
  \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
  \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
  \ == (165L));\n    }\n\n}\n"
completions: ["        long result = 0;\n        foreach (float number in lst) {\n\
    \            if ((number % 2 == 1) && (number >= 0)) {\n                result\
    \ += (long)number * (long)number;\n            }\n        }\n        return result;",
  "        // your code here\n        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++)\n        {\n            if (lst[i] - (int)lst[i] == 0 && lst[i] > 0)\n\
    \            {\n                if (lst[i] % 2 == 1)\n                {\n    \
    \                sum += (long)Math.Pow(lst[i], 2);\n                }\n      \
    \      }\n        }\n        return sum;", "        long result = 0;\n       \
    \ // Write your code here.\n        return result;", "        var even = 0;\n\
    \        var odd = 0;\n        foreach (var item in lst) {\n            var x\
    \ = (int) item;\n            if (x < 0) continue;\n            if (x % 2 == 0)\
    \ even += x;\n            else odd += x;\n        }\n        return 2 * (odd -\
    \ even);", "        var pos = new List<int>();\n        var neg = new List<int>();\n\
    \        foreach (var a in lst) {\n            if (a % 1 == 0 && a > 0) {\n  \
    \              pos.Add((int)a);\n            } else if (a % 1 == 0 && a < 0) {\n\
    \                neg.Add((int)a);\n            }\n        }\n        var sum_pos\
    \ = SumOfSquares(pos);\n        var sum_neg = SumOfSquares(neg);\n        return\
    \ sum_pos - sum_neg;", "        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (lst[i] > 0 && (int)lst[i] == lst[i]) {\n           \
    \     long square = (long)Math.Pow(lst[i], 2);\n                if (lst[i] % 2\
    \ == 1) {\n                    sum += square;\n                }\n           \
    \ }\n        }\n        return sum;", "        if (lst.Count == 0) {\n       \
    \     return 0;\n        }\n        //System.Diagnostics.Debug.WriteLine(\"Lenth\
    \ of list: \" + lst.Count);\n        long sumOdd = 0;\n        foreach (var e\
    \ in lst) {\n            //System.Diagnostics.Debug.WriteLine(\"Current element:\
    \ \" + e);\n            if (e % 2 == 1 && e > 0) {\n                //System.Diagnostics.Debug.WriteLine(\"\
    Sqaure of element: \" + e * e);\n                sumOdd += (long)e * e;\n    \
    \        }\n        }\n        return sumOdd;", "        long ret = 0;\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] < 0) {\n   \
    \             ret += (long)Math.Pow(lst[i], 2);\n            }\n        }\n  \
    \      return ret;", "        // YOUR CODE HERE\n        long sum = 0;\n     \
    \   for (int i = 0; i < lst.Count; i++)\n        {\n            if (lst[i] > 0\
    \ && lst[i] % 1 == 0)\n            {\n                if (lst[i] % 2 == 1)\n \
    \               {\n                    sum += (long)Math.Pow(lst[i], 2);\n   \
    \             }\n            }\n        }\n        return sum;", "        int\
    \ neg = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i]\
    \ < 0) {\n                neg = neg + 1;\n            }\n        }\n        double\
    \ result = 1;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i]\
    \ > 0) {\n                result = result * lst[i];\n            }\n        }\n\
    \        for (int i = 0; i < neg; i++) {\n            result = result / 2;\n \
    \       }\n        return (long)result;", "        long sum = 0;\n        // Your\
    \ code here\n\n        return sum;", "        long res = 0;\n        foreach (float\
    \ i in lst) {\n            if ((int)i % 2 == 1)\n                res += i * i;\n\
    \        }\n        return res;", "        long sum = 0;\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            if (lst[i] >= 0 && lst[i] % 1 == 0) {\n\
    \                long square = (long)lst[i] * (long)lst[i];\n                if\
    \ (square % 2 == 1) {\n                    sum += square;\n                }\n\
    \            }\n        }\n        return sum;", "        // list with only odd\
    \ ints\n        List<float> oddInts = new List<float>();\n        // list with\
    \ only even ints\n        List<float> evenInts = new List<float>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (lst[i] % 2 == 0) {\n    \
    \            // even number\n                evenInts.Add(lst[i]);\n         \
    \   } else {\n                // odd number\n                oddInts.Add(lst[i]);\n\
    \            }\n        }\n        // sum of squares of odd ints\n        long\
    \ oddSumOfSquares = 0;\n        for (int i = 0; i < oddInts.Count; i++) {\n  \
    \          oddSumOfSquares += (long)Math.Pow(oddInts[i], 2);\n        }\n    \
    \    // sum of squares of even ints\n        long evenSumOfSquares = 0;\n    \
    \    for (int i = 0; i < evenInts.Count; i++) {\n            evenSumOfSquares\
    \ += (long)Math.Pow(evenInts[i], 2);\n        }\n        // return double the\
    \ difference\n        return 2 * (oddSumOfSquares - evenSumOfSquares);", "   \
    \     long res = 0;\n        foreach (float num in lst) {\n            if (num\
    \ >= 0 && num % 1 == 0 && num % 2 == 1) {\n                res += (long)num *\
    \ (long)num;\n            }\n        }\n        return res;", "        int sum\
    \ = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i]\
    \ % 2 == 1)\n                sum += (int)lst[i] * (int)lst[i];\n        }\n  \
    \      return sum;", "        int sum = 0;\n        foreach (int n in lst) {\n\
    \            sum += n;\n        }\n        return sum;", '        return lst.Sum(x
    => x % 2 == 0 ? x * x : 0);', '        return (from x in lst where x % 2 == 1
    select x).Sum(x => x*x);', "        var even = lst.Where(n => Math.Floor(n) ==\
    \ n && n > 0 && n % 2 == 0).ToList();\n        var odd = lst.Where(n => Math.Floor(n)\
    \ == n && n > 0 && n % 2 == 1).ToList();\n        var evenSquares = even.Select(n\
    \ => (long) Math.Pow(n, 2)).ToList();\n        var oddSquares = odd.Select(n =>\
    \ (long) Math.Pow(n, 2)).ToList();\n        return (evenSquares.Sum() - oddSquares.Sum())\
    \ * 2;"]
stop_tokens:
- "\n    }\n"
