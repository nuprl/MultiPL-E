name: HumanEval_118_get_closest_vowel
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"FULL\"\
  ) ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
  ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
  yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
  u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
  most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
  i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  Above\")).Equals((\"o\")));\n    }\n\n}\n"
completions: ["        if (word.Length < 3) return \"\";\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (i == 0 || i == word.Length - 1) continue;\n\
    \            var prev = word[i - 1];\n            var next = word[i + 1];\n  \
    \          var curr = word[i];\n            if (IsVowel(curr) && !IsVowel(prev)\
    \ && !IsVowel(next)) {\n                return curr.ToString();\n            }\n\
    \        }\n        return \"\";", "        string vowels = \"aAeEiIoOuU\";\n\
    \        int cons = -1;\n        int closest = -1;\n        int dist = int.MaxValue;\n\
    \        for (int i = word.Length - 1; i >= 0; i--) {\n            char c = word[i];\n\
    \            if (vowels.Contains(c)) {\n                if (cons != -1) {\n  \
    \                  int d = cons - i;\n                    if (d < dist) {\n  \
    \                      dist = d;\n                        closest = i;\n     \
    \               }\n                }\n            } else {\n                cons\
    \ = i;\n            }\n        }\n        if (closest == -1) {\n            return\
    \ \"\";\n        }\n        return word[closest].ToString();", "        string\
    \ vowel = \"aeiou\";\n        List<char> vowels = new List<char>();\n        int\
    \ count = 0;\n        for (int i = word.Length - 1; i >= 0; i--) {\n         \
    \   if (vowel.Contains(word[i].ToString())) {\n                vowels.Add(word[i]);\n\
    \                count++;\n            }\n            if (count > 1) {\n     \
    \           return vowels[0].ToString();\n            }\n        }\n        return\
    \ \"\";", "        var vowelChars = new List<char>() { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        var wordChars = word.ToList();\n        var consonantPositions =\
    \ new List<int>();\n        for (int i = 0; i < wordChars.Count; i++) {\n    \
    \        if (!vowelChars.Contains(wordChars[i])) {\n                consonantPositions.Add(i);\n\
    \            }\n        }\n        if (consonantPositions.Count < 2) {\n     \
    \       return string.Empty;\n        }\n        var vowelDistances = new List<Tuple<int,\
    \ int>>();\n        for (int i = 1; i < consonantPositions.Count; i++) {\n   \
    \         var distance = consonantPositions[i] - consonantPositions[i - 1];\n\
    \            vowelDistances.Add(new Tuple<int, int>(distance, consonantPositions[i\
    \ - 1]));\n        }\n        var lowestDistance = vowelDistances.Min(t => t.Item1);\n\
    \        var closestVowelIndex = vowelDistances.First(t => t.Item1 == lowestDistance).Item2;\n\
    \        return wordChars[closestVowelIndex].ToString();", "        for (int i\
    \ = word.Length - 1; i >= 0; i--) {\n            if (word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n          \
    \      if (i < word.Length - 1 && word[i + 1] != 'a' && word[i + 1] != 'e' &&\
    \ word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u')\n          \
    \          return word[i].ToString();\n            }\n        }\n        return\
    \ \"\";", "        string vowels = \"aeiouAEIOU\";\n        string[] letters =\
    \ word.Split(' ');\n        letters = letters.Reverse().ToArray();\n        string\
    \ prev = \"\";\n        string next = \"\";\n        for (int i = 0; i < letters.Length;\
    \ i++) {\n            if (i == 0) {\n                prev = letters[i];\n    \
    \            next = letters[i + 1];\n            } else if (i == letters.Length\
    \ - 1) {\n                prev = letters[i - 1];\n                next = letters[i];\n\
    \            } else {\n                prev = letters[i - 1];\n              \
    \  next = letters[i + 1];\n            }\n            if (vowels.Contains(prev)\
    \ && vowels.Contains(next)) {\n                return letters[i];\n          \
    \  }\n        }\n        return \"\";", "        // TODO\n        return null;",
  "        bool bLastVowel = false;\n        string sResult = \"\";\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            bool bVowel = isVowel(word[i]);\n\
    \            if (bVowel) {\n                if (bLastVowel) {\n              \
    \      return sResult;\n                }\n                else {\n          \
    \          sResult = new string(word[i], 1);\n                    bLastVowel =\
    \ true;\n                }\n            }\n            else {\n              \
    \  if (bLastVowel) {\n                    return sResult;\n                }\n\
    \            }\n        }\n        return \"\";", "        // Write your code\
    \ here...\n        return word;", "        string vowels = \"aeiou\";\n      \
    \  string closest = null;\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            if (vowels.Contains(word[i])) {\n                if (closest\
    \ == null)\n                    closest = word[i].ToString();\n              \
    \  else if (i == word.Length - 1)\n                    return closest;\n     \
    \           else if (vowels.Contains(word[i + 1]))\n                    return\
    \ word[i].ToString();\n            }\n            else if (closest != null)\n\
    \                return closest;\n        }\n        return \"\";", "        string\
    \ vowels = \"aeiouAEIOU\";\n        bool vowelSeen = false;\n        int distance\
    \ = 0;\n        int bestDistance = int.MaxValue;\n        string bestVowel = \"\
    \";\n        // If you start out with all letters as vowels, then,\n        //\
    \ in the end, all of them will be vowels.\n        // 1. You start with all letters\
    \ as vowels\n        // 2. You iterate from left to right\n        // 3. For each\
    \ letter, if the letter is a vowel, nothing changes.\n        // 4. For each letter,\
    \ if the letter is a consonant:\n        //    If you've seen a vowel so far,\
    \ then, you've found the closest vowel,\n        //    so, you mark the distance\
    \ to the vowel, and you remember the vowel.\n        //    If you've not seen\
    \ a vowel so far, then, you do nothing.\n        // 5. In the end, you return\
    \ the closest vowel you remember.\n        // If you start out with all letters\
    \ as consonants, then,\n        // in the end, all of them will be consonants.\n\
    \        // 1. You start with all letters as consonants\n        // 2. You iterate\
    \ from left to right\n        // 3. For each letter, if the letter is a consonant,\
    \ nothing changes.\n        // 4. For each letter, if the letter is a vowel:\n\
    \        //    If you've seen a consonant so far, then, you've found the closest\
    \ consonant,\n        //    so, you mark the distance to the consonant, and you\
    \ remember the consonant.\n        //    If you've not seen a consonant so far,\
    \ then, you do nothing.\n        // 5. In the end, you return the closest consonant\
    \ you remember.\n        // Therefore, the following loop works for both cases.\n\
    \        for (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                if (vowelSeen) {\n                    bestDistance = distance;\n\
    \                    bestVowel = word[i].ToString();\n                    break;\n\
    \                }\n            } else {\n                if (vowelSeen) {\n \
    \                   distance++;\n                }", "        string vowels =\
    \ \"aeiou\";\n        string lastConsonant = \"\";\n        string result = \"\
    \";\n        int distance = 0;\n        int maxDistance = int.MaxValue;\n    \
    \    // reverse the string\n        char[] input = word.ToCharArray();\n     \
    \   Array.Reverse(input);\n        // find closest vowel\n        foreach (char\
    \ ch in input) {\n            if (vowels.Contains(ch)) {\n                if (lastConsonant\
    \ != \"\") {\n                    distance = input.ToList().IndexOf(ch) - input.ToList().IndexOf(lastConsonant);\n\
    \                    if (distance < maxDistance) {\n                        maxDistance\
    \ = distance;\n                        result = ch.ToString();\n             \
    \       }\n                }\n            } else {\n                lastConsonant\
    \ = ch.ToString();\n            }\n        }\n        return result;", '        return
    null;', "        // your code here\n        return string.Empty;", "        int\
    \ lastVowel = word.Length;\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            char ch = word[i];\n            if (\"AEIOUaeiou\".IndexOf(ch)\
    \ != -1) {\n                lastVowel = i;\n                break;\n         \
    \   }\n        }\n        if (lastVowel == word.Length) {\n            return\
    \ \"\";\n        }\n        int closestVowel = lastVowel;\n        int closestDistance\
    \ = int.MaxValue;\n        for (int i = lastVowel - 1; i >= 0; i--) {\n      \
    \      char ch = word[i];\n            if (\"AEIOUaeiou\".IndexOf(ch) == -1) {\n\
    \                if (lastVowel - i < closestDistance) {\n                    closestVowel\
    \ = lastVowel;\n                    closestDistance = lastVowel - i;\n       \
    \         }\n            } else {\n                lastVowel = i;\n          \
    \  }\n        }\n        return word[closestVowel].ToString();", "        var\
    \ vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var prevVowel\
    \ = ' ';\n        var isConsonantFound = false;\n        for (var i = word.Length\
    \ - 1; i >= 0; i--) {\n            var c = word[i];\n            if (isConsonantFound\
    \ && vowels.Contains(c)) {\n                return c.ToString();\n           \
    \ }\n            if (vowels.Contains(c)) {\n                prevVowel = c;\n \
    \           } else {\n                isConsonantFound = true;\n            }\n\
    \        }\n        return string.Empty;", "        // TODO\n        throw new\
    \ NotImplementedException();", "        // TODO: implement\n        return \"\"\
    ;", '        throw new NotImplementedException();', "        if (word.Length <\
    \ 3) return \"\";\n        int i = 0;\n        while (i < word.Length && \"aeiou\"\
    .Contains(word[i])) i++;\n        if (i == word.Length) return \"\";\n       \
    \ var best = \"\";\n        var bestDist = word.Length;\n        while (i < word.Length)\
    \ {\n            while (i < word.Length && \"aeiou\".Contains(word[i])) i++;\n\
    \            var j = i;\n            while (j < word.Length && !\"aeiou\".Contains(word[j]))\
    \ j++;\n            if (j < word.Length) {\n                var k = j - 1;\n \
    \               while (k > i && !\"aeiou\".Contains(word[k])) k--;\n         \
    \       if (k > i) {\n                    var dist = j - k;\n                \
    \    if (dist < bestDist) {\n                        bestDist = dist;\n      \
    \                  best = word[k].ToString();\n                    }\n       \
    \         }\n            }\n            i = j;\n        }\n        return best;"]
stop_tokens:
- "\n    }\n"
