name: HumanEval_122_add_elements
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n\
  \    // the sum of the elements with at most two digits from the first k elements\
  \ of arr.\n    // Example:\n    // Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n\
  \    // Output: 24 # sum of 21 + 3\n    // Constraints:\n    // 1. 1 <= len(arr)\
  \ <= 100\n    // 2. 1 <= k <= len(arr)\n    public static long AddElements(List<long>\
  \ arr, long k) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddElements((new\
  \ List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)41L, (long)57L, (long)76L,\
  \ (long)87L, (long)88L, (long)99L})), (3L)) == (-4L));\n    Debug.Assert(AddElements((new\
  \ List<long>(new long[]{(long)111L, (long)121L, (long)3L, (long)4000L, (long)5L,\
  \ (long)6L})), (2L)) == (0L));\n    Debug.Assert(AddElements((new List<long>(new\
  \ long[]{(long)11L, (long)21L, (long)3L, (long)90L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L})), (4L)) == (125L));\n    Debug.Assert(AddElements((new List<long>(new\
  \ long[]{(long)111L, (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L})), (4L)) == (24L));\n    Debug.Assert(AddElements((new List<long>(new\
  \ long[]{(long)1L})), (1L)) == (1L));\n    }\n\n}\n"
completions: ["        long count = 0;\n        long sum = 0;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (count == k) {\n                break;\n\
    \            }\n            var number = arr[i];\n            if (number >= 10\
    \ && number <= 99) {\n                sum += number;\n                count++;\n\
    \            }\n        }\n        return sum;", "        // TODO: return the\
    \ sum of the elements with at most two digits from the first k elements of arr\n\
    \        long sum = 0;\n        for (int i = 0; i < k; i++) {\n            if\
    \ (arr[i] < 100) {\n                sum += arr[i];\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        int count = 0;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (count == k) {\n    \
    \            break;\n            }\n            long num = arr[i];\n         \
    \   if (num < 100) {\n                sum += num;\n                count++;\n\
    \            }\n        }\n        return sum;", "        // Your code goes here\n\
    \        return 0;", "        int sum = 0;\n        for (int i = 0; i < k; i++)\
    \ {\n            if (arr[i] < 10) {\n                sum += arr[i];\n        \
    \    } else if (arr[i] < 100) {\n                sum += arr[i];\n            }\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (int i =\
    \ 0; i < k; i++) {\n            if (arr[i] < 100) {\n                sum += arr[i];\n\
    \            }\n        }\n        return sum;", "        // Do the thing.\n \
    \       return arr.GetRange(0, (int)k).Where(x => x <= 99).Sum();", "        long\
    \ sum = 0;\n        for (int i = 0; i < k; i++) {\n            long num = arr[i];\n\
    \            if (num < 100) {\n                sum += num;\n            }\n  \
    \      }\n        return sum;", "        // All elements with at most two digits.\n\
    \        // 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, ..., 98, 99, 100\n        // sum\
    \ of elements in range [a, b] is n(n+1)/2 where n = b - a + 1\n        // so sum\
    \ of first k elements is n(n+1)/2 where n = k\n        // n(n+1)/2 = n^2/2 + n/2\
    \ = n^2/2 + n^2/4 = n^2*3/4\n        return (long)Math.Pow(k, 2) * 3 / 4;", " \
    \       // Sum up the numbers that meet the criteria.\n        long result = 0;\n\
    \        for (int i = 0; i < k; i++) {\n            if (arr[i] < 100) {\n    \
    \            result += arr[i];\n            }\n        }\n        return result;",
  "        var s = 0L;\n        foreach (var e in arr.Take((int)k)) {\n          \
    \  if (e < 100) s += e;\n        }\n        return s;", "        // 1. If arr\
    \ = [], return 0\n        // 2. if k = 0, return 0\n        // 3. if k > arr.Length,\
    \ k = arr.Length\n        // 4. Create a variable sum initialized to 0\n     \
    \   // 5. Create a variable count initialized to 0\n        // 6. Create a variable\
    \ i initialized to 0\n        // 7. While i < arr.Length\n        // 8.     If\
    \ arr[i] < 100,\n        // 9.         Add arr[i] to sum\n        // 10.     \
    \   Increment count\n        // 11.        If count == k,\n        // 12.    \
    \        Break\n        // 13.    Increment i\n        // 14. Return sum\n   \
    \     if (arr.Count == 0) return 0;\n        if (k == 0) return 0;\n        if\
    \ (k > arr.Count) k = arr.Count;\n        long sum = 0;\n        long count =\
    \ 0;\n        int i = 0;\n        while (i < arr.Count) {\n            if (arr[i]\
    \ < 100) {\n                sum += arr[i];\n                count++;\n       \
    \         if (count == k) break;\n            }\n            i++;\n        }\n\
    \        return sum;", '        throw new NotImplementedException();', "     \
    \   // TODO: implement your solution here\n        var sum = 0L;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (i == k) {\n             \
    \   break;\n            }\n            if (arr[i] < 100) {\n                sum\
    \ += arr[i];\n            }\n        }\n        return sum;", "        // implement\
    \ me\n        long sum = 0;\n        for (int i = 0; i < k; i++) {\n         \
    \   string s = arr[i].ToString();\n            if (s.Length <= 2) {\n        \
    \        sum += arr[i];\n            }\n        }\n        return sum;", "   \
    \     long sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum +=\
    \ (arr[i] <= 99) ? arr[i] : 0;\n        }\n        return sum;", "        long\
    \ sum = 0;\n        // Compute sum of first k elements with at most two digits\n\
    \        for (int i = 0; i < k; i++) {\n            // Add current element if\
    \ it has at most two digits\n            if (arr[i] < 100) {\n               \
    \ sum += arr[i];\n            }\n        }\n        return sum;", "        long\
    \ result = 0;\n        for (long i = 0; i < k; i++) {\n            if (arr[(int)i]\
    \ < 100) {\n                result += arr[(int)i];\n            }\n        }\n\
    \        return result;", "        long result = 0;\n        for (int i = 0; i\
    \ < k; i++) {\n            if (arr[i] < 100) {\n                result += arr[i];\n\
    \            }\n        }\n        return result;", "        // Your code goes\
    \ here.\n        return 0;"]
stop_tokens:
- "\n    }\n"
