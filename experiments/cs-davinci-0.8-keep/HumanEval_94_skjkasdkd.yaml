name: HumanEval_94_skjkasdkd
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // You need to find the\
  \ largest prime value and return the sum of its digits.\n    // Examples:\n    //\
  \ For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should\
  \ be 10\n    // For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should\
  \ be 25\n    // For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the\
  \ output should be 13\n    // For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n    // For lst = [0,81,12,3,1,21] the output should be 3\n\
  \    // For lst = [0,8,1,2,1,7] the output should be 7\n    public static long Skjkasdkd(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L,\
  \ (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L,\
  \ (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L})))\
  \ == (10L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L,\
  \ (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L,\
  \ (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L})))\
  \ == (25L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L,\
  \ (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L})))\
  \ == (13L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L,\
  \ (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L,\
  \ (long)83L, (long)0L, (long)5L, (long)6L}))) == (11L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L})))\
  \ == (3L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L,\
  \ (long)1L, (long)2L, (long)1L, (long)7L}))) == (7L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)8191L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)8191L, (long)123456L, (long)127L, (long)7L}))) ==\
  \ (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)127L, (long)97L,\
  \ (long)8192L}))) == (10L));\n    }\n\n}\n"
completions: ["        foreach (var item in lst) {\n            if (PrimeCheck(item))\
    \ {\n                //Debug.WriteLine(item);\n                return DigitSum(item);\n\
    \            }\n        }\n        return 0;", "        lst.Sort();\n        int\
    \ n = 0;\n        long res = 0;\n        if (lst.Count % 2 == 0) {\n         \
    \   n = lst.Count / 2;\n            res = lst[n] * lst[n - 1];\n        } else\
    \ {\n            n = lst.Count / 2;\n            res = lst[n] * lst[n - 1] * lst[n\
    \ + 1];\n        }\n        return res;", "        lst.Sort();\n        lst.Reverse();\n\
    \        int cnt = lst.Count;\n        for (int i = 0; i < cnt; i++) {\n     \
    \       if (lst[i] == 0) continue;\n            if (IsPrime(lst[i])) {\n     \
    \           return SumOfDigits(lst[i]);\n            }\n        }\n        return\
    \ -1;", '        return 0;', "        List<long> primes = new List<long>();\n\
    \        long[] strToNumArr = new long[lst.Count];\n        lst.CopyTo(strToNumArr);\n\
    \        long maxPrime = strToNumArr.Max();\n        long primeSum = 0;\n    \
    \    for (long i = 2; i <= maxPrime; i++) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < i; j++) {\n                if (i % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                primes.Add(i);\n\
    \            }\n        }\n        long max = primes.Max();\n        List<long>\
    \ digitList = new List<long>();\n        for (long i = 0; i < max.ToString().Length;\
    \ i++) {\n            digitList.Add(max.ToString()[(int)i].ToString().ToCharArray()[0]\
    \ - '0');\n        }\n        primeSum = digitList.Sum();\n        return primeSum;",
  "        // your code here\n        long LargestPrime = 0;\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            if (lst[i] > LargestPrime) {\n       \
    \         if (IsPrime(lst[i])) {\n                    LargestPrime = lst[i];\n\
    \                }\n            }\n        }\n        return SumofDigits(LargestPrime);",
  "        // 1. Find the largest prime value.\n        // 2. Sum the digits of the\
    \ largest prime value.\n        // 3. Return the sum of the digits of the largest\
    \ prime value.\n        long max = 0;\n        foreach (long n in lst) {\n   \
    \         if (IsPrime(n)) {\n                if (n > max) {\n                \
    \    max = n;\n                }\n            }\n        }\n        return DigitSum(max);",
  '        return lst.Select(x => x.ToString().ToCharArray().Select(y => int.Parse(y.ToString())).Sum()).Max();',
  "        BigInteger big = BigInteger.Parse(lst.Sum().ToString());\n        while\
    \ (!big.IsProbablePrime(200)) {\n            big = big.Add(new BigInteger(1));\n\
    \        }\n        return big.ToString().Sum(x => x - '0');", '        return
    lst.Where(x => IsPrime(x)).Sum(x => Math.Abs(x)).ToString().ToCharArray().Select(x
    => long.Parse(x.ToString())).Sum();', "        long result = 0;\n        long\
    \ prime = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (IsPrime(lst[i]))\
    \ {\n                if (lst[i] > prime) {\n                    prime = lst[i];\n\
    \                }\n            }\n        }\n        for (int i = 0; i < prime.ToString().Length;\
    \ i++) {\n            result += int.Parse(prime.ToString()[i].ToString());\n \
    \       }\n        return result;", "        // Write your code here.\n      \
    \  var p = Prime.FirstPrime(lst.Max()).Reverse().First(i => lst.Contains(i));\n\
    \        return p.SumOfDigits();", "        BigInteger largestPrime = 0;\n   \
    \     foreach (var i in lst) {\n            if (IsPrime(i)) {\n              \
    \  if (i > largestPrime) {\n                    largestPrime = i;\n          \
    \      }\n            }\n        }\n        return largestPrime.ToString().Sum(d\
    \ => (int)Char.GetNumericValue(d));", "        BigInteger max = 0;\n        foreach\
    \ (BigInteger i in lst) {\n            if (IsPrime(i)) {\n                if (i\
    \ > max) {\n                    max = i;\n                }\n            }\n \
    \       }\n        return DigitSum(max);", "        // YOUR CODE GOES HERE\n \
    \       return 0;", "        long ret = 0;\n        foreach (long i in lst) {\n\
    \            if (IsPrime(i)) {\n                ret = ret + SumOfDigits(i);\n\
    \            }\n        }\n        return ret;", "        // good luck :)\n  \
    \      long result = 0;\n        long[] primeNumbers = { 2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\
    \ 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\
    \ 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673,\
    \ 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787,\
    \ 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\
    \ 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997 };\n  \
    \      for (int i = 0; i < lst.Count; i++) {\n            long number = lst[i];\n\
    \            bool flag = false;\n            foreach (long prime in primeNumbers)\
    \ {\n                if (number == prime) {\n                    flag = true;\n\
    \                    break;\n                }\n            }\n            if",
  "        BigInteger largestPrime = 0;\n        foreach (long value in lst) {\n \
    \           if (IsPrime(value)) {\n                if (value > largestPrime) {\n\
    \                    largestPrime = value;\n                }\n            }\n\
    \        }\n        char[] val = largestPrime.ToString().ToCharArray();\n    \
    \    return val.Sum(c => c - '0');", "        long i;\n        long max = -1;\n\
    \        foreach (long j in lst) {\n            if (j > max) {\n             \
    \   i = j;\n                while (i % 2 == 0) {\n                    i /= 2;\n\
    \                }\n                bool isPrime = true;\n                for\
    \ (long k = 3; k <= Math.Sqrt(i); k += 2) {\n                    if (i % k ==\
    \ 0) {\n                        isPrime = false;\n                        break;\n\
    \                    }\n                }\n                if (isPrime)\n    \
    \                max = j;\n            }\n        }\n        if (max < 0)\n  \
    \          return 0;\n        long sum = 0;\n        while (max > 0) {\n     \
    \       sum += max % 10;\n            max /= 10;\n        }\n        return sum;",
  "        // Initialize\n        long N = FindNthPrime(100000);\n        long primes\
    \ = 0;\n        long sum = 0;\n        // Create a list of numbers from 0 to N\n\
    \        List<long> numbers = new List<long>();\n        for (long i = 0; i <\
    \ N; i++) {\n            numbers.Add(i);\n        }\n        // Remove 0 and 1\n\
    \        numbers[0] = 0;\n        numbers[1] = 0;\n        // Find primes\n  \
    \      for (long i = 2; i < N; i++) {\n            if (numbers[(int)i] != 0) {\n\
    \                for (long j = i * i; j < N; j += i) {\n                    numbers[(int)j]\
    \ = 0;\n                }\n            }\n        }\n        // Get sum of primes\n\
    \        foreach (long i in numbers) {\n            if (i != 0) {\n          \
    \      primes += i;\n            }\n        }\n        // Get sum of digits\n\
    \        long p = primes;\n        while (p > 0) {\n            sum += p % 10;\n\
    \            p /= 10;\n        }\n        return sum;"]
stop_tokens:
- "\n    }\n"
